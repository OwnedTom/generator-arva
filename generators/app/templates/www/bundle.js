!function(e){function t(e){Object.defineProperty(this,e,{enumerable:!0,get:function(){return this[m][e]}})}function r(e){var t;if(e&&e.__esModule){t={};for(var r in e)Object.hasOwnProperty.call(e,r)&&(t[r]=e[r]);t.__useDefault&&delete t.__useDefault,t.__esModule=!0}else{if("[object Module]"===Object.prototype.toString.call(e)||"undefined"!=typeof System&&System.isModule&&System.isModule(e))return e;t={default:e,__useDefault:!0}}return new o(t)}function o(e){Object.defineProperty(this,m,{value:e}),Object.keys(e).forEach(t,this)}function n(e){return"@node/"===e.substr(0,6)?c(e,r(v(e.substr(6))),{}):p[e]}function u(e){var t=n(e);if(!t)throw new Error('Module "'+e+'" expected, but not contained in build.');if(t.module)return t.module;var r=t.linkRecord;return d(t,r),a(t,r,[]),t.module}function d(e,t){if(!t.depLoads){t.declare&&i(e,t),t.depLoads=[];for(var r=0;r<t.deps.length;r++){var o=n(t.deps[r]);t.depLoads.push(o),o.linkRecord&&d(o,o.linkRecord);var u=t.setters&&t.setters[r];u&&(u(o.module||o.linkRecord.moduleObj),o.importerSetters.push(u))}return e}}function i(t,r){var o=r.moduleObj,n=t.importerSetters,u=!1,d=r.declare.call(e,function(e,t){if(!u){if("object"==typeof e)for(var r in e)"__useDefault"!==r&&(o[r]=e[r]);else o[e]=t;u=!0;for(var d=0;d<n.length;d++)n[d](o);return u=!1,t}},{id:t.key});"function"!=typeof d?(r.setters=d.setters,r.execute=d.execute):(r.setters=[],r.execute=d)}function l(e,t,r){return p[e]={key:e,module:void 0,importerSetters:[],linkRecord:{deps:t,depLoads:void 0,declare:r,setters:void 0,execute:void 0,moduleObj:{}}}}function f(e,t,r,o){return p[e]={key:e,module:void 0,importerSetters:[],linkRecord:{deps:t,depLoads:void 0,declare:void 0,execute:o,executingRequire:r,moduleObj:{default:{},__useDefault:!0},setters:void 0}}}function s(e,t,r){return function(o){for(var n=0;n<e.length;n++)if(e[n]===o){var u,d=t[n],i=d.linkRecord;return u=i?-1===r.indexOf(d)?a(d,i,r):i.moduleObj:d.module,u.__useDefault?u.default:u}}}function a(t,r,n){if(n.push(t),t.module)return t.module;var u;if(r.setters){for(var d=0;d<r.deps.length;d++){var i=r.depLoads[d],l=i.linkRecord;l&&-1===n.indexOf(i)&&(u=a(i,l,l.setters?n:[]))}r.execute.call(y)}else{var f={id:t.key},c=r.moduleObj;Object.defineProperty(f,"exports",{configurable:!0,set:function(e){c.default=e},get:function(){return c.default}});var p=s(r.deps,r.depLoads,n);if(!r.executingRequire)for(var d=0;d<r.deps.length;d++)p(r.deps[d]);var m=r.execute.call(e,p,c.default,f);if(void 0!==m?c.default=m:f.exports!==c.default&&(c.default=f.exports),c.default&&c.default.__esModule)for(var v in c.default)Object.hasOwnProperty.call(c.default,v)&&"default"!==v&&(c[v]=c.default[v])}var f=t.module=new o(r.moduleObj);if(!r.setters)for(var d=0;d<t.importerSetters.length;d++)t.importerSetters[d](f);return f}function c(e,t){return p[e]={key:e,module:t,importerSetters:[],linkRecord:void 0}}var p={},m="undefined"!=typeof Symbol?Symbol():"@@baseObject";o.prototype=Object.create(null),"undefined"!=typeof Symbol&&Symbol.toStringTag&&(o.prototype[Symbol.toStringTag]="Module");var v="undefined"!=typeof System&&System._nodeRequire||"undefined"!=typeof require&&"undefined"!=typeof require.resolve&&"undefined"!=typeof process&&process.platform&&require,y={};return Object.freeze&&Object.freeze(y),function(e,t,n,d){return function(i){i(function(i){var s={_nodeRequire:v,register:l,registerDynamic:f,registry:{get:function(e){return p[e].module},set:c},newModule:function(e){return new o(e)}};c("@empty",new o({}));for(var a=0;a<t.length;a++)c(t[a],r(arguments[a],{}));d(s);var m=u(e[0]);if(e.length>1)for(var a=1;a<e.length;a++)u(e[a]);return n?m.default:(m instanceof o&&Object.defineProperty(m,"__esModule",{value:!0}),m)})}}}("undefined"!=typeof self?self:global)

(["a"], [], false, function($__System) {
var require = this.require, exports = this.exports, module = this.module;
!function(e){function r(e,r){for(var n=e.split(".");n.length;)r=r[n.shift()];return r}function n(n){if("string"==typeof n)return r(n,e);if(!(n instanceof Array))throw new Error("Global exports must be a string or array.");for(var t={},o=0;o<n.length;o++)t[n[o].split(".").pop()]=r(n[o],e);return t}function t(r){if(-1===a.indexOf(r)){try{var n=e[r]}catch(e){a.push(r)}this(r,n)}}var o,i=$__System,a=["_g","sessionStorage","localStorage","clipboardData","frames","frameElement","external","mozAnimationStartTime","webkitStorageInfo","webkitIndexedDB","mozInnerScreenY","mozInnerScreenX"];i.registry.set("@@global-helpers",i.newModule({prepareGlobal:function(r,i,a){var f=e.define;e.define=void 0;var s;if(a){s={};for(var l in a)s[l]=e[l],e[l]=a[l]}return i||(o={},Object.keys(e).forEach(t,function(e,r){o[e]=r})),function(){var r,a=i?n(i):{},l=!!i;if(i||Object.keys(e).forEach(t,function(e,n){o[e]!==n&&void 0!==n&&(i||(a[e]=n,void 0!==r?l||r===n||(l=!0):r=n))}),a=l?a:r,s)for(var c in s)e[c]=s[c];return e.define=f,a}}}))}("undefined"!=typeof self?self:global);
$__System.registerDynamic('b', ['c', 'd', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var getKeys = $__require('c'),
      toIObject = $__require('d');
  module.exports = function (object, el) {
    var O = toIObject(object),
        keys = getKeys(O),
        length = keys.length,
        index = 0,
        key;
    while (length > index) if (O[key = keys[index++]] === el) return key;
  };
});
$__System.registerDynamic('f', ['c', '10', '11', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // all enumerable object keys, includes symbols
  var getKeys = $__require('c'),
      gOPS = $__require('10'),
      pIE = $__require('11');
  module.exports = function (it) {
    var result = getKeys(it),
        getSymbols = gOPS.f;
    if (getSymbols) {
      var symbols = getSymbols(it),
          isEnum = pIE.f,
          i = 0,
          key;
      while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
    }return result;
  };
});
$__System.registerDynamic('12', ['13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d', '1e', '1f', 'b', 'f', '20', '21', 'd', '22', '23', '24', '25', '26', '27', 'c', '28', '11', '10', '29', '2a', 'e'], true, function ($__require, exports, module) {
  'use strict';
  // ECMAScript 6 symbols shim

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var global = $__require('13'),
      has = $__require('14'),
      DESCRIPTORS = $__require('15'),
      $export = $__require('16'),
      redefine = $__require('17'),
      META = $__require('18').KEY,
      $fails = $__require('19'),
      shared = $__require('1a'),
      setToStringTag = $__require('1b'),
      uid = $__require('1c'),
      wks = $__require('1d'),
      wksExt = $__require('1e'),
      wksDefine = $__require('1f'),
      keyOf = $__require('b'),
      enumKeys = $__require('f'),
      isArray = $__require('20'),
      anObject = $__require('21'),
      toIObject = $__require('d'),
      toPrimitive = $__require('22'),
      createDesc = $__require('23'),
      _create = $__require('24'),
      gOPNExt = $__require('25'),
      $GOPD = $__require('26'),
      $DP = $__require('27'),
      $keys = $__require('c'),
      gOPD = $GOPD.f,
      dP = $DP.f,
      gOPN = gOPNExt.f,
      $Symbol = global.Symbol,
      $JSON = global.JSON,
      _stringify = $JSON && $JSON.stringify,
      PROTOTYPE = 'prototype',
      HIDDEN = wks('_hidden'),
      TO_PRIMITIVE = wks('toPrimitive'),
      isEnum = {}.propertyIsEnumerable,
      SymbolRegistry = shared('symbol-registry'),
      AllSymbols = shared('symbols'),
      OPSymbols = shared('op-symbols'),
      ObjectProto = Object[PROTOTYPE],
      USE_NATIVE = typeof $Symbol == 'function',
      QObject = global.QObject;
  // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
  var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

  // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
  var setSymbolDesc = DESCRIPTORS && $fails(function () {
    return _create(dP({}, 'a', {
      get: function () {
        return dP(this, 'a', { value: 7 }).a;
      }
    })).a != 7;
  }) ? function (it, key, D) {
    var protoDesc = gOPD(ObjectProto, key);
    if (protoDesc) delete ObjectProto[key];
    dP(it, key, D);
    if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
  } : dP;

  var wrap = function (tag) {
    var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
    sym._k = tag;
    return sym;
  };

  var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
    return typeof it == 'symbol';
  } : function (it) {
    return it instanceof $Symbol;
  };

  var $defineProperty = function defineProperty(it, key, D) {
    if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
    anObject(it);
    key = toPrimitive(key, true);
    anObject(D);
    if (has(AllSymbols, key)) {
      if (!D.enumerable) {
        if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
        it[HIDDEN][key] = true;
      } else {
        if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
        D = _create(D, { enumerable: createDesc(0, false) });
      }return setSymbolDesc(it, key, D);
    }return dP(it, key, D);
  };
  var $defineProperties = function defineProperties(it, P) {
    anObject(it);
    var keys = enumKeys(P = toIObject(P)),
        i = 0,
        l = keys.length,
        key;
    while (l > i) $defineProperty(it, key = keys[i++], P[key]);
    return it;
  };
  var $create = function create(it, P) {
    return P === undefined ? _create(it) : $defineProperties(_create(it), P);
  };
  var $propertyIsEnumerable = function propertyIsEnumerable(key) {
    var E = isEnum.call(this, key = toPrimitive(key, true));
    if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
    return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
  };
  var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
    it = toIObject(it);
    key = toPrimitive(key, true);
    if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
    var D = gOPD(it, key);
    if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
    return D;
  };
  var $getOwnPropertyNames = function getOwnPropertyNames(it) {
    var names = gOPN(toIObject(it)),
        result = [],
        i = 0,
        key;
    while (names.length > i) {
      if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
    }return result;
  };
  var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
    var IS_OP = it === ObjectProto,
        names = gOPN(IS_OP ? OPSymbols : toIObject(it)),
        result = [],
        i = 0,
        key;
    while (names.length > i) {
      if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
    }return result;
  };

  // 19.4.1.1 Symbol([description])
  if (!USE_NATIVE) {
    $Symbol = function Symbol() {
      if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
      var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
      var $set = function (value) {
        if (this === ObjectProto) $set.call(OPSymbols, value);
        if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
        setSymbolDesc(this, tag, createDesc(1, value));
      };
      if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
      return wrap(tag);
    };
    redefine($Symbol[PROTOTYPE], 'toString', function toString() {
      return this._k;
    });

    $GOPD.f = $getOwnPropertyDescriptor;
    $DP.f = $defineProperty;
    $__require('28').f = gOPNExt.f = $getOwnPropertyNames;
    $__require('11').f = $propertyIsEnumerable;
    $__require('10').f = $getOwnPropertySymbols;

    if (DESCRIPTORS && !$__require('29')) {
      redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
    }

    wksExt.f = function (name) {
      return wrap(wks(name));
    };
  }

  $export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

  for (var symbols =
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), i = 0; symbols.length > i;) wks(symbols[i++]);

  for (var symbols = $keys(wks.store), i = 0; symbols.length > i;) wksDefine(symbols[i++]);

  $export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
    // 19.4.2.1 Symbol.for(key)
    'for': function (key) {
      return has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
    },
    // 19.4.2.5 Symbol.keyFor(sym)
    keyFor: function keyFor(key) {
      if (isSymbol(key)) return keyOf(SymbolRegistry, key);
      throw TypeError(key + ' is not a symbol!');
    },
    useSetter: function () {
      setter = true;
    },
    useSimple: function () {
      setter = false;
    }
  });

  $export($export.S + $export.F * !USE_NATIVE, 'Object', {
    // 19.1.2.2 Object.create(O [, Properties])
    create: $create,
    // 19.1.2.4 Object.defineProperty(O, P, Attributes)
    defineProperty: $defineProperty,
    // 19.1.2.3 Object.defineProperties(O, Properties)
    defineProperties: $defineProperties,
    // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
    getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
    // 19.1.2.7 Object.getOwnPropertyNames(O)
    getOwnPropertyNames: $getOwnPropertyNames,
    // 19.1.2.8 Object.getOwnPropertySymbols(O)
    getOwnPropertySymbols: $getOwnPropertySymbols
  });

  // 24.3.2 JSON.stringify(value [, replacer [, space]])
  $JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
    var S = $Symbol();
    // MS Edge converts symbol values to JSON as {}
    // WebKit converts symbol values to JSON as null
    // V8 throws on boxed symbols
    return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
  })), 'JSON', {
    stringify: function stringify(it) {
      if (it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
      var args = [it],
          i = 1,
          replacer,
          $replacer;
      while (arguments.length > i) args.push(arguments[i++]);
      replacer = args[1];
      if (typeof replacer == 'function') $replacer = replacer;
      if ($replacer || !isArray(replacer)) replacer = function (key, value) {
        if ($replacer) value = $replacer.call(this, key, value);
        if (!isSymbol(value)) return value;
      };
      args[1] = replacer;
      return _stringify.apply($JSON, args);
    }
  });

  // 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
  $Symbol[PROTOTYPE][TO_PRIMITIVE] || $__require('2a')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
  // 19.4.3.5 Symbol.prototype[@@toStringTag]
  setToStringTag($Symbol, 'Symbol');
  // 20.2.1.9 Math[@@toStringTag]
  setToStringTag(Math, 'Math', true);
  // 24.3.3 JSON[@@toStringTag]
  setToStringTag(global.JSON, 'JSON', true);
});
$__System.registerDynamic('2b', ['16', '24', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16');
  // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
  $export($export.S, 'Object', { create: $__require('24') });
});
$__System.registerDynamic('2c', ['16', '15', '27', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16');
  // 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
  $export($export.S + $export.F * !$__require('15'), 'Object', { defineProperty: $__require('27').f });
});
$__System.registerDynamic('2d', ['16', '15', '2e', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16');
  // 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)
  $export($export.S + $export.F * !$__require('15'), 'Object', { defineProperties: $__require('2e') });
});
$__System.registerDynamic('2f', ['d', '26', '30', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  var toIObject = $__require('d'),
      $getOwnPropertyDescriptor = $__require('26').f;

  $__require('30')('getOwnPropertyDescriptor', function () {
    return function getOwnPropertyDescriptor(it, key) {
      return $getOwnPropertyDescriptor(toIObject(it), key);
    };
  });
});
$__System.registerDynamic('31', ['32', '33', '30', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 19.1.2.9 Object.getPrototypeOf(O)
  var toObject = $__require('32'),
      $getPrototypeOf = $__require('33');

  $__require('30')('getPrototypeOf', function () {
    return function getPrototypeOf(it) {
      return $getPrototypeOf(toObject(it));
    };
  });
});
$__System.registerDynamic('34', ['32', 'c', '30', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 19.1.2.14 Object.keys(O)
  var toObject = $__require('32'),
      $keys = $__require('c');

  $__require('30')('keys', function () {
    return function keys(it) {
      return $keys(toObject(it));
    };
  });
});
$__System.registerDynamic('25', ['d', '28', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
  var toIObject = $__require('d'),
      gOPN = $__require('28').f,
      toString = {}.toString;

  var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];

  var getWindowNames = function (it) {
    try {
      return gOPN(it);
    } catch (e) {
      return windowNames.slice();
    }
  };

  module.exports.f = function getOwnPropertyNames(it) {
    return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
  };
});
$__System.registerDynamic('35', ['30', '25', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  $__require('30')('getOwnPropertyNames', function () {
    return $__require('25').f;
  });
});
$__System.registerDynamic('36', ['37', '18', '30', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 19.1.2.5 Object.freeze(O)
  var isObject = $__require('37'),
      meta = $__require('18').onFreeze;

  $__require('30')('freeze', function ($freeze) {
    return function freeze(it) {
      return $freeze && isObject(it) ? $freeze(meta(it)) : it;
    };
  });
});
$__System.registerDynamic('38', ['37', '18', '30', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 19.1.2.17 Object.seal(O)
  var isObject = $__require('37'),
      meta = $__require('18').onFreeze;

  $__require('30')('seal', function ($seal) {
    return function seal(it) {
      return $seal && isObject(it) ? $seal(meta(it)) : it;
    };
  });
});
$__System.registerDynamic('39', ['37', '18', '30', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 19.1.2.15 Object.preventExtensions(O)
  var isObject = $__require('37'),
      meta = $__require('18').onFreeze;

  $__require('30')('preventExtensions', function ($preventExtensions) {
    return function preventExtensions(it) {
      return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;
    };
  });
});
$__System.registerDynamic('3a', ['37', '30', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 19.1.2.12 Object.isFrozen(O)
  var isObject = $__require('37');

  $__require('30')('isFrozen', function ($isFrozen) {
    return function isFrozen(it) {
      return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;
    };
  });
});
$__System.registerDynamic('3b', ['37', '30', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 19.1.2.13 Object.isSealed(O)
  var isObject = $__require('37');

  $__require('30')('isSealed', function ($isSealed) {
    return function isSealed(it) {
      return isObject(it) ? $isSealed ? $isSealed(it) : false : true;
    };
  });
});
$__System.registerDynamic('30', ['16', '3c', '19', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // most Object methods by ES6 should accept primitives
  var $export = $__require('16'),
      core = $__require('3c'),
      fails = $__require('19');
  module.exports = function (KEY, exec) {
    var fn = (core.Object || {})[KEY] || Object[KEY],
        exp = {};
    exp[KEY] = exec(fn);
    $export($export.S + $export.F * fails(function () {
      fn(1);
    }), 'Object', exp);
  };
});
$__System.registerDynamic('3d', ['37', '30', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 19.1.2.11 Object.isExtensible(O)
  var isObject = $__require('37');

  $__require('30')('isExtensible', function ($isExtensible) {
    return function isExtensible(it) {
      return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;
    };
  });
});
$__System.registerDynamic('3e', ['16', '3f', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 19.1.3.1 Object.assign(target, source)
  var $export = $__require('16');

  $export($export.S + $export.F, 'Object', { assign: $__require('3f') });
});
$__System.registerDynamic('40', ['16', '41', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 19.1.3.10 Object.is(value1, value2)
  var $export = $__require('16');
  $export($export.S, 'Object', { is: $__require('41') });
});
$__System.registerDynamic('42', ['16', '43', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 19.1.3.19 Object.setPrototypeOf(O, proto)
  var $export = $__require('16');
  $export($export.S, 'Object', { setPrototypeOf: $__require('43').set });
});
$__System.registerDynamic('44', ['45', '1d', '17', 'e'], true, function ($__require, exports, module) {
  'use strict';
  // 19.1.3.6 Object.prototype.toString()

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var classof = $__require('45'),
      test = {};
  test[$__require('1d')('toStringTag')] = 'z';
  if (test + '' != '[object z]') {
    $__require('17')(Object.prototype, 'toString', function toString() {
      return '[object ' + classof(this) + ']';
    }, true);
  }
});
$__System.registerDynamic('46', ['16', '47', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)
  var $export = $__require('16');

  $export($export.P, 'Function', { bind: $__require('47') });
});
$__System.registerDynamic('48', ['27', '23', '14', '15', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var dP = $__require('27').f,
      createDesc = $__require('23'),
      has = $__require('14'),
      FProto = Function.prototype,
      nameRE = /^\s*function ([^ (]*)/,
      NAME = 'name';

  var isExtensible = Object.isExtensible || function () {
    return true;
  };

  // 19.2.4.2 name
  NAME in FProto || $__require('15') && dP(FProto, NAME, {
    configurable: true,
    get: function () {
      try {
        var that = this,
            name = ('' + that).match(nameRE)[1];
        has(that, NAME) || !isExtensible(that) || dP(that, NAME, createDesc(5, name));
        return name;
      } catch (e) {
        return '';
      }
    }
  });
});
$__System.registerDynamic('49', ['37', '33', '1d', '27', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var isObject = $__require('37'),
      getPrototypeOf = $__require('33'),
      HAS_INSTANCE = $__require('1d')('hasInstance'),
      FunctionProto = Function.prototype;
  // 19.2.3.6 Function.prototype[@@hasInstance](V)
  if (!(HAS_INSTANCE in FunctionProto)) $__require('27').f(FunctionProto, HAS_INSTANCE, { value: function (O) {
      if (typeof this != 'function' || !isObject(O)) return false;
      if (!isObject(this.prototype)) return O instanceof this;
      // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:
      while (O = getPrototypeOf(O)) if (this.prototype === O) return true;
      return false;
    } });
});
$__System.registerDynamic('4a', ['16', '4b', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      $parseInt = $__require('4b');
  // 18.2.5 parseInt(string, radix)
  $export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });
});
$__System.registerDynamic('4c', ['16', '4d', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      $parseFloat = $__require('4d');
  // 18.2.4 parseFloat(string)
  $export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });
});
$__System.registerDynamic('4e', ['13', '14', '4f', '50', '22', '19', '28', '26', '27', '51', '24', '15', '17', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var global = $__require('13'),
      has = $__require('14'),
      cof = $__require('4f'),
      inheritIfRequired = $__require('50'),
      toPrimitive = $__require('22'),
      fails = $__require('19'),
      gOPN = $__require('28').f,
      gOPD = $__require('26').f,
      dP = $__require('27').f,
      $trim = $__require('51').trim,
      NUMBER = 'Number',
      $Number = global[NUMBER],
      Base = $Number,
      proto = $Number.prototype
  // Opera ~12 has broken Object#toString
  ,
      BROKEN_COF = cof($__require('24')(proto)) == NUMBER,
      TRIM = 'trim' in String.prototype;

  // 7.1.3 ToNumber(argument)
  var toNumber = function (argument) {
    var it = toPrimitive(argument, false);
    if (typeof it == 'string' && it.length > 2) {
      it = TRIM ? it.trim() : $trim(it, 3);
      var first = it.charCodeAt(0),
          third,
          radix,
          maxCode;
      if (first === 43 || first === 45) {
        third = it.charCodeAt(2);
        if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix
      } else if (first === 48) {
        switch (it.charCodeAt(1)) {
          case 66:case 98:
            radix = 2;maxCode = 49;break; // fast equal /^0b[01]+$/i
          case 79:case 111:
            radix = 8;maxCode = 55;break; // fast equal /^0o[0-7]+$/i
          default:
            return +it;
        }
        for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {
          code = digits.charCodeAt(i);
          // parseInt parses a string to a first unavailable symbol
          // but ToNumber should return NaN if a string contains unavailable symbols
          if (code < 48 || code > maxCode) return NaN;
        }return parseInt(digits, radix);
      }
    }return +it;
  };

  if (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {
    $Number = function Number(value) {
      var it = arguments.length < 1 ? 0 : value,
          that = this;
      return that instanceof $Number
      // check on 1..constructor(foo) case
      && (BROKEN_COF ? fails(function () {
        proto.valueOf.call(that);
      }) : cof(that) != NUMBER) ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);
    };
    for (var keys = $__require('15') ? gOPN(Base) : (
    // ES3:
    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +
    // ES6 (in case, if modules with ES6 Number statics required before):
    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' + 'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger').split(','), j = 0, key; keys.length > j; j++) {
      if (has(Base, key = keys[j]) && !has($Number, key)) {
        dP($Number, key, gOPD(Base, key));
      }
    }
    $Number.prototype = proto;
    proto.constructor = $Number;
    $__require('17')(global, NUMBER, $Number);
  }
});
$__System.registerDynamic('52', ['16', '53', '54', '55', '19', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      toInteger = $__require('53'),
      aNumberValue = $__require('54'),
      repeat = $__require('55'),
      $toFixed = 1..toFixed,
      floor = Math.floor,
      data = [0, 0, 0, 0, 0, 0],
      ERROR = 'Number.toFixed: incorrect invocation!',
      ZERO = '0';

  var multiply = function (n, c) {
    var i = -1,
        c2 = c;
    while (++i < 6) {
      c2 += n * data[i];
      data[i] = c2 % 1e7;
      c2 = floor(c2 / 1e7);
    }
  };
  var divide = function (n) {
    var i = 6,
        c = 0;
    while (--i >= 0) {
      c += data[i];
      data[i] = floor(c / n);
      c = c % n * 1e7;
    }
  };
  var numToString = function () {
    var i = 6,
        s = '';
    while (--i >= 0) {
      if (s !== '' || i === 0 || data[i] !== 0) {
        var t = String(data[i]);
        s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;
      }
    }return s;
  };
  var pow = function (x, n, acc) {
    return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);
  };
  var log = function (x) {
    var n = 0,
        x2 = x;
    while (x2 >= 4096) {
      n += 12;
      x2 /= 4096;
    }
    while (x2 >= 2) {
      n += 1;
      x2 /= 2;
    }return n;
  };

  $export($export.P + $export.F * (!!$toFixed && (0.00008.toFixed(3) !== '0.000' || 0.9.toFixed(0) !== '1' || 1.255.toFixed(2) !== '1.25' || 1000000000000000128..toFixed(0) !== '1000000000000000128') || !$__require('19')(function () {
    // V8 ~ Android 4.3-
    $toFixed.call({});
  })), 'Number', {
    toFixed: function toFixed(fractionDigits) {
      var x = aNumberValue(this, ERROR),
          f = toInteger(fractionDigits),
          s = '',
          m = ZERO,
          e,
          z,
          j,
          k;
      if (f < 0 || f > 20) throw RangeError(ERROR);
      if (x != x) return 'NaN';
      if (x <= -1e21 || x >= 1e21) return String(x);
      if (x < 0) {
        s = '-';
        x = -x;
      }
      if (x > 1e-21) {
        e = log(x * pow(2, 69, 1)) - 69;
        z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);
        z *= 0x10000000000000;
        e = 52 - e;
        if (e > 0) {
          multiply(0, z);
          j = f;
          while (j >= 7) {
            multiply(1e7, 0);
            j -= 7;
          }
          multiply(pow(10, j, 1), 0);
          j = e - 1;
          while (j >= 23) {
            divide(1 << 23);
            j -= 23;
          }
          divide(1 << j);
          multiply(1, 1);
          divide(2);
          m = numToString();
        } else {
          multiply(0, z);
          multiply(1 << -e, 0);
          m = numToString() + repeat.call(ZERO, f);
        }
      }
      if (f > 0) {
        k = m.length;
        m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));
      } else {
        m = s + m;
      }return m;
    }
  });
});
$__System.registerDynamic('54', ['4f', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var cof = $__require('4f');
  module.exports = function (it, msg) {
    if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);
    return +it;
  };
});
$__System.registerDynamic('56', ['16', '19', '54', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      $fails = $__require('19'),
      aNumberValue = $__require('54'),
      $toPrecision = 1..toPrecision;

  $export($export.P + $export.F * ($fails(function () {
    // IE7-
    return $toPrecision.call(1, undefined) !== '1';
  }) || !$fails(function () {
    // V8 ~ Android 4.3-
    $toPrecision.call({});
  })), 'Number', {
    toPrecision: function toPrecision(precision) {
      var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');
      return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);
    }
  });
});
$__System.registerDynamic('57', ['16', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 20.1.2.1 Number.EPSILON
  var $export = $__require('16');

  $export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });
});
$__System.registerDynamic('58', ['16', '13', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 20.1.2.2 Number.isFinite(number)
  var $export = $__require('16'),
      _isFinite = $__require('13').isFinite;

  $export($export.S, 'Number', {
    isFinite: function isFinite(it) {
      return typeof it == 'number' && _isFinite(it);
    }
  });
});
$__System.registerDynamic('59', ['16', '5a', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 20.1.2.3 Number.isInteger(number)
  var $export = $__require('16');

  $export($export.S, 'Number', { isInteger: $__require('5a') });
});
$__System.registerDynamic('5b', ['16', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 20.1.2.4 Number.isNaN(number)
  var $export = $__require('16');

  $export($export.S, 'Number', {
    isNaN: function isNaN(number) {
      return number != number;
    }
  });
});
$__System.registerDynamic('5a', ['37', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 20.1.2.3 Number.isInteger(number)
  var isObject = $__require('37'),
      floor = Math.floor;
  module.exports = function isInteger(it) {
    return !isObject(it) && isFinite(it) && floor(it) === it;
  };
});
$__System.registerDynamic('5c', ['16', '5a', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 20.1.2.5 Number.isSafeInteger(number)
  var $export = $__require('16'),
      isInteger = $__require('5a'),
      abs = Math.abs;

  $export($export.S, 'Number', {
    isSafeInteger: function isSafeInteger(number) {
      return isInteger(number) && abs(number) <= 0x1fffffffffffff;
    }
  });
});
$__System.registerDynamic('5d', ['16', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 20.1.2.6 Number.MAX_SAFE_INTEGER
  var $export = $__require('16');

  $export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });
});
$__System.registerDynamic('5e', ['16', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 20.1.2.10 Number.MIN_SAFE_INTEGER
  var $export = $__require('16');

  $export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });
});
$__System.registerDynamic('4d', ['13', '51', '5f', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $parseFloat = $__require('13').parseFloat,
      $trim = $__require('51').trim;

  module.exports = 1 / $parseFloat($__require('5f') + '-0') !== -Infinity ? function parseFloat(str) {
    var string = $trim(String(str), 3),
        result = $parseFloat(string);
    return result === 0 && string.charAt(0) == '-' ? -0 : result;
  } : $parseFloat;
});
$__System.registerDynamic('60', ['16', '4d', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      $parseFloat = $__require('4d');
  // 20.1.2.12 Number.parseFloat(string)
  $export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });
});
$__System.registerDynamic('4b', ['13', '51', '5f', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $parseInt = $__require('13').parseInt,
      $trim = $__require('51').trim,
      ws = $__require('5f'),
      hex = /^[\-+]?0[xX]/;

  module.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {
    var string = $trim(String(str), 3);
    return $parseInt(string, radix >>> 0 || (hex.test(string) ? 16 : 10));
  } : $parseInt;
});
$__System.registerDynamic('61', ['16', '4b', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      $parseInt = $__require('4b');
  // 20.1.2.13 Number.parseInt(string, radix)
  $export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });
});
$__System.registerDynamic('62', ['16', '63', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 20.2.2.3 Math.acosh(x)
  var $export = $__require('16'),
      log1p = $__require('63'),
      sqrt = Math.sqrt,
      $acosh = Math.acosh;

  $export($export.S + $export.F * !($acosh
  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509
  && Math.floor($acosh(Number.MAX_VALUE)) == 710
  // Tor Browser bug: Math.acosh(Infinity) -> NaN 
  && $acosh(Infinity) == Infinity), 'Math', {
    acosh: function acosh(x) {
      return (x = +x) < 1 ? NaN : x > 94906265.62425156 ? Math.log(x) + Math.LN2 : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));
    }
  });
});
$__System.registerDynamic('64', ['16', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 20.2.2.5 Math.asinh(x)
  var $export = $__require('16'),
      $asinh = Math.asinh;

  function asinh(x) {
    return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));
  }

  // Tor Browser bug: Math.asinh(0) -> -0 
  $export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });
});
$__System.registerDynamic('65', ['16', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 20.2.2.7 Math.atanh(x)
  var $export = $__require('16'),
      $atanh = Math.atanh;

  // Tor Browser bug: Math.atanh(-0) -> 0 
  $export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {
    atanh: function atanh(x) {
      return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;
    }
  });
});
$__System.registerDynamic('66', ['16', '67', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 20.2.2.9 Math.cbrt(x)
  var $export = $__require('16'),
      sign = $__require('67');

  $export($export.S, 'Math', {
    cbrt: function cbrt(x) {
      return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);
    }
  });
});
$__System.registerDynamic('68', ['16', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 20.2.2.11 Math.clz32(x)
  var $export = $__require('16');

  $export($export.S, 'Math', {
    clz32: function clz32(x) {
      return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;
    }
  });
});
$__System.registerDynamic('69', ['16', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 20.2.2.12 Math.cosh(x)
  var $export = $__require('16'),
      exp = Math.exp;

  $export($export.S, 'Math', {
    cosh: function cosh(x) {
      return (exp(x = +x) + exp(-x)) / 2;
    }
  });
});
$__System.registerDynamic('6a', ['16', '6b', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 20.2.2.14 Math.expm1(x)
  var $export = $__require('16'),
      $expm1 = $__require('6b');

  $export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });
});
$__System.registerDynamic('6c', ['16', '67', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 20.2.2.16 Math.fround(x)
  var $export = $__require('16'),
      sign = $__require('67'),
      pow = Math.pow,
      EPSILON = pow(2, -52),
      EPSILON32 = pow(2, -23),
      MAX32 = pow(2, 127) * (2 - EPSILON32),
      MIN32 = pow(2, -126);

  var roundTiesToEven = function (n) {
    return n + 1 / EPSILON - 1 / EPSILON;
  };

  $export($export.S, 'Math', {
    fround: function fround(x) {
      var $abs = Math.abs(x),
          $sign = sign(x),
          a,
          result;
      if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;
      a = (1 + EPSILON32 / EPSILON) * $abs;
      result = a - (a - $abs);
      if (result > MAX32 || result != result) return $sign * Infinity;
      return $sign * result;
    }
  });
});
$__System.registerDynamic('6d', ['16', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 20.2.2.17 Math.hypot([value1[, value2[, … ]]])
  var $export = $__require('16'),
      abs = Math.abs;

  $export($export.S, 'Math', {
    hypot: function hypot(value1, value2) {
      // eslint-disable-line no-unused-vars
      var sum = 0,
          i = 0,
          aLen = arguments.length,
          larg = 0,
          arg,
          div;
      while (i < aLen) {
        arg = abs(arguments[i++]);
        if (larg < arg) {
          div = larg / arg;
          sum = sum * div * div + 1;
          larg = arg;
        } else if (arg > 0) {
          div = arg / larg;
          sum += div * div;
        } else sum += arg;
      }
      return larg === Infinity ? Infinity : larg * Math.sqrt(sum);
    }
  });
});
$__System.registerDynamic('6e', ['16', '19', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 20.2.2.18 Math.imul(x, y)
  var $export = $__require('16'),
      $imul = Math.imul;

  // some WebKit versions fails with big numbers, some has wrong arity
  $export($export.S + $export.F * $__require('19')(function () {
    return $imul(0xffffffff, 5) != -5 || $imul.length != 2;
  }), 'Math', {
    imul: function imul(x, y) {
      var UINT16 = 0xffff,
          xn = +x,
          yn = +y,
          xl = UINT16 & xn,
          yl = UINT16 & yn;
      return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);
    }
  });
});
$__System.registerDynamic('6f', ['16', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 20.2.2.21 Math.log10(x)
  var $export = $__require('16');

  $export($export.S, 'Math', {
    log10: function log10(x) {
      return Math.log(x) / Math.LN10;
    }
  });
});
$__System.registerDynamic("63", ["e"], true, function ($__require, exports, module) {
  var process = $__require("e");
  var global = this || self,
      GLOBAL = global;
  // 20.2.2.20 Math.log1p(x)
  module.exports = Math.log1p || function log1p(x) {
    return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);
  };
});
$__System.registerDynamic('70', ['16', '63', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 20.2.2.20 Math.log1p(x)
  var $export = $__require('16');

  $export($export.S, 'Math', { log1p: $__require('63') });
});
$__System.registerDynamic('71', ['16', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 20.2.2.22 Math.log2(x)
  var $export = $__require('16');

  $export($export.S, 'Math', {
    log2: function log2(x) {
      return Math.log(x) / Math.LN2;
    }
  });
});
$__System.registerDynamic("67", ["e"], true, function ($__require, exports, module) {
  var process = $__require("e");
  var global = this || self,
      GLOBAL = global;
  // 20.2.2.28 Math.sign(x)
  module.exports = Math.sign || function sign(x) {
    return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;
  };
});
$__System.registerDynamic('72', ['16', '67', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 20.2.2.28 Math.sign(x)
  var $export = $__require('16');

  $export($export.S, 'Math', { sign: $__require('67') });
});
$__System.registerDynamic('73', ['16', '6b', '19', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 20.2.2.30 Math.sinh(x)
  var $export = $__require('16'),
      expm1 = $__require('6b'),
      exp = Math.exp;

  // V8 near Chromium 38 has a problem with very small numbers
  $export($export.S + $export.F * $__require('19')(function () {
    return !Math.sinh(-2e-17) != -2e-17;
  }), 'Math', {
    sinh: function sinh(x) {
      return Math.abs(x = +x) < 1 ? (expm1(x) - expm1(-x)) / 2 : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);
    }
  });
});
$__System.registerDynamic("6b", ["e"], true, function ($__require, exports, module) {
  var process = $__require("e");
  var global = this || self,
      GLOBAL = global;
  // 20.2.2.14 Math.expm1(x)
  var $expm1 = Math.expm1;
  module.exports = !$expm1
  // Old FF bug
  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168
  // Tor Browser bug
  || $expm1(-2e-17) != -2e-17 ? function expm1(x) {
    return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;
  } : $expm1;
});
$__System.registerDynamic('74', ['16', '6b', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 20.2.2.33 Math.tanh(x)
  var $export = $__require('16'),
      expm1 = $__require('6b'),
      exp = Math.exp;

  $export($export.S, 'Math', {
    tanh: function tanh(x) {
      var a = expm1(x = +x),
          b = expm1(-x);
      return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));
    }
  });
});
$__System.registerDynamic('75', ['16', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 20.2.2.34 Math.trunc(x)
  var $export = $__require('16');

  $export($export.S, 'Math', {
    trunc: function trunc(it) {
      return (it > 0 ? Math.floor : Math.ceil)(it);
    }
  });
});
$__System.registerDynamic('76', ['16', '77', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      toIndex = $__require('77'),
      fromCharCode = String.fromCharCode,
      $fromCodePoint = String.fromCodePoint;

  // length should be 1, old FF problem
  $export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {
    // 21.1.2.2 String.fromCodePoint(...codePoints)
    fromCodePoint: function fromCodePoint(x) {
      // eslint-disable-line no-unused-vars
      var res = [],
          aLen = arguments.length,
          i = 0,
          code;
      while (aLen > i) {
        code = +arguments[i++];
        if (toIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');
        res.push(code < 0x10000 ? fromCharCode(code) : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00));
      }return res.join('');
    }
  });
});
$__System.registerDynamic('78', ['16', 'd', '79', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      toIObject = $__require('d'),
      toLength = $__require('79');

  $export($export.S, 'String', {
    // 21.1.2.4 String.raw(callSite, ...substitutions)
    raw: function raw(callSite) {
      var tpl = toIObject(callSite.raw),
          len = toLength(tpl.length),
          aLen = arguments.length,
          res = [],
          i = 0;
      while (len > i) {
        res.push(String(tpl[i++]));
        if (i < aLen) res.push(String(arguments[i]));
      }return res.join('');
    }
  });
});
$__System.registerDynamic('7a', ['51', 'e'], true, function ($__require, exports, module) {
  'use strict';
  // 21.1.3.25 String.prototype.trim()

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  $__require('51')('trim', function ($trim) {
    return function trim() {
      return $trim(this, 3);
    };
  });
});
$__System.registerDynamic('7b', ['7c', '7d', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $at = $__require('7c')(true);

  // 21.1.3.27 String.prototype[@@iterator]()
  $__require('7d')(String, 'String', function (iterated) {
    this._t = String(iterated); // target
    this._i = 0; // next index
    // 21.1.5.2.1 %StringIteratorPrototype%.next()
  }, function () {
    var O = this._t,
        index = this._i,
        point;
    if (index >= O.length) return { value: undefined, done: true };
    point = $at(O, index);
    this._i += point.length;
    return { value: point, done: false };
  });
});
$__System.registerDynamic('7e', ['16', '7c', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      $at = $__require('7c')(false);
  $export($export.P, 'String', {
    // 21.1.3.3 String.prototype.codePointAt(pos)
    codePointAt: function codePointAt(pos) {
      return $at(this, pos);
    }
  });
});
$__System.registerDynamic('7f', ['16', '79', '80', '81', 'e'], true, function ($__require, exports, module) {
  // 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      toLength = $__require('79'),
      context = $__require('80'),
      ENDS_WITH = 'endsWith',
      $endsWith = ''[ENDS_WITH];

  $export($export.P + $export.F * $__require('81')(ENDS_WITH), 'String', {
    endsWith: function endsWith(searchString /*, endPosition = @length */) {
      var that = context(this, searchString, ENDS_WITH),
          endPosition = arguments.length > 1 ? arguments[1] : undefined,
          len = toLength(that.length),
          end = endPosition === undefined ? len : Math.min(toLength(endPosition), len),
          search = String(searchString);
      return $endsWith ? $endsWith.call(that, search, end) : that.slice(end - search.length, end) === search;
    }
  });
});
$__System.registerDynamic('82', ['16', '80', '81', 'e'], true, function ($__require, exports, module) {
  // 21.1.3.7 String.prototype.includes(searchString, position = 0)
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      context = $__require('80'),
      INCLUDES = 'includes';

  $export($export.P + $export.F * $__require('81')(INCLUDES), 'String', {
    includes: function includes(searchString /*, position = 0 */) {
      return !!~context(this, searchString, INCLUDES).indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);
    }
  });
});
$__System.registerDynamic('83', ['16', '55', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16');

  $export($export.P, 'String', {
    // 21.1.3.13 String.prototype.repeat(count)
    repeat: $__require('55')
  });
});
$__System.registerDynamic('80', ['84', '85', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // helper for String#{startsWith, endsWith, includes}
  var isRegExp = $__require('84'),
      defined = $__require('85');

  module.exports = function (that, searchString, NAME) {
    if (isRegExp(searchString)) throw TypeError('String#' + NAME + " doesn't accept regex!");
    return String(defined(that));
  };
});
$__System.registerDynamic('81', ['1d', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var MATCH = $__require('1d')('match');
  module.exports = function (KEY) {
    var re = /./;
    try {
      '/./'[KEY](re);
    } catch (e) {
      try {
        re[MATCH] = false;
        return !'/./'[KEY](re);
      } catch (f) {/* empty */}
    }return true;
  };
});
$__System.registerDynamic('86', ['16', '79', '80', '81', 'e'], true, function ($__require, exports, module) {
  // 21.1.3.18 String.prototype.startsWith(searchString [, position ])
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      toLength = $__require('79'),
      context = $__require('80'),
      STARTS_WITH = 'startsWith',
      $startsWith = ''[STARTS_WITH];

  $export($export.P + $export.F * $__require('81')(STARTS_WITH), 'String', {
    startsWith: function startsWith(searchString /*, position = 0 */) {
      var that = context(this, searchString, STARTS_WITH),
          index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length)),
          search = String(searchString);
      return $startsWith ? $startsWith.call(that, search, index) : that.slice(index, index + search.length) === search;
    }
  });
});
$__System.registerDynamic('87', ['88', 'e'], true, function ($__require, exports, module) {
  'use strict';
  // B.2.3.2 String.prototype.anchor(name)

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  $__require('88')('anchor', function (createHTML) {
    return function anchor(name) {
      return createHTML(this, 'a', 'name', name);
    };
  });
});
$__System.registerDynamic('89', ['88', 'e'], true, function ($__require, exports, module) {
  'use strict';
  // B.2.3.3 String.prototype.big()

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  $__require('88')('big', function (createHTML) {
    return function big() {
      return createHTML(this, 'big', '', '');
    };
  });
});
$__System.registerDynamic('8a', ['88', 'e'], true, function ($__require, exports, module) {
  'use strict';
  // B.2.3.4 String.prototype.blink()

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  $__require('88')('blink', function (createHTML) {
    return function blink() {
      return createHTML(this, 'blink', '', '');
    };
  });
});
$__System.registerDynamic('8b', ['88', 'e'], true, function ($__require, exports, module) {
  'use strict';
  // B.2.3.5 String.prototype.bold()

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  $__require('88')('bold', function (createHTML) {
    return function bold() {
      return createHTML(this, 'b', '', '');
    };
  });
});
$__System.registerDynamic('8c', ['88', 'e'], true, function ($__require, exports, module) {
  'use strict';
  // B.2.3.6 String.prototype.fixed()

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  $__require('88')('fixed', function (createHTML) {
    return function fixed() {
      return createHTML(this, 'tt', '', '');
    };
  });
});
$__System.registerDynamic('8d', ['88', 'e'], true, function ($__require, exports, module) {
  'use strict';
  // B.2.3.7 String.prototype.fontcolor(color)

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  $__require('88')('fontcolor', function (createHTML) {
    return function fontcolor(color) {
      return createHTML(this, 'font', 'color', color);
    };
  });
});
$__System.registerDynamic('8e', ['88', 'e'], true, function ($__require, exports, module) {
  'use strict';
  // B.2.3.8 String.prototype.fontsize(size)

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  $__require('88')('fontsize', function (createHTML) {
    return function fontsize(size) {
      return createHTML(this, 'font', 'size', size);
    };
  });
});
$__System.registerDynamic('8f', ['88', 'e'], true, function ($__require, exports, module) {
  'use strict';
  // B.2.3.9 String.prototype.italics()

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  $__require('88')('italics', function (createHTML) {
    return function italics() {
      return createHTML(this, 'i', '', '');
    };
  });
});
$__System.registerDynamic('90', ['88', 'e'], true, function ($__require, exports, module) {
  'use strict';
  // B.2.3.10 String.prototype.link(url)

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  $__require('88')('link', function (createHTML) {
    return function link(url) {
      return createHTML(this, 'a', 'href', url);
    };
  });
});
$__System.registerDynamic('91', ['88', 'e'], true, function ($__require, exports, module) {
  'use strict';
  // B.2.3.11 String.prototype.small()

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  $__require('88')('small', function (createHTML) {
    return function small() {
      return createHTML(this, 'small', '', '');
    };
  });
});
$__System.registerDynamic('92', ['88', 'e'], true, function ($__require, exports, module) {
  'use strict';
  // B.2.3.12 String.prototype.strike()

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  $__require('88')('strike', function (createHTML) {
    return function strike() {
      return createHTML(this, 'strike', '', '');
    };
  });
});
$__System.registerDynamic('93', ['88', 'e'], true, function ($__require, exports, module) {
  'use strict';
  // B.2.3.13 String.prototype.sub()

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  $__require('88')('sub', function (createHTML) {
    return function sub() {
      return createHTML(this, 'sub', '', '');
    };
  });
});
$__System.registerDynamic('88', ['16', '19', '85', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      fails = $__require('19'),
      defined = $__require('85'),
      quot = /"/g;
  // B.2.3.2.1 CreateHTML(string, tag, attribute, value)
  var createHTML = function (string, tag, attribute, value) {
    var S = String(defined(string)),
        p1 = '<' + tag;
    if (attribute !== '') p1 += ' ' + attribute + '="' + String(value).replace(quot, '&quot;') + '"';
    return p1 + '>' + S + '</' + tag + '>';
  };
  module.exports = function (NAME, exec) {
    var O = {};
    O[NAME] = exec(createHTML);
    $export($export.P + $export.F * fails(function () {
      var test = ''[NAME]('"');
      return test !== test.toLowerCase() || test.split('"').length > 3;
    }), 'String', O);
  };
});
$__System.registerDynamic('94', ['88', 'e'], true, function ($__require, exports, module) {
  'use strict';
  // B.2.3.14 String.prototype.sup()

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  $__require('88')('sup', function (createHTML) {
    return function sup() {
      return createHTML(this, 'sup', '', '');
    };
  });
});
$__System.registerDynamic('95', ['16', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 20.3.3.1 / 15.9.4.4 Date.now()
  var $export = $__require('16');

  $export($export.S, 'Date', { now: function () {
      return new Date().getTime();
    } });
});
$__System.registerDynamic('96', ['16', '32', '22', '19', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      toObject = $__require('32'),
      toPrimitive = $__require('22');

  $export($export.P + $export.F * $__require('19')(function () {
    return new Date(NaN).toJSON() !== null || Date.prototype.toJSON.call({ toISOString: function () {
        return 1;
      } }) !== 1;
  }), 'Date', {
    toJSON: function toJSON(key) {
      var O = toObject(this),
          pv = toPrimitive(O);
      return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();
    }
  });
});
$__System.registerDynamic('97', ['16', '19', 'e'], true, function ($__require, exports, module) {
  'use strict';
  // 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      fails = $__require('19'),
      getTime = Date.prototype.getTime;

  var lz = function (num) {
    return num > 9 ? num : '0' + num;
  };

  // PhantomJS / old WebKit has a broken implementations
  $export($export.P + $export.F * (fails(function () {
    return new Date(-5e13 - 1).toISOString() != '0385-07-25T07:06:39.999Z';
  }) || !fails(function () {
    new Date(NaN).toISOString();
  })), 'Date', {
    toISOString: function toISOString() {
      if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');
      var d = this,
          y = d.getUTCFullYear(),
          m = d.getUTCMilliseconds(),
          s = y < 0 ? '-' : y > 9999 ? '+' : '';
      return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) + '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) + 'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) + ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';
    }
  });
});
$__System.registerDynamic('98', ['17', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var DateProto = Date.prototype,
      INVALID_DATE = 'Invalid Date',
      TO_STRING = 'toString',
      $toString = DateProto[TO_STRING],
      getTime = DateProto.getTime;
  if (new Date(NaN) + '' != INVALID_DATE) {
    $__require('17')(DateProto, TO_STRING, function toString() {
      var value = getTime.call(this);
      return value === value ? $toString.call(this) : INVALID_DATE;
    });
  }
});
$__System.registerDynamic('99', ['21', '22', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var anObject = $__require('21'),
      toPrimitive = $__require('22'),
      NUMBER = 'number';

  module.exports = function (hint) {
    if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');
    return toPrimitive(anObject(this), hint != NUMBER);
  };
});
$__System.registerDynamic('9a', ['1d', '2a', '99', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var TO_PRIMITIVE = $__require('1d')('toPrimitive'),
      proto = Date.prototype;

  if (!(TO_PRIMITIVE in proto)) $__require('2a')(proto, TO_PRIMITIVE, $__require('99'));
});
$__System.registerDynamic('9b', ['16', '20', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 22.1.2.2 / 15.4.3.2 Array.isArray(arg)
  var $export = $__require('16');

  $export($export.S, 'Array', { isArray: $__require('20') });
});
$__System.registerDynamic('9c', ['9d', '16', '32', '9e', '9f', '79', 'a0', 'a1', 'a2', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var ctx = $__require('9d'),
      $export = $__require('16'),
      toObject = $__require('32'),
      call = $__require('9e'),
      isArrayIter = $__require('9f'),
      toLength = $__require('79'),
      createProperty = $__require('a0'),
      getIterFn = $__require('a1');

  $export($export.S + $export.F * !$__require('a2')(function (iter) {
    Array.from(iter);
  }), 'Array', {
    // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
    from: function from(arrayLike /*, mapfn = undefined, thisArg = undefined*/) {
      var O = toObject(arrayLike),
          C = typeof this == 'function' ? this : Array,
          aLen = arguments.length,
          mapfn = aLen > 1 ? arguments[1] : undefined,
          mapping = mapfn !== undefined,
          index = 0,
          iterFn = getIterFn(O),
          length,
          result,
          step,
          iterator;
      if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
      // if object isn't iterable or it's array with default iterator - use simple case
      if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {
        for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
          createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
        }
      } else {
        length = toLength(O.length);
        for (result = new C(length); length > index; index++) {
          createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
        }
      }
      result.length = index;
      return result;
    }
  });
});
$__System.registerDynamic('a3', ['16', 'a0', '19', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      createProperty = $__require('a0');

  // WebKit Array.of isn't generic
  $export($export.S + $export.F * $__require('19')(function () {
    function F() {}
    return !(Array.of.call(F) instanceof F);
  }), 'Array', {
    // 22.1.2.3 Array.of( ...items)
    of: function of() /* ...args */{
      var index = 0,
          aLen = arguments.length,
          result = new (typeof this == 'function' ? this : Array)(aLen);
      while (aLen > index) createProperty(result, index, arguments[index++]);
      result.length = aLen;
      return result;
    }
  });
});
$__System.registerDynamic('a4', ['16', 'd', 'a5', 'a6', 'e'], true, function ($__require, exports, module) {
  'use strict';
  // 22.1.3.13 Array.prototype.join(separator)

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      toIObject = $__require('d'),
      arrayJoin = [].join;

  // fallback for not array-like strings
  $export($export.P + $export.F * ($__require('a5') != Object || !$__require('a6')(arrayJoin)), 'Array', {
    join: function join(separator) {
      return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);
    }
  });
});
$__System.registerDynamic('a7', ['16', 'a8', '4f', '77', '79', '19', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      html = $__require('a8'),
      cof = $__require('4f'),
      toIndex = $__require('77'),
      toLength = $__require('79'),
      arraySlice = [].slice;

  // fallback for not array-like ES3 strings and DOM objects
  $export($export.P + $export.F * $__require('19')(function () {
    if (html) arraySlice.call(html);
  }), 'Array', {
    slice: function slice(begin, end) {
      var len = toLength(this.length),
          klass = cof(this);
      end = end === undefined ? len : end;
      if (klass == 'Array') return arraySlice.call(this, begin, end);
      var start = toIndex(begin, len),
          upTo = toIndex(end, len),
          size = toLength(upTo - start),
          cloned = Array(size),
          i = 0;
      for (; i < size; i++) cloned[i] = klass == 'String' ? this.charAt(start + i) : this[start + i];
      return cloned;
    }
  });
});
$__System.registerDynamic('a9', ['16', 'aa', '32', '19', 'a6', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      aFunction = $__require('aa'),
      toObject = $__require('32'),
      fails = $__require('19'),
      $sort = [].sort,
      test = [1, 2, 3];

  $export($export.P + $export.F * (fails(function () {
    // IE8-
    test.sort(undefined);
  }) || !fails(function () {
    // V8 bug
    test.sort(null);
    // Old WebKit
  }) || !$__require('a6')($sort)), 'Array', {
    // 22.1.3.25 Array.prototype.sort(comparefn)
    sort: function sort(comparefn) {
      return comparefn === undefined ? $sort.call(toObject(this)) : $sort.call(toObject(this), aFunction(comparefn));
    }
  });
});
$__System.registerDynamic('ab', ['16', 'ac', 'a6', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      $forEach = $__require('ac')(0),
      STRICT = $__require('a6')([].forEach, true);

  $export($export.P + $export.F * !STRICT, 'Array', {
    // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])
    forEach: function forEach(callbackfn /* , thisArg */) {
      return $forEach(this, callbackfn, arguments[1]);
    }
  });
});
$__System.registerDynamic('ad', ['16', 'ac', 'a6', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      $map = $__require('ac')(1);

  $export($export.P + $export.F * !$__require('a6')([].map, true), 'Array', {
    // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])
    map: function map(callbackfn /* , thisArg */) {
      return $map(this, callbackfn, arguments[1]);
    }
  });
});
$__System.registerDynamic('ae', ['16', 'ac', 'a6', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      $filter = $__require('ac')(2);

  $export($export.P + $export.F * !$__require('a6')([].filter, true), 'Array', {
    // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])
    filter: function filter(callbackfn /* , thisArg */) {
      return $filter(this, callbackfn, arguments[1]);
    }
  });
});
$__System.registerDynamic('af', ['16', 'ac', 'a6', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      $some = $__require('ac')(3);

  $export($export.P + $export.F * !$__require('a6')([].some, true), 'Array', {
    // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])
    some: function some(callbackfn /* , thisArg */) {
      return $some(this, callbackfn, arguments[1]);
    }
  });
});
$__System.registerDynamic('b0', ['16', 'ac', 'a6', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      $every = $__require('ac')(4);

  $export($export.P + $export.F * !$__require('a6')([].every, true), 'Array', {
    // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])
    every: function every(callbackfn /* , thisArg */) {
      return $every(this, callbackfn, arguments[1]);
    }
  });
});
$__System.registerDynamic('b1', ['16', 'b2', 'a6', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      $reduce = $__require('b2');

  $export($export.P + $export.F * !$__require('a6')([].reduce, true), 'Array', {
    // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])
    reduce: function reduce(callbackfn /* , initialValue */) {
      return $reduce(this, callbackfn, arguments.length, arguments[1], false);
    }
  });
});
$__System.registerDynamic('b2', ['aa', '32', 'a5', '79', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var aFunction = $__require('aa'),
      toObject = $__require('32'),
      IObject = $__require('a5'),
      toLength = $__require('79');

  module.exports = function (that, callbackfn, aLen, memo, isRight) {
    aFunction(callbackfn);
    var O = toObject(that),
        self = IObject(O),
        length = toLength(O.length),
        index = isRight ? length - 1 : 0,
        i = isRight ? -1 : 1;
    if (aLen < 2) for (;;) {
      if (index in self) {
        memo = self[index];
        index += i;
        break;
      }
      index += i;
      if (isRight ? index < 0 : length <= index) {
        throw TypeError('Reduce of empty array with no initial value');
      }
    }
    for (; isRight ? index >= 0 : length > index; index += i) if (index in self) {
      memo = callbackfn(memo, self[index], index, O);
    }
    return memo;
  };
});
$__System.registerDynamic('b3', ['16', 'b2', 'a6', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      $reduce = $__require('b2');

  $export($export.P + $export.F * !$__require('a6')([].reduceRight, true), 'Array', {
    // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])
    reduceRight: function reduceRight(callbackfn /* , initialValue */) {
      return $reduce(this, callbackfn, arguments.length, arguments[1], true);
    }
  });
});
$__System.registerDynamic('b4', ['16', 'b5', 'a6', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      $indexOf = $__require('b5')(false),
      $native = [].indexOf,
      NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;

  $export($export.P + $export.F * (NEGATIVE_ZERO || !$__require('a6')($native)), 'Array', {
    // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])
    indexOf: function indexOf(searchElement /*, fromIndex = 0 */) {
      return NEGATIVE_ZERO
      // convert -0 to +0
      ? $native.apply(this, arguments) || 0 : $indexOf(this, searchElement, arguments[1]);
    }
  });
});
$__System.registerDynamic('a6', ['19', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var fails = $__require('19');

  module.exports = function (method, arg) {
    return !!method && fails(function () {
      arg ? method.call(null, function () {}, 1) : method.call(null);
    });
  };
});
$__System.registerDynamic('b6', ['16', 'd', '53', '79', 'a6', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      toIObject = $__require('d'),
      toInteger = $__require('53'),
      toLength = $__require('79'),
      $native = [].lastIndexOf,
      NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;

  $export($export.P + $export.F * (NEGATIVE_ZERO || !$__require('a6')($native)), 'Array', {
    // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])
    lastIndexOf: function lastIndexOf(searchElement /*, fromIndex = @[*-1] */) {
      // convert -0 to +0
      if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;
      var O = toIObject(this),
          length = toLength(O.length),
          index = length - 1;
      if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));
      if (index < 0) index = length + index;
      for (; index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;
      return -1;
    }
  });
});
$__System.registerDynamic('b7', ['16', 'b8', 'b9', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
  var $export = $__require('16');

  $export($export.P, 'Array', { copyWithin: $__require('b8') });

  $__require('b9')('copyWithin');
});
$__System.registerDynamic('ba', ['16', 'bb', 'b9', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
  var $export = $__require('16');

  $export($export.P, 'Array', { fill: $__require('bb') });

  $__require('b9')('fill');
});
$__System.registerDynamic('bc', ['16', 'ac', 'b9', 'e'], true, function ($__require, exports, module) {
  'use strict';
  // 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      $find = $__require('ac')(5),
      KEY = 'find',
      forced = true;
  // Shouldn't skip holes
  if (KEY in []) Array(1)[KEY](function () {
    forced = false;
  });
  $export($export.P + $export.F * forced, 'Array', {
    find: function find(callbackfn /*, that = undefined */) {
      return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
  });
  $__require('b9')(KEY);
});
$__System.registerDynamic('bd', ['16', 'ac', 'b9', 'e'], true, function ($__require, exports, module) {
  'use strict';
  // 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      $find = $__require('ac')(6),
      KEY = 'findIndex',
      forced = true;
  // Shouldn't skip holes
  if (KEY in []) Array(1)[KEY](function () {
    forced = false;
  });
  $export($export.P + $export.F * forced, 'Array', {
    findIndex: function findIndex(callbackfn /*, that = undefined */) {
      return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
    }
  });
  $__require('b9')(KEY);
});
$__System.registerDynamic('be', ['bf', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  $__require('bf')('Array');
});
$__System.registerDynamic('c0', ['13', '50', '27', '28', '84', 'c1', '15', '19', '1d', '17', 'bf', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var global = $__require('13'),
      inheritIfRequired = $__require('50'),
      dP = $__require('27').f,
      gOPN = $__require('28').f,
      isRegExp = $__require('84'),
      $flags = $__require('c1'),
      $RegExp = global.RegExp,
      Base = $RegExp,
      proto = $RegExp.prototype,
      re1 = /a/g,
      re2 = /a/g
  // "new" creates a new object, old webkit buggy here
  ,
      CORRECT_NEW = new $RegExp(re1) !== re1;

  if ($__require('15') && (!CORRECT_NEW || $__require('19')(function () {
    re2[$__require('1d')('match')] = false;
    // RegExp constructor can alter flags and IsRegExp works correct with @@match
    return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';
  }))) {
    $RegExp = function RegExp(p, f) {
      var tiRE = this instanceof $RegExp,
          piRE = isRegExp(p),
          fiU = f === undefined;
      return !tiRE && piRE && p.constructor === $RegExp && fiU ? p : inheritIfRequired(CORRECT_NEW ? new Base(piRE && !fiU ? p.source : p, f) : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f), tiRE ? this : proto, $RegExp);
    };
    var proxy = function (key) {
      key in $RegExp || dP($RegExp, key, {
        configurable: true,
        get: function () {
          return Base[key];
        },
        set: function (it) {
          Base[key] = it;
        }
      });
    };
    for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);
    proto.constructor = $RegExp;
    $RegExp.prototype = proto;
    $__require('17')(global, 'RegExp', $RegExp);
  }

  $__require('bf')('RegExp');
});
$__System.registerDynamic('c2', ['c3', '21', 'c1', '15', '17', '19', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  $__require('c3');
  var anObject = $__require('21'),
      $flags = $__require('c1'),
      DESCRIPTORS = $__require('15'),
      TO_STRING = 'toString',
      $toString = /./[TO_STRING];

  var define = function (fn) {
    $__require('17')(RegExp.prototype, TO_STRING, fn, true);
  };

  // 21.2.5.14 RegExp.prototype.toString()
  if ($__require('19')(function () {
    return $toString.call({ source: 'a', flags: 'b' }) != '/a/b';
  })) {
    define(function toString() {
      var R = anObject(this);
      return '/'.concat(R.source, '/', 'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);
    });
    // FF44- RegExp#toString has a wrong name
  } else if ($toString.name != TO_STRING) {
    define(function toString() {
      return $toString.call(this);
    });
  }
});
$__System.registerDynamic('c3', ['15', '27', 'c1', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 21.2.5.3 get RegExp.prototype.flags()
  if ($__require('15') && /./g.flags != 'g') $__require('27').f(RegExp.prototype, 'flags', {
    configurable: true,
    get: $__require('c1')
  });
});
$__System.registerDynamic('c4', ['c5', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // @@match logic
  $__require('c5')('match', 1, function (defined, MATCH, $match) {
    // 21.1.3.11 String.prototype.match(regexp)
    return [function match(regexp) {
      'use strict';

      var O = defined(this),
          fn = regexp == undefined ? undefined : regexp[MATCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));
    }, $match];
  });
});
$__System.registerDynamic('c6', ['c5', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // @@replace logic
  $__require('c5')('replace', 2, function (defined, REPLACE, $replace) {
    // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)
    return [function replace(searchValue, replaceValue) {
      'use strict';

      var O = defined(this),
          fn = searchValue == undefined ? undefined : searchValue[REPLACE];
      return fn !== undefined ? fn.call(searchValue, O, replaceValue) : $replace.call(String(O), searchValue, replaceValue);
    }, $replace];
  });
});
$__System.registerDynamic('c7', ['c5', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // @@search logic
  $__require('c5')('search', 1, function (defined, SEARCH, $search) {
    // 21.1.3.15 String.prototype.search(regexp)
    return [function search(regexp) {
      'use strict';

      var O = defined(this),
          fn = regexp == undefined ? undefined : regexp[SEARCH];
      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));
    }, $search];
  });
});
$__System.registerDynamic('c5', ['2a', '17', '19', '85', '1d', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var hide = $__require('2a'),
      redefine = $__require('17'),
      fails = $__require('19'),
      defined = $__require('85'),
      wks = $__require('1d');

  module.exports = function (KEY, length, exec) {
    var SYMBOL = wks(KEY),
        fns = exec(defined, SYMBOL, ''[KEY]),
        strfn = fns[0],
        rxfn = fns[1];
    if (fails(function () {
      var O = {};
      O[SYMBOL] = function () {
        return 7;
      };
      return ''[KEY](O) != 7;
    })) {
      redefine(String.prototype, KEY, strfn);
      hide(RegExp.prototype, SYMBOL, length == 2
      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)
      // 21.2.5.11 RegExp.prototype[@@split](string, limit)
      ? function (string, arg) {
        return rxfn.call(string, this, arg);
      }
      // 21.2.5.6 RegExp.prototype[@@match](string)
      // 21.2.5.9 RegExp.prototype[@@search](string)
      : function (string) {
        return rxfn.call(string, this);
      });
    }
  };
});
$__System.registerDynamic('c8', ['c5', '84', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // @@split logic
  $__require('c5')('split', 2, function (defined, SPLIT, $split) {
    'use strict';

    var isRegExp = $__require('84'),
        _split = $split,
        $push = [].push,
        $SPLIT = 'split',
        LENGTH = 'length',
        LAST_INDEX = 'lastIndex';
    if ('abbc'[$SPLIT](/(b)*/)[1] == 'c' || 'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 || 'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 || '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 || '.'[$SPLIT](/()()/)[LENGTH] > 1 || ''[$SPLIT](/.?/)[LENGTH]) {
      var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group
      // based on es5-shim implementation, need to rework it
      $split = function (separator, limit) {
        var string = String(this);
        if (separator === undefined && limit === 0) return [];
        // If `separator` is not a regex, use native split
        if (!isRegExp(separator)) return _split.call(string, separator, limit);
        var output = [];
        var flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.unicode ? 'u' : '') + (separator.sticky ? 'y' : '');
        var lastLastIndex = 0;
        var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;
        // Make `global` and avoid `lastIndex` issues by working with a copy
        var separatorCopy = new RegExp(separator.source, flags + 'g');
        var separator2, match, lastIndex, lastLength, i;
        // Doesn't need flags gy, but they don't hurt
        if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\s)', flags);
        while (match = separatorCopy.exec(string)) {
          // `separatorCopy.lastIndex` is not reliable cross-browser
          lastIndex = match.index + match[0][LENGTH];
          if (lastIndex > lastLastIndex) {
            output.push(string.slice(lastLastIndex, match.index));
            // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG
            if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {
              for (i = 1; i < arguments[LENGTH] - 2; i++) if (arguments[i] === undefined) match[i] = undefined;
            });
            if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));
            lastLength = match[0][LENGTH];
            lastLastIndex = lastIndex;
            if (output[LENGTH] >= splitLimit) break;
          }
          if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop
        }
        if (lastLastIndex === string[LENGTH]) {
          if (lastLength || !separatorCopy.test('')) output.push('');
        } else output.push(string.slice(lastLastIndex));
        return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;
      };
      // Chakra, V8
    } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {
      $split = function (separator, limit) {
        return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);
      };
    }
    // 21.1.3.17 String.prototype.split(separator, limit)
    return [function split(separator, limit) {
      var O = defined(this),
          fn = separator == undefined ? undefined : separator[SPLIT];
      return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);
    }, $split];
  });
});
$__System.registerDynamic('c9', ['29', '13', '9d', '45', '16', '37', 'aa', 'ca', 'cb', 'cc', 'cd', 'ce', '1d', 'cf', '1b', 'bf', '3c', 'a2', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var LIBRARY = $__require('29'),
      global = $__require('13'),
      ctx = $__require('9d'),
      classof = $__require('45'),
      $export = $__require('16'),
      isObject = $__require('37'),
      aFunction = $__require('aa'),
      anInstance = $__require('ca'),
      forOf = $__require('cb'),
      speciesConstructor = $__require('cc'),
      task = $__require('cd').set,
      microtask = $__require('ce')(),
      PROMISE = 'Promise',
      TypeError = global.TypeError,
      process = global.process,
      $Promise = global[PROMISE],
      process = global.process,
      isNode = classof(process) == 'process',
      empty = function () {/* empty */},
      Internal,
      GenericPromiseCapability,
      Wrapper;

  var USE_NATIVE = !!function () {
    try {
      // correct subclassing with @@species support
      var promise = $Promise.resolve(1),
          FakePromise = (promise.constructor = {})[$__require('1d')('species')] = function (exec) {
        exec(empty, empty);
      };
      // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
      return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
    } catch (e) {/* empty */}
  }();

  // helpers
  var sameConstructor = function (a, b) {
    // with library wrapper special case
    return a === b || a === $Promise && b === Wrapper;
  };
  var isThenable = function (it) {
    var then;
    return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
  };
  var newPromiseCapability = function (C) {
    return sameConstructor($Promise, C) ? new PromiseCapability(C) : new GenericPromiseCapability(C);
  };
  var PromiseCapability = GenericPromiseCapability = function (C) {
    var resolve, reject;
    this.promise = new C(function ($$resolve, $$reject) {
      if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
      resolve = $$resolve;
      reject = $$reject;
    });
    this.resolve = aFunction(resolve);
    this.reject = aFunction(reject);
  };
  var perform = function (exec) {
    try {
      exec();
    } catch (e) {
      return { error: e };
    }
  };
  var notify = function (promise, isReject) {
    if (promise._n) return;
    promise._n = true;
    var chain = promise._c;
    microtask(function () {
      var value = promise._v,
          ok = promise._s == 1,
          i = 0;
      var run = function (reaction) {
        var handler = ok ? reaction.ok : reaction.fail,
            resolve = reaction.resolve,
            reject = reaction.reject,
            domain = reaction.domain,
            result,
            then;
        try {
          if (handler) {
            if (!ok) {
              if (promise._h == 2) onHandleUnhandled(promise);
              promise._h = 1;
            }
            if (handler === true) result = value;else {
              if (domain) domain.enter();
              result = handler(value);
              if (domain) domain.exit();
            }
            if (result === reaction.promise) {
              reject(TypeError('Promise-chain cycle'));
            } else if (then = isThenable(result)) {
              then.call(result, resolve, reject);
            } else resolve(result);
          } else reject(value);
        } catch (e) {
          reject(e);
        }
      };
      while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
      promise._c = [];
      promise._n = false;
      if (isReject && !promise._h) onUnhandled(promise);
    });
  };
  var onUnhandled = function (promise) {
    task.call(global, function () {
      var value = promise._v,
          abrupt,
          handler,
          console;
      if (isUnhandled(promise)) {
        abrupt = perform(function () {
          if (isNode) {
            process.emit('unhandledRejection', value, promise);
          } else if (handler = global.onunhandledrejection) {
            handler({ promise: promise, reason: value });
          } else if ((console = global.console) && console.error) {
            console.error('Unhandled promise rejection', value);
          }
        });
        // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
        promise._h = isNode || isUnhandled(promise) ? 2 : 1;
      }promise._a = undefined;
      if (abrupt) throw abrupt.error;
    });
  };
  var isUnhandled = function (promise) {
    if (promise._h == 1) return false;
    var chain = promise._a || promise._c,
        i = 0,
        reaction;
    while (chain.length > i) {
      reaction = chain[i++];
      if (reaction.fail || !isUnhandled(reaction.promise)) return false;
    }return true;
  };
  var onHandleUnhandled = function (promise) {
    task.call(global, function () {
      var handler;
      if (isNode) {
        process.emit('rejectionHandled', promise);
      } else if (handler = global.onrejectionhandled) {
        handler({ promise: promise, reason: promise._v });
      }
    });
  };
  var $reject = function (value) {
    var promise = this;
    if (promise._d) return;
    promise._d = true;
    promise = promise._w || promise; // unwrap
    promise._v = value;
    promise._s = 2;
    if (!promise._a) promise._a = promise._c.slice();
    notify(promise, true);
  };
  var $resolve = function (value) {
    var promise = this,
        then;
    if (promise._d) return;
    promise._d = true;
    promise = promise._w || promise; // unwrap
    try {
      if (promise === value) throw TypeError("Promise can't be resolved itself");
      if (then = isThenable(value)) {
        microtask(function () {
          var wrapper = { _w: promise, _d: false }; // wrap
          try {
            then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
          } catch (e) {
            $reject.call(wrapper, e);
          }
        });
      } else {
        promise._v = value;
        promise._s = 1;
        notify(promise, false);
      }
    } catch (e) {
      $reject.call({ _w: promise, _d: false }, e); // wrap
    }
  };

  // constructor polyfill
  if (!USE_NATIVE) {
    // 25.4.3.1 Promise(executor)
    $Promise = function Promise(executor) {
      anInstance(this, $Promise, PROMISE, '_h');
      aFunction(executor);
      Internal.call(this);
      try {
        executor(ctx($resolve, this, 1), ctx($reject, this, 1));
      } catch (err) {
        $reject.call(this, err);
      }
    };
    Internal = function Promise(executor) {
      this._c = []; // <- awaiting reactions
      this._a = undefined; // <- checked in isUnhandled reactions
      this._s = 0; // <- state
      this._d = false; // <- done
      this._v = undefined; // <- value
      this._h = 0; // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
      this._n = false; // <- notify
    };
    Internal.prototype = $__require('cf')($Promise.prototype, {
      // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
      then: function then(onFulfilled, onRejected) {
        var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
        reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
        reaction.fail = typeof onRejected == 'function' && onRejected;
        reaction.domain = isNode ? process.domain : undefined;
        this._c.push(reaction);
        if (this._a) this._a.push(reaction);
        if (this._s) notify(this, false);
        return reaction.promise;
      },
      // 25.4.5.1 Promise.prototype.catch(onRejected)
      'catch': function (onRejected) {
        return this.then(undefined, onRejected);
      }
    });
    PromiseCapability = function () {
      var promise = new Internal();
      this.promise = promise;
      this.resolve = ctx($resolve, promise, 1);
      this.reject = ctx($reject, promise, 1);
    };
  }

  $export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });
  $__require('1b')($Promise, PROMISE);
  $__require('bf')(PROMISE);
  Wrapper = $__require('3c')[PROMISE];

  // statics
  $export($export.S + $export.F * !USE_NATIVE, PROMISE, {
    // 25.4.4.5 Promise.reject(r)
    reject: function reject(r) {
      var capability = newPromiseCapability(this),
          $$reject = capability.reject;
      $$reject(r);
      return capability.promise;
    }
  });
  $export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
    // 25.4.4.6 Promise.resolve(x)
    resolve: function resolve(x) {
      // instanceof instead of internal slot check because we should fix it without replacement native Promise core
      if (x instanceof $Promise && sameConstructor(x.constructor, this)) return x;
      var capability = newPromiseCapability(this),
          $$resolve = capability.resolve;
      $$resolve(x);
      return capability.promise;
    }
  });
  $export($export.S + $export.F * !(USE_NATIVE && $__require('a2')(function (iter) {
    $Promise.all(iter)['catch'](empty);
  })), PROMISE, {
    // 25.4.4.1 Promise.all(iterable)
    all: function all(iterable) {
      var C = this,
          capability = newPromiseCapability(C),
          resolve = capability.resolve,
          reject = capability.reject;
      var abrupt = perform(function () {
        var values = [],
            index = 0,
            remaining = 1;
        forOf(iterable, false, function (promise) {
          var $index = index++,
              alreadyCalled = false;
          values.push(undefined);
          remaining++;
          C.resolve(promise).then(function (value) {
            if (alreadyCalled) return;
            alreadyCalled = true;
            values[$index] = value;
            --remaining || resolve(values);
          }, reject);
        });
        --remaining || resolve(values);
      });
      if (abrupt) reject(abrupt.error);
      return capability.promise;
    },
    // 25.4.4.4 Promise.race(iterable)
    race: function race(iterable) {
      var C = this,
          capability = newPromiseCapability(C),
          reject = capability.reject;
      var abrupt = perform(function () {
        forOf(iterable, false, function (promise) {
          C.resolve(promise).then(capability.resolve, reject);
        });
      });
      if (abrupt) reject(abrupt.error);
      return capability.promise;
    }
  });
});
$__System.registerDynamic('d0', ['d1', 'd2', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var weak = $__require('d1');

  // 23.4 WeakSet Objects
  $__require('d2')('WeakSet', function (get) {
    return function WeakSet() {
      return get(this, arguments.length > 0 ? arguments[0] : undefined);
    };
  }, {
    // 23.4.3.1 WeakSet.prototype.add(value)
    add: function add(value) {
      return weak.def(this, value, true);
    }
  }, weak, false, true);
});
$__System.registerDynamic('d3', ['16', 'd4', 'd5', '21', '77', '79', '37', '13', 'cc', '19', 'bf', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      $typed = $__require('d4'),
      buffer = $__require('d5'),
      anObject = $__require('21'),
      toIndex = $__require('77'),
      toLength = $__require('79'),
      isObject = $__require('37'),
      ArrayBuffer = $__require('13').ArrayBuffer,
      speciesConstructor = $__require('cc'),
      $ArrayBuffer = buffer.ArrayBuffer,
      $DataView = buffer.DataView,
      $isView = $typed.ABV && ArrayBuffer.isView,
      $slice = $ArrayBuffer.prototype.slice,
      VIEW = $typed.VIEW,
      ARRAY_BUFFER = 'ArrayBuffer';

  $export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });

  $export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {
    // 24.1.3.1 ArrayBuffer.isView(arg)
    isView: function isView(it) {
      return $isView && $isView(it) || isObject(it) && VIEW in it;
    }
  });

  $export($export.P + $export.U + $export.F * $__require('19')(function () {
    return !new $ArrayBuffer(2).slice(1, undefined).byteLength;
  }), ARRAY_BUFFER, {
    // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)
    slice: function slice(start, end) {
      if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix
      var len = anObject(this).byteLength,
          first = toIndex(start, len),
          final = toIndex(end === undefined ? len : end, len),
          result = new (speciesConstructor(this, $ArrayBuffer))(toLength(final - first)),
          viewS = new $DataView(this),
          viewT = new $DataView(result),
          index = 0;
      while (first < final) {
        viewT.setUint8(index++, viewS.getUint8(first++));
      }return result;
    }
  });

  $__require('bf')(ARRAY_BUFFER);
});
$__System.registerDynamic('d6', ['16', 'd4', 'd5', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16');
  $export($export.G + $export.W + $export.F * !$__require('d4').ABV, {
    DataView: $__require('d5').DataView
  });
});
$__System.registerDynamic('d7', ['d8', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  $__require('d8')('Int8', 1, function (init) {
    return function Int8Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });
});
$__System.registerDynamic('d9', ['d8', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  $__require('d8')('Uint8', 1, function (init) {
    return function Uint8Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });
});
$__System.registerDynamic('da', ['d8', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  $__require('d8')('Uint8', 1, function (init) {
    return function Uint8ClampedArray(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  }, true);
});
$__System.registerDynamic('db', ['d8', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  $__require('d8')('Int16', 2, function (init) {
    return function Int16Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });
});
$__System.registerDynamic('dc', ['d8', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  $__require('d8')('Uint16', 2, function (init) {
    return function Uint16Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });
});
$__System.registerDynamic('dd', ['d8', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  $__require('d8')('Int32', 4, function (init) {
    return function Int32Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });
});
$__System.registerDynamic('de', ['d8', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  $__require('d8')('Uint32', 4, function (init) {
    return function Uint32Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });
});
$__System.registerDynamic('df', ['d8', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  $__require('d8')('Float32', 4, function (init) {
    return function Float32Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });
});
$__System.registerDynamic('d4', ['13', '2a', '1c', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var global = $__require('13'),
      hide = $__require('2a'),
      uid = $__require('1c'),
      TYPED = uid('typed_array'),
      VIEW = uid('view'),
      ABV = !!(global.ArrayBuffer && global.DataView),
      CONSTR = ABV,
      i = 0,
      l = 9,
      Typed;

  var TypedArrayConstructors = 'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'.split(',');

  while (i < l) {
    if (Typed = global[TypedArrayConstructors[i++]]) {
      hide(Typed.prototype, TYPED, true);
      hide(Typed.prototype, VIEW, true);
    } else CONSTR = false;
  }

  module.exports = {
    ABV: ABV,
    CONSTR: CONSTR,
    TYPED: TYPED,
    VIEW: VIEW
  };
});
$__System.registerDynamic('d5', ['13', '15', '29', 'd4', '2a', 'cf', '19', 'ca', '53', '79', '28', '27', 'bb', '1b', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var global = $__require('13'),
      DESCRIPTORS = $__require('15'),
      LIBRARY = $__require('29'),
      $typed = $__require('d4'),
      hide = $__require('2a'),
      redefineAll = $__require('cf'),
      fails = $__require('19'),
      anInstance = $__require('ca'),
      toInteger = $__require('53'),
      toLength = $__require('79'),
      gOPN = $__require('28').f,
      dP = $__require('27').f,
      arrayFill = $__require('bb'),
      setToStringTag = $__require('1b'),
      ARRAY_BUFFER = 'ArrayBuffer',
      DATA_VIEW = 'DataView',
      PROTOTYPE = 'prototype',
      WRONG_LENGTH = 'Wrong length!',
      WRONG_INDEX = 'Wrong index!',
      $ArrayBuffer = global[ARRAY_BUFFER],
      $DataView = global[DATA_VIEW],
      Math = global.Math,
      RangeError = global.RangeError,
      Infinity = global.Infinity,
      BaseBuffer = $ArrayBuffer,
      abs = Math.abs,
      pow = Math.pow,
      floor = Math.floor,
      log = Math.log,
      LN2 = Math.LN2,
      BUFFER = 'buffer',
      BYTE_LENGTH = 'byteLength',
      BYTE_OFFSET = 'byteOffset',
      $BUFFER = DESCRIPTORS ? '_b' : BUFFER,
      $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH,
      $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;

  // IEEE754 conversions based on https://github.com/feross/ieee754
  var packIEEE754 = function (value, mLen, nBytes) {
    var buffer = Array(nBytes),
        eLen = nBytes * 8 - mLen - 1,
        eMax = (1 << eLen) - 1,
        eBias = eMax >> 1,
        rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0,
        i = 0,
        s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0,
        e,
        m,
        c;
    value = abs(value);
    if (value != value || value === Infinity) {
      m = value != value ? 1 : 0;
      e = eMax;
    } else {
      e = floor(log(value) / LN2);
      if (value * (c = pow(2, -e)) < 1) {
        e--;
        c *= 2;
      }
      if (e + eBias >= 1) {
        value += rt / c;
      } else {
        value += rt * pow(2, 1 - eBias);
      }
      if (value * c >= 2) {
        e++;
        c /= 2;
      }
      if (e + eBias >= eMax) {
        m = 0;
        e = eMax;
      } else if (e + eBias >= 1) {
        m = (value * c - 1) * pow(2, mLen);
        e = e + eBias;
      } else {
        m = value * pow(2, eBias - 1) * pow(2, mLen);
        e = 0;
      }
    }
    for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);
    buffer[--i] |= s * 128;
    return buffer;
  };
  var unpackIEEE754 = function (buffer, mLen, nBytes) {
    var eLen = nBytes * 8 - mLen - 1,
        eMax = (1 << eLen) - 1,
        eBias = eMax >> 1,
        nBits = eLen - 7,
        i = nBytes - 1,
        s = buffer[i--],
        e = s & 127,
        m;
    s >>= 7;
    for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);
    if (e === 0) {
      e = 1 - eBias;
    } else if (e === eMax) {
      return m ? NaN : s ? -Infinity : Infinity;
    } else {
      m = m + pow(2, mLen);
      e = e - eBias;
    }return (s ? -1 : 1) * m * pow(2, e - mLen);
  };

  var unpackI32 = function (bytes) {
    return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];
  };
  var packI8 = function (it) {
    return [it & 0xff];
  };
  var packI16 = function (it) {
    return [it & 0xff, it >> 8 & 0xff];
  };
  var packI32 = function (it) {
    return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];
  };
  var packF64 = function (it) {
    return packIEEE754(it, 52, 8);
  };
  var packF32 = function (it) {
    return packIEEE754(it, 23, 4);
  };

  var addGetter = function (C, key, internal) {
    dP(C[PROTOTYPE], key, { get: function () {
        return this[internal];
      } });
  };

  var get = function (view, bytes, index, isLittleEndian) {
    var numIndex = +index,
        intIndex = toInteger(numIndex);
    if (numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
    var store = view[$BUFFER]._b,
        start = intIndex + view[$OFFSET],
        pack = store.slice(start, start + bytes);
    return isLittleEndian ? pack : pack.reverse();
  };
  var set = function (view, bytes, index, conversion, value, isLittleEndian) {
    var numIndex = +index,
        intIndex = toInteger(numIndex);
    if (numIndex != intIndex || intIndex < 0 || intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);
    var store = view[$BUFFER]._b,
        start = intIndex + view[$OFFSET],
        pack = conversion(+value);
    for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];
  };

  var validateArrayBufferArguments = function (that, length) {
    anInstance(that, $ArrayBuffer, ARRAY_BUFFER);
    var numberLength = +length,
        byteLength = toLength(numberLength);
    if (numberLength != byteLength) throw RangeError(WRONG_LENGTH);
    return byteLength;
  };

  if (!$typed.ABV) {
    $ArrayBuffer = function ArrayBuffer(length) {
      var byteLength = validateArrayBufferArguments(this, length);
      this._b = arrayFill.call(Array(byteLength), 0);
      this[$LENGTH] = byteLength;
    };

    $DataView = function DataView(buffer, byteOffset, byteLength) {
      anInstance(this, $DataView, DATA_VIEW);
      anInstance(buffer, $ArrayBuffer, DATA_VIEW);
      var bufferLength = buffer[$LENGTH],
          offset = toInteger(byteOffset);
      if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');
      byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);
      if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);
      this[$BUFFER] = buffer;
      this[$OFFSET] = offset;
      this[$LENGTH] = byteLength;
    };

    if (DESCRIPTORS) {
      addGetter($ArrayBuffer, BYTE_LENGTH, '_l');
      addGetter($DataView, BUFFER, '_b');
      addGetter($DataView, BYTE_LENGTH, '_l');
      addGetter($DataView, BYTE_OFFSET, '_o');
    }

    redefineAll($DataView[PROTOTYPE], {
      getInt8: function getInt8(byteOffset) {
        return get(this, 1, byteOffset)[0] << 24 >> 24;
      },
      getUint8: function getUint8(byteOffset) {
        return get(this, 1, byteOffset)[0];
      },
      getInt16: function getInt16(byteOffset /*, littleEndian */) {
        var bytes = get(this, 2, byteOffset, arguments[1]);
        return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
      },
      getUint16: function getUint16(byteOffset /*, littleEndian */) {
        var bytes = get(this, 2, byteOffset, arguments[1]);
        return bytes[1] << 8 | bytes[0];
      },
      getInt32: function getInt32(byteOffset /*, littleEndian */) {
        return unpackI32(get(this, 4, byteOffset, arguments[1]));
      },
      getUint32: function getUint32(byteOffset /*, littleEndian */) {
        return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;
      },
      getFloat32: function getFloat32(byteOffset /*, littleEndian */) {
        return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);
      },
      getFloat64: function getFloat64(byteOffset /*, littleEndian */) {
        return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);
      },
      setInt8: function setInt8(byteOffset, value) {
        set(this, 1, byteOffset, packI8, value);
      },
      setUint8: function setUint8(byteOffset, value) {
        set(this, 1, byteOffset, packI8, value);
      },
      setInt16: function setInt16(byteOffset, value /*, littleEndian */) {
        set(this, 2, byteOffset, packI16, value, arguments[2]);
      },
      setUint16: function setUint16(byteOffset, value /*, littleEndian */) {
        set(this, 2, byteOffset, packI16, value, arguments[2]);
      },
      setInt32: function setInt32(byteOffset, value /*, littleEndian */) {
        set(this, 4, byteOffset, packI32, value, arguments[2]);
      },
      setUint32: function setUint32(byteOffset, value /*, littleEndian */) {
        set(this, 4, byteOffset, packI32, value, arguments[2]);
      },
      setFloat32: function setFloat32(byteOffset, value /*, littleEndian */) {
        set(this, 4, byteOffset, packF32, value, arguments[2]);
      },
      setFloat64: function setFloat64(byteOffset, value /*, littleEndian */) {
        set(this, 8, byteOffset, packF64, value, arguments[2]);
      }
    });
  } else {
    if (!fails(function () {
      new $ArrayBuffer(); // eslint-disable-line no-new
    }) || !fails(function () {
      new $ArrayBuffer(.5); // eslint-disable-line no-new
    })) {
      $ArrayBuffer = function ArrayBuffer(length) {
        return new BaseBuffer(validateArrayBufferArguments(this, length));
      };
      var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];
      for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {
        if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);
      };
      if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;
    }
    // iOS Safari 7.x bug
    var view = new $DataView(new $ArrayBuffer(2)),
        $setInt8 = $DataView[PROTOTYPE].setInt8;
    view.setInt8(0, 2147483648);
    view.setInt8(1, 2147483649);
    if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {
      setInt8: function setInt8(byteOffset, value) {
        $setInt8.call(this, byteOffset, value << 24 >> 24);
      },
      setUint8: function setUint8(byteOffset, value) {
        $setInt8.call(this, byteOffset, value << 24 >> 24);
      }
    }, true);
  }
  setToStringTag($ArrayBuffer, ARRAY_BUFFER);
  setToStringTag($DataView, DATA_VIEW);
  hide($DataView[PROTOTYPE], $typed.VIEW, true);
  exports[ARRAY_BUFFER] = $ArrayBuffer;
  exports[DATA_VIEW] = $DataView;
});
$__System.registerDynamic("41", ["e"], true, function ($__require, exports, module) {
  var process = $__require("e");
  var global = this || self,
      GLOBAL = global;
  // 7.2.9 SameValue(x, y)
  module.exports = Object.is || function is(x, y) {
    return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
  };
});
$__System.registerDynamic('cc', ['21', 'aa', '1d', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 7.3.20 SpeciesConstructor(O, defaultConstructor)
  var anObject = $__require('21'),
      aFunction = $__require('aa'),
      SPECIES = $__require('1d')('species');
  module.exports = function (O, D) {
    var C = anObject(O).constructor,
        S;
    return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
  };
});
$__System.registerDynamic('bb', ['32', '77', '79', 'e'], true, function ($__require, exports, module) {
  // 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var toObject = $__require('32'),
      toIndex = $__require('77'),
      toLength = $__require('79');
  module.exports = function fill(value /*, start = 0, end = @length */) {
    var O = toObject(this),
        length = toLength(O.length),
        aLen = arguments.length,
        index = toIndex(aLen > 1 ? arguments[1] : undefined, length),
        end = aLen > 2 ? arguments[2] : undefined,
        endPos = end === undefined ? length : toIndex(end, length);
    while (endPos > index) O[index++] = value;
    return O;
  };
});
$__System.registerDynamic('b8', ['32', '77', '79', 'e'], true, function ($__require, exports, module) {
  // 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var toObject = $__require('32'),
      toIndex = $__require('77'),
      toLength = $__require('79');

  module.exports = [].copyWithin || function copyWithin(target /*= 0*/, start /*= 0, end = @length*/) {
    var O = toObject(this),
        len = toLength(O.length),
        to = toIndex(target, len),
        from = toIndex(start, len),
        end = arguments.length > 2 ? arguments[2] : undefined,
        count = Math.min((end === undefined ? len : toIndex(end, len)) - from, len - to),
        inc = 1;
    if (from < to && to < from + count) {
      inc = -1;
      from += count - 1;
      to += count - 1;
    }
    while (count-- > 0) {
      if (from in O) O[to] = O[from];else delete O[to];
      to += inc;
      from += inc;
    }return O;
  };
});
$__System.registerDynamic('d8', ['15', '29', '13', '19', '16', 'd4', 'd5', '9d', 'ca', '23', '2a', 'cf', '53', '79', '77', '22', '14', '41', '45', '37', '32', '9f', '24', '33', '28', 'a1', '1c', '1d', 'ac', 'b5', 'cc', 'e0', 'e1', 'a2', 'bf', 'bb', 'b8', '27', '26', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  if ($__require('15')) {
    var LIBRARY = $__require('29'),
        global = $__require('13'),
        fails = $__require('19'),
        $export = $__require('16'),
        $typed = $__require('d4'),
        $buffer = $__require('d5'),
        ctx = $__require('9d'),
        anInstance = $__require('ca'),
        propertyDesc = $__require('23'),
        hide = $__require('2a'),
        redefineAll = $__require('cf'),
        toInteger = $__require('53'),
        toLength = $__require('79'),
        toIndex = $__require('77'),
        toPrimitive = $__require('22'),
        has = $__require('14'),
        same = $__require('41'),
        classof = $__require('45'),
        isObject = $__require('37'),
        toObject = $__require('32'),
        isArrayIter = $__require('9f'),
        create = $__require('24'),
        getPrototypeOf = $__require('33'),
        gOPN = $__require('28').f,
        getIterFn = $__require('a1'),
        uid = $__require('1c'),
        wks = $__require('1d'),
        createArrayMethod = $__require('ac'),
        createArrayIncludes = $__require('b5'),
        speciesConstructor = $__require('cc'),
        ArrayIterators = $__require('e0'),
        Iterators = $__require('e1'),
        $iterDetect = $__require('a2'),
        setSpecies = $__require('bf'),
        arrayFill = $__require('bb'),
        arrayCopyWithin = $__require('b8'),
        $DP = $__require('27'),
        $GOPD = $__require('26'),
        dP = $DP.f,
        gOPD = $GOPD.f,
        RangeError = global.RangeError,
        TypeError = global.TypeError,
        Uint8Array = global.Uint8Array,
        ARRAY_BUFFER = 'ArrayBuffer',
        SHARED_BUFFER = 'Shared' + ARRAY_BUFFER,
        BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT',
        PROTOTYPE = 'prototype',
        ArrayProto = Array[PROTOTYPE],
        $ArrayBuffer = $buffer.ArrayBuffer,
        $DataView = $buffer.DataView,
        arrayForEach = createArrayMethod(0),
        arrayFilter = createArrayMethod(2),
        arraySome = createArrayMethod(3),
        arrayEvery = createArrayMethod(4),
        arrayFind = createArrayMethod(5),
        arrayFindIndex = createArrayMethod(6),
        arrayIncludes = createArrayIncludes(true),
        arrayIndexOf = createArrayIncludes(false),
        arrayValues = ArrayIterators.values,
        arrayKeys = ArrayIterators.keys,
        arrayEntries = ArrayIterators.entries,
        arrayLastIndexOf = ArrayProto.lastIndexOf,
        arrayReduce = ArrayProto.reduce,
        arrayReduceRight = ArrayProto.reduceRight,
        arrayJoin = ArrayProto.join,
        arraySort = ArrayProto.sort,
        arraySlice = ArrayProto.slice,
        arrayToString = ArrayProto.toString,
        arrayToLocaleString = ArrayProto.toLocaleString,
        ITERATOR = wks('iterator'),
        TAG = wks('toStringTag'),
        TYPED_CONSTRUCTOR = uid('typed_constructor'),
        DEF_CONSTRUCTOR = uid('def_constructor'),
        ALL_CONSTRUCTORS = $typed.CONSTR,
        TYPED_ARRAY = $typed.TYPED,
        VIEW = $typed.VIEW,
        WRONG_LENGTH = 'Wrong length!';

    var $map = createArrayMethod(1, function (O, length) {
      return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);
    });

    var LITTLE_ENDIAN = fails(function () {
      return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;
    });

    var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {
      new Uint8Array(1).set({});
    });

    var strictToLength = function (it, SAME) {
      if (it === undefined) throw TypeError(WRONG_LENGTH);
      var number = +it,
          length = toLength(it);
      if (SAME && !same(number, length)) throw RangeError(WRONG_LENGTH);
      return length;
    };

    var toOffset = function (it, BYTES) {
      var offset = toInteger(it);
      if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');
      return offset;
    };

    var validate = function (it) {
      if (isObject(it) && TYPED_ARRAY in it) return it;
      throw TypeError(it + ' is not a typed array!');
    };

    var allocate = function (C, length) {
      if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {
        throw TypeError('It is not a typed array constructor!');
      }return new C(length);
    };

    var speciesFromList = function (O, list) {
      return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);
    };

    var fromList = function (C, list) {
      var index = 0,
          length = list.length,
          result = allocate(C, length);
      while (length > index) result[index] = list[index++];
      return result;
    };

    var addGetter = function (it, key, internal) {
      dP(it, key, { get: function () {
          return this._d[internal];
        } });
    };

    var $from = function from(source /*, mapfn, thisArg */) {
      var O = toObject(source),
          aLen = arguments.length,
          mapfn = aLen > 1 ? arguments[1] : undefined,
          mapping = mapfn !== undefined,
          iterFn = getIterFn(O),
          i,
          length,
          values,
          result,
          step,
          iterator;
      if (iterFn != undefined && !isArrayIter(iterFn)) {
        for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {
          values.push(step.value);
        }O = values;
      }
      if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);
      for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {
        result[i] = mapping ? mapfn(O[i], i) : O[i];
      }
      return result;
    };

    var $of = function of() /*...items*/{
      var index = 0,
          length = arguments.length,
          result = allocate(this, length);
      while (length > index) result[index] = arguments[index++];
      return result;
    };

    // iOS Safari 6.x fails here
    var TO_LOCALE_BUG = !!Uint8Array && fails(function () {
      arrayToLocaleString.call(new Uint8Array(1));
    });

    var $toLocaleString = function toLocaleString() {
      return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);
    };

    var proto = {
      copyWithin: function copyWithin(target, start /*, end */) {
        return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);
      },
      every: function every(callbackfn /*, thisArg */) {
        return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      },
      fill: function fill(value /*, start, end */) {
        // eslint-disable-line no-unused-vars
        return arrayFill.apply(validate(this), arguments);
      },
      filter: function filter(callbackfn /*, thisArg */) {
        return speciesFromList(this, arrayFilter(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined));
      },
      find: function find(predicate /*, thisArg */) {
        return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
      },
      findIndex: function findIndex(predicate /*, thisArg */) {
        return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);
      },
      forEach: function forEach(callbackfn /*, thisArg */) {
        arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      },
      indexOf: function indexOf(searchElement /*, fromIndex */) {
        return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
      },
      includes: function includes(searchElement /*, fromIndex */) {
        return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);
      },
      join: function join(separator) {
        // eslint-disable-line no-unused-vars
        return arrayJoin.apply(validate(this), arguments);
      },
      lastIndexOf: function lastIndexOf(searchElement /*, fromIndex */) {
        // eslint-disable-line no-unused-vars
        return arrayLastIndexOf.apply(validate(this), arguments);
      },
      map: function map(mapfn /*, thisArg */) {
        return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);
      },
      reduce: function reduce(callbackfn /*, initialValue */) {
        // eslint-disable-line no-unused-vars
        return arrayReduce.apply(validate(this), arguments);
      },
      reduceRight: function reduceRight(callbackfn /*, initialValue */) {
        // eslint-disable-line no-unused-vars
        return arrayReduceRight.apply(validate(this), arguments);
      },
      reverse: function reverse() {
        var that = this,
            length = validate(that).length,
            middle = Math.floor(length / 2),
            index = 0,
            value;
        while (index < middle) {
          value = that[index];
          that[index++] = that[--length];
          that[length] = value;
        }return that;
      },
      some: function some(callbackfn /*, thisArg */) {
        return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);
      },
      sort: function sort(comparefn) {
        return arraySort.call(validate(this), comparefn);
      },
      subarray: function subarray(begin, end) {
        var O = validate(this),
            length = O.length,
            $begin = toIndex(begin, length);
        return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(O.buffer, O.byteOffset + $begin * O.BYTES_PER_ELEMENT, toLength((end === undefined ? length : toIndex(end, length)) - $begin));
      }
    };

    var $slice = function slice(start, end) {
      return speciesFromList(this, arraySlice.call(validate(this), start, end));
    };

    var $set = function set(arrayLike /*, offset */) {
      validate(this);
      var offset = toOffset(arguments[1], 1),
          length = this.length,
          src = toObject(arrayLike),
          len = toLength(src.length),
          index = 0;
      if (len + offset > length) throw RangeError(WRONG_LENGTH);
      while (index < len) this[offset + index] = src[index++];
    };

    var $iterators = {
      entries: function entries() {
        return arrayEntries.call(validate(this));
      },
      keys: function keys() {
        return arrayKeys.call(validate(this));
      },
      values: function values() {
        return arrayValues.call(validate(this));
      }
    };

    var isTAIndex = function (target, key) {
      return isObject(target) && target[TYPED_ARRAY] && typeof key != 'symbol' && key in target && String(+key) == String(key);
    };
    var $getDesc = function getOwnPropertyDescriptor(target, key) {
      return isTAIndex(target, key = toPrimitive(key, true)) ? propertyDesc(2, target[key]) : gOPD(target, key);
    };
    var $setDesc = function defineProperty(target, key, desc) {
      if (isTAIndex(target, key = toPrimitive(key, true)) && isObject(desc) && has(desc, 'value') && !has(desc, 'get') && !has(desc, 'set')
      // TODO: add validation descriptor w/o calling accessors
      && !desc.configurable && (!has(desc, 'writable') || desc.writable) && (!has(desc, 'enumerable') || desc.enumerable)) {
        target[key] = desc.value;
        return target;
      } else return dP(target, key, desc);
    };

    if (!ALL_CONSTRUCTORS) {
      $GOPD.f = $getDesc;
      $DP.f = $setDesc;
    }

    $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {
      getOwnPropertyDescriptor: $getDesc,
      defineProperty: $setDesc
    });

    if (fails(function () {
      arrayToString.call({});
    })) {
      arrayToString = arrayToLocaleString = function toString() {
        return arrayJoin.call(this);
      };
    }

    var $TypedArrayPrototype$ = redefineAll({}, proto);
    redefineAll($TypedArrayPrototype$, $iterators);
    hide($TypedArrayPrototype$, ITERATOR, $iterators.values);
    redefineAll($TypedArrayPrototype$, {
      slice: $slice,
      set: $set,
      constructor: function () {/* noop */},
      toString: arrayToString,
      toLocaleString: $toLocaleString
    });
    addGetter($TypedArrayPrototype$, 'buffer', 'b');
    addGetter($TypedArrayPrototype$, 'byteOffset', 'o');
    addGetter($TypedArrayPrototype$, 'byteLength', 'l');
    addGetter($TypedArrayPrototype$, 'length', 'e');
    dP($TypedArrayPrototype$, TAG, {
      get: function () {
        return this[TYPED_ARRAY];
      }
    });

    module.exports = function (KEY, BYTES, wrapper, CLAMPED) {
      CLAMPED = !!CLAMPED;
      var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array',
          ISNT_UINT8 = NAME != 'Uint8Array',
          GETTER = 'get' + KEY,
          SETTER = 'set' + KEY,
          TypedArray = global[NAME],
          Base = TypedArray || {},
          TAC = TypedArray && getPrototypeOf(TypedArray),
          FORCED = !TypedArray || !$typed.ABV,
          O = {},
          TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];
      var getter = function (that, index) {
        var data = that._d;
        return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);
      };
      var setter = function (that, index, value) {
        var data = that._d;
        if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;
        data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);
      };
      var addElement = function (that, index) {
        dP(that, index, {
          get: function () {
            return getter(this, index);
          },
          set: function (value) {
            return setter(this, index, value);
          },
          enumerable: true
        });
      };
      if (FORCED) {
        TypedArray = wrapper(function (that, data, $offset, $length) {
          anInstance(that, TypedArray, NAME, '_d');
          var index = 0,
              offset = 0,
              buffer,
              byteLength,
              length,
              klass;
          if (!isObject(data)) {
            length = strictToLength(data, true);
            byteLength = length * BYTES;
            buffer = new $ArrayBuffer(byteLength);
          } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
            buffer = data;
            offset = toOffset($offset, BYTES);
            var $len = data.byteLength;
            if ($length === undefined) {
              if ($len % BYTES) throw RangeError(WRONG_LENGTH);
              byteLength = $len - offset;
              if (byteLength < 0) throw RangeError(WRONG_LENGTH);
            } else {
              byteLength = toLength($length) * BYTES;
              if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);
            }
            length = byteLength / BYTES;
          } else if (TYPED_ARRAY in data) {
            return fromList(TypedArray, data);
          } else {
            return $from.call(TypedArray, data);
          }
          hide(that, '_d', {
            b: buffer,
            o: offset,
            l: byteLength,
            e: length,
            v: new $DataView(buffer)
          });
          while (index < length) addElement(that, index++);
        });
        TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);
        hide(TypedArrayPrototype, 'constructor', TypedArray);
      } else if (!$iterDetect(function (iter) {
        // V8 works with iterators, but fails in many other cases
        // https://code.google.com/p/v8/issues/detail?id=4552
        new TypedArray(null); // eslint-disable-line no-new
        new TypedArray(iter); // eslint-disable-line no-new
      }, true)) {
        TypedArray = wrapper(function (that, data, $offset, $length) {
          anInstance(that, TypedArray, NAME);
          var klass;
          // `ws` module bug, temporarily remove validation length for Uint8Array
          // https://github.com/websockets/ws/pull/645
          if (!isObject(data)) return new Base(strictToLength(data, ISNT_UINT8));
          if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {
            return $length !== undefined ? new Base(data, toOffset($offset, BYTES), $length) : $offset !== undefined ? new Base(data, toOffset($offset, BYTES)) : new Base(data);
          }
          if (TYPED_ARRAY in data) return fromList(TypedArray, data);
          return $from.call(TypedArray, data);
        });
        arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {
          if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);
        });
        TypedArray[PROTOTYPE] = TypedArrayPrototype;
        if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;
      }
      var $nativeIterator = TypedArrayPrototype[ITERATOR],
          CORRECT_ITER_NAME = !!$nativeIterator && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined),
          $iterator = $iterators.values;
      hide(TypedArray, TYPED_CONSTRUCTOR, true);
      hide(TypedArrayPrototype, TYPED_ARRAY, NAME);
      hide(TypedArrayPrototype, VIEW, true);
      hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);

      if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {
        dP(TypedArrayPrototype, TAG, {
          get: function () {
            return NAME;
          }
        });
      }

      O[NAME] = TypedArray;

      $export($export.G + $export.W + $export.F * (TypedArray != Base), O);

      $export($export.S, NAME, {
        BYTES_PER_ELEMENT: BYTES,
        from: $from,
        of: $of
      });

      if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);

      $export($export.P, NAME, proto);

      setSpecies(NAME);

      $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });

      $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);

      $export($export.P + $export.F * (TypedArrayPrototype.toString != arrayToString), NAME, { toString: arrayToString });

      $export($export.P + $export.F * fails(function () {
        new TypedArray(1).slice();
      }), NAME, { slice: $slice });

      $export($export.P + $export.F * (fails(function () {
        return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();
      }) || !fails(function () {
        TypedArrayPrototype.toLocaleString.call([1, 2]);
      })), NAME, { toLocaleString: $toLocaleString });

      Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;
      if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);
    };
  } else module.exports = function () {/* empty */};
});
$__System.registerDynamic('e2', ['d8', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  $__require('d8')('Float64', 8, function (init) {
    return function Float64Array(data, byteOffset, length) {
      return init(this, data, byteOffset, length);
    };
  });
});
$__System.registerDynamic('e3', ['16', 'aa', '21', '13', '19', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 26.1.1 Reflect.apply(target, thisArgument, argumentsList)
  var $export = $__require('16'),
      aFunction = $__require('aa'),
      anObject = $__require('21'),
      rApply = ($__require('13').Reflect || {}).apply,
      fApply = Function.apply;
  // MS Edge argumentsList argument is optional
  $export($export.S + $export.F * !$__require('19')(function () {
    rApply(function () {});
  }), 'Reflect', {
    apply: function apply(target, thisArgument, argumentsList) {
      var T = aFunction(target),
          L = anObject(argumentsList);
      return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);
    }
  });
});
$__System.registerDynamic('47', ['aa', '37', 'e4', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var aFunction = $__require('aa'),
      isObject = $__require('37'),
      invoke = $__require('e4'),
      arraySlice = [].slice,
      factories = {};

  var construct = function (F, len, args) {
    if (!(len in factories)) {
      for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';
      factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');
    }return factories[len](F, args);
  };

  module.exports = Function.bind || function bind(that /*, args... */) {
    var fn = aFunction(this),
        partArgs = arraySlice.call(arguments, 1);
    var bound = function () /* args... */{
      var args = partArgs.concat(arraySlice.call(arguments));
      return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);
    };
    if (isObject(fn.prototype)) bound.prototype = fn.prototype;
    return bound;
  };
});
$__System.registerDynamic('e5', ['16', '24', 'aa', '21', '37', '19', '47', '13', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 26.1.2 Reflect.construct(target, argumentsList [, newTarget])
  var $export = $__require('16'),
      create = $__require('24'),
      aFunction = $__require('aa'),
      anObject = $__require('21'),
      isObject = $__require('37'),
      fails = $__require('19'),
      bind = $__require('47'),
      rConstruct = ($__require('13').Reflect || {}).construct;

  // MS Edge supports only 2 arguments and argumentsList argument is optional
  // FF Nightly sets third argument as `new.target`, but does not create `this` from it
  var NEW_TARGET_BUG = fails(function () {
    function F() {}
    return !(rConstruct(function () {}, [], F) instanceof F);
  });
  var ARGS_BUG = !fails(function () {
    rConstruct(function () {});
  });

  $export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {
    construct: function construct(Target, args /*, newTarget*/) {
      aFunction(Target);
      anObject(args);
      var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);
      if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);
      if (Target == newTarget) {
        // w/o altered newTarget, optimization for 0-4 arguments
        switch (args.length) {
          case 0:
            return new Target();
          case 1:
            return new Target(args[0]);
          case 2:
            return new Target(args[0], args[1]);
          case 3:
            return new Target(args[0], args[1], args[2]);
          case 4:
            return new Target(args[0], args[1], args[2], args[3]);
        }
        // w/o altered newTarget, lot of arguments case
        var $args = [null];
        $args.push.apply($args, args);
        return new (bind.apply(Target, $args))();
      }
      // with altered newTarget, not support built-in constructors
      var proto = newTarget.prototype,
          instance = create(isObject(proto) ? proto : Object.prototype),
          result = Function.apply.call(Target, instance, args);
      return isObject(result) ? result : instance;
    }
  });
});
$__System.registerDynamic('e6', ['27', '16', '21', '22', '19', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)
  var dP = $__require('27'),
      $export = $__require('16'),
      anObject = $__require('21'),
      toPrimitive = $__require('22');

  // MS Edge has broken Reflect.defineProperty - throwing instead of returning false
  $export($export.S + $export.F * $__require('19')(function () {
    Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });
  }), 'Reflect', {
    defineProperty: function defineProperty(target, propertyKey, attributes) {
      anObject(target);
      propertyKey = toPrimitive(propertyKey, true);
      anObject(attributes);
      try {
        dP.f(target, propertyKey, attributes);
        return true;
      } catch (e) {
        return false;
      }
    }
  });
});
$__System.registerDynamic('e7', ['16', '26', '21', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 26.1.4 Reflect.deleteProperty(target, propertyKey)
  var $export = $__require('16'),
      gOPD = $__require('26').f,
      anObject = $__require('21');

  $export($export.S, 'Reflect', {
    deleteProperty: function deleteProperty(target, propertyKey) {
      var desc = gOPD(anObject(target), propertyKey);
      return desc && !desc.configurable ? false : delete target[propertyKey];
    }
  });
});
$__System.registerDynamic('e8', ['16', '21', 'e9', 'e'], true, function ($__require, exports, module) {
  'use strict';
  // 26.1.5 Reflect.enumerate(target)

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      anObject = $__require('21');
  var Enumerate = function (iterated) {
    this._t = anObject(iterated); // target
    this._i = 0; // next index
    var keys = this._k = [] // keys
    ,
        key;
    for (key in iterated) keys.push(key);
  };
  $__require('e9')(Enumerate, 'Object', function () {
    var that = this,
        keys = that._k,
        key;
    do {
      if (that._i >= keys.length) return { value: undefined, done: true };
    } while (!((key = keys[that._i++]) in that._t));
    return { value: key, done: false };
  });

  $export($export.S, 'Reflect', {
    enumerate: function enumerate(target) {
      return new Enumerate(target);
    }
  });
});
$__System.registerDynamic('ea', ['26', '33', '14', '16', '37', '21', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 26.1.6 Reflect.get(target, propertyKey [, receiver])
  var gOPD = $__require('26'),
      getPrototypeOf = $__require('33'),
      has = $__require('14'),
      $export = $__require('16'),
      isObject = $__require('37'),
      anObject = $__require('21');

  function get(target, propertyKey /*, receiver*/) {
    var receiver = arguments.length < 3 ? target : arguments[2],
        desc,
        proto;
    if (anObject(target) === receiver) return target[propertyKey];
    if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value') ? desc.value : desc.get !== undefined ? desc.get.call(receiver) : undefined;
    if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);
  }

  $export($export.S, 'Reflect', { get: get });
});
$__System.registerDynamic('eb', ['26', '16', '21', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)
  var gOPD = $__require('26'),
      $export = $__require('16'),
      anObject = $__require('21');

  $export($export.S, 'Reflect', {
    getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {
      return gOPD.f(anObject(target), propertyKey);
    }
  });
});
$__System.registerDynamic('ec', ['16', '33', '21', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 26.1.8 Reflect.getPrototypeOf(target)
  var $export = $__require('16'),
      getProto = $__require('33'),
      anObject = $__require('21');

  $export($export.S, 'Reflect', {
    getPrototypeOf: function getPrototypeOf(target) {
      return getProto(anObject(target));
    }
  });
});
$__System.registerDynamic('ed', ['16', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 26.1.9 Reflect.has(target, propertyKey)
  var $export = $__require('16');

  $export($export.S, 'Reflect', {
    has: function has(target, propertyKey) {
      return propertyKey in target;
    }
  });
});
$__System.registerDynamic('ee', ['16', '21', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 26.1.10 Reflect.isExtensible(target)
  var $export = $__require('16'),
      anObject = $__require('21'),
      $isExtensible = Object.isExtensible;

  $export($export.S, 'Reflect', {
    isExtensible: function isExtensible(target) {
      anObject(target);
      return $isExtensible ? $isExtensible(target) : true;
    }
  });
});
$__System.registerDynamic('ef', ['16', 'f0', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 26.1.11 Reflect.ownKeys(target)
  var $export = $__require('16');

  $export($export.S, 'Reflect', { ownKeys: $__require('f0') });
});
$__System.registerDynamic('f1', ['16', '21', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 26.1.12 Reflect.preventExtensions(target)
  var $export = $__require('16'),
      anObject = $__require('21'),
      $preventExtensions = Object.preventExtensions;

  $export($export.S, 'Reflect', {
    preventExtensions: function preventExtensions(target) {
      anObject(target);
      try {
        if ($preventExtensions) $preventExtensions(target);
        return true;
      } catch (e) {
        return false;
      }
    }
  });
});
$__System.registerDynamic('f2', ['27', '26', '33', '14', '16', '23', '21', '37', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 26.1.13 Reflect.set(target, propertyKey, V [, receiver])
  var dP = $__require('27'),
      gOPD = $__require('26'),
      getPrototypeOf = $__require('33'),
      has = $__require('14'),
      $export = $__require('16'),
      createDesc = $__require('23'),
      anObject = $__require('21'),
      isObject = $__require('37');

  function set(target, propertyKey, V /*, receiver*/) {
    var receiver = arguments.length < 4 ? target : arguments[3],
        ownDesc = gOPD.f(anObject(target), propertyKey),
        existingDescriptor,
        proto;
    if (!ownDesc) {
      if (isObject(proto = getPrototypeOf(target))) {
        return set(proto, propertyKey, V, receiver);
      }
      ownDesc = createDesc(0);
    }
    if (has(ownDesc, 'value')) {
      if (ownDesc.writable === false || !isObject(receiver)) return false;
      existingDescriptor = gOPD.f(receiver, propertyKey) || createDesc(0);
      existingDescriptor.value = V;
      dP.f(receiver, propertyKey, existingDescriptor);
      return true;
    }
    return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);
  }

  $export($export.S, 'Reflect', { set: set });
});
$__System.registerDynamic('f3', ['16', '43', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 26.1.14 Reflect.setPrototypeOf(target, proto)
  var $export = $__require('16'),
      setProto = $__require('43');

  if (setProto) $export($export.S, 'Reflect', {
    setPrototypeOf: function setPrototypeOf(target, proto) {
      setProto.check(target, proto);
      try {
        setProto.set(target, proto);
        return true;
      } catch (e) {
        return false;
      }
    }
  });
});
$__System.registerDynamic('f4', ['16', 'b5', 'b9', 'e'], true, function ($__require, exports, module) {
  'use strict';
  // https://github.com/tc39/Array.prototype.includes

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      $includes = $__require('b5')(true);

  $export($export.P, 'Array', {
    includes: function includes(el /*, fromIndex = 0 */) {
      return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
    }
  });

  $__require('b9')('includes');
});
$__System.registerDynamic('7c', ['53', '85', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var toInteger = $__require('53'),
      defined = $__require('85');
  // true  -> String#at
  // false -> String#codePointAt
  module.exports = function (TO_STRING) {
    return function (that, pos) {
      var s = String(defined(that)),
          i = toInteger(pos),
          l = s.length,
          a,
          b;
      if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
      a = s.charCodeAt(i);
      return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
    };
  };
});
$__System.registerDynamic('f5', ['16', '7c', 'e'], true, function ($__require, exports, module) {
  'use strict';
  // https://github.com/mathiasbynens/String.prototype.at

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      $at = $__require('7c')(true);

  $export($export.P, 'String', {
    at: function at(pos) {
      return $at(this, pos);
    }
  });
});
$__System.registerDynamic('f6', ['16', 'f7', 'e'], true, function ($__require, exports, module) {
  'use strict';
  // https://github.com/tc39/proposal-string-pad-start-end

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      $pad = $__require('f7');

  $export($export.P, 'String', {
    padStart: function padStart(maxLength /*, fillString = ' ' */) {
      return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);
    }
  });
});
$__System.registerDynamic('55', ['53', '85', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var toInteger = $__require('53'),
      defined = $__require('85');

  module.exports = function repeat(count) {
    var str = String(defined(this)),
        res = '',
        n = toInteger(count);
    if (n < 0 || n == Infinity) throw RangeError("Count can't be negative");
    for (; n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;
    return res;
  };
});
$__System.registerDynamic('f7', ['79', '55', '85', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // https://github.com/tc39/proposal-string-pad-start-end
  var toLength = $__require('79'),
      repeat = $__require('55'),
      defined = $__require('85');

  module.exports = function (that, maxLength, fillString, left) {
    var S = String(defined(that)),
        stringLength = S.length,
        fillStr = fillString === undefined ? ' ' : String(fillString),
        intMaxLength = toLength(maxLength);
    if (intMaxLength <= stringLength || fillStr == '') return S;
    var fillLen = intMaxLength - stringLength,
        stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));
    if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);
    return left ? stringFiller + S : S + stringFiller;
  };
});
$__System.registerDynamic('f8', ['16', 'f7', 'e'], true, function ($__require, exports, module) {
  'use strict';
  // https://github.com/tc39/proposal-string-pad-start-end

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      $pad = $__require('f7');

  $export($export.P, 'String', {
    padEnd: function padEnd(maxLength /*, fillString = ' ' */) {
      return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);
    }
  });
});
$__System.registerDynamic('f9', ['51', 'e'], true, function ($__require, exports, module) {
  'use strict';
  // https://github.com/sebmarkbage/ecmascript-string-left-right-trim

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  $__require('51')('trimLeft', function ($trim) {
    return function trimLeft() {
      return $trim(this, 1);
    };
  }, 'trimStart');
});
$__System.registerDynamic('5f', ['e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  module.exports = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' + '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';
});
$__System.registerDynamic('51', ['16', '85', '19', '5f', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      defined = $__require('85'),
      fails = $__require('19'),
      spaces = $__require('5f'),
      space = '[' + spaces + ']',
      non = '\u200b\u0085',
      ltrim = RegExp('^' + space + space + '*'),
      rtrim = RegExp(space + space + '*$');

  var exporter = function (KEY, exec, ALIAS) {
    var exp = {};
    var FORCE = fails(function () {
      return !!spaces[KEY]() || non[KEY]() != non;
    });
    var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];
    if (ALIAS) exp[ALIAS] = fn;
    $export($export.P + $export.F * FORCE, 'String', exp);
  };

  // 1 -> String#trimLeft
  // 2 -> String#trimRight
  // 3 -> String#trim
  var trim = exporter.trim = function (string, TYPE) {
    string = String(defined(string));
    if (TYPE & 1) string = string.replace(ltrim, '');
    if (TYPE & 2) string = string.replace(rtrim, '');
    return string;
  };

  module.exports = exporter;
});
$__System.registerDynamic('fa', ['51', 'e'], true, function ($__require, exports, module) {
  'use strict';
  // https://github.com/sebmarkbage/ecmascript-string-left-right-trim

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  $__require('51')('trimRight', function ($trim) {
    return function trimRight() {
      return $trim(this, 2);
    };
  }, 'trimEnd');
});
$__System.registerDynamic('84', ['37', '4f', '1d', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 7.2.8 IsRegExp(argument)
  var isObject = $__require('37'),
      cof = $__require('4f'),
      MATCH = $__require('1d')('match');
  module.exports = function (it) {
    var isRegExp;
    return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');
  };
});
$__System.registerDynamic('c1', ['21', 'e'], true, function ($__require, exports, module) {
  'use strict';
  // 21.2.5.3 get RegExp.prototype.flags

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var anObject = $__require('21');
  module.exports = function () {
    var that = anObject(this),
        result = '';
    if (that.global) result += 'g';
    if (that.ignoreCase) result += 'i';
    if (that.multiline) result += 'm';
    if (that.unicode) result += 'u';
    if (that.sticky) result += 'y';
    return result;
  };
});
$__System.registerDynamic('fb', ['16', '85', '79', '84', 'c1', 'e9', 'e'], true, function ($__require, exports, module) {
  'use strict';
  // https://tc39.github.io/String.prototype.matchAll/

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      defined = $__require('85'),
      toLength = $__require('79'),
      isRegExp = $__require('84'),
      getFlags = $__require('c1'),
      RegExpProto = RegExp.prototype;

  var $RegExpStringIterator = function (regexp, string) {
    this._r = regexp;
    this._s = string;
  };

  $__require('e9')($RegExpStringIterator, 'RegExp String', function next() {
    var match = this._r.exec(this._s);
    return { value: match, done: match === null };
  });

  $export($export.P, 'String', {
    matchAll: function matchAll(regexp) {
      defined(this);
      if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');
      var S = String(this),
          flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp),
          rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);
      rx.lastIndex = toLength(regexp.lastIndex);
      return new $RegExpStringIterator(rx, S);
    }
  });
});
$__System.registerDynamic('fc', ['1f', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  $__require('1f')('asyncIterator');
});
$__System.registerDynamic('1e', ['1d', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  exports.f = $__require('1d');
});
$__System.registerDynamic('1f', ['13', '3c', '29', '1e', '27', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var global = $__require('13'),
      core = $__require('3c'),
      LIBRARY = $__require('29'),
      wksExt = $__require('1e'),
      defineProperty = $__require('27').f;
  module.exports = function (name) {
    var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
    if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
  };
});
$__System.registerDynamic('fd', ['1f', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  $__require('1f')('observable');
});
$__System.registerDynamic('28', ['fe', 'ff', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
  var $keys = $__require('fe'),
      hiddenKeys = $__require('ff').concat('length', 'prototype');

  exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
    return $keys(O, hiddenKeys);
  };
});
$__System.registerDynamic('f0', ['28', '10', '21', '13', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // all object keys, includes non-enumerable and symbols
  var gOPN = $__require('28'),
      gOPS = $__require('10'),
      anObject = $__require('21'),
      Reflect = $__require('13').Reflect;
  module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
    var keys = gOPN.f(anObject(it)),
        getSymbols = gOPS.f;
    return getSymbols ? keys.concat(getSymbols(it)) : keys;
  };
});
$__System.registerDynamic('a0', ['27', '23', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $defineProperty = $__require('27'),
      createDesc = $__require('23');

  module.exports = function (object, index, value) {
    if (index in object) $defineProperty.f(object, index, createDesc(0, value));else object[index] = value;
  };
});
$__System.registerDynamic('100', ['16', 'f0', 'd', '26', 'a0', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // https://github.com/tc39/proposal-object-getownpropertydescriptors
  var $export = $__require('16'),
      ownKeys = $__require('f0'),
      toIObject = $__require('d'),
      gOPD = $__require('26'),
      createProperty = $__require('a0');

  $export($export.S, 'Object', {
    getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
      var O = toIObject(object),
          getDesc = gOPD.f,
          keys = ownKeys(O),
          result = {},
          i = 0,
          key;
      while (keys.length > i) createProperty(result, key = keys[i++], getDesc(O, key));
      return result;
    }
  });
});
$__System.registerDynamic('101', ['16', '102', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // https://github.com/tc39/proposal-object-values-entries
  var $export = $__require('16'),
      $values = $__require('102')(false);

  $export($export.S, 'Object', {
    values: function values(it) {
      return $values(it);
    }
  });
});
$__System.registerDynamic('102', ['c', 'd', '11', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var getKeys = $__require('c'),
      toIObject = $__require('d'),
      isEnum = $__require('11').f;
  module.exports = function (isEntries) {
    return function (it) {
      var O = toIObject(it),
          keys = getKeys(O),
          length = keys.length,
          i = 0,
          result = [],
          key;
      while (length > i) if (isEnum.call(O, key = keys[i++])) {
        result.push(isEntries ? [key, O[key]] : O[key]);
      }return result;
    };
  };
});
$__System.registerDynamic('103', ['16', '102', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // https://github.com/tc39/proposal-object-values-entries
  var $export = $__require('16'),
      $entries = $__require('102')(true);

  $export($export.S, 'Object', {
    entries: function entries(it) {
      return $entries(it);
    }
  });
});
$__System.registerDynamic('104', ['16', '32', 'aa', '27', '15', '105', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      toObject = $__require('32'),
      aFunction = $__require('aa'),
      $defineProperty = $__require('27');

  // B.2.2.2 Object.prototype.__defineGetter__(P, getter)
  $__require('15') && $export($export.P + $__require('105'), 'Object', {
    __defineGetter__: function __defineGetter__(P, getter) {
      $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });
    }
  });
});
$__System.registerDynamic('106', ['16', '32', 'aa', '27', '15', '105', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      toObject = $__require('32'),
      aFunction = $__require('aa'),
      $defineProperty = $__require('27');

  // B.2.2.3 Object.prototype.__defineSetter__(P, setter)
  $__require('15') && $export($export.P + $__require('105'), 'Object', {
    __defineSetter__: function __defineSetter__(P, setter) {
      $defineProperty.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });
    }
  });
});
$__System.registerDynamic('107', ['16', '32', '22', '33', '26', '15', '105', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      toObject = $__require('32'),
      toPrimitive = $__require('22'),
      getPrototypeOf = $__require('33'),
      getOwnPropertyDescriptor = $__require('26').f;

  // B.2.2.4 Object.prototype.__lookupGetter__(P)
  $__require('15') && $export($export.P + $__require('105'), 'Object', {
    __lookupGetter__: function __lookupGetter__(P) {
      var O = toObject(this),
          K = toPrimitive(P, true),
          D;
      do {
        if (D = getOwnPropertyDescriptor(O, K)) return D.get;
      } while (O = getPrototypeOf(O));
    }
  });
});
$__System.registerDynamic('105', ['29', '19', '13', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // Forced replacement prototype accessors methods
  module.exports = $__require('29') || !$__require('19')(function () {
    var K = Math.random();
    // In FF throws only define methods
    __defineSetter__.call(null, K, function () {/* empty */});
    delete $__require('13')[K];
  });
});
$__System.registerDynamic('108', ['16', '32', '22', '33', '26', '15', '105', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      toObject = $__require('32'),
      toPrimitive = $__require('22'),
      getPrototypeOf = $__require('33'),
      getOwnPropertyDescriptor = $__require('26').f;

  // B.2.2.5 Object.prototype.__lookupSetter__(P)
  $__require('15') && $export($export.P + $__require('105'), 'Object', {
    __lookupSetter__: function __lookupSetter__(P) {
      var O = toObject(this),
          K = toPrimitive(P, true),
          D;
      do {
        if (D = getOwnPropertyDescriptor(O, K)) return D.set;
      } while (O = getPrototypeOf(O));
    }
  });
});
$__System.registerDynamic('109', ['16', '10a', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // https://github.com/DavidBruant/Map-Set.prototype.toJSON
  var $export = $__require('16');

  $export($export.P + $export.R, 'Map', { toJSON: $__require('10a')('Map') });
});
$__System.registerDynamic('10a', ['45', '10b', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // https://github.com/DavidBruant/Map-Set.prototype.toJSON
  var classof = $__require('45'),
      from = $__require('10b');
  module.exports = function (NAME) {
    return function toJSON() {
      if (classof(this) != NAME) throw TypeError(NAME + "#toJSON isn't generic");
      return from(this);
    };
  };
});
$__System.registerDynamic('10c', ['16', '10a', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // https://github.com/DavidBruant/Map-Set.prototype.toJSON
  var $export = $__require('16');

  $export($export.P + $export.R, 'Set', { toJSON: $__require('10a')('Set') });
});
$__System.registerDynamic('10d', ['16', '13', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // https://github.com/ljharb/proposal-global
  var $export = $__require('16');

  $export($export.S, 'System', { global: $__require('13') });
});
$__System.registerDynamic('10e', ['16', '4f', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // https://github.com/ljharb/proposal-is-error
  var $export = $__require('16'),
      cof = $__require('4f');

  $export($export.S, 'Error', {
    isError: function isError(it) {
      return cof(it) === 'Error';
    }
  });
});
$__System.registerDynamic('10f', ['16', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
  var $export = $__require('16');

  $export($export.S, 'Math', {
    iaddh: function iaddh(x0, x1, y0, y1) {
      var $x0 = x0 >>> 0,
          $x1 = x1 >>> 0,
          $y0 = y0 >>> 0;
      return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;
    }
  });
});
$__System.registerDynamic('110', ['16', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
  var $export = $__require('16');

  $export($export.S, 'Math', {
    isubh: function isubh(x0, x1, y0, y1) {
      var $x0 = x0 >>> 0,
          $x1 = x1 >>> 0,
          $y0 = y0 >>> 0;
      return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;
    }
  });
});
$__System.registerDynamic('111', ['16', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
  var $export = $__require('16');

  $export($export.S, 'Math', {
    imulh: function imulh(u, v) {
      var UINT16 = 0xffff,
          $u = +u,
          $v = +v,
          u0 = $u & UINT16,
          v0 = $v & UINT16,
          u1 = $u >> 16,
          v1 = $v >> 16,
          t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
      return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);
    }
  });
});
$__System.registerDynamic('112', ['16', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // https://gist.github.com/BrendanEich/4294d5c212a6d2254703
  var $export = $__require('16');

  $export($export.S, 'Math', {
    umulh: function umulh(u, v) {
      var UINT16 = 0xffff,
          $u = +u,
          $v = +v,
          u0 = $u & UINT16,
          v0 = $v & UINT16,
          u1 = $u >>> 16,
          v1 = $v >>> 16,
          t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);
      return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);
    }
  });
});
$__System.registerDynamic('113', ['114', '21', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var metadata = $__require('114'),
      anObject = $__require('21'),
      toMetaKey = metadata.key,
      ordinaryDefineOwnMetadata = metadata.set;

  metadata.exp({ defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {
      ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));
    } });
});
$__System.registerDynamic('115', ['114', '21', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var metadata = $__require('114'),
      anObject = $__require('21'),
      toMetaKey = metadata.key,
      getOrCreateMetadataMap = metadata.map,
      store = metadata.store;

  metadata.exp({ deleteMetadata: function deleteMetadata(metadataKey, target /*, targetKey */) {
      var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]),
          metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);
      if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;
      if (metadataMap.size) return true;
      var targetMetadata = store.get(target);
      targetMetadata['delete'](targetKey);
      return !!targetMetadata.size || store['delete'](target);
    } });
});
$__System.registerDynamic('116', ['114', '21', '33', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var metadata = $__require('114'),
      anObject = $__require('21'),
      getPrototypeOf = $__require('33'),
      ordinaryHasOwnMetadata = metadata.has,
      ordinaryGetOwnMetadata = metadata.get,
      toMetaKey = metadata.key;

  var ordinaryGetMetadata = function (MetadataKey, O, P) {
    var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
    if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);
    var parent = getPrototypeOf(O);
    return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;
  };

  metadata.exp({ getMetadata: function getMetadata(metadataKey, target /*, targetKey */) {
      return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
    } });
});
$__System.registerDynamic('117', ['118', 'd2', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var strong = $__require('118');

  // 23.2 Set Objects
  module.exports = $__require('d2')('Set', function (get) {
    return function Set() {
      return get(this, arguments.length > 0 ? arguments[0] : undefined);
    };
  }, {
    // 23.2.3.1 Set.prototype.add(value)
    add: function add(value) {
      return strong.def(this, value = value === 0 ? 0 : value, value);
    }
  }, strong);
});
$__System.registerDynamic('10b', ['cb', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var forOf = $__require('cb');

  module.exports = function (iter, ITERATOR) {
    var result = [];
    forOf(iter, false, result.push, result, ITERATOR);
    return result;
  };
});
$__System.registerDynamic('119', ['117', '10b', '114', '21', '33', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var Set = $__require('117'),
      from = $__require('10b'),
      metadata = $__require('114'),
      anObject = $__require('21'),
      getPrototypeOf = $__require('33'),
      ordinaryOwnMetadataKeys = metadata.keys,
      toMetaKey = metadata.key;

  var ordinaryMetadataKeys = function (O, P) {
    var oKeys = ordinaryOwnMetadataKeys(O, P),
        parent = getPrototypeOf(O);
    if (parent === null) return oKeys;
    var pKeys = ordinaryMetadataKeys(parent, P);
    return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;
  };

  metadata.exp({ getMetadataKeys: function getMetadataKeys(target /*, targetKey */) {
      return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
    } });
});
$__System.registerDynamic('11a', ['114', '21', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var metadata = $__require('114'),
      anObject = $__require('21'),
      ordinaryGetOwnMetadata = metadata.get,
      toMetaKey = metadata.key;

  metadata.exp({ getOwnMetadata: function getOwnMetadata(metadataKey, target /*, targetKey */) {
      return ordinaryGetOwnMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
    } });
});
$__System.registerDynamic('11b', ['114', '21', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var metadata = $__require('114'),
      anObject = $__require('21'),
      ordinaryOwnMetadataKeys = metadata.keys,
      toMetaKey = metadata.key;

  metadata.exp({ getOwnMetadataKeys: function getOwnMetadataKeys(target /*, targetKey */) {
      return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));
    } });
});
$__System.registerDynamic('11c', ['114', '21', '33', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var metadata = $__require('114'),
      anObject = $__require('21'),
      getPrototypeOf = $__require('33'),
      ordinaryHasOwnMetadata = metadata.has,
      toMetaKey = metadata.key;

  var ordinaryHasMetadata = function (MetadataKey, O, P) {
    var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);
    if (hasOwn) return true;
    var parent = getPrototypeOf(O);
    return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;
  };

  metadata.exp({ hasMetadata: function hasMetadata(metadataKey, target /*, targetKey */) {
      return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
    } });
});
$__System.registerDynamic('11d', ['114', '21', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var metadata = $__require('114'),
      anObject = $__require('21'),
      ordinaryHasOwnMetadata = metadata.has,
      toMetaKey = metadata.key;

  metadata.exp({ hasOwnMetadata: function hasOwnMetadata(metadataKey, target /*, targetKey */) {
      return ordinaryHasOwnMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));
    } });
});
$__System.registerDynamic('118', ['27', '24', 'cf', '9d', 'ca', '85', 'cb', '7d', '11e', 'bf', '15', '18', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var dP = $__require('27').f,
      create = $__require('24'),
      redefineAll = $__require('cf'),
      ctx = $__require('9d'),
      anInstance = $__require('ca'),
      defined = $__require('85'),
      forOf = $__require('cb'),
      $iterDefine = $__require('7d'),
      step = $__require('11e'),
      setSpecies = $__require('bf'),
      DESCRIPTORS = $__require('15'),
      fastKey = $__require('18').fastKey,
      SIZE = DESCRIPTORS ? '_s' : 'size';

  var getEntry = function (that, key) {
    // fast case
    var index = fastKey(key),
        entry;
    if (index !== 'F') return that._i[index];
    // frozen object case
    for (entry = that._f; entry; entry = entry.n) {
      if (entry.k == key) return entry;
    }
  };

  module.exports = {
    getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
      var C = wrapper(function (that, iterable) {
        anInstance(that, C, NAME, '_i');
        that._i = create(null); // index
        that._f = undefined; // first entry
        that._l = undefined; // last entry
        that[SIZE] = 0; // size
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
      });
      redefineAll(C.prototype, {
        // 23.1.3.1 Map.prototype.clear()
        // 23.2.3.2 Set.prototype.clear()
        clear: function clear() {
          for (var that = this, data = that._i, entry = that._f; entry; entry = entry.n) {
            entry.r = true;
            if (entry.p) entry.p = entry.p.n = undefined;
            delete data[entry.i];
          }
          that._f = that._l = undefined;
          that[SIZE] = 0;
        },
        // 23.1.3.3 Map.prototype.delete(key)
        // 23.2.3.4 Set.prototype.delete(value)
        'delete': function (key) {
          var that = this,
              entry = getEntry(that, key);
          if (entry) {
            var next = entry.n,
                prev = entry.p;
            delete that._i[entry.i];
            entry.r = true;
            if (prev) prev.n = next;
            if (next) next.p = prev;
            if (that._f == entry) that._f = next;
            if (that._l == entry) that._l = prev;
            that[SIZE]--;
          }return !!entry;
        },
        // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
        // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
        forEach: function forEach(callbackfn /*, that = undefined */) {
          anInstance(this, C, 'forEach');
          var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3),
              entry;
          while (entry = entry ? entry.n : this._f) {
            f(entry.v, entry.k, this);
            // revert to the last existing entry
            while (entry && entry.r) entry = entry.p;
          }
        },
        // 23.1.3.7 Map.prototype.has(key)
        // 23.2.3.7 Set.prototype.has(value)
        has: function has(key) {
          return !!getEntry(this, key);
        }
      });
      if (DESCRIPTORS) dP(C.prototype, 'size', {
        get: function () {
          return defined(this[SIZE]);
        }
      });
      return C;
    },
    def: function (that, key, value) {
      var entry = getEntry(that, key),
          prev,
          index;
      // change existing entry
      if (entry) {
        entry.v = value;
        // create new entry
      } else {
        that._l = entry = {
          i: index = fastKey(key, true), // <- index
          k: key, // <- key
          v: value, // <- value
          p: prev = that._l, // <- previous entry
          n: undefined, // <- next entry
          r: false // <- removed
        };
        if (!that._f) that._f = entry;
        if (prev) prev.n = entry;
        that[SIZE]++;
        // add to index
        if (index !== 'F') that._i[index] = entry;
      }return that;
    },
    getEntry: getEntry,
    setStrong: function (C, NAME, IS_MAP) {
      // add .keys, .values, .entries, [@@iterator]
      // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
      $iterDefine(C, NAME, function (iterated, kind) {
        this._t = iterated; // target
        this._k = kind; // kind
        this._l = undefined; // previous
      }, function () {
        var that = this,
            kind = that._k,
            entry = that._l;
        // revert to the last existing entry
        while (entry && entry.r) entry = entry.p;
        // get next entry
        if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {
          // or finish the iteration
          that._t = undefined;
          return step(1);
        }
        // return step by kind
        if (kind == 'keys') return step(0, entry.k);
        if (kind == 'values') return step(0, entry.v);
        return step(0, [entry.k, entry.v]);
      }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);

      // add [@@species], 23.1.2.2, 23.2.2.2
      setSpecies(NAME);
    }
  };
});
$__System.registerDynamic('11f', ['118', 'd2', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var strong = $__require('118');

  // 23.1 Map Objects
  module.exports = $__require('d2')('Map', function (get) {
    return function Map() {
      return get(this, arguments.length > 0 ? arguments[0] : undefined);
    };
  }, {
    // 23.1.3.6 Map.prototype.get(key)
    get: function get(key) {
      var entry = strong.getEntry(this, key);
      return entry && entry.v;
    },
    // 23.1.3.9 Map.prototype.set(key, value)
    set: function set(key, value) {
      return strong.def(this, key === 0 ? 0 : key, value);
    }
  }, strong, true);
});
$__System.registerDynamic("10", ["e"], true, function ($__require, exports, module) {
  var process = $__require("e");
  var global = this || self,
      GLOBAL = global;
  exports.f = Object.getOwnPropertySymbols;
});
$__System.registerDynamic('3f', ['c', '10', '11', '32', 'a5', '19', 'e'], true, function ($__require, exports, module) {
  'use strict';
  // 19.1.2.1 Object.assign(target, source, ...)

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var getKeys = $__require('c'),
      gOPS = $__require('10'),
      pIE = $__require('11'),
      toObject = $__require('32'),
      IObject = $__require('a5'),
      $assign = Object.assign;

  // should work with symbols and should have deterministic property order (V8 bug)
  module.exports = !$assign || $__require('19')(function () {
    var A = {},
        B = {},
        S = Symbol(),
        K = 'abcdefghijklmnopqrst';
    A[S] = 7;
    K.split('').forEach(function (k) {
      B[k] = k;
    });
    return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
  }) ? function assign(target, source) {
    // eslint-disable-line no-unused-vars
    var T = toObject(target),
        aLen = arguments.length,
        index = 1,
        getSymbols = gOPS.f,
        isEnum = pIE.f;
    while (aLen > index) {
      var S = IObject(arguments[index++]),
          keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S),
          length = keys.length,
          j = 0,
          key;
      while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];
    }return T;
  } : $assign;
});
$__System.registerDynamic('20', ['4f', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 7.2.2 IsArray(argument)
  var cof = $__require('4f');
  module.exports = Array.isArray || function isArray(arg) {
    return cof(arg) == 'Array';
  };
});
$__System.registerDynamic('120', ['37', '20', '1d', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var isObject = $__require('37'),
      isArray = $__require('20'),
      SPECIES = $__require('1d')('species');

  module.exports = function (original) {
    var C;
    if (isArray(original)) {
      C = original.constructor;
      // cross-realm fallback
      if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
      if (isObject(C)) {
        C = C[SPECIES];
        if (C === null) C = undefined;
      }
    }return C === undefined ? Array : C;
  };
});
$__System.registerDynamic('121', ['120', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 9.4.2.3 ArraySpeciesCreate(originalArray, length)
  var speciesConstructor = $__require('120');

  module.exports = function (original, length) {
    return new (speciesConstructor(original))(length);
  };
});
$__System.registerDynamic('ac', ['9d', 'a5', '32', '79', '121', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 0 -> Array#forEach
  // 1 -> Array#map
  // 2 -> Array#filter
  // 3 -> Array#some
  // 4 -> Array#every
  // 5 -> Array#find
  // 6 -> Array#findIndex
  var ctx = $__require('9d'),
      IObject = $__require('a5'),
      toObject = $__require('32'),
      toLength = $__require('79'),
      asc = $__require('121');
  module.exports = function (TYPE, $create) {
    var IS_MAP = TYPE == 1,
        IS_FILTER = TYPE == 2,
        IS_SOME = TYPE == 3,
        IS_EVERY = TYPE == 4,
        IS_FIND_INDEX = TYPE == 6,
        NO_HOLES = TYPE == 5 || IS_FIND_INDEX,
        create = $create || asc;
    return function ($this, callbackfn, that) {
      var O = toObject($this),
          self = IObject(O),
          f = ctx(callbackfn, that, 3),
          length = toLength(self.length),
          index = 0,
          result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined,
          val,
          res;
      for (; length > index; index++) if (NO_HOLES || index in self) {
        val = self[index];
        res = f(val, index, O);
        if (TYPE) {
          if (IS_MAP) result[index] = res; // map
          else if (res) switch (TYPE) {
              case 3:
                return true; // some
              case 5:
                return val; // find
              case 6:
                return index; // findIndex
              case 2:
                result.push(val); // filter
            } else if (IS_EVERY) return false; // every
        }
      }
      return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
    };
  };
});
$__System.registerDynamic('d1', ['cf', '18', '21', '37', 'ca', 'cb', 'ac', '14', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var redefineAll = $__require('cf'),
      getWeak = $__require('18').getWeak,
      anObject = $__require('21'),
      isObject = $__require('37'),
      anInstance = $__require('ca'),
      forOf = $__require('cb'),
      createArrayMethod = $__require('ac'),
      $has = $__require('14'),
      arrayFind = createArrayMethod(5),
      arrayFindIndex = createArrayMethod(6),
      id = 0;

  // fallback for uncaught frozen keys
  var uncaughtFrozenStore = function (that) {
    return that._l || (that._l = new UncaughtFrozenStore());
  };
  var UncaughtFrozenStore = function () {
    this.a = [];
  };
  var findUncaughtFrozen = function (store, key) {
    return arrayFind(store.a, function (it) {
      return it[0] === key;
    });
  };
  UncaughtFrozenStore.prototype = {
    get: function (key) {
      var entry = findUncaughtFrozen(this, key);
      if (entry) return entry[1];
    },
    has: function (key) {
      return !!findUncaughtFrozen(this, key);
    },
    set: function (key, value) {
      var entry = findUncaughtFrozen(this, key);
      if (entry) entry[1] = value;else this.a.push([key, value]);
    },
    'delete': function (key) {
      var index = arrayFindIndex(this.a, function (it) {
        return it[0] === key;
      });
      if (~index) this.a.splice(index, 1);
      return !!~index;
    }
  };

  module.exports = {
    getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {
      var C = wrapper(function (that, iterable) {
        anInstance(that, C, NAME, '_i');
        that._i = id++; // collection id
        that._l = undefined; // leak store for uncaught frozen objects
        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
      });
      redefineAll(C.prototype, {
        // 23.3.3.2 WeakMap.prototype.delete(key)
        // 23.4.3.3 WeakSet.prototype.delete(value)
        'delete': function (key) {
          if (!isObject(key)) return false;
          var data = getWeak(key);
          if (data === true) return uncaughtFrozenStore(this)['delete'](key);
          return data && $has(data, this._i) && delete data[this._i];
        },
        // 23.3.3.4 WeakMap.prototype.has(key)
        // 23.4.3.4 WeakSet.prototype.has(value)
        has: function has(key) {
          if (!isObject(key)) return false;
          var data = getWeak(key);
          if (data === true) return uncaughtFrozenStore(this).has(key);
          return data && $has(data, this._i);
        }
      });
      return C;
    },
    def: function (that, key, value) {
      var data = getWeak(anObject(key), true);
      if (data === true) uncaughtFrozenStore(that).set(key, value);else data[that._i] = value;
      return that;
    },
    ufstore: uncaughtFrozenStore
  };
});
$__System.registerDynamic('18', ['1c', '37', '14', '27', '19', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var META = $__require('1c')('meta'),
      isObject = $__require('37'),
      has = $__require('14'),
      setDesc = $__require('27').f,
      id = 0;
  var isExtensible = Object.isExtensible || function () {
    return true;
  };
  var FREEZE = !$__require('19')(function () {
    return isExtensible(Object.preventExtensions({}));
  });
  var setMeta = function (it) {
    setDesc(it, META, { value: {
        i: 'O' + ++id, // object ID
        w: {} // weak collections IDs
      } });
  };
  var fastKey = function (it, create) {
    // return primitive with prefix
    if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
    if (!has(it, META)) {
      // can't set metadata to uncaught frozen object
      if (!isExtensible(it)) return 'F';
      // not necessary to add metadata
      if (!create) return 'E';
      // add missing metadata
      setMeta(it);
      // return object ID
    }return it[META].i;
  };
  var getWeak = function (it, create) {
    if (!has(it, META)) {
      // can't set metadata to uncaught frozen object
      if (!isExtensible(it)) return true;
      // not necessary to add metadata
      if (!create) return false;
      // add missing metadata
      setMeta(it);
      // return hash weak collections IDs
    }return it[META].w;
  };
  // add metadata on freeze-family methods calling
  var onFreeze = function (it) {
    if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
    return it;
  };
  var meta = module.exports = {
    KEY: META,
    NEED: false,
    fastKey: fastKey,
    getWeak: getWeak,
    onFreeze: onFreeze
  };
});
$__System.registerDynamic('a2', ['1d', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var ITERATOR = $__require('1d')('iterator'),
      SAFE_CLOSING = false;

  try {
    var riter = [7][ITERATOR]();
    riter['return'] = function () {
      SAFE_CLOSING = true;
    };
    Array.from(riter, function () {
      throw 2;
    });
  } catch (e) {/* empty */}

  module.exports = function (exec, skipClosing) {
    if (!skipClosing && !SAFE_CLOSING) return false;
    var safe = false;
    try {
      var arr = [7],
          iter = arr[ITERATOR]();
      iter.next = function () {
        return { done: safe = true };
      };
      arr[ITERATOR] = function () {
        return iter;
      };
      exec(arr);
    } catch (e) {/* empty */}
    return safe;
  };
});
$__System.registerDynamic("11", ["e"], true, function ($__require, exports, module) {
  var process = $__require("e");
  var global = this || self,
      GLOBAL = global;
  exports.f = {}.propertyIsEnumerable;
});
$__System.registerDynamic('26', ['11', '23', 'd', '22', '14', '122', '15', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var pIE = $__require('11'),
      createDesc = $__require('23'),
      toIObject = $__require('d'),
      toPrimitive = $__require('22'),
      has = $__require('14'),
      IE8_DOM_DEFINE = $__require('122'),
      gOPD = Object.getOwnPropertyDescriptor;

  exports.f = $__require('15') ? gOPD : function getOwnPropertyDescriptor(O, P) {
    O = toIObject(O);
    P = toPrimitive(P, true);
    if (IE8_DOM_DEFINE) try {
      return gOPD(O, P);
    } catch (e) {/* empty */}
    if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
  };
});
$__System.registerDynamic('43', ['37', '21', '9d', '26', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // Works with __proto__ only. Old v8 can't work with null proto objects.
  /* eslint-disable no-proto */
  var isObject = $__require('37'),
      anObject = $__require('21');
  var check = function (O, proto) {
    anObject(O);
    if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
  };
  module.exports = {
    set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function (test, buggy, set) {
      try {
        set = $__require('9d')(Function.call, $__require('26').f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch (e) {
        buggy = true;
      }
      return function setPrototypeOf(O, proto) {
        check(O, proto);
        if (buggy) O.__proto__ = proto;else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
    check: check
  };
});
$__System.registerDynamic('50', ['37', '43', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var isObject = $__require('37'),
      setPrototypeOf = $__require('43').set;
  module.exports = function (that, target, C) {
    var P,
        S = target.constructor;
    if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {
      setPrototypeOf(that, P);
    }return that;
  };
});
$__System.registerDynamic('d2', ['13', '16', '17', 'cf', '18', 'cb', 'ca', '37', '19', 'a2', '1b', '50', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var global = $__require('13'),
      $export = $__require('16'),
      redefine = $__require('17'),
      redefineAll = $__require('cf'),
      meta = $__require('18'),
      forOf = $__require('cb'),
      anInstance = $__require('ca'),
      isObject = $__require('37'),
      fails = $__require('19'),
      $iterDetect = $__require('a2'),
      setToStringTag = $__require('1b'),
      inheritIfRequired = $__require('50');

  module.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {
    var Base = global[NAME],
        C = Base,
        ADDER = IS_MAP ? 'set' : 'add',
        proto = C && C.prototype,
        O = {};
    var fixMethod = function (KEY) {
      var fn = proto[KEY];
      redefine(proto, KEY, KEY == 'delete' ? function (a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'has' ? function has(a) {
        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'get' ? function get(a) {
        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);
      } : KEY == 'add' ? function add(a) {
        fn.call(this, a === 0 ? 0 : a);return this;
      } : function set(a, b) {
        fn.call(this, a === 0 ? 0 : a, b);return this;
      });
    };
    if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {
      new C().entries().next();
    }))) {
      // create collection constructor
      C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
      redefineAll(C.prototype, methods);
      meta.NEED = true;
    } else {
      var instance = new C()
      // early implementations not supports chaining
      ,
          HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance
      // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false
      ,
          THROWS_ON_PRIMITIVES = fails(function () {
        instance.has(1);
      })
      // most early implementations doesn't supports iterables, most modern - not close it correctly
      ,
          ACCEPT_ITERABLES = $iterDetect(function (iter) {
        new C(iter);
      }) // eslint-disable-line no-new
      // for early implementations -0 and +0 not the same
      ,
          BUGGY_ZERO = !IS_WEAK && fails(function () {
        // V8 ~ Chromium 42- fails only with 5+ elements
        var $instance = new C(),
            index = 5;
        while (index--) $instance[ADDER](index, index);
        return !$instance.has(-0);
      });
      if (!ACCEPT_ITERABLES) {
        C = wrapper(function (target, iterable) {
          anInstance(target, C, NAME);
          var that = inheritIfRequired(new Base(), target, C);
          if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);
          return that;
        });
        C.prototype = proto;
        proto.constructor = C;
      }
      if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {
        fixMethod('delete');
        fixMethod('has');
        IS_MAP && fixMethod('get');
      }
      if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);
      // weak collections should not contains .clear method
      if (IS_WEAK && proto.clear) delete proto.clear;
    }

    setToStringTag(C, NAME);

    O[NAME] = C;
    $export($export.G + $export.W + $export.F * (C != Base), O);

    if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);

    return C;
  };
});
$__System.registerDynamic('123', ['ac', '17', '18', '3f', 'd1', '37', 'd2', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var each = $__require('ac')(0),
      redefine = $__require('17'),
      meta = $__require('18'),
      assign = $__require('3f'),
      weak = $__require('d1'),
      isObject = $__require('37'),
      getWeak = meta.getWeak,
      isExtensible = Object.isExtensible,
      uncaughtFrozenStore = weak.ufstore,
      tmp = {},
      InternalMap;

  var wrapper = function (get) {
    return function WeakMap() {
      return get(this, arguments.length > 0 ? arguments[0] : undefined);
    };
  };

  var methods = {
    // 23.3.3.3 WeakMap.prototype.get(key)
    get: function get(key) {
      if (isObject(key)) {
        var data = getWeak(key);
        if (data === true) return uncaughtFrozenStore(this).get(key);
        return data ? data[this._i] : undefined;
      }
    },
    // 23.3.3.5 WeakMap.prototype.set(key, value)
    set: function set(key, value) {
      return weak.def(this, key, value);
    }
  };

  // 23.3 WeakMap Objects
  var $WeakMap = module.exports = $__require('d2')('WeakMap', wrapper, methods, weak, true, true);

  // IE11 WeakMap frozen keys fix
  if (new $WeakMap().set((Object.freeze || Object)(tmp), 7).get(tmp) != 7) {
    InternalMap = weak.getConstructor(wrapper);
    assign(InternalMap.prototype, methods);
    meta.NEED = true;
    each(['delete', 'has', 'get', 'set'], function (key) {
      var proto = $WeakMap.prototype,
          method = proto[key];
      redefine(proto, key, function (a, b) {
        // store frozen objects on internal weakmap shim
        if (isObject(a) && !isExtensible(a)) {
          if (!this._f) this._f = new InternalMap();
          var result = this._f[key](a, b);
          return key == 'set' ? this : result;
          // store all the rest on native weakmap
        }return method.call(this, a, b);
      });
    });
  }
});
$__System.registerDynamic('114', ['11f', '16', '1a', '123', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var Map = $__require('11f'),
      $export = $__require('16'),
      shared = $__require('1a')('metadata'),
      store = shared.store || (shared.store = new ($__require('123'))());

  var getOrCreateMetadataMap = function (target, targetKey, create) {
    var targetMetadata = store.get(target);
    if (!targetMetadata) {
      if (!create) return undefined;
      store.set(target, targetMetadata = new Map());
    }
    var keyMetadata = targetMetadata.get(targetKey);
    if (!keyMetadata) {
      if (!create) return undefined;
      targetMetadata.set(targetKey, keyMetadata = new Map());
    }return keyMetadata;
  };
  var ordinaryHasOwnMetadata = function (MetadataKey, O, P) {
    var metadataMap = getOrCreateMetadataMap(O, P, false);
    return metadataMap === undefined ? false : metadataMap.has(MetadataKey);
  };
  var ordinaryGetOwnMetadata = function (MetadataKey, O, P) {
    var metadataMap = getOrCreateMetadataMap(O, P, false);
    return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);
  };
  var ordinaryDefineOwnMetadata = function (MetadataKey, MetadataValue, O, P) {
    getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);
  };
  var ordinaryOwnMetadataKeys = function (target, targetKey) {
    var metadataMap = getOrCreateMetadataMap(target, targetKey, false),
        keys = [];
    if (metadataMap) metadataMap.forEach(function (_, key) {
      keys.push(key);
    });
    return keys;
  };
  var toMetaKey = function (it) {
    return it === undefined || typeof it == 'symbol' ? it : String(it);
  };
  var exp = function (O) {
    $export($export.S, 'Reflect', O);
  };

  module.exports = {
    store: store,
    map: getOrCreateMetadataMap,
    has: ordinaryHasOwnMetadata,
    get: ordinaryGetOwnMetadata,
    set: ordinaryDefineOwnMetadata,
    keys: ordinaryOwnMetadataKeys,
    key: toMetaKey,
    exp: exp
  };
});
$__System.registerDynamic('124', ['114', '21', 'aa', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var metadata = $__require('114'),
      anObject = $__require('21'),
      aFunction = $__require('aa'),
      toMetaKey = metadata.key,
      ordinaryDefineOwnMetadata = metadata.set;

  metadata.exp({ metadata: function metadata(metadataKey, metadataValue) {
      return function decorator(target, targetKey) {
        ordinaryDefineOwnMetadata(metadataKey, metadataValue, (targetKey !== undefined ? anObject : aFunction)(target), toMetaKey(targetKey));
      };
    } });
});
$__System.registerDynamic('125', ['16', 'ce', '13', '4f', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask
  var $export = $__require('16'),
      microtask = $__require('ce')(),
      process = $__require('13').process,
      isNode = $__require('4f')(process) == 'process';

  $export($export.G, {
    asap: function asap(fn) {
      var domain = isNode && process.domain;
      microtask(domain ? domain.bind(fn) : fn);
    }
  });
});
$__System.registerDynamic('ce', ['13', 'cd', '4f', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var global = $__require('13'),
      macrotask = $__require('cd').set,
      Observer = global.MutationObserver || global.WebKitMutationObserver,
      process = global.process,
      Promise = global.Promise,
      isNode = $__require('4f')(process) == 'process';

  module.exports = function () {
    var head, last, notify;

    var flush = function () {
      var parent, fn;
      if (isNode && (parent = process.domain)) parent.exit();
      while (head) {
        fn = head.fn;
        head = head.next;
        try {
          fn();
        } catch (e) {
          if (head) notify();else last = undefined;
          throw e;
        }
      }last = undefined;
      if (parent) parent.enter();
    };

    // Node.js
    if (isNode) {
      notify = function () {
        process.nextTick(flush);
      };
      // browsers with MutationObserver
    } else if (Observer) {
      var toggle = true,
          node = document.createTextNode('');
      new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
      notify = function () {
        node.data = toggle = !toggle;
      };
      // environments with maybe non-completely correct, but existent Promise
    } else if (Promise && Promise.resolve) {
      var promise = Promise.resolve();
      notify = function () {
        promise.then(flush);
      };
      // for other environments - macrotask based on:
      // - setImmediate
      // - MessageChannel
      // - window.postMessag
      // - onreadystatechange
      // - setTimeout
    } else {
      notify = function () {
        // strange IE + webpack dev server bug - use .call(global)
        macrotask.call(global, flush);
      };
    }

    return function (fn) {
      var task = { fn: fn, next: undefined };
      if (last) last.next = task;
      if (!head) {
        head = task;
        notify();
      }last = task;
    };
  };
});
$__System.registerDynamic('ca', ['e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  module.exports = function (it, Constructor, name, forbiddenField) {
    if (!(it instanceof Constructor) || forbiddenField !== undefined && forbiddenField in it) {
      throw TypeError(name + ': incorrect invocation!');
    }return it;
  };
});
$__System.registerDynamic('cf', ['17', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var redefine = $__require('17');
  module.exports = function (target, src, safe) {
    for (var key in src) redefine(target, key, src[key], safe);
    return target;
  };
});
$__System.registerDynamic('9e', ['21', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // call something on iterator step with safe closing on error
  var anObject = $__require('21');
  module.exports = function (iterator, fn, value, entries) {
    try {
      return entries ? fn(anObject(value)[0], value[1]) : fn(value);
      // 7.4.6 IteratorClose(iterator, completion)
    } catch (e) {
      var ret = iterator['return'];
      if (ret !== undefined) anObject(ret.call(iterator));
      throw e;
    }
  };
});
$__System.registerDynamic('9f', ['e1', '1d', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // check on default Array iterator
  var Iterators = $__require('e1'),
      ITERATOR = $__require('1d')('iterator'),
      ArrayProto = Array.prototype;

  module.exports = function (it) {
    return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
  };
});
$__System.registerDynamic('45', ['4f', '1d', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // getting tag from 19.1.3.6 Object.prototype.toString()
  var cof = $__require('4f'),
      TAG = $__require('1d')('toStringTag')
  // ES3 wrong here
  ,
      ARG = cof(function () {
    return arguments;
  }()) == 'Arguments';

  // fallback for IE11 Script Access Denied error
  var tryGet = function (it, key) {
    try {
      return it[key];
    } catch (e) {/* empty */}
  };

  module.exports = function (it) {
    var O, T, B;
    return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
  };
});
$__System.registerDynamic('a1', ['45', '1d', 'e1', '3c', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var classof = $__require('45'),
      ITERATOR = $__require('1d')('iterator'),
      Iterators = $__require('e1');
  module.exports = $__require('3c').getIteratorMethod = function (it) {
    if (it != undefined) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
  };
});
$__System.registerDynamic('cb', ['9d', '9e', '9f', '21', '79', 'a1', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var ctx = $__require('9d'),
      call = $__require('9e'),
      isArrayIter = $__require('9f'),
      anObject = $__require('21'),
      toLength = $__require('79'),
      getIterFn = $__require('a1'),
      BREAK = {},
      RETURN = {};
  var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
    var iterFn = ITERATOR ? function () {
      return iterable;
    } : getIterFn(iterable),
        f = ctx(fn, that, entries ? 2 : 1),
        index = 0,
        length,
        step,
        iterator,
        result;
    if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
    // fast case for arrays with default iterator
    if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {
      result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
      if (result === BREAK || result === RETURN) return result;
    } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
      result = call(iterator, f, step.value, entries);
      if (result === BREAK || result === RETURN) return result;
    }
  };
  exports.BREAK = BREAK;
  exports.RETURN = RETURN;
});
$__System.registerDynamic('bf', ['13', '27', '15', '1d', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var global = $__require('13'),
      dP = $__require('27'),
      DESCRIPTORS = $__require('15'),
      SPECIES = $__require('1d')('species');

  module.exports = function (KEY) {
    var C = global[KEY];
    if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
      configurable: true,
      get: function () {
        return this;
      }
    });
  };
});
$__System.registerDynamic('126', ['16', '13', '3c', 'ce', '1d', 'aa', '21', 'ca', 'cf', '2a', 'cb', 'bf', 'e'], true, function ($__require, exports, module) {
  'use strict';
  // https://github.com/zenparsing/es-observable

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      global = $__require('13'),
      core = $__require('3c'),
      microtask = $__require('ce')(),
      OBSERVABLE = $__require('1d')('observable'),
      aFunction = $__require('aa'),
      anObject = $__require('21'),
      anInstance = $__require('ca'),
      redefineAll = $__require('cf'),
      hide = $__require('2a'),
      forOf = $__require('cb'),
      RETURN = forOf.RETURN;

  var getMethod = function (fn) {
    return fn == null ? undefined : aFunction(fn);
  };

  var cleanupSubscription = function (subscription) {
    var cleanup = subscription._c;
    if (cleanup) {
      subscription._c = undefined;
      cleanup();
    }
  };

  var subscriptionClosed = function (subscription) {
    return subscription._o === undefined;
  };

  var closeSubscription = function (subscription) {
    if (!subscriptionClosed(subscription)) {
      subscription._o = undefined;
      cleanupSubscription(subscription);
    }
  };

  var Subscription = function (observer, subscriber) {
    anObject(observer);
    this._c = undefined;
    this._o = observer;
    observer = new SubscriptionObserver(this);
    try {
      var cleanup = subscriber(observer),
          subscription = cleanup;
      if (cleanup != null) {
        if (typeof cleanup.unsubscribe === 'function') cleanup = function () {
          subscription.unsubscribe();
        };else aFunction(cleanup);
        this._c = cleanup;
      }
    } catch (e) {
      observer.error(e);
      return;
    }if (subscriptionClosed(this)) cleanupSubscription(this);
  };

  Subscription.prototype = redefineAll({}, {
    unsubscribe: function unsubscribe() {
      closeSubscription(this);
    }
  });

  var SubscriptionObserver = function (subscription) {
    this._s = subscription;
  };

  SubscriptionObserver.prototype = redefineAll({}, {
    next: function next(value) {
      var subscription = this._s;
      if (!subscriptionClosed(subscription)) {
        var observer = subscription._o;
        try {
          var m = getMethod(observer.next);
          if (m) return m.call(observer, value);
        } catch (e) {
          try {
            closeSubscription(subscription);
          } finally {
            throw e;
          }
        }
      }
    },
    error: function error(value) {
      var subscription = this._s;
      if (subscriptionClosed(subscription)) throw value;
      var observer = subscription._o;
      subscription._o = undefined;
      try {
        var m = getMethod(observer.error);
        if (!m) throw value;
        value = m.call(observer, value);
      } catch (e) {
        try {
          cleanupSubscription(subscription);
        } finally {
          throw e;
        }
      }cleanupSubscription(subscription);
      return value;
    },
    complete: function complete(value) {
      var subscription = this._s;
      if (!subscriptionClosed(subscription)) {
        var observer = subscription._o;
        subscription._o = undefined;
        try {
          var m = getMethod(observer.complete);
          value = m ? m.call(observer, value) : undefined;
        } catch (e) {
          try {
            cleanupSubscription(subscription);
          } finally {
            throw e;
          }
        }cleanupSubscription(subscription);
        return value;
      }
    }
  });

  var $Observable = function Observable(subscriber) {
    anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);
  };

  redefineAll($Observable.prototype, {
    subscribe: function subscribe(observer) {
      return new Subscription(observer, this._f);
    },
    forEach: function forEach(fn) {
      var that = this;
      return new (core.Promise || global.Promise)(function (resolve, reject) {
        aFunction(fn);
        var subscription = that.subscribe({
          next: function (value) {
            try {
              return fn(value);
            } catch (e) {
              reject(e);
              subscription.unsubscribe();
            }
          },
          error: reject,
          complete: resolve
        });
      });
    }
  });

  redefineAll($Observable, {
    from: function from(x) {
      var C = typeof this === 'function' ? this : $Observable;
      var method = getMethod(anObject(x)[OBSERVABLE]);
      if (method) {
        var observable = anObject(method.call(x));
        return observable.constructor === C ? observable : new C(function (observer) {
          return observable.subscribe(observer);
        });
      }
      return new C(function (observer) {
        var done = false;
        microtask(function () {
          if (!done) {
            try {
              if (forOf(x, false, function (it) {
                observer.next(it);
                if (done) return RETURN;
              }) === RETURN) return;
            } catch (e) {
              if (done) throw e;
              observer.error(e);
              return;
            }observer.complete();
          }
        });
        return function () {
          done = true;
        };
      });
    },
    of: function of() {
      for (var i = 0, l = arguments.length, items = Array(l); i < l;) items[i] = arguments[i++];
      return new (typeof this === 'function' ? this : $Observable)(function (observer) {
        var done = false;
        microtask(function () {
          if (!done) {
            for (var i = 0; i < items.length; ++i) {
              observer.next(items[i]);
              if (done) return;
            }observer.complete();
          }
        });
        return function () {
          done = true;
        };
      });
    }
  });

  hide($Observable.prototype, OBSERVABLE, function () {
    return this;
  });

  $export($export.G, { Observable: $Observable });

  $__require('bf')('Observable');
});
$__System.registerDynamic('127', ['13', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  module.exports = $__require('13');
});
$__System.registerDynamic('128', ['127', 'e4', 'aa', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var path = $__require('127'),
      invoke = $__require('e4'),
      aFunction = $__require('aa');
  module.exports = function () /* ...pargs */{
    var fn = aFunction(this),
        length = arguments.length,
        pargs = Array(length),
        i = 0,
        _ = path._,
        holder = false;
    while (length > i) if ((pargs[i] = arguments[i++]) === _) holder = true;
    return function () /* ...args */{
      var that = this,
          aLen = arguments.length,
          j = 0,
          k = 0,
          args;
      if (!holder && !aLen) return invoke(fn, pargs, that);
      args = pargs.slice();
      if (holder) for (; length > j; j++) if (args[j] === _) args[j] = arguments[k++];
      while (aLen > k) args.push(arguments[k++]);
      return invoke(fn, args, that);
    };
  };
});
$__System.registerDynamic('129', ['13', '16', 'e4', '128', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // ie9- setTimeout & setInterval additional parameters fix
  var global = $__require('13'),
      $export = $__require('16'),
      invoke = $__require('e4'),
      partial = $__require('128'),
      navigator = global.navigator,
      MSIE = !!navigator && /MSIE .\./.test(navigator.userAgent); // <- dirty ie9- check
  var wrap = function (set) {
    return MSIE ? function (fn, time /*, ...args */) {
      return set(invoke(partial, [].slice.call(arguments, 2), typeof fn == 'function' ? fn : Function(fn)), time);
    } : set;
  };
  $export($export.G + $export.B + $export.F * MSIE, {
    setTimeout: wrap(global.setTimeout),
    setInterval: wrap(global.setInterval)
  });
});
$__System.registerDynamic("e4", ["e"], true, function ($__require, exports, module) {
                  var process = $__require("e");
                  var global = this || self,
                      GLOBAL = global;
                  // fast apply, http://jsperf.lnkit.com/fast-apply/5
                  module.exports = function (fn, args, that) {
                                    var un = that === undefined;
                                    switch (args.length) {
                                                      case 0:
                                                                        return un ? fn() : fn.call(that);
                                                      case 1:
                                                                        return un ? fn(args[0]) : fn.call(that, args[0]);
                                                      case 2:
                                                                        return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);
                                                      case 3:
                                                                        return un ? fn(args[0], args[1], args[2]) : fn.call(that, args[0], args[1], args[2]);
                                                      case 4:
                                                                        return un ? fn(args[0], args[1], args[2], args[3]) : fn.call(that, args[0], args[1], args[2], args[3]);
                                    }return fn.apply(that, args);
                  };
});
$__System.registerDynamic('cd', ['9d', 'e4', 'a8', '12a', '13', '4f', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var ctx = $__require('9d'),
      invoke = $__require('e4'),
      html = $__require('a8'),
      cel = $__require('12a'),
      global = $__require('13'),
      process = global.process,
      setTask = global.setImmediate,
      clearTask = global.clearImmediate,
      MessageChannel = global.MessageChannel,
      counter = 0,
      queue = {},
      ONREADYSTATECHANGE = 'onreadystatechange',
      defer,
      channel,
      port;
  var run = function () {
    var id = +this;
    if (queue.hasOwnProperty(id)) {
      var fn = queue[id];
      delete queue[id];
      fn();
    }
  };
  var listener = function (event) {
    run.call(event.data);
  };
  // Node.js 0.9+ & IE10+ has setImmediate, otherwise:
  if (!setTask || !clearTask) {
    setTask = function setImmediate(fn) {
      var args = [],
          i = 1;
      while (arguments.length > i) args.push(arguments[i++]);
      queue[++counter] = function () {
        invoke(typeof fn == 'function' ? fn : Function(fn), args);
      };
      defer(counter);
      return counter;
    };
    clearTask = function clearImmediate(id) {
      delete queue[id];
    };
    // Node.js 0.8-
    if ($__require('4f')(process) == 'process') {
      defer = function (id) {
        process.nextTick(ctx(run, id, 1));
      };
      // Browsers with MessageChannel, includes WebWorkers
    } else if (MessageChannel) {
      channel = new MessageChannel();
      port = channel.port2;
      channel.port1.onmessage = listener;
      defer = ctx(port.postMessage, port, 1);
      // Browsers with postMessage, skip WebWorkers
      // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
    } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
      defer = function (id) {
        global.postMessage(id + '', '*');
      };
      global.addEventListener('message', listener, false);
      // IE8-
    } else if (ONREADYSTATECHANGE in cel('script')) {
      defer = function (id) {
        html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {
          html.removeChild(this);
          run.call(id);
        };
      };
      // Rest old browsers
    } else {
      defer = function (id) {
        setTimeout(ctx(run, id, 1), 0);
      };
    }
  }
  module.exports = {
    set: setTask,
    clear: clearTask
  };
});
$__System.registerDynamic('12b', ['16', 'cd', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $export = $__require('16'),
      $task = $__require('cd');
  $export($export.G + $export.B, {
    setImmediate: $task.set,
    clearImmediate: $task.clear
  });
});
$__System.registerDynamic('b9', ['1d', '2a', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 22.1.3.31 Array.prototype[@@unscopables]
  var UNSCOPABLES = $__require('1d')('unscopables'),
      ArrayProto = Array.prototype;
  if (ArrayProto[UNSCOPABLES] == undefined) $__require('2a')(ArrayProto, UNSCOPABLES, {});
  module.exports = function (key) {
    ArrayProto[UNSCOPABLES][key] = true;
  };
});
$__System.registerDynamic("11e", ["e"], true, function ($__require, exports, module) {
  var process = $__require("e");
  var global = this || self,
      GLOBAL = global;
  module.exports = function (done, value) {
    return { value: value, done: !!done };
  };
});
$__System.registerDynamic("29", ["e"], true, function ($__require, exports, module) {
  var process = $__require("e");
  var global = this || self,
      GLOBAL = global;
  module.exports = false;
});
$__System.registerDynamic("4f", ["e"], true, function ($__require, exports, module) {
  var process = $__require("e");
  var global = this || self,
      GLOBAL = global;
  var toString = {}.toString;

  module.exports = function (it) {
    return toString.call(it).slice(8, -1);
  };
});
$__System.registerDynamic('a5', ['4f', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // fallback for non-array-like ES3 and non-enumerable old V8 strings
  var cof = $__require('4f');
  module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
    return cof(it) == 'String' ? it.split('') : Object(it);
  };
});
$__System.registerDynamic('d', ['a5', '85', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // to indexed object, toObject with fallback for non-array-like ES3 strings
  var IObject = $__require('a5'),
      defined = $__require('85');
  module.exports = function (it) {
    return IObject(defined(it));
  };
});
$__System.registerDynamic('79', ['53', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 7.1.15 ToLength
  var toInteger = $__require('53'),
      min = Math.min;
  module.exports = function (it) {
    return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
  };
});
$__System.registerDynamic("53", ["e"], true, function ($__require, exports, module) {
  var process = $__require("e");
  var global = this || self,
      GLOBAL = global;
  // 7.1.4 ToInteger
  var ceil = Math.ceil,
      floor = Math.floor;
  module.exports = function (it) {
    return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
  };
});
$__System.registerDynamic('77', ['53', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var toInteger = $__require('53'),
      max = Math.max,
      min = Math.min;
  module.exports = function (index, length) {
    index = toInteger(index);
    return index < 0 ? max(index + length, 0) : min(index, length);
  };
});
$__System.registerDynamic('b5', ['d', '79', '77', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // false -> Array#indexOf
  // true  -> Array#includes
  var toIObject = $__require('d'),
      toLength = $__require('79'),
      toIndex = $__require('77');
  module.exports = function (IS_INCLUDES) {
    return function ($this, el, fromIndex) {
      var O = toIObject($this),
          length = toLength(O.length),
          index = toIndex(fromIndex, length),
          value;
      // Array#includes uses SameValueZero equality algorithm
      if (IS_INCLUDES && el != el) while (length > index) {
        value = O[index++];
        if (value != value) return true;
        // Array#toIndex ignores holes, Array#includes - not
      } else for (; length > index; index++) if (IS_INCLUDES || index in O) {
        if (O[index] === el) return IS_INCLUDES || index || 0;
      }return !IS_INCLUDES && -1;
    };
  };
});
$__System.registerDynamic('fe', ['14', 'd', 'b5', '12c', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var has = $__require('14'),
      toIObject = $__require('d'),
      arrayIndexOf = $__require('b5')(false),
      IE_PROTO = $__require('12c')('IE_PROTO');

  module.exports = function (object, names) {
    var O = toIObject(object),
        i = 0,
        result = [],
        key;
    for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);
    // Don't enum bug & hidden keys
    while (names.length > i) if (has(O, key = names[i++])) {
      ~arrayIndexOf(result, key) || result.push(key);
    }
    return result;
  };
});
$__System.registerDynamic('c', ['fe', 'ff', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 19.1.2.14 / 15.2.3.14 Object.keys(O)
  var $keys = $__require('fe'),
      enumBugKeys = $__require('ff');

  module.exports = Object.keys || function keys(O) {
    return $keys(O, enumBugKeys);
  };
});
$__System.registerDynamic('2e', ['27', '21', 'c', '15', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var dP = $__require('27'),
      anObject = $__require('21'),
      getKeys = $__require('c');

  module.exports = $__require('15') ? Object.defineProperties : function defineProperties(O, Properties) {
    anObject(O);
    var keys = getKeys(Properties),
        length = keys.length,
        i = 0,
        P;
    while (length > i) dP.f(O, P = keys[i++], Properties[P]);
    return O;
  };
});
$__System.registerDynamic('ff', ['e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // IE 8- don't enum bug keys
  module.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');
});
$__System.registerDynamic('a8', ['13', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  module.exports = $__require('13').document && document.documentElement;
});
$__System.registerDynamic('24', ['21', '2e', 'ff', '12c', '12a', 'a8', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
  var anObject = $__require('21'),
      dPs = $__require('2e'),
      enumBugKeys = $__require('ff'),
      IE_PROTO = $__require('12c')('IE_PROTO'),
      Empty = function () {/* empty */},
      PROTOTYPE = 'prototype';

  // Create object with fake `null` prototype: use iframe Object with cleared prototype
  var createDict = function () {
    // Thrash, waste and sodomy: IE GC bug
    var iframe = $__require('12a')('iframe'),
        i = enumBugKeys.length,
        lt = '<',
        gt = '>',
        iframeDocument;
    iframe.style.display = 'none';
    $__require('a8').appendChild(iframe);
    iframe.src = 'javascript:'; // eslint-disable-line no-script-url
    // createDict = iframe.contentWindow.Object;
    // html.removeChild(iframe);
    iframeDocument = iframe.contentWindow.document;
    iframeDocument.open();
    iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
    iframeDocument.close();
    createDict = iframeDocument.F;
    while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];
    return createDict();
  };

  module.exports = Object.create || function create(O, Properties) {
    var result;
    if (O !== null) {
      Empty[PROTOTYPE] = anObject(O);
      result = new Empty();
      Empty[PROTOTYPE] = null;
      // add "__proto__" for Object.getPrototypeOf polyfill
      result[IE_PROTO] = O;
    } else result = createDict();
    return Properties === undefined ? result : dPs(result, Properties);
  };
});
$__System.registerDynamic('e9', ['24', '23', '1b', '2a', '1d', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var create = $__require('24'),
      descriptor = $__require('23'),
      setToStringTag = $__require('1b'),
      IteratorPrototype = {};

  // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
  $__require('2a')(IteratorPrototype, $__require('1d')('iterator'), function () {
    return this;
  });

  module.exports = function (Constructor, NAME, next) {
    Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
    setToStringTag(Constructor, NAME + ' Iterator');
  };
});
$__System.registerDynamic('1b', ['27', '14', '1d', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var def = $__require('27').f,
      has = $__require('14'),
      TAG = $__require('1d')('toStringTag');

  module.exports = function (it, tag, stat) {
    if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
  };
});
$__System.registerDynamic("85", ["e"], true, function ($__require, exports, module) {
  var process = $__require("e");
  var global = this || self,
      GLOBAL = global;
  // 7.2.1 RequireObjectCoercible(argument)
  module.exports = function (it) {
    if (it == undefined) throw TypeError("Can't call method on  " + it);
    return it;
  };
});
$__System.registerDynamic('32', ['85', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 7.1.13 ToObject(argument)
  var defined = $__require('85');
  module.exports = function (it) {
    return Object(defined(it));
  };
});
$__System.registerDynamic('12c', ['1a', '1c', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var shared = $__require('1a')('keys'),
      uid = $__require('1c');
  module.exports = function (key) {
    return shared[key] || (shared[key] = uid(key));
  };
});
$__System.registerDynamic('33', ['14', '32', '12c', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
  var has = $__require('14'),
      toObject = $__require('32'),
      IE_PROTO = $__require('12c')('IE_PROTO'),
      ObjectProto = Object.prototype;

  module.exports = Object.getPrototypeOf || function (O) {
    O = toObject(O);
    if (has(O, IE_PROTO)) return O[IE_PROTO];
    if (typeof O.constructor == 'function' && O instanceof O.constructor) {
      return O.constructor.prototype;
    }return O instanceof Object ? ObjectProto : null;
  };
});
$__System.registerDynamic('7d', ['29', '16', '17', '2a', '14', 'e1', 'e9', '1b', '33', '1d', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var LIBRARY = $__require('29'),
      $export = $__require('16'),
      redefine = $__require('17'),
      hide = $__require('2a'),
      has = $__require('14'),
      Iterators = $__require('e1'),
      $iterCreate = $__require('e9'),
      setToStringTag = $__require('1b'),
      getPrototypeOf = $__require('33'),
      ITERATOR = $__require('1d')('iterator'),
      BUGGY = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
  ,
      FF_ITERATOR = '@@iterator',
      KEYS = 'keys',
      VALUES = 'values';

  var returnThis = function () {
    return this;
  };

  module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
    $iterCreate(Constructor, NAME, next);
    var getMethod = function (kind) {
      if (!BUGGY && kind in proto) return proto[kind];
      switch (kind) {
        case KEYS:
          return function keys() {
            return new Constructor(this, kind);
          };
        case VALUES:
          return function values() {
            return new Constructor(this, kind);
          };
      }return function entries() {
        return new Constructor(this, kind);
      };
    };
    var TAG = NAME + ' Iterator',
        DEF_VALUES = DEFAULT == VALUES,
        VALUES_BUG = false,
        proto = Base.prototype,
        $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT],
        $default = $native || getMethod(DEFAULT),
        $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined,
        $anyNative = NAME == 'Array' ? proto.entries || $native : $native,
        methods,
        key,
        IteratorPrototype;
    // Fix native
    if ($anyNative) {
      IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
      if (IteratorPrototype !== Object.prototype) {
        // Set @@toStringTag to native iterators
        setToStringTag(IteratorPrototype, TAG, true);
        // fix for some old engines
        if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
      }
    }
    // fix Array#{values, @@iterator}.name in V8 / FF
    if (DEF_VALUES && $native && $native.name !== VALUES) {
      VALUES_BUG = true;
      $default = function values() {
        return $native.call(this);
      };
    }
    // Define iterator
    if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
      hide(proto, ITERATOR, $default);
    }
    // Plug for library
    Iterators[NAME] = $default;
    Iterators[TAG] = returnThis;
    if (DEFAULT) {
      methods = {
        values: DEF_VALUES ? $default : getMethod(VALUES),
        keys: IS_SET ? $default : getMethod(KEYS),
        entries: $entries
      };
      if (FORCED) for (key in methods) {
        if (!(key in proto)) redefine(proto, key, methods[key]);
      } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
    }
    return methods;
  };
});
$__System.registerDynamic('e0', ['b9', '11e', 'e1', 'd', '7d', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var addToUnscopables = $__require('b9'),
      step = $__require('11e'),
      Iterators = $__require('e1'),
      toIObject = $__require('d');

  // 22.1.3.4 Array.prototype.entries()
  // 22.1.3.13 Array.prototype.keys()
  // 22.1.3.29 Array.prototype.values()
  // 22.1.3.30 Array.prototype[@@iterator]()
  module.exports = $__require('7d')(Array, 'Array', function (iterated, kind) {
    this._t = toIObject(iterated); // target
    this._i = 0; // next index
    this._k = kind; // kind
    // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
  }, function () {
    var O = this._t,
        kind = this._k,
        index = this._i++;
    if (!O || index >= O.length) {
      this._t = undefined;
      return step(1);
    }
    if (kind == 'keys') return step(0, index);
    if (kind == 'values') return step(0, O[index]);
    return step(0, [index, O[index]]);
  }, 'values');

  // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
  Iterators.Arguments = Iterators.Array;

  addToUnscopables('keys');
  addToUnscopables('values');
  addToUnscopables('entries');
});
$__System.registerDynamic("e1", ["e"], true, function ($__require, exports, module) {
  var process = $__require("e");
  var global = this || self,
      GLOBAL = global;
  module.exports = {};
});
$__System.registerDynamic('1a', ['13', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var global = $__require('13'),
      SHARED = '__core-js_shared__',
      store = global[SHARED] || (global[SHARED] = {});
  module.exports = function (key) {
    return store[key] || (store[key] = {});
  };
});
$__System.registerDynamic('1d', ['1a', '1c', '13', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var store = $__require('1a')('wks'),
      uid = $__require('1c'),
      Symbol = $__require('13').Symbol,
      USE_SYMBOL = typeof Symbol == 'function';

  var $exports = module.exports = function (name) {
    return store[name] || (store[name] = USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
  };

  $exports.store = store;
});
$__System.registerDynamic('12d', ['e0', '17', '13', '2a', 'e1', '1d', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var $iterators = $__require('e0'),
      redefine = $__require('17'),
      global = $__require('13'),
      hide = $__require('2a'),
      Iterators = $__require('e1'),
      wks = $__require('1d'),
      ITERATOR = wks('iterator'),
      TO_STRING_TAG = wks('toStringTag'),
      ArrayValues = Iterators.Array;

  for (var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++) {
    var NAME = collections[i],
        Collection = global[NAME],
        proto = Collection && Collection.prototype,
        key;
    if (proto) {
      if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);
      if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
      Iterators[NAME] = ArrayValues;
      for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);
    }
  }
});
$__System.registerDynamic('12e', ['12', '2b', '2c', '2d', '2f', '31', '34', '35', '36', '38', '39', '3a', '3b', '3d', '3e', '40', '42', '44', '46', '48', '49', '4a', '4c', '4e', '52', '56', '57', '58', '59', '5b', '5c', '5d', '5e', '60', '61', '62', '64', '65', '66', '68', '69', '6a', '6c', '6d', '6e', '6f', '70', '71', '72', '73', '74', '75', '76', '78', '7a', '7b', '7e', '7f', '82', '83', '86', '87', '89', '8a', '8b', '8c', '8d', '8e', '8f', '90', '91', '92', '93', '94', '95', '96', '97', '98', '9a', '9b', '9c', 'a3', 'a4', 'a7', 'a9', 'ab', 'ad', 'ae', 'af', 'b0', 'b1', 'b3', 'b4', 'b6', 'b7', 'ba', 'bc', 'bd', 'be', 'e0', 'c0', 'c2', 'c3', 'c4', 'c6', 'c7', 'c8', 'c9', '11f', '117', '123', 'd0', 'd3', 'd6', 'd7', 'd9', 'da', 'db', 'dc', 'dd', 'de', 'df', 'e2', 'e3', 'e5', 'e6', 'e7', 'e8', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f8', 'f9', 'fa', 'fb', 'fc', 'fd', '100', '101', '103', '104', '106', '107', '108', '109', '10c', '10d', '10e', '10f', '110', '111', '112', '113', '115', '116', '119', '11a', '11b', '11c', '11d', '124', '125', '126', '129', '12b', '12d', '3c', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  $__require('12');
  $__require('2b');
  $__require('2c');
  $__require('2d');
  $__require('2f');
  $__require('31');
  $__require('34');
  $__require('35');
  $__require('36');
  $__require('38');
  $__require('39');
  $__require('3a');
  $__require('3b');
  $__require('3d');
  $__require('3e');
  $__require('40');
  $__require('42');
  $__require('44');
  $__require('46');
  $__require('48');
  $__require('49');
  $__require('4a');
  $__require('4c');
  $__require('4e');
  $__require('52');
  $__require('56');
  $__require('57');
  $__require('58');
  $__require('59');
  $__require('5b');
  $__require('5c');
  $__require('5d');
  $__require('5e');
  $__require('60');
  $__require('61');
  $__require('62');
  $__require('64');
  $__require('65');
  $__require('66');
  $__require('68');
  $__require('69');
  $__require('6a');
  $__require('6c');
  $__require('6d');
  $__require('6e');
  $__require('6f');
  $__require('70');
  $__require('71');
  $__require('72');
  $__require('73');
  $__require('74');
  $__require('75');
  $__require('76');
  $__require('78');
  $__require('7a');
  $__require('7b');
  $__require('7e');
  $__require('7f');
  $__require('82');
  $__require('83');
  $__require('86');
  $__require('87');
  $__require('89');
  $__require('8a');
  $__require('8b');
  $__require('8c');
  $__require('8d');
  $__require('8e');
  $__require('8f');
  $__require('90');
  $__require('91');
  $__require('92');
  $__require('93');
  $__require('94');
  $__require('95');
  $__require('96');
  $__require('97');
  $__require('98');
  $__require('9a');
  $__require('9b');
  $__require('9c');
  $__require('a3');
  $__require('a4');
  $__require('a7');
  $__require('a9');
  $__require('ab');
  $__require('ad');
  $__require('ae');
  $__require('af');
  $__require('b0');
  $__require('b1');
  $__require('b3');
  $__require('b4');
  $__require('b6');
  $__require('b7');
  $__require('ba');
  $__require('bc');
  $__require('bd');
  $__require('be');
  $__require('e0');
  $__require('c0');
  $__require('c2');
  $__require('c3');
  $__require('c4');
  $__require('c6');
  $__require('c7');
  $__require('c8');
  $__require('c9');
  $__require('11f');
  $__require('117');
  $__require('123');
  $__require('d0');
  $__require('d3');
  $__require('d6');
  $__require('d7');
  $__require('d9');
  $__require('da');
  $__require('db');
  $__require('dc');
  $__require('dd');
  $__require('de');
  $__require('df');
  $__require('e2');
  $__require('e3');
  $__require('e5');
  $__require('e6');
  $__require('e7');
  $__require('e8');
  $__require('ea');
  $__require('eb');
  $__require('ec');
  $__require('ed');
  $__require('ee');
  $__require('ef');
  $__require('f1');
  $__require('f2');
  $__require('f3');
  $__require('f4');
  $__require('f5');
  $__require('f6');
  $__require('f8');
  $__require('f9');
  $__require('fa');
  $__require('fb');
  $__require('fc');
  $__require('fd');
  $__require('100');
  $__require('101');
  $__require('103');
  $__require('104');
  $__require('106');
  $__require('107');
  $__require('108');
  $__require('109');
  $__require('10c');
  $__require('10d');
  $__require('10e');
  $__require('10f');
  $__require('110');
  $__require('111');
  $__require('112');
  $__require('113');
  $__require('115');
  $__require('116');
  $__require('119');
  $__require('11a');
  $__require('11b');
  $__require('11c');
  $__require('11d');
  $__require('124');
  $__require('125');
  $__require('126');
  $__require('129');
  $__require('12b');
  $__require('12d');
  module.exports = $__require('3c');
});
$__System.registerDynamic("12f", ["e"], true, function ($__require, exports, module) {
  var process = $__require("e");
  var global = this || self,
      GLOBAL = global;
  /**
   * Copyright (c) 2014, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
   * additional grant of patent rights can be found in the PATENTS file in
   * the same directory.
   */

  !function (global) {
    "use strict";

    var hasOwn = Object.prototype.hasOwnProperty;
    var undefined; // More compressible than void 0.
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

    var inModule = typeof module === "object";
    var runtime = global.regeneratorRuntime;
    if (runtime) {
      if (inModule) {
        // If regeneratorRuntime is defined globally and we're in a module,
        // make the exports object identical to regeneratorRuntime.
        module.exports = runtime;
      }
      // Don't bother evaluating the rest of this file if the runtime was
      // already defined globally.
      return;
    }

    // Define the runtime globally (as expected by generated code) as either
    // module.exports (if we're in a module) or a new, empty object.
    runtime = global.regeneratorRuntime = inModule ? module.exports : {};

    function wrap(innerFn, outerFn, self, tryLocsList) {
      // If outerFn provided, then outerFn.prototype instanceof Generator.
      var generator = Object.create((outerFn || Generator).prototype);
      var context = new Context(tryLocsList || []);

      // The ._invoke method unifies the implementations of the .next,
      // .throw, and .return methods.
      generator._invoke = makeInvokeMethod(innerFn, self, context);

      return generator;
    }
    runtime.wrap = wrap;

    // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.
    function tryCatch(fn, obj, arg) {
      try {
        return { type: "normal", arg: fn.call(obj, arg) };
      } catch (err) {
        return { type: "throw", arg: err };
      }
    }

    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";

    // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.
    var ContinueSentinel = {};

    // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}

    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";

    // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        prototype[method] = function (arg) {
          return this._invoke(method, arg);
        };
      });
    }

    runtime.isGeneratorFunction = function (genFun) {
      var ctor = typeof genFun === "function" && genFun.constructor;
      return ctor ? ctor === GeneratorFunction ||
      // For the native GeneratorFunction constructor, the best we can
      // do is to check its .name property.
      (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };

    runtime.mark = function (genFun) {
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
      } else {
        genFun.__proto__ = GeneratorFunctionPrototype;
        if (!(toStringTagSymbol in genFun)) {
          genFun[toStringTagSymbol] = "GeneratorFunction";
        }
      }
      genFun.prototype = Object.create(Gp);
      return genFun;
    };

    // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `value instanceof AwaitArgument` to determine if the yielded value is
    // meant to be awaited. Some may consider the name of this method too
    // cutesy, but they are curmudgeons.
    runtime.awrap = function (arg) {
      return new AwaitArgument(arg);
    };

    function AwaitArgument(arg) {
      this.arg = arg;
    }

    function AsyncIterator(generator) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);
        if (record.type === "throw") {
          reject(record.arg);
        } else {
          var result = record.arg;
          var value = result.value;
          if (value instanceof AwaitArgument) {
            return Promise.resolve(value.arg).then(function (value) {
              invoke("next", value, resolve, reject);
            }, function (err) {
              invoke("throw", err, resolve, reject);
            });
          }

          return Promise.resolve(value).then(function (unwrapped) {
            // When a yielded Promise is resolved, its final value becomes
            // the .value of the Promise<{value,done}> result for the
            // current iteration. If the Promise is rejected, however, the
            // result for this iteration will be rejected with the same
            // reason. Note that rejections of yielded Promises are not
            // thrown back into the generator function, as is the case
            // when an awaited Promise is rejected. This difference in
            // behavior between yield and await is important, because it
            // allows the consumer to decide what to do with the yielded
            // rejection (swallow it and continue, manually .throw it back
            // into the generator, abandon iteration, whatever). With
            // await, by contrast, there is no opportunity to examine the
            // rejection reason outside the generator function, so the
            // only option is to throw it from the await expression, and
            // let the generator function handle the exception.
            result.value = unwrapped;
            resolve(result);
          }, reject);
        }
      }

      if (typeof process === "object" && process.domain) {
        invoke = process.domain.bind(invoke);
      }

      var previousPromise;

      function enqueue(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new Promise(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }

        return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg,
        // Avoid propagating failures to Promises returned by later
        // invocations of the iterator.
        callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }

      // Define the unified helper method that is used to implement .next,
      // .throw, and .return (see defineIteratorMethods).
      this._invoke = enqueue;
    }

    defineIteratorMethods(AsyncIterator.prototype);

    // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.
    runtime.async = function (innerFn, outerFn, self, tryLocsList) {
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));

      return runtime.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    };

    function makeInvokeMethod(innerFn, self, context) {
      var state = GenStateSuspendedStart;

      return function invoke(method, arg) {
        if (state === GenStateExecuting) {
          throw new Error("Generator is already running");
        }

        if (state === GenStateCompleted) {
          if (method === "throw") {
            throw arg;
          }

          // Be forgiving, per 25.3.3.3.3 of the spec:
          // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
          return doneResult();
        }

        while (true) {
          var delegate = context.delegate;
          if (delegate) {
            if (method === "return" || method === "throw" && delegate.iterator[method] === undefined) {
              // A return or throw (when the delegate iterator has no throw
              // method) always terminates the yield* loop.
              context.delegate = null;

              // If the delegate iterator has a return method, give it a
              // chance to clean up.
              var returnMethod = delegate.iterator["return"];
              if (returnMethod) {
                var record = tryCatch(returnMethod, delegate.iterator, arg);
                if (record.type === "throw") {
                  // If the return method threw an exception, let that
                  // exception prevail over the original return or throw.
                  method = "throw";
                  arg = record.arg;
                  continue;
                }
              }

              if (method === "return") {
                // Continue with the outer return, now that the delegate
                // iterator has been terminated.
                continue;
              }
            }

            var record = tryCatch(delegate.iterator[method], delegate.iterator, arg);

            if (record.type === "throw") {
              context.delegate = null;

              // Like returning generator.throw(uncaught), but without the
              // overhead of an extra function call.
              method = "throw";
              arg = record.arg;
              continue;
            }

            // Delegate generator ran and handled its own exceptions so
            // regardless of what the method was, we continue as if it is
            // "next" with an undefined arg.
            method = "next";
            arg = undefined;

            var info = record.arg;
            if (info.done) {
              context[delegate.resultName] = info.value;
              context.next = delegate.nextLoc;
            } else {
              state = GenStateSuspendedYield;
              return info;
            }

            context.delegate = null;
          }

          if (method === "next") {
            // Setting context._sent for legacy support of Babel's
            // function.sent implementation.
            context.sent = context._sent = arg;
          } else if (method === "throw") {
            if (state === GenStateSuspendedStart) {
              state = GenStateCompleted;
              throw arg;
            }

            if (context.dispatchException(arg)) {
              // If the dispatched exception was caught by a catch block,
              // then let that catch block handle the exception normally.
              method = "next";
              arg = undefined;
            }
          } else if (method === "return") {
            context.abrupt("return", arg);
          }

          state = GenStateExecuting;

          var record = tryCatch(innerFn, self, context);
          if (record.type === "normal") {
            // If an exception is thrown from innerFn, we leave state ===
            // GenStateExecuting and loop back for another invocation.
            state = context.done ? GenStateCompleted : GenStateSuspendedYield;

            var info = {
              value: record.arg,
              done: context.done
            };

            if (record.arg === ContinueSentinel) {
              if (context.delegate && method === "next") {
                // Deliberately forget the last sent value so that we don't
                // accidentally pass it on to the delegate.
                arg = undefined;
              }
            } else {
              return info;
            }
          } else if (record.type === "throw") {
            state = GenStateCompleted;
            // Dispatch the exception by looping back around to the
            // context.dispatchException(arg) call above.
            method = "throw";
            arg = record.arg;
          }
        }
      };
    }

    // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.
    defineIteratorMethods(Gp);

    Gp[iteratorSymbol] = function () {
      return this;
    };

    Gp[toStringTagSymbol] = "Generator";

    Gp.toString = function () {
      return "[object Generator]";
    };

    function pushTryEntry(locs) {
      var entry = { tryLoc: locs[0] };

      if (1 in locs) {
        entry.catchLoc = locs[1];
      }

      if (2 in locs) {
        entry.finallyLoc = locs[2];
        entry.afterLoc = locs[3];
      }

      this.tryEntries.push(entry);
    }

    function resetTryEntry(entry) {
      var record = entry.completion || {};
      record.type = "normal";
      delete record.arg;
      entry.completion = record;
    }

    function Context(tryLocsList) {
      // The root entry object (effectively a try statement without a catch
      // or a finally block) gives us a place to store values thrown from
      // locations where there is no enclosing try statement.
      this.tryEntries = [{ tryLoc: "root" }];
      tryLocsList.forEach(pushTryEntry, this);
      this.reset(true);
    }

    runtime.keys = function (object) {
      var keys = [];
      for (var key in object) {
        keys.push(key);
      }
      keys.reverse();

      // Rather than returning an object with a next method, we keep
      // things simple and return the next function itself.
      return function next() {
        while (keys.length) {
          var key = keys.pop();
          if (key in object) {
            next.value = key;
            next.done = false;
            return next;
          }
        }

        // To avoid creating an additional object, we just hang the .value
        // and .done properties off the next function object itself. This
        // also ensures that the minifier will not anonymize the function.
        next.done = true;
        return next;
      };
    };

    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) {
          return iteratorMethod.call(iterable);
        }

        if (typeof iterable.next === "function") {
          return iterable;
        }

        if (!isNaN(iterable.length)) {
          var i = -1,
              next = function next() {
            while (++i < iterable.length) {
              if (hasOwn.call(iterable, i)) {
                next.value = iterable[i];
                next.done = false;
                return next;
              }
            }

            next.value = undefined;
            next.done = true;

            return next;
          };

          return next.next = next;
        }
      }

      // Return an iterator with no values.
      return { next: doneResult };
    }
    runtime.values = values;

    function doneResult() {
      return { value: undefined, done: true };
    }

    Context.prototype = {
      constructor: Context,

      reset: function (skipTempReset) {
        this.prev = 0;
        this.next = 0;
        // Resetting context._sent for legacy support of Babel's
        // function.sent implementation.
        this.sent = this._sent = undefined;
        this.done = false;
        this.delegate = null;

        this.tryEntries.forEach(resetTryEntry);

        if (!skipTempReset) {
          for (var name in this) {
            // Not sure about the optimal order of these conditions:
            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
              this[name] = undefined;
            }
          }
        }
      },

      stop: function () {
        this.done = true;

        var rootEntry = this.tryEntries[0];
        var rootRecord = rootEntry.completion;
        if (rootRecord.type === "throw") {
          throw rootRecord.arg;
        }

        return this.rval;
      },

      dispatchException: function (exception) {
        if (this.done) {
          throw exception;
        }

        var context = this;
        function handle(loc, caught) {
          record.type = "throw";
          record.arg = exception;
          context.next = loc;
          return !!caught;
        }

        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          var record = entry.completion;

          if (entry.tryLoc === "root") {
            // Exception thrown outside of any try block that could handle
            // it, so set the completion value of the entire function to
            // throw the exception.
            return handle("end");
          }

          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc");
            var hasFinally = hasOwn.call(entry, "finallyLoc");

            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              } else if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) {
                return handle(entry.catchLoc, true);
              }
            } else if (hasFinally) {
              if (this.prev < entry.finallyLoc) {
                return handle(entry.finallyLoc);
              }
            } else {
              throw new Error("try statement without catch or finally");
            }
          }
        }
      },

      abrupt: function (type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }

        if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
          // Ignore the finally entry if control is not jumping to a
          // location outside the try/catch block.
          finallyEntry = null;
        }

        var record = finallyEntry ? finallyEntry.completion : {};
        record.type = type;
        record.arg = arg;

        if (finallyEntry) {
          this.next = finallyEntry.finallyLoc;
        } else {
          this.complete(record);
        }

        return ContinueSentinel;
      },

      complete: function (record, afterLoc) {
        if (record.type === "throw") {
          throw record.arg;
        }

        if (record.type === "break" || record.type === "continue") {
          this.next = record.arg;
        } else if (record.type === "return") {
          this.rval = record.arg;
          this.next = "end";
        } else if (record.type === "normal" && afterLoc) {
          this.next = afterLoc;
        }
      },

      finish: function (finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) {
            this.complete(entry.completion, entry.afterLoc);
            resetTryEntry(entry);
            return ContinueSentinel;
          }
        }
      },

      "catch": function (tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if (record.type === "throw") {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }

        // The context.catch method must only be called with a location
        // argument that corresponds to a known catch block.
        throw new Error("illegal catch attempt");
      },

      delegateYield: function (iterable, resultName, nextLoc) {
        this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        };

        return ContinueSentinel;
      }
    };
  }(
  // Among the various tricks for obtaining a reference to the global
  // object, this seems to be the most reliable technique that does not
  // use indirect eval (which violates Content Security Policy).
  typeof global === "object" ? global : typeof window === "object" ? window : typeof self === "object" ? self : exports);
});
$__System.registerDynamic('21', ['37', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var isObject = $__require('37');
  module.exports = function (it) {
    if (!isObject(it)) throw TypeError(it + ' is not an object!');
    return it;
  };
});
$__System.registerDynamic('13', ['e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
  var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
  if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef
});
$__System.registerDynamic('12a', ['37', '13', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var isObject = $__require('37'),
      document = $__require('13').document
  // in old IE typeof document.createElement is 'object'
  ,
      is = isObject(document) && isObject(document.createElement);
  module.exports = function (it) {
    return is ? document.createElement(it) : {};
  };
});
$__System.registerDynamic('122', ['15', '19', '12a', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  module.exports = !$__require('15') && !$__require('19')(function () {
    return Object.defineProperty($__require('12a')('div'), 'a', { get: function () {
        return 7;
      } }).a != 7;
  });
});
$__System.registerDynamic('37', ['e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  module.exports = function (it) {
    return typeof it === 'object' ? it !== null : typeof it === 'function';
  };
});
$__System.registerDynamic('22', ['37', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // 7.1.1 ToPrimitive(input [, PreferredType])
  var isObject = $__require('37');
  // instead of the ES6 spec version, we didn't implement @@toPrimitive case
  // and the second argument - flag - preferred type is a string
  module.exports = function (it, S) {
    if (!isObject(it)) return it;
    var fn, val;
    if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
    if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
    if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
    throw TypeError("Can't convert object to primitive value");
  };
});
$__System.registerDynamic('27', ['21', '122', '22', '15', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var anObject = $__require('21'),
      IE8_DOM_DEFINE = $__require('122'),
      toPrimitive = $__require('22'),
      dP = Object.defineProperty;

  exports.f = $__require('15') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
    anObject(O);
    P = toPrimitive(P, true);
    anObject(Attributes);
    if (IE8_DOM_DEFINE) try {
      return dP(O, P, Attributes);
    } catch (e) {/* empty */}
    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
    if ('value' in Attributes) O[P] = Attributes.value;
    return O;
  };
});
$__System.registerDynamic("23", ["e"], true, function ($__require, exports, module) {
  var process = $__require("e");
  var global = this || self,
      GLOBAL = global;
  module.exports = function (bitmap, value) {
    return {
      enumerable: !(bitmap & 1),
      configurable: !(bitmap & 2),
      writable: !(bitmap & 4),
      value: value
    };
  };
});
$__System.registerDynamic("19", ["e"], true, function ($__require, exports, module) {
  var process = $__require("e");
  var global = this || self,
      GLOBAL = global;
  module.exports = function (exec) {
    try {
      return !!exec();
    } catch (e) {
      return true;
    }
  };
});
$__System.registerDynamic('15', ['19', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // Thank's IE8 for his funny defineProperty
  module.exports = !$__require('19')(function () {
    return Object.defineProperty({}, 'a', { get: function () {
        return 7;
      } }).a != 7;
  });
});
$__System.registerDynamic('2a', ['27', '23', '15', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var dP = $__require('27'),
      createDesc = $__require('23');
  module.exports = $__require('15') ? function (object, key, value) {
    return dP.f(object, key, createDesc(1, value));
  } : function (object, key, value) {
    object[key] = value;
    return object;
  };
});
$__System.registerDynamic("14", ["e"], true, function ($__require, exports, module) {
  var process = $__require("e");
  var global = this || self,
      GLOBAL = global;
  var hasOwnProperty = {}.hasOwnProperty;
  module.exports = function (it, key) {
    return hasOwnProperty.call(it, key);
  };
});
$__System.registerDynamic('1c', ['e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var id = 0,
      px = Math.random();
  module.exports = function (key) {
    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
  };
});
$__System.registerDynamic('17', ['13', '2a', '14', '1c', '3c', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var global = $__require('13'),
      hide = $__require('2a'),
      has = $__require('14'),
      SRC = $__require('1c')('src'),
      TO_STRING = 'toString',
      $toString = Function[TO_STRING],
      TPL = ('' + $toString).split(TO_STRING);

  $__require('3c').inspectSource = function (it) {
    return $toString.call(it);
  };

  (module.exports = function (O, key, val, safe) {
    var isFunction = typeof val == 'function';
    if (isFunction) has(val, 'name') || hide(val, 'name', key);
    if (O[key] === val) return;
    if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));
    if (O === global) {
      O[key] = val;
    } else {
      if (!safe) {
        delete O[key];
        hide(O, key, val);
      } else {
        if (O[key]) O[key] = val;else hide(O, key, val);
      }
    }
    // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
  })(Function.prototype, TO_STRING, function toString() {
    return typeof this == 'function' && this[SRC] || $toString.call(this);
  });
});
$__System.registerDynamic('aa', ['e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  module.exports = function (it) {
    if (typeof it != 'function') throw TypeError(it + ' is not a function!');
    return it;
  };
});
$__System.registerDynamic('9d', ['aa', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // optional / simple context binding
  var aFunction = $__require('aa');
  module.exports = function (fn, that, length) {
    aFunction(fn);
    if (that === undefined) return fn;
    switch (length) {
      case 1:
        return function (a) {
          return fn.call(that, a);
        };
      case 2:
        return function (a, b) {
          return fn.call(that, a, b);
        };
      case 3:
        return function (a, b, c) {
          return fn.call(that, a, b, c);
        };
    }
    return function () /* ...args */{
      return fn.apply(that, arguments);
    };
  };
});
$__System.registerDynamic('16', ['13', '3c', '2a', '17', '9d', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var global = $__require('13'),
      core = $__require('3c'),
      hide = $__require('2a'),
      redefine = $__require('17'),
      ctx = $__require('9d'),
      PROTOTYPE = 'prototype';

  var $export = function (type, name, source) {
    var IS_FORCED = type & $export.F,
        IS_GLOBAL = type & $export.G,
        IS_STATIC = type & $export.S,
        IS_PROTO = type & $export.P,
        IS_BIND = type & $export.B,
        target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE],
        exports = IS_GLOBAL ? core : core[name] || (core[name] = {}),
        expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {}),
        key,
        own,
        out,
        exp;
    if (IS_GLOBAL) source = name;
    for (key in source) {
      // contains in native
      own = !IS_FORCED && target && target[key] !== undefined;
      // export native or passed
      out = (own ? target : source)[key];
      // bind timers to global for call from export context
      exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
      // extend global
      if (target) redefine(target, key, out, type & $export.U);
      // export
      if (exports[key] != out) hide(exports, key, exp);
      if (IS_PROTO && expProto[key] != out) expProto[key] = out;
    }
  };
  global.core = core;
  // type bitmap
  $export.F = 1; // forced
  $export.G = 2; // global
  $export.S = 4; // static
  $export.P = 8; // proto
  $export.B = 16; // bind
  $export.W = 32; // wrap
  $export.U = 64; // safe
  $export.R = 128; // real proto method for `library` 
  module.exports = $export;
});
$__System.registerDynamic("130", ["e"], true, function ($__require, exports, module) {
  var process = $__require("e");
  var global = this || self,
      GLOBAL = global;
  module.exports = function (regExp, replace) {
    var replacer = replace === Object(replace) ? function (part) {
      return replace[part];
    } : replace;
    return function (it) {
      return String(it).replace(regExp, replacer);
    };
  };
});
$__System.registerDynamic('131', ['16', '130', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  // https://github.com/benjamingr/RexExp.escape
  var $export = $__require('16'),
      $re = $__require('130')(/[\\^$*+?.()|[\]{}]/g, '\\$&');

  $export($export.S, 'RegExp', { escape: function escape(it) {
      return $re(it);
    } });
});
$__System.registerDynamic('3c', ['e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var core = module.exports = { version: '2.4.0' };
  if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef
});
$__System.registerDynamic('132', ['131', '3c', 'e'], true, function ($__require, exports, module) {
  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  $__require('131');
  module.exports = $__require('3c').RegExp.escape;
});
$__System.registerDynamic("133", ["12e", "12f", "132", "e"], true, function ($__require, exports, module) {
  "use strict";

  var process = $__require("e");
  var global = this || self,
      GLOBAL = global;
  $__require("12e");

  $__require("12f");

  $__require("132");

  /* eslint max-len: 0 */

  if (global._babelPolyfill) {
    throw new Error("only one instance of babel-polyfill is allowed");
  }
  global._babelPolyfill = true;

  // Should be removed in the next major release:

  var DEFINE_PROPERTY = "defineProperty";
  function define(O, key, value) {
    O[key] || Object[DEFINE_PROPERTY](O, key, {
      writable: true,
      configurable: true,
      value: value
    });
  }

  define(String.prototype, "padLeft", "".padStart);
  define(String.prototype, "padRight", "".padEnd);

  "pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function (key) {
    [][key] && define(Array, key, Function.call.bind([][key]));
  });
});
$__System.registerDynamic("134", [], false, function ($__require, $__exports, $__module) {
    var _retrieveGlobal = $__System.registry.get("@@global-helpers").prepareGlobal($__module.id, "firebase", null);

    (function ($__global) {
        var firebase = $__global["firebase"];
        /*! @license Firebase v3.7.0
            Build: 3.7.0-rc.2
            Terms: https://firebase.google.com/terms/
        
            ---
        
            typedarray.js
            Copyright (c) 2010, Linden Research, Inc.
        
            Permission is hereby granted, free of charge, to any person obtaining a copy
            of this software and associated documentation files (the "Software"), to deal
            in the Software without restriction, including without limitation the rights
            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
            copies of the Software, and to permit persons to whom the Software is
            furnished to do so, subject to the following conditions:
        
            The above copyright notice and this permission notice shall be included in
            all copies or substantial portions of the Software.
        
            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
            THE SOFTWARE. */
        var firebase = null;(function () {
            var aa = "function" == typeof Object.defineProperties ? Object.defineProperty : function (a, b, c) {
                if (c.get || c.set) throw new TypeError("ES3 does not support getters and setters.");a != Array.prototype && a != Object.prototype && (a[b] = c.value);
            },
                k = "undefined" != typeof window && window === this ? this : "undefined" != typeof global && null != global ? global : this,
                l = function () {
                l = function () {};k.Symbol || (k.Symbol = ba);
            },
                ca = 0,
                ba = function (a) {
                return "jscomp_symbol_" + (a || "") + ca++;
            },
                n = function () {
                l();var a = k.Symbol.iterator;a || (a = k.Symbol.iterator = k.Symbol("iterator"));"function" != typeof Array.prototype[a] && aa(Array.prototype, a, { configurable: !0, writable: !0, value: function () {
                        return m(this);
                    } });n = function () {};
            },
                m = function (a) {
                var b = 0;return da(function () {
                    return b < a.length ? { done: !1, value: a[b++] } : { done: !0 };
                });
            },
                da = function (a) {
                n();a = { next: a };a[k.Symbol.iterator] = function () {
                    return this;
                };return a;
            },
                q = this,
                r = function () {},
                t = function (a) {
                var b = typeof a;if ("object" == b) {
                    if (a) {
                        if (a instanceof Array) return "array";if (a instanceof Object) return b;var c = Object.prototype.toString.call(a);
                        if ("[object Window]" == c) return "object";if ("[object Array]" == c || "number" == typeof a.length && "undefined" != typeof a.splice && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("splice")) return "array";if ("[object Function]" == c || "undefined" != typeof a.call && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("call")) return "function";
                    } else return "null";
                } else if ("function" == b && "undefined" == typeof a.call) return "object";return b;
            },
                v = function (a) {
                return "function" == t(a);
            },
                ea = function (a, b, c) {
                return a.call.apply(a.bind, arguments);
            },
                fa = function (a, b, c) {
                if (!a) throw Error();if (2 < arguments.length) {
                    var d = Array.prototype.slice.call(arguments, 2);return function () {
                        var c = Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c, d);return a.apply(b, c);
                    };
                }return function () {
                    return a.apply(b, arguments);
                };
            },
                w = function (a, b, c) {
                w = Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? ea : fa;return w.apply(null, arguments);
            },
                x = function (a, b) {
                var c = Array.prototype.slice.call(arguments, 1);return function () {
                    var b = c.slice();b.push.apply(b, arguments);return a.apply(this, b);
                };
            },
                y = function (a, b) {
                function c() {}c.prototype = b.prototype;a.ha = b.prototype;a.prototype = new c();a.prototype.constructor = a;a.base = function (a, c, h) {
                    for (var e = Array(arguments.length - 2), d = 2; d < arguments.length; d++) e[d - 2] = arguments[d];return b.prototype[c].apply(a, e);
                };
            };var A;A = "undefined" !== typeof window ? window : "undefined" !== typeof self ? self : global;
            var __extends = function (a, b) {
                function c() {
                    this.constructor = a;
                }for (var d in b) b.hasOwnProperty(d) && (a[d] = b[d]);a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
            },
                __assign = Object.assign || function (a) {
                for (var b, c = 1, d = arguments.length; c < d; c++) {
                    b = arguments[c];for (var e in b) Object.prototype.hasOwnProperty.call(b, e) && (a[e] = b[e]);
                }return a;
            },
                __rest = function (a, b) {
                var c = {},
                    d;for (d in a) Object.prototype.hasOwnProperty.call(a, d) && 0 > b.indexOf(d) && (c[d] = a[d]);if (null != a && "function" === typeof Object.getOwnPropertySymbols) {
                    var e = 0;for (d = Object.getOwnPropertySymbols(a); e < d.length; e++) 0 > b.indexOf(d[e]) && (c[d[e]] = a[d[e]]);
                }return c;
            },
                __decorate = function (a, b, c, d) {
                var e = arguments.length,
                    h = 3 > e ? b : null === d ? d = Object.getOwnPropertyDescriptor(b, c) : d,
                    g;g = A.Reflect;if ("object" === typeof g && "function" === typeof g.decorate) h = g.decorate(a, b, c, d);else for (var f = a.length - 1; 0 <= f; f--) if (g = a[f]) h = (3 > e ? g(h) : 3 < e ? g(b, c, h) : g(b, c)) || h;return 3 < e && h && Object.defineProperty(b, c, h), h;
            },
                __metadata = function (a, b) {
                var c = A.Reflect;if ("object" === typeof c && "function" === typeof c.metadata) return c.metadata(a, b);
            },
                __param = function (a, b) {
                return function (c, d) {
                    b(c, d, a);
                };
            },
                __awaiter = function (a, b, c, d) {
                return new (c || (c = Promise))(function (e, h) {
                    function g(a) {
                        try {
                            p(d.next(a));
                        } catch (u) {
                            h(u);
                        }
                    }function f(a) {
                        try {
                            p(d["throw"](a));
                        } catch (u) {
                            h(u);
                        }
                    }function p(a) {
                        a.done ? e(a.value) : new c(function (b) {
                            b(a.value);
                        }).then(g, f);
                    }p((d = d.apply(a, b)).next());
                });
            },
                __generator = function (a, b) {
                function c(a) {
                    return function (b) {
                        return d([a, b]);
                    };
                }function d(c) {
                    if (h) throw new TypeError("Generator is already executing.");
                    for (; e;) try {
                        if (h = 1, g && (f = g[c[0] & 2 ? "return" : c[0] ? "throw" : "next"]) && !(f = f.call(g, c[1])).done) return f;if (g = 0, f) c = [0, f.value];switch (c[0]) {case 0:case 1:
                                f = c;break;case 4:
                                return e.label++, { value: c[1], done: !1 };case 5:
                                e.label++;g = c[1];c = [0];continue;case 7:
                                c = e.G.pop();e.I.pop();continue;default:
                                if (!(f = e.I, f = 0 < f.length && f[f.length - 1]) && (6 === c[0] || 2 === c[0])) {
                                    e = 0;continue;
                                }if (3 === c[0] && (!f || c[1] > f[0] && c[1] < f[3])) e.label = c[1];else if (6 === c[0] && e.label < f[1]) e.label = f[1], f = c;else if (f && e.label < f[2]) e.label = f[2], e.G.push(c);else {
                                    f[2] && e.G.pop();e.I.pop();continue;
                                }}c = b.call(a, e);
                    } catch (z) {
                        c = [6, z], g = 0;
                    } finally {
                        h = f = 0;
                    }if (c[0] & 5) throw c[1];return { value: c[0] ? c[1] : void 0, done: !0 };
                }var e = { label: 0, ga: function () {
                        if (f[0] & 1) throw f[1];return f[1];
                    }, I: [], G: [] },
                    h,
                    g,
                    f;return { next: c(0), "throw": c(1), "return": c(2) };
            };
            "undefined" !== typeof A.S && A.S || (A.__extends = __extends, A.__assign = __assign, A.__rest = __rest, A.__extends = __extends, A.__decorate = __decorate, A.__metadata = __metadata, A.__param = __param, A.__awaiter = __awaiter, A.__generator = __generator);var B = function (a) {
                if (Error.captureStackTrace) Error.captureStackTrace(this, B);else {
                    var b = Error().stack;b && (this.stack = b);
                }a && (this.message = String(a));
            };y(B, Error);B.prototype.name = "CustomError";var ga = function (a, b) {
                for (var c = a.split("%s"), d = "", e = Array.prototype.slice.call(arguments, 1); e.length && 1 < c.length;) d += c.shift() + e.shift();return d + c.join("%s");
            };var C = function (a, b) {
                b.unshift(a);B.call(this, ga.apply(null, b));b.shift();
            };y(C, B);C.prototype.name = "AssertionError";var ha = function (a, b, c, d) {
                var e = "Assertion failed";if (c) var e = e + (": " + c),
                    h = d;else a && (e += ": " + a, h = b);throw new C("" + e, h || []);
            },
                D = function (a, b, c) {
                a || ha("", null, b, Array.prototype.slice.call(arguments, 2));
            },
                E = function (a, b, c) {
                v(a) || ha("Expected function but got %s: %s.", [t(a), a], b, Array.prototype.slice.call(arguments, 2));
            };var F = function (a, b, c) {
                this.Y = c;this.T = a;this.Z = b;this.s = 0;this.o = null;
            };F.prototype.get = function () {
                var a;0 < this.s ? (this.s--, a = this.o, this.o = a.next, a.next = null) : a = this.T();return a;
            };F.prototype.put = function (a) {
                this.Z(a);this.s < this.Y && (this.s++, a.next = this.o, this.o = a);
            };var G;a: {
                var ia = q.navigator;if (ia) {
                    var ja = ia.userAgent;if (ja) {
                        G = ja;break a;
                    }
                }G = "";
            };var ka = function (a) {
                q.setTimeout(function () {
                    throw a;
                }, 0);
            },
                H,
                la = function () {
                var a = q.MessageChannel;"undefined" === typeof a && "undefined" !== typeof window && window.postMessage && window.addEventListener && -1 == G.indexOf("Presto") && (a = function () {
                    var a = document.createElement("IFRAME");a.style.display = "none";a.src = "";document.documentElement.appendChild(a);var b = a.contentWindow,
                        a = b.document;a.open();a.write("");a.close();var c = "callImmediate" + Math.random(),
                        d = "file:" == b.location.protocol ? "*" : b.location.protocol + "//" + b.location.host,
                        a = w(function (a) {
                        if (("*" == d || a.origin == d) && a.data == c) this.port1.onmessage();
                    }, this);b.addEventListener("message", a, !1);this.port1 = {};this.port2 = { postMessage: function () {
                            b.postMessage(c, d);
                        } };
                });if ("undefined" !== typeof a && -1 == G.indexOf("Trident") && -1 == G.indexOf("MSIE")) {
                    var b = new a(),
                        c = {},
                        d = c;b.port1.onmessage = function () {
                        if (void 0 !== c.next) {
                            c = c.next;var a = c.J;c.J = null;a();
                        }
                    };return function (a) {
                        d.next = { J: a };d = d.next;b.port2.postMessage(0);
                    };
                }return "undefined" !== typeof document && "onreadystatechange" in document.createElement("SCRIPT") ? function (a) {
                    var b = document.createElement("SCRIPT");b.onreadystatechange = function () {
                        b.onreadystatechange = null;b.parentNode.removeChild(b);b = null;a();a = null;
                    };document.documentElement.appendChild(b);
                } : function (a) {
                    q.setTimeout(a, 0);
                };
            };var I = function () {
                this.v = this.g = null;
            },
                ma = new F(function () {
                return new J();
            }, function (a) {
                a.reset();
            }, 100);I.prototype.add = function (a, b) {
                var c = ma.get();c.set(a, b);this.v ? this.v.next = c : (D(!this.g), this.g = c);this.v = c;
            };I.prototype.remove = function () {
                var a = null;this.g && (a = this.g, this.g = this.g.next, this.g || (this.v = null), a.next = null);return a;
            };var J = function () {
                this.next = this.scope = this.B = null;
            };J.prototype.set = function (a, b) {
                this.B = a;this.scope = b;this.next = null;
            };
            J.prototype.reset = function () {
                this.next = this.scope = this.B = null;
            };var M = function (a, b) {
                K || na();L || (K(), L = !0);oa.add(a, b);
            },
                K,
                na = function () {
                if (-1 != String(q.Promise).indexOf("[native code]")) {
                    var a = q.Promise.resolve(void 0);K = function () {
                        a.then(pa);
                    };
                } else K = function () {
                    var a = pa;!v(q.setImmediate) || q.Window && q.Window.prototype && -1 == G.indexOf("Edge") && q.Window.prototype.setImmediate == q.setImmediate ? (H || (H = la()), H(a)) : q.setImmediate(a);
                };
            },
                L = !1,
                oa = new I(),
                pa = function () {
                for (var a; a = oa.remove();) {
                    try {
                        a.B.call(a.scope);
                    } catch (b) {
                        ka(b);
                    }ma.put(a);
                }L = !1;
            };var O = function (a, b) {
                this.b = 0;this.R = void 0;this.j = this.h = this.u = null;this.m = this.A = !1;if (a != r) try {
                    var c = this;a.call(b, function (a) {
                        N(c, 2, a);
                    }, function (a) {
                        try {
                            if (a instanceof Error) throw a;throw Error("Promise rejected.");
                        } catch (e) {}N(c, 3, a);
                    });
                } catch (d) {
                    N(this, 3, d);
                }
            },
                qa = function () {
                this.next = this.context = this.i = this.f = this.child = null;this.w = !1;
            };qa.prototype.reset = function () {
                this.context = this.i = this.f = this.child = null;this.w = !1;
            };
            var ra = new F(function () {
                return new qa();
            }, function (a) {
                a.reset();
            }, 100),
                sa = function (a, b, c) {
                var d = ra.get();d.f = a;d.i = b;d.context = c;return d;
            },
                ua = function (a, b, c) {
                ta(a, b, c, null) || M(x(b, a));
            };O.prototype.then = function (a, b, c) {
                null != a && E(a, "opt_onFulfilled should be a function.");null != b && E(b, "opt_onRejected should be a function. Did you pass opt_context as the second argument instead of the third?");return va(this, v(a) ? a : null, v(b) ? b : null, c);
            };O.prototype.then = O.prototype.then;O.prototype.$goog_Thenable = !0;
            O.prototype.ba = function (a, b) {
                return va(this, null, a, b);
            };var xa = function (a, b) {
                a.h || 2 != a.b && 3 != a.b || wa(a);D(null != b.f);a.j ? a.j.next = b : a.h = b;a.j = b;
            },
                va = function (a, b, c, d) {
                var e = sa(null, null, null);e.child = new O(function (a, g) {
                    e.f = b ? function (c) {
                        try {
                            var e = b.call(d, c);a(e);
                        } catch (z) {
                            g(z);
                        }
                    } : a;e.i = c ? function (b) {
                        try {
                            var e = c.call(d, b);a(e);
                        } catch (z) {
                            g(z);
                        }
                    } : g;
                });e.child.u = a;xa(a, e);return e.child;
            };O.prototype.da = function (a) {
                D(1 == this.b);this.b = 0;N(this, 2, a);
            };
            O.prototype.ea = function (a) {
                D(1 == this.b);this.b = 0;N(this, 3, a);
            };
            var N = function (a, b, c) {
                0 == a.b && (a === c && (b = 3, c = new TypeError("Promise cannot resolve to itself")), a.b = 1, ta(c, a.da, a.ea, a) || (a.R = c, a.b = b, a.u = null, wa(a), 3 != b || ya(a, c)));
            },
                ta = function (a, b, c, d) {
                if (a instanceof O) return null != b && E(b, "opt_onFulfilled should be a function."), null != c && E(c, "opt_onRejected should be a function. Did you pass opt_context as the second argument instead of the third?"), xa(a, sa(b || r, c || null, d)), !0;var e;if (a) try {
                    e = !!a.$goog_Thenable;
                } catch (g) {
                    e = !1;
                } else e = !1;if (e) return a.then(b, c, d), !0;e = typeof a;if ("object" == e && null != a || "function" == e) try {
                    var h = a.then;if (v(h)) return za(a, h, b, c, d), !0;
                } catch (g) {
                    return c.call(d, g), !0;
                }return !1;
            },
                za = function (a, b, c, d, e) {
                var h = !1,
                    g = function (a) {
                    h || (h = !0, c.call(e, a));
                },
                    f = function (a) {
                    h || (h = !0, d.call(e, a));
                };try {
                    b.call(a, g, f);
                } catch (p) {
                    f(p);
                }
            },
                wa = function (a) {
                a.A || (a.A = !0, M(a.V, a));
            },
                Aa = function (a) {
                var b = null;a.h && (b = a.h, a.h = b.next, b.next = null);a.h || (a.j = null);null != b && D(null != b.f);return b;
            };
            O.prototype.V = function () {
                for (var a; a = Aa(this);) {
                    var b = this.b,
                        c = this.R;if (3 == b && a.i && !a.w) {
                        var d;for (d = this; d && d.m; d = d.u) d.m = !1;
                    }if (a.child) a.child.u = null, Ba(a, b, c);else try {
                        a.w ? a.f.call(a.context) : Ba(a, b, c);
                    } catch (e) {
                        Ca.call(null, e);
                    }ra.put(a);
                }this.A = !1;
            };var Ba = function (a, b, c) {
                2 == b ? a.f.call(a.context, c) : a.i && a.i.call(a.context, c);
            },
                ya = function (a, b) {
                a.m = !0;M(function () {
                    a.m && Ca.call(null, b);
                });
            },
                Ca = ka;function P(a, b) {
                if (!(b instanceof Object)) return b;switch (b.constructor) {case Date:
                        return new Date(b.getTime());case Object:
                        void 0 === a && (a = {});break;case Array:
                        a = [];break;default:
                        return b;}for (var c in b) b.hasOwnProperty(c) && (a[c] = P(a[c], b[c]));return a;
            };O.all = function (a) {
                return new O(function (b, c) {
                    var d = a.length,
                        e = [];if (d) for (var h = function (a, c) {
                        d--;e[a] = c;0 == d && b(e);
                    }, g = function (a) {
                        c(a);
                    }, f = 0, p; f < a.length; f++) p = a[f], ua(p, x(h, f), g);else b(e);
                });
            };O.resolve = function (a) {
                if (a instanceof O) return a;var b = new O(r);N(b, 2, a);return b;
            };O.reject = function (a) {
                return new O(function (b, c) {
                    c(a);
                });
            };O.prototype["catch"] = O.prototype.ba;var Q = O;"undefined" !== typeof Promise && (Q = Promise);var Da = Q;function Ea(a, b) {
                a = new R(a, b);return a.subscribe.bind(a);
            }var R = function (a, b) {
                var c = this;this.a = [];this.P = 0;this.task = Da.resolve();this.l = !1;this.F = b;this.task.then(function () {
                    a(c);
                }).catch(function (a) {
                    c.error(a);
                });
            };R.prototype.next = function (a) {
                S(this, function (b) {
                    b.next(a);
                });
            };R.prototype.error = function (a) {
                S(this, function (b) {
                    b.error(a);
                });this.close(a);
            };R.prototype.complete = function () {
                S(this, function (a) {
                    a.complete();
                });this.close();
            };
            R.prototype.subscribe = function (a, b, c) {
                var d = this,
                    e;if (void 0 === a && void 0 === b && void 0 === c) throw Error("Missing Observer.");e = Fa(a) ? a : { next: a, error: b, complete: c };void 0 === e.next && (e.next = T);void 0 === e.error && (e.error = T);void 0 === e.complete && (e.complete = T);a = this.fa.bind(this, this.a.length);this.l && this.task.then(function () {
                    try {
                        d.K ? e.error(d.K) : e.complete();
                    } catch (h) {}
                });this.a.push(e);return a;
            };
            R.prototype.fa = function (a) {
                void 0 !== this.a && void 0 !== this.a[a] && (delete this.a[a], --this.P, 0 === this.P && void 0 !== this.F && this.F(this));
            };var S = function (a, b) {
                if (!a.l) for (var c = 0; c < a.a.length; c++) Ga(a, c, b);
            },
                Ga = function (a, b, c) {
                a.task.then(function () {
                    if (void 0 !== a.a && void 0 !== a.a[b]) try {
                        c(a.a[b]);
                    } catch (d) {
                        "undefined" !== typeof console && console.error && console.error(d);
                    }
                });
            };R.prototype.close = function (a) {
                var b = this;this.l || (this.l = !0, void 0 !== a && (this.K = a), this.task.then(function () {
                    b.a = void 0;b.F = void 0;
                }));
            };
            function Fa(a) {
                if ("object" !== typeof a || null === a) return !1;var b;b = ["next", "error", "complete"];n();var c = b[Symbol.iterator];b = c ? c.call(b) : m(b);for (c = b.next(); !c.done; c = b.next()) if (c = c.value, c in a && "function" === typeof a[c]) return !0;return !1;
            }function T() {};var Ha = Error.captureStackTrace,
                V = function (a, b) {
                this.code = a;this.message = b;if (Ha) Ha(this, U.prototype.create);else {
                    var c = Error.apply(this, arguments);this.name = "FirebaseError";Object.defineProperty(this, "stack", { get: function () {
                            return c.stack;
                        } });
                }
            };V.prototype = Object.create(Error.prototype);V.prototype.constructor = V;V.prototype.name = "FirebaseError";var U = function (a, b, c) {
                this.$ = a;this.aa = b;this.U = c;this.pattern = /\{\$([^}]+)}/g;
            };
            U.prototype.create = function (a, b) {
                void 0 === b && (b = {});var c = this.U[a];a = this.$ + "/" + a;var c = void 0 === c ? "Error" : c.replace(this.pattern, function (a, c) {
                    a = b[c];return void 0 !== a ? a.toString() : "<" + c + "?>";
                }),
                    c = this.aa + ": " + c + " (" + a + ").",
                    c = new V(a, c),
                    d;for (d in b) b.hasOwnProperty(d) && "_" !== d.slice(-1) && (c[d] = b[d]);return c;
            };var W = Q,
                X = function (a, b, c) {
                var d = this;this.M = c;this.N = !1;this.c = {};this.D = b;this.H = P(void 0, a);a = "serviceAccount" in this.H;("credential" in this.H || a) && "undefined" !== typeof console && console.log("The '" + (a ? "serviceAccount" : "credential") + "' property specified in the first argument to initializeApp() is deprecated and will be removed in the next major version. You should instead use the 'firebase-admin' package. See https://firebase.google.com/docs/admin/setup for details on how to get started.");Object.keys(c.INTERNAL.factories).forEach(function (a) {
                    var b = c.INTERNAL.useAsService(d, a);null !== b && (b = d.X.bind(d, b), d[a] = b);
                });
            };X.prototype.delete = function () {
                var a = this;return new W(function (b) {
                    Y(a);b();
                }).then(function () {
                    a.M.INTERNAL.removeApp(a.D);var b = [];Object.keys(a.c).forEach(function (c) {
                        Object.keys(a.c[c]).forEach(function (d) {
                            b.push(a.c[c][d]);
                        });
                    });return W.all(b.map(function (a) {
                        return a.INTERNAL.delete();
                    }));
                }).then(function () {
                    a.N = !0;a.c = {};
                });
            };
            X.prototype.X = function (a, b) {
                Y(this);"undefined" === typeof this.c[a] && (this.c[a] = {});var c = b || "[DEFAULT]";return "undefined" === typeof this.c[a][c] ? (b = this.M.INTERNAL.factories[a](this, this.W.bind(this), b), this.c[a][c] = b) : this.c[a][c];
            };X.prototype.W = function (a) {
                P(this, a);
            };var Y = function (a) {
                a.N && Z("app-deleted", { name: a.D });
            };k.Object.defineProperties(X.prototype, { name: { configurable: !0, enumerable: !0, get: function () {
                        Y(this);return this.D;
                    } }, options: { configurable: !0, enumerable: !0, get: function () {
                        Y(this);return this.H;
                    } } });
            X.prototype.name && X.prototype.options || X.prototype.delete || console.log("dc");
            function Ia() {
                function a(a) {
                    a = a || "[DEFAULT]";var b = d[a];void 0 === b && Z("no-app", { name: a });return b;
                }function b(a, b) {
                    Object.keys(e).forEach(function (d) {
                        d = c(a, d);if (null !== d && h[d]) h[d](b, a);
                    });
                }function c(a, b) {
                    if ("serverAuth" === b) return null;var c = b;a = a.options;"auth" === b && (a.serviceAccount || a.credential) && (c = "serverAuth", "serverAuth" in e || Z("sa-not-supported"));return c;
                }var d = {},
                    e = {},
                    h = {},
                    g = { __esModule: !0, initializeApp: function (a, c) {
                        void 0 === c ? c = "[DEFAULT]" : "string" === typeof c && "" !== c || Z("bad-app-name", { name: c + "" });void 0 !== d[c] && Z("duplicate-app", { name: c });a = new X(a, c, g);d[c] = a;b(a, "create");void 0 != a.INTERNAL && void 0 != a.INTERNAL.getToken || P(a, { INTERNAL: { getUid: function () {
                                    return null;
                                }, getToken: function () {
                                    return W.resolve(null);
                                }, addAuthTokenListener: function () {}, removeAuthTokenListener: function () {} } });return a;
                    }, app: a, apps: null, Promise: W, SDK_VERSION: "0.0.0", INTERNAL: { registerService: function (b, c, d, u) {
                            e[b] && Z("duplicate-service", { name: b });e[b] = c;u && (h[b] = u);c = function (c) {
                                void 0 === c && (c = a());return c[b]();
                            };
                            void 0 !== d && P(c, d);return g[b] = c;
                        }, createFirebaseNamespace: Ia, extendNamespace: function (a) {
                            P(g, a);
                        }, createSubscribe: Ea, ErrorFactory: U, removeApp: function (a) {
                            b(d[a], "delete");delete d[a];
                        }, factories: e, useAsService: c, Promise: O, deepExtend: P } };g["default"] = g;Object.defineProperty(g, "apps", { get: function () {
                        return Object.keys(d).map(function (a) {
                            return d[a];
                        });
                    } });a.App = X;return g;
            }function Z(a, b) {
                throw Ja.create(a, b);
            }
            var Ja = new U("app", "Firebase", { "no-app": "No Firebase App '{$name}' has been created - call Firebase App.initializeApp()", "bad-app-name": "Illegal App name: '{$name}", "duplicate-app": "Firebase App named '{$name}' already exists", "app-deleted": "Firebase App named '{$name}' already deleted", "duplicate-service": "Firebase service named '{$name}' already registered", "sa-not-supported": "Initializing the Firebase SDK with a service account is only allowed in a Node.js environment. On client devices, you should instead initialize the SDK with an api key and auth domain" });"undefined" !== typeof firebase && (firebase = Ia());
        }).call(this);
        firebase.SDK_VERSION = "3.7.0";
        (function () {
            var h,
                aa = aa || {},
                l = this,
                ba = function () {},
                m = function (a) {
                var b = typeof a;if ("object" == b) {
                    if (a) {
                        if (a instanceof Array) return "array";if (a instanceof Object) return b;var c = Object.prototype.toString.call(a);if ("[object Window]" == c) return "object";if ("[object Array]" == c || "number" == typeof a.length && "undefined" != typeof a.splice && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("splice")) return "array";if ("[object Function]" == c || "undefined" != typeof a.call && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("call")) return "function";
                    } else return "null";
                } else if ("function" == b && "undefined" == typeof a.call) return "object";return b;
            },
                ca = function (a) {
                return null === a;
            },
                da = function (a) {
                return "array" == m(a);
            },
                ea = function (a) {
                var b = m(a);return "array" == b || "object" == b && "number" == typeof a.length;
            },
                p = function (a) {
                return "string" == typeof a;
            },
                fa = function (a) {
                return "number" == typeof a;
            },
                q = function (a) {
                return "function" == m(a);
            },
                ga = function (a) {
                var b = typeof a;return "object" == b && null != a || "function" == b;
            },
                ha = function (a, b, c) {
                return a.call.apply(a.bind, arguments);
            },
                ia = function (a, b, c) {
                if (!a) throw Error();if (2 < arguments.length) {
                    var d = Array.prototype.slice.call(arguments, 2);return function () {
                        var c = Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c, d);return a.apply(b, c);
                    };
                }return function () {
                    return a.apply(b, arguments);
                };
            },
                r = function (a, b, c) {
                r = Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? ha : ia;return r.apply(null, arguments);
            },
                ja = function (a, b) {
                var c = Array.prototype.slice.call(arguments, 1);return function () {
                    var b = c.slice();b.push.apply(b, arguments);return a.apply(this, b);
                };
            },
                ka = Date.now || function () {
                return +new Date();
            },
                t = function (a, b) {
                function c() {}c.prototype = b.prototype;a.hd = b.prototype;a.prototype = new c();a.prototype.constructor = a;a.vf = function (a, c, f) {
                    for (var d = Array(arguments.length - 2), e = 2; e < arguments.length; e++) d[e - 2] = arguments[e];return b.prototype[c].apply(a, d);
                };
            };var u = function (a) {
                if (Error.captureStackTrace) Error.captureStackTrace(this, u);else {
                    var b = Error().stack;b && (this.stack = b);
                }a && (this.message = String(a));
            };t(u, Error);u.prototype.name = "CustomError";var la = function (a, b) {
                for (var c = a.split("%s"), d = "", e = Array.prototype.slice.call(arguments, 1); e.length && 1 < c.length;) d += c.shift() + e.shift();return d + c.join("%s");
            },
                ma = String.prototype.trim ? function (a) {
                return a.trim();
            } : function (a) {
                return a.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
            },
                na = /&/g,
                oa = /</g,
                pa = />/g,
                qa = /"/g,
                ra = /'/g,
                sa = /\x00/g,
                ta = /[\x00&<>"']/,
                v = function (a, b) {
                return -1 != a.indexOf(b);
            },
                ua = function (a, b) {
                return a < b ? -1 : a > b ? 1 : 0;
            };var va = function (a, b) {
                b.unshift(a);u.call(this, la.apply(null, b));b.shift();
            };t(va, u);va.prototype.name = "AssertionError";
            var wa = function (a, b, c, d) {
                var e = "Assertion failed";if (c) var e = e + (": " + c),
                    f = d;else a && (e += ": " + a, f = b);throw new va("" + e, f || []);
            },
                w = function (a, b, c) {
                a || wa("", null, b, Array.prototype.slice.call(arguments, 2));
            },
                xa = function (a, b) {
                throw new va("Failure" + (a ? ": " + a : ""), Array.prototype.slice.call(arguments, 1));
            },
                ya = function (a, b, c) {
                fa(a) || wa("Expected number but got %s: %s.", [m(a), a], b, Array.prototype.slice.call(arguments, 2));return a;
            },
                za = function (a, b, c) {
                p(a) || wa("Expected string but got %s: %s.", [m(a), a], b, Array.prototype.slice.call(arguments, 2));
            },
                Aa = function (a, b, c) {
                q(a) || wa("Expected function but got %s: %s.", [m(a), a], b, Array.prototype.slice.call(arguments, 2));
            };var Ba = Array.prototype.indexOf ? function (a, b, c) {
                w(null != a.length);return Array.prototype.indexOf.call(a, b, c);
            } : function (a, b, c) {
                c = null == c ? 0 : 0 > c ? Math.max(0, a.length + c) : c;if (p(a)) return p(b) && 1 == b.length ? a.indexOf(b, c) : -1;for (; c < a.length; c++) if (c in a && a[c] === b) return c;return -1;
            },
                x = Array.prototype.forEach ? function (a, b, c) {
                w(null != a.length);Array.prototype.forEach.call(a, b, c);
            } : function (a, b, c) {
                for (var d = a.length, e = p(a) ? a.split("") : a, f = 0; f < d; f++) f in e && b.call(c, e[f], f, a);
            },
                Ca = function (a, b) {
                for (var c = p(a) ? a.split("") : a, d = a.length - 1; 0 <= d; --d) d in c && b.call(void 0, c[d], d, a);
            },
                Da = Array.prototype.map ? function (a, b, c) {
                w(null != a.length);return Array.prototype.map.call(a, b, c);
            } : function (a, b, c) {
                for (var d = a.length, e = Array(d), f = p(a) ? a.split("") : a, g = 0; g < d; g++) g in f && (e[g] = b.call(c, f[g], g, a));return e;
            },
                Ea = Array.prototype.some ? function (a, b, c) {
                w(null != a.length);return Array.prototype.some.call(a, b, c);
            } : function (a, b, c) {
                for (var d = a.length, e = p(a) ? a.split("") : a, f = 0; f < d; f++) if (f in e && b.call(c, e[f], f, a)) return !0;return !1;
            },
                Ga = function (a) {
                var b;a: {
                    b = Fa;for (var c = a.length, d = p(a) ? a.split("") : a, e = 0; e < c; e++) if (e in d && b.call(void 0, d[e], e, a)) {
                        b = e;break a;
                    }b = -1;
                }return 0 > b ? null : p(a) ? a.charAt(b) : a[b];
            },
                Ha = function (a, b) {
                return 0 <= Ba(a, b);
            },
                Ja = function (a, b) {
                b = Ba(a, b);var c;(c = 0 <= b) && Ia(a, b);return c;
            },
                Ia = function (a, b) {
                w(null != a.length);return 1 == Array.prototype.splice.call(a, b, 1).length;
            },
                Ka = function (a, b) {
                var c = 0;Ca(a, function (d, e) {
                    b.call(void 0, d, e, a) && Ia(a, e) && c++;
                });
            },
                La = function (a) {
                return Array.prototype.concat.apply(Array.prototype, arguments);
            },
                Ma = function (a) {
                var b = a.length;if (0 < b) {
                    for (var c = Array(b), d = 0; d < b; d++) c[d] = a[d];return c;
                }return [];
            };var Na = function (a, b) {
                for (var c in a) b.call(void 0, a[c], c, a);
            },
                Oa = function (a) {
                var b = [],
                    c = 0,
                    d;for (d in a) b[c++] = a[d];return b;
            },
                Pa = function (a) {
                var b = [],
                    c = 0,
                    d;for (d in a) b[c++] = d;return b;
            },
                Qa = function (a) {
                for (var b in a) return !1;return !0;
            },
                Ra = function (a, b) {
                for (var c in a) if (!(c in b) || a[c] !== b[c]) return !1;for (c in b) if (!(c in a)) return !1;return !0;
            },
                Sa = function (a) {
                var b = {},
                    c;for (c in a) b[c] = a[c];return b;
            },
                Ta = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" "),
                Ua = function (a, b) {
                for (var c, d, e = 1; e < arguments.length; e++) {
                    d = arguments[e];for (c in d) a[c] = d[c];for (var f = 0; f < Ta.length; f++) c = Ta[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
                }
            };var Va;a: {
                var Wa = l.navigator;if (Wa) {
                    var Ya = Wa.userAgent;if (Ya) {
                        Va = Ya;break a;
                    }
                }Va = "";
            }var y = function (a) {
                return v(Va, a);
            };var Za = function (a) {
                Za[" "](a);return a;
            };Za[" "] = ba;var ab = function (a, b) {
                var c = $a;return Object.prototype.hasOwnProperty.call(c, a) ? c[a] : c[a] = b(a);
            };var bb = y("Opera"),
                z = y("Trident") || y("MSIE"),
                cb = y("Edge"),
                db = cb || z,
                eb = y("Gecko") && !(v(Va.toLowerCase(), "webkit") && !y("Edge")) && !(y("Trident") || y("MSIE")) && !y("Edge"),
                fb = v(Va.toLowerCase(), "webkit") && !y("Edge"),
                gb = function () {
                var a = l.document;return a ? a.documentMode : void 0;
            },
                hb;
            a: {
                var ib = "",
                    jb = function () {
                    var a = Va;if (eb) return (/rv\:([^\);]+)(\)|;)/.exec(a)
                    );if (cb) return (/Edge\/([\d\.]+)/.exec(a)
                    );if (z) return (/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a)
                    );if (fb) return (/WebKit\/(\S+)/.exec(a)
                    );if (bb) return (/(?:Version)[ \/]?(\S+)/.exec(a)
                    );
                }();jb && (ib = jb ? jb[1] : "");if (z) {
                    var kb = gb();if (null != kb && kb > parseFloat(ib)) {
                        hb = String(kb);break a;
                    }
                }hb = ib;
            }
            var lb = hb,
                $a = {},
                B = function (a) {
                return ab(a, function () {
                    for (var b = 0, c = ma(String(lb)).split("."), d = ma(String(a)).split("."), e = Math.max(c.length, d.length), f = 0; 0 == b && f < e; f++) {
                        var g = c[f] || "",
                            k = d[f] || "";do {
                            g = /(\d*)(\D*)(.*)/.exec(g) || ["", "", "", ""];k = /(\d*)(\D*)(.*)/.exec(k) || ["", "", "", ""];if (0 == g[0].length && 0 == k[0].length) break;b = ua(0 == g[1].length ? 0 : parseInt(g[1], 10), 0 == k[1].length ? 0 : parseInt(k[1], 10)) || ua(0 == g[2].length, 0 == k[2].length) || ua(g[2], k[2]);g = g[3];k = k[3];
                        } while (0 == b);
                    }return 0 <= b;
                });
            },
                mb;var nb = l.document;
            mb = nb && z ? gb() || ("CSS1Compat" == nb.compatMode ? parseInt(lb, 10) : 5) : void 0;var ob = function (a) {
                return Da(a, function (a) {
                    a = a.toString(16);return 1 < a.length ? a : "0" + a;
                }).join("");
            };var pb = null,
                qb = null,
                sb = function (a) {
                var b = "";rb(a, function (a) {
                    b += String.fromCharCode(a);
                });return b;
            },
                rb = function (a, b) {
                function c(b) {
                    for (; d < a.length;) {
                        var c = a.charAt(d++),
                            e = qb[c];if (null != e) return e;if (!/^[\s\xa0]*$/.test(c)) throw Error("Unknown base64 encoding at char: " + c);
                    }return b;
                }tb();for (var d = 0;;) {
                    var e = c(-1),
                        f = c(0),
                        g = c(64),
                        k = c(64);if (64 === k && -1 === e) break;b(e << 2 | f >> 4);64 != g && (b(f << 4 & 240 | g >> 2), 64 != k && b(g << 6 & 192 | k));
                }
            },
                tb = function () {
                if (!pb) {
                    pb = {};qb = {};for (var a = 0; 65 > a; a++) pb[a] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(a), qb[pb[a]] = a, 62 <= a && (qb["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.".charAt(a)] = a);
                }
            };var ub = function () {
                this.ya = -1;
            };var xb = function (a, b) {
                this.ya = 64;this.Rb = l.Uint8Array ? new Uint8Array(this.ya) : Array(this.ya);this.uc = this.Ya = 0;this.h = [];this.Re = a;this.Cd = b;this.nf = l.Int32Array ? new Int32Array(64) : Array(64);void 0 !== vb || (vb = l.Int32Array ? new Int32Array(wb) : wb);this.reset();
            },
                vb;t(xb, ub);for (var yb = [], zb = 0; 63 > zb; zb++) yb[zb] = 0;var Ab = La(128, yb);xb.prototype.reset = function () {
                this.uc = this.Ya = 0;this.h = l.Int32Array ? new Int32Array(this.Cd) : Ma(this.Cd);
            };
            var Bb = function (a) {
                var b = a.Rb;w(b.length == a.ya);for (var c = a.nf, d = 0, e = 0; e < b.length;) c[d++] = b[e] << 24 | b[e + 1] << 16 | b[e + 2] << 8 | b[e + 3], e = 4 * d;for (b = 16; 64 > b; b++) {
                    var e = c[b - 15] | 0,
                        d = c[b - 2] | 0,
                        f = (c[b - 16] | 0) + ((e >>> 7 | e << 25) ^ (e >>> 18 | e << 14) ^ e >>> 3) | 0,
                        g = (c[b - 7] | 0) + ((d >>> 17 | d << 15) ^ (d >>> 19 | d << 13) ^ d >>> 10) | 0;c[b] = f + g | 0;
                }for (var d = a.h[0] | 0, e = a.h[1] | 0, k = a.h[2] | 0, n = a.h[3] | 0, A = a.h[4] | 0, Xa = a.h[5] | 0, Gb = a.h[6] | 0, f = a.h[7] | 0, b = 0; 64 > b; b++) var bh = ((d >>> 2 | d << 30) ^ (d >>> 13 | d << 19) ^ (d >>> 22 | d << 10)) + (d & e ^ d & k ^ e & k) | 0, g = A & Xa ^ ~A & Gb, f = f + ((A >>> 6 | A << 26) ^ (A >>> 11 | A << 21) ^ (A >>> 25 | A << 7)) | 0, g = g + (vb[b] | 0) | 0, g = f + (g + (c[b] | 0) | 0) | 0, f = Gb, Gb = Xa, Xa = A, A = n + g | 0, n = k, k = e, e = d, d = g + bh | 0;a.h[0] = a.h[0] + d | 0;a.h[1] = a.h[1] + e | 0;a.h[2] = a.h[2] + k | 0;a.h[3] = a.h[3] + n | 0;a.h[4] = a.h[4] + A | 0;a.h[5] = a.h[5] + Xa | 0;a.h[6] = a.h[6] + Gb | 0;a.h[7] = a.h[7] + f | 0;
            };
            xb.prototype.update = function (a, b) {
                void 0 === b && (b = a.length);var c = 0,
                    d = this.Ya;if (p(a)) for (; c < b;) this.Rb[d++] = a.charCodeAt(c++), d == this.ya && (Bb(this), d = 0);else if (ea(a)) for (; c < b;) {
                    var e = a[c++];if (!("number" == typeof e && 0 <= e && 255 >= e && e == (e | 0))) throw Error("message must be a byte array");this.Rb[d++] = e;d == this.ya && (Bb(this), d = 0);
                } else throw Error("message must be string or array");this.Ya = d;this.uc += b;
            };
            xb.prototype.digest = function () {
                var a = [],
                    b = 8 * this.uc;56 > this.Ya ? this.update(Ab, 56 - this.Ya) : this.update(Ab, this.ya - (this.Ya - 56));for (var c = 63; 56 <= c; c--) this.Rb[c] = b & 255, b /= 256;Bb(this);for (c = b = 0; c < this.Re; c++) for (var d = 24; 0 <= d; d -= 8) a[b++] = this.h[c] >> d & 255;return a;
            };
            var wb = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298];var Db = function () {
                xb.call(this, 8, Cb);
            };t(Db, xb);var Cb = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225];var Eb = !z || 9 <= Number(mb),
                Fb = z && !B("9");!fb || B("528");eb && B("1.9b") || z && B("8") || bb && B("9.5") || fb && B("528");eb && !B("8") || z && B("9");var Hb = function () {
                this.Aa = this.Aa;this.hc = this.hc;
            };Hb.prototype.Aa = !1;Hb.prototype.isDisposed = function () {
                return this.Aa;
            };Hb.prototype.Ta = function () {
                if (this.hc) for (; this.hc.length;) this.hc.shift()();
            };var Ib = function (a, b) {
                this.type = a;this.currentTarget = this.target = b;this.defaultPrevented = this.bb = !1;this.Nd = !0;
            };Ib.prototype.preventDefault = function () {
                this.defaultPrevented = !0;this.Nd = !1;
            };var Jb = function (a, b) {
                Ib.call(this, a ? a.type : "");this.relatedTarget = this.currentTarget = this.target = null;this.button = this.screenY = this.screenX = this.clientY = this.clientX = this.offsetY = this.offsetX = 0;this.key = "";this.charCode = this.keyCode = 0;this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = !1;this.Ua = this.state = null;a && this.init(a, b);
            };t(Jb, Ib);
            Jb.prototype.init = function (a, b) {
                var c = this.type = a.type,
                    d = a.changedTouches ? a.changedTouches[0] : null;this.target = a.target || a.srcElement;this.currentTarget = b;if (b = a.relatedTarget) {
                    if (eb) {
                        var e;a: {
                            try {
                                Za(b.nodeName);e = !0;break a;
                            } catch (f) {}e = !1;
                        }e || (b = null);
                    }
                } else "mouseover" == c ? b = a.fromElement : "mouseout" == c && (b = a.toElement);this.relatedTarget = b;null === d ? (this.offsetX = fb || void 0 !== a.offsetX ? a.offsetX : a.layerX, this.offsetY = fb || void 0 !== a.offsetY ? a.offsetY : a.layerY, this.clientX = void 0 !== a.clientX ? a.clientX : a.pageX, this.clientY = void 0 !== a.clientY ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0) : (this.clientX = void 0 !== d.clientX ? d.clientX : d.pageX, this.clientY = void 0 !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0);this.button = a.button;this.keyCode = a.keyCode || 0;this.key = a.key || "";this.charCode = a.charCode || ("keypress" == c ? a.keyCode : 0);this.ctrlKey = a.ctrlKey;this.altKey = a.altKey;this.shiftKey = a.shiftKey;this.metaKey = a.metaKey;this.state = a.state;this.Ua = a;a.defaultPrevented && this.preventDefault();
            };Jb.prototype.preventDefault = function () {
                Jb.hd.preventDefault.call(this);var a = this.Ua;if (a.preventDefault) a.preventDefault();else if (a.returnValue = !1, Fb) try {
                    if (a.ctrlKey || 112 <= a.keyCode && 123 >= a.keyCode) a.keyCode = -1;
                } catch (b) {}
            };Jb.prototype.we = function () {
                return this.Ua;
            };var Kb = "closure_listenable_" + (1E6 * Math.random() | 0),
                Lb = 0;var Mb = function (a, b, c, d, e) {
                this.listener = a;this.lc = null;this.src = b;this.type = c;this.capture = !!d;this.Zb = e;this.key = ++Lb;this.hb = this.Qb = !1;
            },
                Nb = function (a) {
                a.hb = !0;a.listener = null;a.lc = null;a.src = null;a.Zb = null;
            };var Ob = function (a) {
                this.src = a;this.D = {};this.Mb = 0;
            };Ob.prototype.add = function (a, b, c, d, e) {
                var f = a.toString();a = this.D[f];a || (a = this.D[f] = [], this.Mb++);var g = Pb(a, b, d, e);-1 < g ? (b = a[g], c || (b.Qb = !1)) : (b = new Mb(b, this.src, f, !!d, e), b.Qb = c, a.push(b));return b;
            };Ob.prototype.remove = function (a, b, c, d) {
                a = a.toString();if (!(a in this.D)) return !1;var e = this.D[a];b = Pb(e, b, c, d);return -1 < b ? (Nb(e[b]), Ia(e, b), 0 == e.length && (delete this.D[a], this.Mb--), !0) : !1;
            };
            var Qb = function (a, b) {
                var c = b.type;c in a.D && Ja(a.D[c], b) && (Nb(b), 0 == a.D[c].length && (delete a.D[c], a.Mb--));
            };Ob.prototype.Ic = function (a, b, c, d) {
                a = this.D[a.toString()];var e = -1;a && (e = Pb(a, b, c, d));return -1 < e ? a[e] : null;
            };var Pb = function (a, b, c, d) {
                for (var e = 0; e < a.length; ++e) {
                    var f = a[e];if (!f.hb && f.listener == b && f.capture == !!c && f.Zb == d) return e;
                }return -1;
            };var Rb = "closure_lm_" + (1E6 * Math.random() | 0),
                Sb = {},
                Tb = 0,
                Ub = function (a, b, c, d, e) {
                if (da(b)) for (var f = 0; f < b.length; f++) Ub(a, b[f], c, d, e);else c = Vb(c), a && a[Kb] ? a.listen(b, c, d, e) : Wb(a, b, c, !1, d, e);
            },
                Wb = function (a, b, c, d, e, f) {
                if (!b) throw Error("Invalid event type");var g = !!e,
                    k = Xb(a);k || (a[Rb] = k = new Ob(a));c = k.add(b, c, d, e, f);if (!c.lc) {
                    d = Yb();c.lc = d;d.src = a;d.listener = c;if (a.addEventListener) a.addEventListener(b.toString(), d, g);else if (a.attachEvent) a.attachEvent(Zb(b.toString()), d);else throw Error("addEventListener and attachEvent are unavailable.");
                    Tb++;
                }
            },
                Yb = function () {
                var a = $b,
                    b = Eb ? function (c) {
                    return a.call(b.src, b.listener, c);
                } : function (c) {
                    c = a.call(b.src, b.listener, c);if (!c) return c;
                };return b;
            },
                ac = function (a, b, c, d, e) {
                if (da(b)) for (var f = 0; f < b.length; f++) ac(a, b[f], c, d, e);else c = Vb(c), a && a[Kb] ? bc(a, b, c, d, e) : Wb(a, b, c, !0, d, e);
            },
                cc = function (a, b, c, d, e) {
                if (da(b)) for (var f = 0; f < b.length; f++) cc(a, b[f], c, d, e);else c = Vb(c), a && a[Kb] ? a.aa.remove(String(b), c, d, e) : a && (a = Xb(a)) && (b = a.Ic(b, c, !!d, e)) && dc(b);
            },
                dc = function (a) {
                if (!fa(a) && a && !a.hb) {
                    var b = a.src;if (b && b[Kb]) Qb(b.aa, a);else {
                        var c = a.type,
                            d = a.lc;b.removeEventListener ? b.removeEventListener(c, d, a.capture) : b.detachEvent && b.detachEvent(Zb(c), d);Tb--;(c = Xb(b)) ? (Qb(c, a), 0 == c.Mb && (c.src = null, b[Rb] = null)) : Nb(a);
                    }
                }
            },
                Zb = function (a) {
                return a in Sb ? Sb[a] : Sb[a] = "on" + a;
            },
                fc = function (a, b, c, d) {
                var e = !0;if (a = Xb(a)) if (b = a.D[b.toString()]) for (b = b.concat(), a = 0; a < b.length; a++) {
                    var f = b[a];f && f.capture == c && !f.hb && (f = ec(f, d), e = e && !1 !== f);
                }return e;
            },
                ec = function (a, b) {
                var c = a.listener,
                    d = a.Zb || a.src;a.Qb && dc(a);return c.call(d, b);
            },
                $b = function (a, b) {
                if (a.hb) return !0;if (!Eb) {
                    if (!b) a: {
                        b = ["window", "event"];for (var c = l, d; d = b.shift();) if (null != c[d]) c = c[d];else {
                            b = null;break a;
                        }b = c;
                    }d = b;b = new Jb(d, this);c = !0;if (!(0 > d.keyCode || void 0 != d.returnValue)) {
                        a: {
                            var e = !1;if (0 == d.keyCode) try {
                                d.keyCode = -1;break a;
                            } catch (g) {
                                e = !0;
                            }if (e || void 0 == d.returnValue) d.returnValue = !0;
                        }d = [];for (e = b.currentTarget; e; e = e.parentNode) d.push(e);a = a.type;for (e = d.length - 1; !b.bb && 0 <= e; e--) {
                            b.currentTarget = d[e];var f = fc(d[e], a, !0, b),
                                c = c && f;
                        }for (e = 0; !b.bb && e < d.length; e++) b.currentTarget = d[e], f = fc(d[e], a, !1, b), c = c && f;
                    }return c;
                }return ec(a, new Jb(b, this));
            },
                Xb = function (a) {
                a = a[Rb];return a instanceof Ob ? a : null;
            },
                gc = "__closure_events_fn_" + (1E9 * Math.random() >>> 0),
                Vb = function (a) {
                w(a, "Listener can not be null.");if (q(a)) return a;w(a.handleEvent, "An object listener must have handleEvent method.");a[gc] || (a[gc] = function (b) {
                    return a.handleEvent(b);
                });return a[gc];
            };var hc = /^[+a-zA-Z0-9_.!#$%&'*\/=?^`{|}~-]+@([a-zA-Z0-9-]+\.)+[a-zA-Z0-9]{2,63}$/;var jc = function () {
                this.rc = "";this.ee = ic;
            };jc.prototype.cc = !0;jc.prototype.Xb = function () {
                return this.rc;
            };jc.prototype.toString = function () {
                return "Const{" + this.rc + "}";
            };var kc = function (a) {
                if (a instanceof jc && a.constructor === jc && a.ee === ic) return a.rc;xa("expected object of type Const, got '" + a + "'");return "type_error:Const";
            },
                ic = {},
                lc = function (a) {
                var b = new jc();b.rc = a;return b;
            };lc("");var nc = function () {
                this.kc = "";this.fe = mc;
            };nc.prototype.cc = !0;nc.prototype.Xb = function () {
                return this.kc;
            };nc.prototype.toString = function () {
                return "TrustedResourceUrl{" + this.kc + "}";
            };var mc = {};var pc = function () {
                this.la = "";this.de = oc;
            };pc.prototype.cc = !0;pc.prototype.Xb = function () {
                return this.la;
            };pc.prototype.toString = function () {
                return "SafeUrl{" + this.la + "}";
            };
            var qc = function (a) {
                if (a instanceof pc && a.constructor === pc && a.de === oc) return a.la;xa("expected object of type SafeUrl, got '" + a + "' of type " + m(a));return "type_error:SafeUrl";
            },
                rc = /^(?:(?:https?|mailto|ftp):|[^&:/?#]*(?:[/?#]|$))/i,
                tc = function (a) {
                if (a instanceof pc) return a;a = a.cc ? a.Xb() : String(a);rc.test(a) || (a = "about:invalid#zClosurez");return sc(a);
            },
                oc = {},
                sc = function (a) {
                var b = new pc();b.la = a;return b;
            };sc("about:blank");var wc = function (a) {
                var b = [];uc(new vc(), a, b);return b.join("");
            },
                vc = function () {
                this.nc = void 0;
            },
                uc = function (a, b, c) {
                if (null == b) c.push("null");else {
                    if ("object" == typeof b) {
                        if (da(b)) {
                            var d = b;b = d.length;c.push("[");for (var e = "", f = 0; f < b; f++) c.push(e), e = d[f], uc(a, a.nc ? a.nc.call(d, String(f), e) : e, c), e = ",";c.push("]");return;
                        }if (b instanceof String || b instanceof Number || b instanceof Boolean) b = b.valueOf();else {
                            c.push("{");f = "";for (d in b) Object.prototype.hasOwnProperty.call(b, d) && (e = b[d], "function" != typeof e && (c.push(f), xc(d, c), c.push(":"), uc(a, a.nc ? a.nc.call(b, d, e) : e, c), f = ","));c.push("}");return;
                        }
                    }switch (typeof b) {case "string":
                            xc(b, c);break;case "number":
                            c.push(isFinite(b) && !isNaN(b) ? String(b) : "null");break;case "boolean":
                            c.push(String(b));break;case "function":
                            c.push("null");break;default:
                            throw Error("Unknown type: " + typeof b);}
                }
            },
                yc = { '"': '\\"', "\\": "\\\\", "/": "\\/", "\b": "\\b", "\f": "\\f", "\n": "\\n", "\r": "\\r", "\t": "\\t", "\x0B": "\\u000b" },
                zc = /\uffff/.test("\uffff") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g,
                xc = function (a, b) {
                b.push('"', a.replace(zc, function (a) {
                    var b = yc[a];b || (b = "\\u" + (a.charCodeAt(0) | 65536).toString(16).substr(1), yc[a] = b);return b;
                }), '"');
            };var Ac = function () {};Ac.prototype.ld = null;var Bc = function (a) {
                return a.ld || (a.ld = a.Nc());
            };var Cc,
                Dc = function () {};t(Dc, Ac);Dc.prototype.Sb = function () {
                var a = Ec(this);return a ? new ActiveXObject(a) : new XMLHttpRequest();
            };Dc.prototype.Nc = function () {
                var a = {};Ec(this) && (a[0] = !0, a[1] = !0);return a;
            };
            var Ec = function (a) {
                if (!a.Bd && "undefined" == typeof XMLHttpRequest && "undefined" != typeof ActiveXObject) {
                    for (var b = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"], c = 0; c < b.length; c++) {
                        var d = b[c];try {
                            return new ActiveXObject(d), a.Bd = d;
                        } catch (e) {}
                    }throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed");
                }return a.Bd;
            };Cc = new Dc();var Fc = function () {};t(Fc, Ac);Fc.prototype.Sb = function () {
                var a = new XMLHttpRequest();if ("withCredentials" in a) return a;if ("undefined" != typeof XDomainRequest) return new Gc();throw Error("Unsupported browser");
            };Fc.prototype.Nc = function () {
                return {};
            };
            var Gc = function () {
                this.qa = new XDomainRequest();this.readyState = 0;this.onreadystatechange = null;this.responseText = "";this.status = -1;this.statusText = this.responseXML = null;this.qa.onload = r(this.xe, this);this.qa.onerror = r(this.yd, this);this.qa.onprogress = r(this.ye, this);this.qa.ontimeout = r(this.ze, this);
            };h = Gc.prototype;h.open = function (a, b, c) {
                if (null != c && !c) throw Error("Only async requests are supported.");this.qa.open(a, b);
            };
            h.send = function (a) {
                if (a) {
                    if ("string" == typeof a) this.qa.send(a);else throw Error("Only string data is supported");
                } else this.qa.send();
            };h.abort = function () {
                this.qa.abort();
            };h.setRequestHeader = function () {};h.xe = function () {
                this.status = 200;this.responseText = this.qa.responseText;Hc(this, 4);
            };h.yd = function () {
                this.status = 500;this.responseText = "";Hc(this, 4);
            };h.ze = function () {
                this.yd();
            };h.ye = function () {
                this.status = 200;Hc(this, 1);
            };var Hc = function (a, b) {
                a.readyState = b;if (a.onreadystatechange) a.onreadystatechange();
            };var Jc = function () {
                this.la = "";this.ce = Ic;
            };Jc.prototype.cc = !0;Jc.prototype.Xb = function () {
                return this.la;
            };Jc.prototype.toString = function () {
                return "SafeHtml{" + this.la + "}";
            };var Kc = function (a) {
                if (a instanceof Jc && a.constructor === Jc && a.ce === Ic) return a.la;xa("expected object of type SafeHtml, got '" + a + "' of type " + m(a));return "type_error:SafeHtml";
            },
                Ic = {};Jc.prototype.He = function (a) {
                this.la = a;return this;
            };!eb && !z || z && 9 <= Number(mb) || eb && B("1.9.1");z && B("9");var Mc = function (a, b) {
                Na(b, function (b, d) {
                    "style" == d ? a.style.cssText = b : "class" == d ? a.className = b : "for" == d ? a.htmlFor = b : Lc.hasOwnProperty(d) ? a.setAttribute(Lc[d], b) : 0 == d.lastIndexOf("aria-", 0) || 0 == d.lastIndexOf("data-", 0) ? a.setAttribute(d, b) : a[d] = b;
                });
            },
                Lc = { cellpadding: "cellPadding", cellspacing: "cellSpacing", colspan: "colSpan", frameborder: "frameBorder", height: "height", maxlength: "maxLength", nonce: "nonce", role: "role", rowspan: "rowSpan", type: "type", usemap: "useMap", valign: "vAlign", width: "width" };var Nc = function (a, b, c) {
                this.Le = c;this.le = a;this.Ze = b;this.gc = 0;this.$b = null;
            };Nc.prototype.get = function () {
                var a;0 < this.gc ? (this.gc--, a = this.$b, this.$b = a.next, a.next = null) : a = this.le();return a;
            };Nc.prototype.put = function (a) {
                this.Ze(a);this.gc < this.Le && (this.gc++, a.next = this.$b, this.$b = a);
            };var Oc = function (a) {
                l.setTimeout(function () {
                    throw a;
                }, 0);
            },
                Pc,
                Qc = function () {
                var a = l.MessageChannel;"undefined" === typeof a && "undefined" !== typeof window && window.postMessage && window.addEventListener && !y("Presto") && (a = function () {
                    var a = document.createElement("IFRAME");a.style.display = "none";a.src = "";document.documentElement.appendChild(a);var b = a.contentWindow,
                        a = b.document;a.open();a.write("");a.close();var c = "callImmediate" + Math.random(),
                        d = "file:" == b.location.protocol ? "*" : b.location.protocol + "//" + b.location.host,
                        a = r(function (a) {
                        if (("*" == d || a.origin == d) && a.data == c) this.port1.onmessage();
                    }, this);b.addEventListener("message", a, !1);this.port1 = {};this.port2 = { postMessage: function () {
                            b.postMessage(c, d);
                        } };
                });if ("undefined" !== typeof a && !y("Trident") && !y("MSIE")) {
                    var b = new a(),
                        c = {},
                        d = c;b.port1.onmessage = function () {
                        if (void 0 !== c.next) {
                            c = c.next;var a = c.od;c.od = null;a();
                        }
                    };return function (a) {
                        d.next = { od: a };d = d.next;b.port2.postMessage(0);
                    };
                }return "undefined" !== typeof document && "onreadystatechange" in document.createElement("SCRIPT") ? function (a) {
                    var b = document.createElement("SCRIPT");b.onreadystatechange = function () {
                        b.onreadystatechange = null;b.parentNode.removeChild(b);b = null;a();a = null;
                    };document.documentElement.appendChild(b);
                } : function (a) {
                    l.setTimeout(a, 0);
                };
            };var Rc = function () {
                this.xc = this.Na = null;
            },
                Tc = new Nc(function () {
                return new Sc();
            }, function (a) {
                a.reset();
            }, 100);Rc.prototype.add = function (a, b) {
                var c = Tc.get();c.set(a, b);this.xc ? this.xc.next = c : (w(!this.Na), this.Na = c);this.xc = c;
            };Rc.prototype.remove = function () {
                var a = null;this.Na && (a = this.Na, this.Na = this.Na.next, this.Na || (this.xc = null), a.next = null);return a;
            };var Sc = function () {
                this.next = this.scope = this.Hc = null;
            };Sc.prototype.set = function (a, b) {
                this.Hc = a;this.scope = b;this.next = null;
            };
            Sc.prototype.reset = function () {
                this.next = this.scope = this.Hc = null;
            };var Yc = function (a, b) {
                Uc || Vc();Wc || (Uc(), Wc = !0);Xc.add(a, b);
            },
                Uc,
                Vc = function () {
                if (-1 != String(l.Promise).indexOf("[native code]")) {
                    var a = l.Promise.resolve(void 0);Uc = function () {
                        a.then(Zc);
                    };
                } else Uc = function () {
                    var a = Zc;!q(l.setImmediate) || l.Window && l.Window.prototype && !y("Edge") && l.Window.prototype.setImmediate == l.setImmediate ? (Pc || (Pc = Qc()), Pc(a)) : l.setImmediate(a);
                };
            },
                Wc = !1,
                Xc = new Rc(),
                Zc = function () {
                for (var a; a = Xc.remove();) {
                    try {
                        a.Hc.call(a.scope);
                    } catch (b) {
                        Oc(b);
                    }Tc.put(a);
                }Wc = !1;
            };var $c = function (a) {
                a.prototype.then = a.prototype.then;a.prototype.$goog_Thenable = !0;
            },
                ad = function (a) {
                if (!a) return !1;try {
                    return !!a.$goog_Thenable;
                } catch (b) {
                    return !1;
                }
            };var C = function (a, b) {
                this.M = 0;this.ma = void 0;this.Ra = this.ia = this.s = null;this.Yb = this.Gc = !1;if (a != ba) try {
                    var c = this;a.call(b, function (a) {
                        bd(c, 2, a);
                    }, function (a) {
                        if (!(a instanceof cd)) try {
                            if (a instanceof Error) throw a;throw Error("Promise rejected.");
                        } catch (e) {}bd(c, 3, a);
                    });
                } catch (d) {
                    bd(this, 3, d);
                }
            },
                dd = function () {
                this.next = this.context = this.$a = this.Fa = this.child = null;this.ob = !1;
            };dd.prototype.reset = function () {
                this.context = this.$a = this.Fa = this.child = null;this.ob = !1;
            };
            var ed = new Nc(function () {
                return new dd();
            }, function (a) {
                a.reset();
            }, 100),
                fd = function (a, b, c) {
                var d = ed.get();d.Fa = a;d.$a = b;d.context = c;return d;
            },
                D = function (a) {
                if (a instanceof C) return a;var b = new C(ba);bd(b, 2, a);return b;
            },
                E = function (a) {
                return new C(function (b, c) {
                    c(a);
                });
            },
                hd = function (a, b, c) {
                gd(a, b, c, null) || Yc(ja(b, a));
            },
                id = function (a) {
                return new C(function (b) {
                    var c = a.length,
                        d = [];if (c) for (var e = function (a, e, f) {
                        c--;d[a] = e ? { ue: !0, value: f } : { ue: !1, reason: f };0 == c && b(d);
                    }, f = 0, g; f < a.length; f++) g = a[f], hd(g, ja(e, f, !0), ja(e, f, !1));else b(d);
                });
            };C.prototype.then = function (a, b, c) {
                null != a && Aa(a, "opt_onFulfilled should be a function.");null != b && Aa(b, "opt_onRejected should be a function. Did you pass opt_context as the second argument instead of the third?");return jd(this, q(a) ? a : null, q(b) ? b : null, c);
            };$c(C);var ld = function (a, b) {
                b = fd(b, b, void 0);b.ob = !0;kd(a, b);return a;
            };C.prototype.g = function (a, b) {
                return jd(this, null, a, b);
            };C.prototype.cancel = function (a) {
                0 == this.M && Yc(function () {
                    var b = new cd(a);md(this, b);
                }, this);
            };
            var md = function (a, b) {
                if (0 == a.M) if (a.s) {
                    var c = a.s;if (c.ia) {
                        for (var d = 0, e = null, f = null, g = c.ia; g && (g.ob || (d++, g.child == a && (e = g), !(e && 1 < d))); g = g.next) e || (f = g);e && (0 == c.M && 1 == d ? md(c, b) : (f ? (d = f, w(c.ia), w(null != d), d.next == c.Ra && (c.Ra = d), d.next = d.next.next) : nd(c), od(c, e, 3, b)));
                    }a.s = null;
                } else bd(a, 3, b);
            },
                kd = function (a, b) {
                a.ia || 2 != a.M && 3 != a.M || pd(a);w(null != b.Fa);a.Ra ? a.Ra.next = b : a.ia = b;a.Ra = b;
            },
                jd = function (a, b, c, d) {
                var e = fd(null, null, null);e.child = new C(function (a, g) {
                    e.Fa = b ? function (c) {
                        try {
                            var e = b.call(d, c);a(e);
                        } catch (A) {
                            g(A);
                        }
                    } : a;e.$a = c ? function (b) {
                        try {
                            var e = c.call(d, b);void 0 === e && b instanceof cd ? g(b) : a(e);
                        } catch (A) {
                            g(A);
                        }
                    } : g;
                });e.child.s = a;kd(a, e);return e.child;
            };C.prototype.kf = function (a) {
                w(1 == this.M);this.M = 0;bd(this, 2, a);
            };C.prototype.lf = function (a) {
                w(1 == this.M);this.M = 0;bd(this, 3, a);
            };
            var bd = function (a, b, c) {
                0 == a.M && (a === c && (b = 3, c = new TypeError("Promise cannot resolve to itself")), a.M = 1, gd(c, a.kf, a.lf, a) || (a.ma = c, a.M = b, a.s = null, pd(a), 3 != b || c instanceof cd || qd(a, c)));
            },
                gd = function (a, b, c, d) {
                if (a instanceof C) return null != b && Aa(b, "opt_onFulfilled should be a function."), null != c && Aa(c, "opt_onRejected should be a function. Did you pass opt_context as the second argument instead of the third?"), kd(a, fd(b || ba, c || null, d)), !0;if (ad(a)) return a.then(b, c, d), !0;if (ga(a)) try {
                    var e = a.then;if (q(e)) return rd(a, e, b, c, d), !0;
                } catch (f) {
                    return c.call(d, f), !0;
                }return !1;
            },
                rd = function (a, b, c, d, e) {
                var f = !1,
                    g = function (a) {
                    f || (f = !0, c.call(e, a));
                },
                    k = function (a) {
                    f || (f = !0, d.call(e, a));
                };try {
                    b.call(a, g, k);
                } catch (n) {
                    k(n);
                }
            },
                pd = function (a) {
                a.Gc || (a.Gc = !0, Yc(a.pe, a));
            },
                nd = function (a) {
                var b = null;a.ia && (b = a.ia, a.ia = b.next, b.next = null);a.ia || (a.Ra = null);null != b && w(null != b.Fa);return b;
            };C.prototype.pe = function () {
                for (var a; a = nd(this);) od(this, a, this.M, this.ma);this.Gc = !1;
            };
            var od = function (a, b, c, d) {
                if (3 == c && b.$a && !b.ob) for (; a && a.Yb; a = a.s) a.Yb = !1;if (b.child) b.child.s = null, sd(b, c, d);else try {
                    b.ob ? b.Fa.call(b.context) : sd(b, c, d);
                } catch (e) {
                    td.call(null, e);
                }ed.put(b);
            },
                sd = function (a, b, c) {
                2 == b ? a.Fa.call(a.context, c) : a.$a && a.$a.call(a.context, c);
            },
                qd = function (a, b) {
                a.Yb = !0;Yc(function () {
                    a.Yb && td.call(null, b);
                });
            },
                td = Oc,
                cd = function (a) {
                u.call(this, a);
            };t(cd, u);cd.prototype.name = "cancel"; /*
                                                     Portions of this code are from MochiKit, received by
                                                     The Closure Authors under the MIT license. All other code is Copyright
                                                     2005-2009 The Closure Authors. All Rights Reserved.
                                                     */
            var ud = function (a, b) {
                this.oc = [];this.Hd = a;this.rd = b || null;this.rb = this.Wa = !1;this.ma = void 0;this.ed = this.kd = this.Bc = !1;this.vc = 0;this.s = null;this.Cc = 0;
            };ud.prototype.cancel = function (a) {
                if (this.Wa) this.ma instanceof ud && this.ma.cancel();else {
                    if (this.s) {
                        var b = this.s;delete this.s;a ? b.cancel(a) : (b.Cc--, 0 >= b.Cc && b.cancel());
                    }this.Hd ? this.Hd.call(this.rd, this) : this.ed = !0;this.Wa || vd(this, new wd());
                }
            };ud.prototype.pd = function (a, b) {
                this.Bc = !1;xd(this, a, b);
            };
            var xd = function (a, b, c) {
                a.Wa = !0;a.ma = c;a.rb = !b;yd(a);
            },
                Ad = function (a) {
                if (a.Wa) {
                    if (!a.ed) throw new zd();a.ed = !1;
                }
            };ud.prototype.callback = function (a) {
                Ad(this);Bd(a);xd(this, !0, a);
            };
            var vd = function (a, b) {
                Ad(a);Bd(b);xd(a, !1, b);
            },
                Bd = function (a) {
                w(!(a instanceof ud), "An execution sequence may not be initiated with a blocking Deferred.");
            },
                Fd = function (a) {
                var b = Cd("https://apis.google.com/js/client.js?onload=" + Dd);Ed(b, null, a, void 0);
            },
                Ed = function (a, b, c, d) {
                w(!a.kd, "Blocking Deferreds can not be re-used");a.oc.push([b, c, d]);a.Wa && yd(a);
            };ud.prototype.then = function (a, b, c) {
                var d,
                    e,
                    f = new C(function (a, b) {
                    d = a;e = b;
                });Ed(this, d, function (a) {
                    a instanceof wd ? f.cancel() : e(a);
                });return f.then(a, b, c);
            };
            $c(ud);
            var Gd = function (a) {
                return Ea(a.oc, function (a) {
                    return q(a[1]);
                });
            },
                yd = function (a) {
                if (a.vc && a.Wa && Gd(a)) {
                    var b = a.vc,
                        c = Hd[b];c && (l.clearTimeout(c.sb), delete Hd[b]);a.vc = 0;
                }a.s && (a.s.Cc--, delete a.s);for (var b = a.ma, d = c = !1; a.oc.length && !a.Bc;) {
                    var e = a.oc.shift(),
                        f = e[0],
                        g = e[1],
                        e = e[2];if (f = a.rb ? g : f) try {
                        var k = f.call(e || a.rd, b);void 0 !== k && (a.rb = a.rb && (k == b || k instanceof Error), a.ma = b = k);if (ad(b) || "function" === typeof l.Promise && b instanceof l.Promise) d = !0, a.Bc = !0;
                    } catch (n) {
                        b = n, a.rb = !0, Gd(a) || (c = !0);
                    }
                }a.ma = b;d && (k = r(a.pd, a, !0), d = r(a.pd, a, !1), b instanceof ud ? (Ed(b, k, d), b.kd = !0) : b.then(k, d));c && (b = new Id(b), Hd[b.sb] = b, a.vc = b.sb);
            },
                zd = function () {
                u.call(this);
            };t(zd, u);zd.prototype.message = "Deferred has already fired";zd.prototype.name = "AlreadyCalledError";var wd = function () {
                u.call(this);
            };t(wd, u);wd.prototype.message = "Deferred was canceled";wd.prototype.name = "CanceledError";var Id = function (a) {
                this.sb = l.setTimeout(r(this.jf, this), 0);this.O = a;
            };
            Id.prototype.jf = function () {
                w(Hd[this.sb], "Cannot throw an error that is not scheduled.");delete Hd[this.sb];throw this.O;
            };var Hd = {};var Cd = function (a) {
                var b = new nc();b.kc = a;return Jd(b);
            },
                Jd = function (a) {
                var b = {},
                    c = b.document || document,
                    d;a instanceof nc && a.constructor === nc && a.fe === mc ? d = a.kc : (xa("expected object of type TrustedResourceUrl, got '" + a + "' of type " + m(a)), d = "type_error:TrustedResourceUrl");var e = document.createElement("SCRIPT");a = { Od: e, Lb: void 0 };var f = new ud(Kd, a),
                    g = null,
                    k = null != b.timeout ? b.timeout : 5E3;0 < k && (g = window.setTimeout(function () {
                    Ld(e, !0);vd(f, new Md(1, "Timeout reached for loading script " + d));
                }, k), a.Lb = g);e.onload = e.onreadystatechange = function () {
                    e.readyState && "loaded" != e.readyState && "complete" != e.readyState || (Ld(e, b.wf || !1, g), f.callback(null));
                };e.onerror = function () {
                    Ld(e, !0, g);vd(f, new Md(0, "Error while loading script " + d));
                };a = b.attributes || {};Ua(a, { type: "text/javascript", charset: "UTF-8", src: d });Mc(e, a);Nd(c).appendChild(e);return f;
            },
                Nd = function (a) {
                var b;return (b = (a || document).getElementsByTagName("HEAD")) && 0 != b.length ? b[0] : a.documentElement;
            },
                Kd = function () {
                if (this && this.Od) {
                    var a = this.Od;a && "SCRIPT" == a.tagName && Ld(a, !0, this.Lb);
                }
            },
                Ld = function (a, b, c) {
                null != c && l.clearTimeout(c);a.onload = ba;a.onerror = ba;a.onreadystatechange = ba;b && window.setTimeout(function () {
                    a && a.parentNode && a.parentNode.removeChild(a);
                }, 0);
            },
                Md = function (a, b) {
                var c = "Jsloader error (code #" + a + ")";b && (c += ": " + b);u.call(this, c);this.code = a;
            };t(Md, u);var Od = function () {
                Hb.call(this);this.aa = new Ob(this);this.he = this;this.Tc = null;
            };t(Od, Hb);Od.prototype[Kb] = !0;h = Od.prototype;h.addEventListener = function (a, b, c, d) {
                Ub(this, a, b, c, d);
            };h.removeEventListener = function (a, b, c, d) {
                cc(this, a, b, c, d);
            };
            h.dispatchEvent = function (a) {
                Pd(this);var b,
                    c = this.Tc;if (c) {
                    b = [];for (var d = 1; c; c = c.Tc) b.push(c), w(1E3 > ++d, "infinite loop");
                }c = this.he;d = a.type || a;if (p(a)) a = new Ib(a, c);else if (a instanceof Ib) a.target = a.target || c;else {
                    var e = a;a = new Ib(d, c);Ua(a, e);
                }var e = !0,
                    f;if (b) for (var g = b.length - 1; !a.bb && 0 <= g; g--) f = a.currentTarget = b[g], e = Qd(f, d, !0, a) && e;a.bb || (f = a.currentTarget = c, e = Qd(f, d, !0, a) && e, a.bb || (e = Qd(f, d, !1, a) && e));if (b) for (g = 0; !a.bb && g < b.length; g++) f = a.currentTarget = b[g], e = Qd(f, d, !1, a) && e;return e;
            };
            h.Ta = function () {
                Od.hd.Ta.call(this);if (this.aa) {
                    var a = this.aa,
                        b = 0,
                        c;for (c in a.D) {
                        for (var d = a.D[c], e = 0; e < d.length; e++) ++b, Nb(d[e]);delete a.D[c];a.Mb--;
                    }
                }this.Tc = null;
            };h.listen = function (a, b, c, d) {
                Pd(this);return this.aa.add(String(a), b, !1, c, d);
            };
            var bc = function (a, b, c, d, e) {
                a.aa.add(String(b), c, !0, d, e);
            },
                Qd = function (a, b, c, d) {
                b = a.aa.D[String(b)];if (!b) return !0;b = b.concat();for (var e = !0, f = 0; f < b.length; ++f) {
                    var g = b[f];if (g && !g.hb && g.capture == c) {
                        var k = g.listener,
                            n = g.Zb || g.src;g.Qb && Qb(a.aa, g);e = !1 !== k.call(n, d) && e;
                    }
                }return e && 0 != d.Nd;
            };Od.prototype.Ic = function (a, b, c, d) {
                return this.aa.Ic(String(a), b, c, d);
            };var Pd = function (a) {
                w(a.aa, "Event target is not initialized. Did you call the superclass (goog.events.EventTarget) constructor?");
            };var Rd = "StopIteration" in l ? l.StopIteration : { message: "StopIteration", stack: "" },
                Sd = function () {};Sd.prototype.next = function () {
                throw Rd;
            };Sd.prototype.ge = function () {
                return this;
            };var Td = function (a, b) {
                this.ba = {};this.w = [];this.nb = this.o = 0;var c = arguments.length;if (1 < c) {
                    if (c % 2) throw Error("Uneven number of arguments");for (var d = 0; d < c; d += 2) this.set(arguments[d], arguments[d + 1]);
                } else a && this.addAll(a);
            };Td.prototype.X = function () {
                Ud(this);for (var a = [], b = 0; b < this.w.length; b++) a.push(this.ba[this.w[b]]);return a;
            };Td.prototype.ja = function () {
                Ud(this);return this.w.concat();
            };Td.prototype.pb = function (a) {
                return Vd(this.ba, a);
            };
            Td.prototype.remove = function (a) {
                return Vd(this.ba, a) ? (delete this.ba[a], this.o--, this.nb++, this.w.length > 2 * this.o && Ud(this), !0) : !1;
            };var Ud = function (a) {
                if (a.o != a.w.length) {
                    for (var b = 0, c = 0; b < a.w.length;) {
                        var d = a.w[b];Vd(a.ba, d) && (a.w[c++] = d);b++;
                    }a.w.length = c;
                }if (a.o != a.w.length) {
                    for (var e = {}, c = b = 0; b < a.w.length;) d = a.w[b], Vd(e, d) || (a.w[c++] = d, e[d] = 1), b++;a.w.length = c;
                }
            };h = Td.prototype;h.get = function (a, b) {
                return Vd(this.ba, a) ? this.ba[a] : b;
            };
            h.set = function (a, b) {
                Vd(this.ba, a) || (this.o++, this.w.push(a), this.nb++);this.ba[a] = b;
            };h.addAll = function (a) {
                var b;a instanceof Td ? (b = a.ja(), a = a.X()) : (b = Pa(a), a = Oa(a));for (var c = 0; c < b.length; c++) this.set(b[c], a[c]);
            };h.forEach = function (a, b) {
                for (var c = this.ja(), d = 0; d < c.length; d++) {
                    var e = c[d],
                        f = this.get(e);a.call(b, f, e, this);
                }
            };h.clone = function () {
                return new Td(this);
            };
            h.ge = function (a) {
                Ud(this);var b = 0,
                    c = this.nb,
                    d = this,
                    e = new Sd();e.next = function () {
                    if (c != d.nb) throw Error("The map has changed since the iterator was created");if (b >= d.w.length) throw Rd;var e = d.w[b++];return a ? e : d.ba[e];
                };return e;
            };var Vd = function (a, b) {
                return Object.prototype.hasOwnProperty.call(a, b);
            };var Wd = function (a) {
                if (a.X && "function" == typeof a.X) return a.X();if (p(a)) return a.split("");if (ea(a)) {
                    for (var b = [], c = a.length, d = 0; d < c; d++) b.push(a[d]);return b;
                }return Oa(a);
            },
                Xd = function (a) {
                if (a.ja && "function" == typeof a.ja) return a.ja();if (!a.X || "function" != typeof a.X) {
                    if (ea(a) || p(a)) {
                        var b = [];a = a.length;for (var c = 0; c < a; c++) b.push(c);return b;
                    }return Pa(a);
                }
            },
                Yd = function (a, b) {
                if (a.forEach && "function" == typeof a.forEach) a.forEach(b, void 0);else if (ea(a) || p(a)) x(a, b, void 0);else for (var c = Xd(a), d = Wd(a), e = d.length, f = 0; f < e; f++) b.call(void 0, d[f], c && c[f], a);
            };var Zd = function (a, b, c, d, e) {
                this.reset(a, b, c, d, e);
            };Zd.prototype.td = null;var $d = 0;Zd.prototype.reset = function (a, b, c, d, e) {
                "number" == typeof e || $d++;d || ka();this.wb = a;this.Oe = b;delete this.td;
            };Zd.prototype.Rd = function (a) {
                this.wb = a;
            };var ae = function (a) {
                this.Pe = a;this.zd = this.Dc = this.wb = this.s = null;
            },
                be = function (a, b) {
                this.name = a;this.value = b;
            };be.prototype.toString = function () {
                return this.name;
            };var ce = new be("SEVERE", 1E3),
                de = new be("CONFIG", 700),
                ee = new be("FINE", 500);ae.prototype.getParent = function () {
                return this.s;
            };ae.prototype.Rd = function (a) {
                this.wb = a;
            };var fe = function (a) {
                if (a.wb) return a.wb;if (a.s) return fe(a.s);xa("Root logger has no level set.");return null;
            };
            ae.prototype.log = function (a, b, c) {
                if (a.value >= fe(this).value) for (q(b) && (b = b()), a = new Zd(a, String(b), this.Pe), c && (a.td = c), c = "log:" + a.Oe, l.console && (l.console.timeStamp ? l.console.timeStamp(c) : l.console.markTimeline && l.console.markTimeline(c)), l.msWriteProfilerMark && l.msWriteProfilerMark(c), c = this; c;) {
                    var d = c,
                        e = a;if (d.zd) for (var f = 0; b = d.zd[f]; f++) b(e);c = c.getParent();
                }
            };
            var ge = {},
                he = null,
                ie = function (a) {
                he || (he = new ae(""), ge[""] = he, he.Rd(de));var b;if (!(b = ge[a])) {
                    b = new ae(a);var c = a.lastIndexOf("."),
                        d = a.substr(c + 1),
                        c = ie(a.substr(0, c));c.Dc || (c.Dc = {});c.Dc[d] = b;b.s = c;ge[a] = b;
                }return b;
            };var F = function (a, b) {
                a && a.log(ee, b, void 0);
            };var je = function (a, b, c) {
                if (q(a)) c && (a = r(a, c));else if (a && "function" == typeof a.handleEvent) a = r(a.handleEvent, a);else throw Error("Invalid listener argument");return 2147483647 < Number(b) ? -1 : l.setTimeout(a, b || 0);
            },
                ke = function (a) {
                var b = null;return new C(function (c, d) {
                    b = je(function () {
                        c(void 0);
                    }, a);-1 == b && d(Error("Failed to schedule timer."));
                }).g(function (a) {
                    l.clearTimeout(b);throw a;
                });
            };var le = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/,
                me = function (a, b) {
                if (a) {
                    a = a.split("&");for (var c = 0; c < a.length; c++) {
                        var d = a[c].indexOf("="),
                            e,
                            f = null;0 <= d ? (e = a[c].substring(0, d), f = a[c].substring(d + 1)) : e = a[c];b(e, f ? decodeURIComponent(f.replace(/\+/g, " ")) : "");
                    }
                }
            };var G = function (a) {
                Od.call(this);this.headers = new Td();this.zc = a || null;this.ra = !1;this.yc = this.b = null;this.vb = this.Fd = this.fc = "";this.Ca = this.Lc = this.dc = this.Fc = !1;this.kb = 0;this.tc = null;this.Md = "";this.wc = this.We = this.be = !1;
            };t(G, Od);var ne = G.prototype,
                oe = ie("goog.net.XhrIo");ne.T = oe;var pe = /^https?$/i,
                qe = ["POST", "PUT"];
            G.prototype.send = function (a, b, c, d) {
                if (this.b) throw Error("[goog.net.XhrIo] Object is active with another request=" + this.fc + "; newUri=" + a);b = b ? b.toUpperCase() : "GET";this.fc = a;this.vb = "";this.Fd = b;this.Fc = !1;this.ra = !0;this.b = this.zc ? this.zc.Sb() : Cc.Sb();this.yc = this.zc ? Bc(this.zc) : Bc(Cc);this.b.onreadystatechange = r(this.Jd, this);this.We && "onprogress" in this.b && (this.b.onprogress = r(function (a) {
                    this.Id(a, !0);
                }, this), this.b.upload && (this.b.upload.onprogress = r(this.Id, this)));try {
                    F(this.T, re(this, "Opening Xhr")), this.Lc = !0, this.b.open(b, String(a), !0), this.Lc = !1;
                } catch (f) {
                    F(this.T, re(this, "Error opening Xhr: " + f.message));this.O(5, f);return;
                }a = c || "";var e = this.headers.clone();d && Yd(d, function (a, b) {
                    e.set(b, a);
                });d = Ga(e.ja());c = l.FormData && a instanceof l.FormData;!Ha(qe, b) || d || c || e.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");e.forEach(function (a, b) {
                    this.b.setRequestHeader(b, a);
                }, this);this.Md && (this.b.responseType = this.Md);"withCredentials" in this.b && this.b.withCredentials !== this.be && (this.b.withCredentials = this.be);try {
                    se(this), 0 < this.kb && (this.wc = te(this.b), F(this.T, re(this, "Will abort after " + this.kb + "ms if incomplete, xhr2 " + this.wc)), this.wc ? (this.b.timeout = this.kb, this.b.ontimeout = r(this.Lb, this)) : this.tc = je(this.Lb, this.kb, this)), F(this.T, re(this, "Sending request")), this.dc = !0, this.b.send(a), this.dc = !1;
                } catch (f) {
                    F(this.T, re(this, "Send error: " + f.message)), this.O(5, f);
                }
            };var te = function (a) {
                return z && B(9) && fa(a.timeout) && void 0 !== a.ontimeout;
            },
                Fa = function (a) {
                return "content-type" == a.toLowerCase();
            };
            G.prototype.Lb = function () {
                "undefined" != typeof aa && this.b && (this.vb = "Timed out after " + this.kb + "ms, aborting", F(this.T, re(this, this.vb)), this.dispatchEvent("timeout"), this.abort(8));
            };G.prototype.O = function (a, b) {
                this.ra = !1;this.b && (this.Ca = !0, this.b.abort(), this.Ca = !1);this.vb = b;ue(this);ve(this);
            };var ue = function (a) {
                a.Fc || (a.Fc = !0, a.dispatchEvent("complete"), a.dispatchEvent("error"));
            };
            G.prototype.abort = function () {
                this.b && this.ra && (F(this.T, re(this, "Aborting")), this.ra = !1, this.Ca = !0, this.b.abort(), this.Ca = !1, this.dispatchEvent("complete"), this.dispatchEvent("abort"), ve(this));
            };G.prototype.Ta = function () {
                this.b && (this.ra && (this.ra = !1, this.Ca = !0, this.b.abort(), this.Ca = !1), ve(this, !0));G.hd.Ta.call(this);
            };G.prototype.Jd = function () {
                this.isDisposed() || (this.Lc || this.dc || this.Ca ? we(this) : this.Te());
            };G.prototype.Te = function () {
                we(this);
            };
            var we = function (a) {
                if (a.ra && "undefined" != typeof aa) if (a.yc[1] && 4 == xe(a) && 2 == ye(a)) F(a.T, re(a, "Local request error detected and ignored"));else if (a.dc && 4 == xe(a)) je(a.Jd, 0, a);else if (a.dispatchEvent("readystatechange"), 4 == xe(a)) {
                    F(a.T, re(a, "Request complete"));a.ra = !1;try {
                        var b = ye(a),
                            c;a: switch (b) {case 200:case 201:case 202:case 204:case 206:case 304:case 1223:
                                c = !0;break a;default:
                                c = !1;}var d;if (!(d = c)) {
                            var e;if (e = 0 === b) {
                                var f = String(a.fc).match(le)[1] || null;if (!f && l.self && l.self.location) var g = l.self.location.protocol,
                                    f = g.substr(0, g.length - 1);e = !pe.test(f ? f.toLowerCase() : "");
                            }d = e;
                        }if (d) a.dispatchEvent("complete"), a.dispatchEvent("success");else {
                            var k;try {
                                k = 2 < xe(a) ? a.b.statusText : "";
                            } catch (n) {
                                F(a.T, "Can not get status: " + n.message), k = "";
                            }a.vb = k + " [" + ye(a) + "]";ue(a);
                        }
                    } finally {
                        ve(a);
                    }
                }
            };G.prototype.Id = function (a, b) {
                w("progress" === a.type, "goog.net.EventType.PROGRESS is of the same type as raw XHR progress.");this.dispatchEvent(ze(a, "progress"));this.dispatchEvent(ze(a, b ? "downloadprogress" : "uploadprogress"));
            };
            var ze = function (a, b) {
                return { type: b, lengthComputable: a.lengthComputable, loaded: a.loaded, total: a.total };
            },
                ve = function (a, b) {
                if (a.b) {
                    se(a);var c = a.b,
                        d = a.yc[0] ? ba : null;a.b = null;a.yc = null;b || a.dispatchEvent("ready");try {
                        c.onreadystatechange = d;
                    } catch (e) {
                        (a = a.T) && a.log(ce, "Problem encountered resetting onreadystatechange: " + e.message, void 0);
                    }
                }
            },
                se = function (a) {
                a.b && a.wc && (a.b.ontimeout = null);fa(a.tc) && (l.clearTimeout(a.tc), a.tc = null);
            },
                xe = function (a) {
                return a.b ? a.b.readyState : 0;
            },
                ye = function (a) {
                try {
                    return 2 < xe(a) ? a.b.status : -1;
                } catch (b) {
                    return -1;
                }
            },
                Ae = function (a) {
                try {
                    return a.b ? a.b.responseText : "";
                } catch (b) {
                    return F(a.T, "Can not get responseText: " + b.message), "";
                }
            },
                re = function (a, b) {
                return b + " [" + a.Fd + " " + a.fc + " " + ye(a) + "]";
            };var Be = function (a, b) {
                this.$ = this.La = this.da = "";this.ab = null;this.Ba = this.ta = "";this.R = this.Ke = !1;var c;a instanceof Be ? (this.R = void 0 !== b ? b : a.R, Ce(this, a.da), c = a.La, H(this), this.La = c, De(this, a.$), Ee(this, a.ab), Fe(this, a.ta), Ge(this, a.V.clone()), a = a.Ba, H(this), this.Ba = a) : a && (c = String(a).match(le)) ? (this.R = !!b, Ce(this, c[1] || "", !0), a = c[2] || "", H(this), this.La = He(a), De(this, c[3] || "", !0), Ee(this, c[4]), Fe(this, c[5] || "", !0), Ge(this, c[6] || "", !0), a = c[7] || "", H(this), this.Ba = He(a)) : (this.R = !!b, this.V = new I(null, 0, this.R));
            };Be.prototype.toString = function () {
                var a = [],
                    b = this.da;b && a.push(Ie(b, Je, !0), ":");var c = this.$;if (c || "file" == b) a.push("//"), (b = this.La) && a.push(Ie(b, Je, !0), "@"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.ab, null != c && a.push(":", String(c));if (c = this.ta) this.$ && "/" != c.charAt(0) && a.push("/"), a.push(Ie(c, "/" == c.charAt(0) ? Ke : Le, !0));(c = this.V.toString()) && a.push("?", c);(c = this.Ba) && a.push("#", Ie(c, Me));return a.join("");
            };
            Be.prototype.resolve = function (a) {
                var b = this.clone(),
                    c = !!a.da;c ? Ce(b, a.da) : c = !!a.La;if (c) {
                    var d = a.La;H(b);b.La = d;
                } else c = !!a.$;c ? De(b, a.$) : c = null != a.ab;d = a.ta;if (c) Ee(b, a.ab);else if (c = !!a.ta) {
                    if ("/" != d.charAt(0)) if (this.$ && !this.ta) d = "/" + d;else {
                        var e = b.ta.lastIndexOf("/");-1 != e && (d = b.ta.substr(0, e + 1) + d);
                    }e = d;if (".." == e || "." == e) d = "";else if (v(e, "./") || v(e, "/.")) {
                        for (var d = 0 == e.lastIndexOf("/", 0), e = e.split("/"), f = [], g = 0; g < e.length;) {
                            var k = e[g++];"." == k ? d && g == e.length && f.push("") : ".." == k ? ((1 < f.length || 1 == f.length && "" != f[0]) && f.pop(), d && g == e.length && f.push("")) : (f.push(k), d = !0);
                        }d = f.join("/");
                    } else d = e;
                }c ? Fe(b, d) : c = "" !== a.V.toString();c ? Ge(b, a.V.clone()) : c = !!a.Ba;c && (a = a.Ba, H(b), b.Ba = a);return b;
            };Be.prototype.clone = function () {
                return new Be(this);
            };
            var Ce = function (a, b, c) {
                H(a);a.da = c ? He(b, !0) : b;a.da && (a.da = a.da.replace(/:$/, ""));
            },
                De = function (a, b, c) {
                H(a);a.$ = c ? He(b, !0) : b;
            },
                Ee = function (a, b) {
                H(a);if (b) {
                    b = Number(b);if (isNaN(b) || 0 > b) throw Error("Bad port number " + b);a.ab = b;
                } else a.ab = null;
            },
                Fe = function (a, b, c) {
                H(a);a.ta = c ? He(b, !0) : b;
            },
                Ge = function (a, b, c) {
                H(a);b instanceof I ? (a.V = b, a.V.dd(a.R)) : (c || (b = Ie(b, Ne)), a.V = new I(b, 0, a.R));
            },
                J = function (a, b, c) {
                H(a);a.V.set(b, c);
            },
                Oe = function (a, b) {
                return a.V.get(b);
            },
                Pe = function (a, b) {
                H(a);a.V.remove(b);
            },
                H = function (a) {
                if (a.Ke) throw Error("Tried to modify a read-only Uri");
            };Be.prototype.dd = function (a) {
                this.R = a;this.V && this.V.dd(a);return this;
            };
            var Qe = function (a) {
                return a instanceof Be ? a.clone() : new Be(a, void 0);
            },
                Re = function (a, b) {
                var c = new Be(null, void 0);Ce(c, "https");a && De(c, a);b && Fe(c, b);return c;
            },
                He = function (a, b) {
                return a ? b ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : "";
            },
                Ie = function (a, b, c) {
                return p(a) ? (a = encodeURI(a).replace(b, Se), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null;
            },
                Se = function (a) {
                a = a.charCodeAt(0);return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16);
            },
                Je = /[#\/\?@]/g,
                Le = /[\#\?:]/g,
                Ke = /[\#\?]/g,
                Ne = /[\#\?@]/g,
                Me = /#/g,
                I = function (a, b, c) {
                this.o = this.l = null;this.N = a || null;this.R = !!c;
            },
                Te = function (a) {
                a.l || (a.l = new Td(), a.o = 0, a.N && me(a.N, function (b, c) {
                    a.add(decodeURIComponent(b.replace(/\+/g, " ")), c);
                }));
            },
                Ve = function (a) {
                var b = Xd(a);if ("undefined" == typeof b) throw Error("Keys are undefined");var c = new I(null, 0, void 0);a = Wd(a);for (var d = 0; d < b.length; d++) {
                    var e = b[d],
                        f = a[d];da(f) ? Ue(c, e, f) : c.add(e, f);
                }return c;
            };h = I.prototype;
            h.add = function (a, b) {
                Te(this);this.N = null;a = this.P(a);var c = this.l.get(a);c || this.l.set(a, c = []);c.push(b);this.o = ya(this.o) + 1;return this;
            };h.remove = function (a) {
                Te(this);a = this.P(a);return this.l.pb(a) ? (this.N = null, this.o = ya(this.o) - this.l.get(a).length, this.l.remove(a)) : !1;
            };h.pb = function (a) {
                Te(this);a = this.P(a);return this.l.pb(a);
            };h.ja = function () {
                Te(this);for (var a = this.l.X(), b = this.l.ja(), c = [], d = 0; d < b.length; d++) for (var e = a[d], f = 0; f < e.length; f++) c.push(b[d]);return c;
            };
            h.X = function (a) {
                Te(this);var b = [];if (p(a)) this.pb(a) && (b = La(b, this.l.get(this.P(a))));else {
                    a = this.l.X();for (var c = 0; c < a.length; c++) b = La(b, a[c]);
                }return b;
            };h.set = function (a, b) {
                Te(this);this.N = null;a = this.P(a);this.pb(a) && (this.o = ya(this.o) - this.l.get(a).length);this.l.set(a, [b]);this.o = ya(this.o) + 1;return this;
            };h.get = function (a, b) {
                a = a ? this.X(a) : [];return 0 < a.length ? String(a[0]) : b;
            };var Ue = function (a, b, c) {
                a.remove(b);0 < c.length && (a.N = null, a.l.set(a.P(b), Ma(c)), a.o = ya(a.o) + c.length);
            };
            I.prototype.toString = function () {
                if (this.N) return this.N;if (!this.l) return "";for (var a = [], b = this.l.ja(), c = 0; c < b.length; c++) for (var d = b[c], e = encodeURIComponent(String(d)), d = this.X(d), f = 0; f < d.length; f++) {
                    var g = e;"" !== d[f] && (g += "=" + encodeURIComponent(String(d[f])));a.push(g);
                }return this.N = a.join("&");
            };I.prototype.clone = function () {
                var a = new I();a.N = this.N;this.l && (a.l = this.l.clone(), a.o = this.o);return a;
            };I.prototype.P = function (a) {
                a = String(a);this.R && (a = a.toLowerCase());return a;
            };
            I.prototype.dd = function (a) {
                a && !this.R && (Te(this), this.N = null, this.l.forEach(function (a, c) {
                    var b = c.toLowerCase();c != b && (this.remove(c), Ue(this, b, a));
                }, this));this.R = a;
            };var We = function () {
                var a = K();return z && !!mb && 11 == mb || /Edge\/\d+/.test(a);
            },
                Xe = function () {
                return l.window && l.window.location.href || "";
            },
                Ye = function (a, b) {
                b = b || l.window;var c = "about:blank";a && (c = qc(tc(a)));b.location.href = c;
            },
                Ze = function (a, b) {
                var c = [],
                    d;for (d in a) d in b ? typeof a[d] != typeof b[d] ? c.push(d) : da(a[d]) ? Ra(a[d], b[d]) || c.push(d) : "object" == typeof a[d] && null != a[d] && null != b[d] ? 0 < Ze(a[d], b[d]).length && c.push(d) : a[d] !== b[d] && c.push(d) : c.push(d);for (d in b) d in a || c.push(d);return c;
            },
                af = function () {
                var a;
                a = K();a = "Chrome" != $e(a) ? null : (a = a.match(/\sChrome\/(\d+)/i)) && 2 == a.length ? parseInt(a[1], 10) : null;return a && 30 > a ? !1 : !z || !mb || 9 < mb;
            },
                bf = function (a) {
                a = (a || K()).toLowerCase();return a.match(/android/) || a.match(/webos/) || a.match(/iphone|ipad|ipod/) || a.match(/blackberry/) || a.match(/windows phone/) || a.match(/iemobile/) ? !0 : !1;
            },
                cf = function (a) {
                a = a || l.window;try {
                    a.close();
                } catch (b) {}
            },
                df = function (a, b, c) {
                var d = Math.floor(1E9 * Math.random()).toString();b = b || 500;c = c || 600;var e = (window.screen.availHeight - c) / 2,
                    f = (window.screen.availWidth - b) / 2;b = { width: b, height: c, top: 0 < e ? e : 0, left: 0 < f ? f : 0, location: !0, resizable: !0, statusbar: !0, toolbar: !1 };c = K().toLowerCase();d && (b.target = d, v(c, "crios/") && (b.target = "_blank"));"Firefox" == $e(K()) && (a = a || "http://localhost", b.scrollbars = !0);var g;c = a || "about:blank";(d = b) || (d = {});a = window;b = c instanceof pc ? c : tc("undefined" != typeof c.href ? c.href : String(c));c = d.target || c.target;e = [];for (g in d) switch (g) {case "width":case "height":case "top":case "left":
                        e.push(g + "=" + d[g]);break;case "target":case "noreferrer":
                        break;
                    default:
                        e.push(g + "=" + (d[g] ? 1 : 0));}g = e.join(",");(y("iPhone") && !y("iPod") && !y("iPad") || y("iPad") || y("iPod")) && a.navigator && a.navigator.standalone && c && "_self" != c ? (g = a.document.createElement("A"), "undefined" != typeof HTMLAnchorElement && "undefined" != typeof Location && "undefined" != typeof Element && (e = g && (g instanceof HTMLAnchorElement || !(g instanceof Location || g instanceof Element)), f = ga(g) ? g.constructor.displayName || g.constructor.name || Object.prototype.toString.call(g) : void 0 === g ? "undefined" : null === g ? "null" : typeof g, w(e, "Argument is not a HTMLAnchorElement (or a non-Element mock); got: %s", f)), b = b instanceof pc ? b : tc(b), g.href = qc(b), g.setAttribute("target", c), d.noreferrer && g.setAttribute("rel", "noreferrer"), d = document.createEvent("MouseEvent"), d.initMouseEvent("click", !0, !0, a, 1), g.dispatchEvent(d), g = {}) : d.noreferrer ? (g = a.open("", c, g), d = qc(b), g && (db && v(d, ";") && (d = "'" + d.replace(/'/g, "%27") + "'"), g.opener = null, a = lc("b/12014412, meta tag with sanitized URL"), ta.test(d) && (-1 != d.indexOf("&") && (d = d.replace(na, "&amp;")), -1 != d.indexOf("<") && (d = d.replace(oa, "&lt;")), -1 != d.indexOf(">") && (d = d.replace(pa, "&gt;")), -1 != d.indexOf('"') && (d = d.replace(qa, "&quot;")), -1 != d.indexOf("'") && (d = d.replace(ra, "&#39;")), -1 != d.indexOf("\x00") && (d = d.replace(sa, "&#0;"))), d = '<META HTTP-EQUIV="refresh" content="0; url=' + d + '">', za(kc(a), "must provide justification"), w(!/^[\s\xa0]*$/.test(kc(a)), "must provide non-empty justification"), g.document.write(Kc(new Jc().He(d))), g.document.close())) : g = a.open(qc(b), c, g);if (g) try {
                    g.focus();
                } catch (k) {}return g;
            },
                ef = function (a) {
                return new C(function (b) {
                    var c = function () {
                        ke(2E3).then(function () {
                            if (!a || a.closed) b();else return c();
                        });
                    };return c();
                });
            },
                ff = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,
                gf = function () {
                var a = null;return new C(function (b) {
                    "complete" == l.document.readyState ? b() : (a = function () {
                        b();
                    }, ac(window, "load", a));
                }).g(function (b) {
                    cc(window, "load", a);throw b;
                });
            },
                jf = function () {
                return hf(void 0) ? gf().then(function () {
                    return new C(function (a, b) {
                        var c = l.document,
                            d = setTimeout(function () {
                            b(Error("Cordova framework is not ready."));
                        }, 1E3);c.addEventListener("deviceready", function () {
                            clearTimeout(d);a();
                        }, !1);
                    });
                }) : E(Error("Cordova must run in an Android or iOS file scheme."));
            },
                hf = function (a) {
                a = a || K();return !("file:" !== kf() || !a.toLowerCase().match(/iphone|ipad|ipod|android/));
            },
                lf = function () {
                var a = l.window;try {
                    return !(!a || a == a.top);
                } catch (b) {
                    return !1;
                }
            },
                L = function () {
                return firebase.INTERNAL.hasOwnProperty("reactNative") ? "ReactNative" : firebase.INTERNAL.hasOwnProperty("node") ? "Node" : "Browser";
            },
                mf = function () {
                var a = L();return "ReactNative" === a || "Node" === a;
            },
                $e = function (a) {
                var b = a.toLowerCase();if (v(b, "opera/") || v(b, "opr/") || v(b, "opios/")) return "Opera";if (v(b, "iemobile")) return "IEMobile";if (v(b, "msie") || v(b, "trident/")) return "IE";if (v(b, "edge/")) return "Edge";if (v(b, "firefox/")) return "Firefox";if (v(b, "silk/")) return "Silk";if (v(b, "blackberry")) return "Blackberry";if (v(b, "webos")) return "Webos";if (!v(b, "safari/") || v(b, "chrome/") || v(b, "crios/") || v(b, "android")) {
                    if (!v(b, "chrome/") && !v(b, "crios/") || v(b, "edge/")) {
                        if (v(b, "android")) return "Android";
                        if ((a = a.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/)) && 2 == a.length) return a[1];
                    } else return "Chrome";
                } else return "Safari";return "Other";
            },
                nf = function (a) {
                var b = L();return ("Browser" === b ? $e(K()) : b) + "/JsCore/" + a;
            },
                K = function () {
                return l.navigator && l.navigator.userAgent || "";
            },
                M = function (a, b) {
                a = a.split(".");b = b || l;for (var c = 0; c < a.length && "object" == typeof b && null != b; c++) b = b[a[c]];c != a.length && (b = void 0);return b;
            },
                qf = function () {
                var a;if (a = (of() || "chrome-extension:" === kf() || hf() && !1) && !mf()) a: {
                    try {
                        var b = l.localStorage,
                            c = pf();if (b) {
                            b.setItem(c, "1");b.removeItem(c);a = We() ? !!l.indexedDB : !0;break a;
                        }
                    } catch (d) {}a = !1;
                }return a;
            },
                of = function () {
                return "http:" === kf() || "https:" === kf();
            },
                kf = function () {
                return l.location && l.location.protocol || null;
            },
                rf = function (a) {
                a = a || K();return bf(a) || "Firefox" == $e(a) ? !1 : !0;
            },
                sf = function (a) {
                return "undefined" === typeof a ? null : wc(a);
            },
                tf = function (a) {
                var b = {},
                    c;for (c in a) a.hasOwnProperty(c) && null !== a[c] && void 0 !== a[c] && (b[c] = a[c]);return b;
            },
                uf = function (a) {
                if (null !== a) return JSON.parse(a);
            },
                pf = function (a) {
                return a ? a : "" + Math.floor(1E9 * Math.random()).toString();
            },
                vf = function (a) {
                a = a || K();return "Safari" == $e(a) || a.toLowerCase().match(/iphone|ipad|ipod/) ? !1 : !0;
            },
                wf = function () {
                var a = l.___jsl;if (a && a.H) for (var b in a.H) if (a.H[b].r = a.H[b].r || [], a.H[b].L = a.H[b].L || [], a.H[b].r = a.H[b].L.concat(), a.CP) for (var c = 0; c < a.CP.length; c++) a.CP[c] = null;
            },
                xf = function () {
                return l.navigator && "boolean" === typeof l.navigator.onLine ? l.navigator.onLine : !0;
            },
                yf = function (a, b, c, d) {
                if (a > b) throw Error("Short delay should be less than long delay!");
                this.ff = a;this.Ne = b;a = c || K();d = d || L();this.Je = bf(a) || "ReactNative" === d;
            };yf.prototype.get = function () {
                return this.Je ? this.Ne : this.ff;
            };var zf;try {
                var Af = {};Object.defineProperty(Af, "abcd", { configurable: !0, enumerable: !0, value: 1 });Object.defineProperty(Af, "abcd", { configurable: !0, enumerable: !0, value: 2 });zf = 2 == Af.abcd;
            } catch (a) {
                zf = !1;
            }
            var N = function (a, b, c) {
                zf ? Object.defineProperty(a, b, { configurable: !0, enumerable: !0, value: c }) : a[b] = c;
            },
                Bf = function (a, b) {
                if (b) for (var c in b) b.hasOwnProperty(c) && N(a, c, b[c]);
            },
                Cf = function (a) {
                var b = {},
                    c;for (c in a) a.hasOwnProperty(c) && (b[c] = a[c]);return b;
            },
                Df = function (a, b) {
                if (!b || !b.length) return !0;if (!a) return !1;for (var c = 0; c < b.length; c++) {
                    var d = a[b[c]];if (void 0 === d || null === d || "" === d) return !1;
                }return !0;
            },
                Ef = function (a) {
                var b = a;if ("object" == typeof a && null != a) {
                    var b = "length" in a ? [] : {},
                        c;for (c in a) N(b, c, Ef(a[c]));
                }return b;
            };var Ff = "oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "),
                Gf = ["client_id", "response_type", "scope", "redirect_uri", "state"],
                Hf = { rf: { Ab: 500, zb: 600, providerId: "facebook.com", ad: Gf }, sf: { Ab: 500, zb: 620, providerId: "github.com", ad: Gf }, tf: { Ab: 515, zb: 680, providerId: "google.com", ad: Gf }, uf: { Ab: 485, zb: 705, providerId: "twitter.com", ad: Ff } },
                If = function (a) {
                for (var b in Hf) if (Hf[b].providerId == a) return Hf[b];return null;
            };var O = function (a, b) {
                this.code = "auth/" + a;this.message = b || Jf[a] || "";
            };t(O, Error);O.prototype.C = function () {
                return { code: this.code, message: this.message };
            };O.prototype.toJSON = function () {
                return this.C();
            };
            var Kf = function (a) {
                var b = a && a.code;return b ? new O(b.substring(5), a.message) : null;
            },
                Jf = { "argument-error": "", "app-not-authorized": "This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.", "app-not-installed": "The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.", "cordova-not-ready": "Cordova framework is not ready.",
                "cors-unsupported": "This browser is not supported.", "credential-already-in-use": "This credential is already associated with a different user account.", "custom-token-mismatch": "The custom token corresponds to a different audience.", "requires-recent-login": "This operation is sensitive and requires recent authentication. Log in again before retrying this request.", "dynamic-link-not-activated": "Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.", "email-already-in-use": "The email address is already in use by another account.",
                "expired-action-code": "The action code has expired. ", "cancelled-popup-request": "This operation has been cancelled due to another conflicting popup being opened.", "internal-error": "An internal error has occurred.", "invalid-user-token": "The user's credential is no longer valid. The user must sign in again.", "invalid-auth-event": "An internal error has occurred.", "invalid-cordova-configuration": "The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.",
                "invalid-custom-token": "The custom token format is incorrect. Please check the documentation.", "invalid-email": "The email address is badly formatted.", "invalid-api-key": "Your API key is invalid, please check you have copied it correctly.", "invalid-credential": "The supplied auth credential is malformed or has expired.", "invalid-message-payload": "The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.",
                "invalid-oauth-provider": "EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.", "unauthorized-domain": "This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.", "invalid-action-code": "The action code is invalid. This can happen if the code is malformed, expired, or has already been used.", "wrong-password": "The password is invalid or the user does not have a password.",
                "invalid-recipient-email": "The email corresponding to this action failed to send as the provided recipient email address is invalid.", "invalid-sender": "The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.", "missing-iframe-start": "An internal error has occurred.", "auth-domain-config-required": "Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.",
                "app-deleted": "This instance of FirebaseApp has been deleted.", "account-exists-with-different-credential": "An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.", "network-request-failed": "A network error (such as timeout, interrupted connection or unreachable host) has occurred.", "no-auth-event": "An internal error has occurred.", "no-such-provider": "User was not linked to an account with the given provider.",
                "operation-not-allowed": "The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.", "operation-not-supported-in-this-environment": 'This operation is not supported in the environment this application is running on. "location.protocol" must be http or https and web storage must be enabled.', "popup-blocked": "Unable to establish a connection with the popup. It may have been blocked by the browser.", "popup-closed-by-user": "The popup has been closed by the user before finalizing the operation.",
                "provider-already-linked": "User can only be linked to one identity for the given provider.", "redirect-cancelled-by-user": "The redirect operation has been cancelled by the user before finalizing.", "redirect-operation-pending": "A redirect sign-in operation is already pending.", timeout: "The operation has timed out.", "user-token-expired": "The user's credential is no longer valid. The user must sign in again.", "too-many-requests": "We have blocked all requests from this device due to unusual activity. Try again later.",
                "user-cancelled": "User did not grant your application the permissions it requested.", "user-not-found": "There is no user record corresponding to this identifier. The user may have been deleted.", "user-disabled": "The user account has been disabled by an administrator.", "user-mismatch": "The supplied credentials do not correspond to the previously signed in user.", "user-signed-out": "", "weak-password": "The password must be 6 characters long or more.", "web-storage-unsupported": "This browser is not supported or 3rd party cookies and data may be disabled." };var P = function (a, b, c, d, e) {
                this.fa = a;this.F = b || null;this.mb = c || null;this.cd = d || null;this.O = e || null;if (this.mb || this.O) {
                    if (this.mb && this.O) throw new O("invalid-auth-event");if (this.mb && !this.cd) throw new O("invalid-auth-event");
                } else throw new O("invalid-auth-event");
            };P.prototype.Wb = function () {
                return this.cd;
            };P.prototype.getError = function () {
                return this.O;
            };P.prototype.C = function () {
                return { type: this.fa, eventId: this.F, urlResponse: this.mb, sessionId: this.cd, error: this.O && this.O.C() };
            };
            var Lf = function (a) {
                a = a || {};return a.type ? new P(a.type, a.eventId, a.urlResponse, a.sessionId, a.error && Kf(a.error)) : null;
            };var Mf = function (a) {
                var b = "unauthorized-domain",
                    c = void 0,
                    d = Qe(a);a = d.$;d = d.da;"http" != d && "https" != d ? b = "operation-not-supported-in-this-environment" : c = la("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.", a);O.call(this, b, c);
            };t(Mf, O);var Nf = function (a) {
                this.Me = a.sub;ka();this.Tb = a.email || null;
            };var Of = function (a, b) {
                if (b.idToken || b.accessToken) b.idToken && N(this, "idToken", b.idToken), b.accessToken && N(this, "accessToken", b.accessToken);else if (b.oauthToken && b.oauthTokenSecret) N(this, "accessToken", b.oauthToken), N(this, "secret", b.oauthTokenSecret);else throw new O("internal-error", "failed to construct a credential");N(this, "provider", a);
            };Of.prototype.Vb = function (a) {
                return Pf(a, Qf(this));
            };Of.prototype.Gd = function (a, b) {
                var c = Qf(this);c.idToken = b;return Rf(a, c);
            };
            var Qf = function (a) {
                var b = {};a.idToken && (b.id_token = a.idToken);a.accessToken && (b.access_token = a.accessToken);a.secret && (b.oauth_token_secret = a.secret);b.providerId = a.provider;return { postBody: Ve(b).toString(), requestUri: "http://localhost" };
            };Of.prototype.C = function () {
                var a = { provider: this.provider };this.idToken && (a.oauthIdToken = this.idToken);this.accessToken && (a.oauthAccessToken = this.accessToken);this.secret && (a.oauthTokenSecret = this.secret);return a;
            };
            var Sf = function (a, b) {
                this.Ye = b || [];Bf(this, { providerId: a, isOAuthProvider: !0 });this.qd = {};
            };Sf.prototype.setCustomParameters = function (a) {
                this.qd = Sa(a);return this;
            };var Q = function (a) {
                Sf.call(this, a, Gf);this.bd = [];
            };t(Q, Sf);Q.prototype.addScope = function (a) {
                Ha(this.bd, a) || this.bd.push(a);return this;
            };Q.prototype.xd = function () {
                return Ma(this.bd);
            };
            Q.prototype.credential = function (a, b) {
                if (!a && !b) throw new O("argument-error", "credential failed: must provide the ID token and/or the access token.");return new Of(this.providerId, { idToken: a || null, accessToken: b || null });
            };var Tf = function () {
                Q.call(this, "facebook.com");
            };t(Tf, Q);N(Tf, "PROVIDER_ID", "facebook.com");var Uf = function (a) {
                if (!a) throw new O("argument-error", "credential failed: expected 1 argument (the OAuth access token).");return new Tf().credential(null, a);
            },
                Vf = function () {
                Q.call(this, "github.com");
            };
            t(Vf, Q);N(Vf, "PROVIDER_ID", "github.com");var Wf = function (a) {
                if (!a) throw new O("argument-error", "credential failed: expected 1 argument (the OAuth access token).");return new Vf().credential(null, a);
            },
                Xf = function () {
                Q.call(this, "google.com");this.addScope("profile");
            };t(Xf, Q);N(Xf, "PROVIDER_ID", "google.com");var Yf = function (a, b) {
                return new Xf().credential(a, b);
            },
                Zf = function () {
                Sf.call(this, "twitter.com", Ff);
            };t(Zf, Sf);N(Zf, "PROVIDER_ID", "twitter.com");
            var $f = function (a, b) {
                if (!a || !b) throw new O("argument-error", "credential failed: expected 2 arguments (the OAuth access token and secret).");return new Of("twitter.com", { oauthToken: a, oauthTokenSecret: b });
            },
                ag = function (a, b) {
                this.Tb = a;this.Uc = b;N(this, "provider", "password");
            };ag.prototype.Vb = function (a) {
                return R(a, bg, { email: this.Tb, password: this.Uc });
            };ag.prototype.Gd = function (a, b) {
                return R(a, cg, { idToken: b, email: this.Tb, password: this.Uc });
            };ag.prototype.C = function () {
                return { email: this.Tb, password: this.Uc };
            };
            var dg = function () {
                Bf(this, { providerId: "password", isOAuthProvider: !1 });
            };Bf(dg, { PROVIDER_ID: "password" });
            var eg = function (a) {
                var b = a && a.providerId;if (!b || "password" === b) return null;var c = a && a.oauthAccessToken,
                    d = a && a.oauthTokenSecret;a = a && a.oauthIdToken;try {
                    switch (b) {case "google.com":
                            return Yf(a, c);case "facebook.com":
                            return Uf(c);case "github.com":
                            return Wf(c);case "twitter.com":
                            return $f(c, d);default:
                            return new Q(b).credential(a, c);}
                } catch (e) {
                    return null;
                }
            },
                fg = function (a) {
                if (!a.isOAuthProvider) throw new O("invalid-oauth-provider");
            };var gg = function (a, b, c, d) {
                O.call(this, a, d);N(this, "email", b);N(this, "credential", c);
            };t(gg, O);gg.prototype.C = function () {
                var a = { code: this.code, message: this.message, email: this.email },
                    b = this.credential && this.credential.C();b && (Ua(a, b), a.providerId = b.provider, delete a.provider);return a;
            };gg.prototype.toJSON = function () {
                return this.C();
            };var hg = function (a) {
                if (a.code) {
                    var b = a.code || "";0 == b.indexOf("auth/") && (b = b.substring(5));return a.email ? new gg(b, a.email, eg(a), a.message) : new O(b, a.message || void 0);
                }return null;
            };var ig = function (a) {
                this.qf = a;
            };t(ig, Ac);ig.prototype.Sb = function () {
                return new this.qf();
            };ig.prototype.Nc = function () {
                return {};
            };
            var S = function (a, b, c) {
                var d;d = "Node" == L();d = l.XMLHttpRequest || d && firebase.INTERNAL.node && firebase.INTERNAL.node.XMLHttpRequest;if (!d) throw new O("internal-error", "The XMLHttpRequest compatibility library was not found.");this.j = a;a = b || {};this.bf = a.secureTokenEndpoint || "https://securetoken.googleapis.com/v1/token";this.cf = a.secureTokenTimeout || jg;this.Pd = Sa(a.secureTokenHeaders || kg);this.se = a.firebaseEndpoint || "https://www.googleapis.com/identitytoolkit/v3/relyingparty/";this.te = a.firebaseTimeout || lg;this.vd = Sa(a.firebaseHeaders || mg);c && (this.vd["X-Client-Version"] = c, this.Pd["X-Client-Version"] = c);this.ke = new Fc();this.pf = new ig(d);
            },
                ng,
                jg = new yf(3E4, 6E4),
                kg = { "Content-Type": "application/x-www-form-urlencoded" },
                lg = new yf(3E4, 6E4),
                mg = { "Content-Type": "application/json" },
                pg = function (a, b, c, d, e, f, g) {
                xf() ? (af() ? a = r(a.ef, a) : (ng || (ng = new C(function (a, b) {
                    og(a, b);
                })), a = r(a.df, a)), a(b, c, d, e, f, g)) : c && c(null);
            };
            S.prototype.ef = function (a, b, c, d, e, f) {
                var g = "Node" == L(),
                    k = mf() ? g ? new G(this.pf) : new G() : new G(this.ke),
                    n;f && (k.kb = Math.max(0, f), n = setTimeout(function () {
                    k.dispatchEvent("timeout");
                }, f));k.listen("complete", function () {
                    n && clearTimeout(n);var a = null;try {
                        a = JSON.parse(Ae(this)) || null;
                    } catch (Xa) {
                        a = null;
                    }b && b(a);
                });bc(k, "ready", function () {
                    n && clearTimeout(n);this.Aa || (this.Aa = !0, this.Ta());
                });bc(k, "timeout", function () {
                    n && clearTimeout(n);this.Aa || (this.Aa = !0, this.Ta());b && b(null);
                });k.send(a, c, d, e);
            };
            var Dd = "__fcb" + Math.floor(1E6 * Math.random()).toString(),
                og = function (a, b) {
                ((window.gapi || {}).client || {}).request ? a() : (l[Dd] = function () {
                    ((window.gapi || {}).client || {}).request ? a() : b(Error("CORS_UNSUPPORTED"));
                }, Fd(function () {
                    b(Error("CORS_UNSUPPORTED"));
                }));
            };
            S.prototype.df = function (a, b, c, d, e) {
                var f = this;ng.then(function () {
                    window.gapi.client.setApiKey(f.j);var g = window.gapi.auth.getToken();window.gapi.auth.setToken(null);window.gapi.client.request({ path: a, method: c, body: d, headers: e, authType: "none", callback: function (a) {
                            window.gapi.auth.setToken(g);b && b(a);
                        } });
                }).g(function (a) {
                    b && b({ error: { message: a && a.message || "CORS_UNSUPPORTED" } });
                });
            };
            var rg = function (a, b) {
                return new C(function (c, d) {
                    "refresh_token" == b.grant_type && b.refresh_token || "authorization_code" == b.grant_type && b.code ? pg(a, a.bf + "?key=" + encodeURIComponent(a.j), function (a) {
                        a ? a.error ? d(qg(a)) : a.access_token && a.refresh_token ? c(a) : d(new O("internal-error")) : d(new O("network-request-failed"));
                    }, "POST", Ve(b).toString(), a.Pd, a.cf.get()) : d(new O("internal-error"));
                });
            },
                sg = function (a, b, c, d, e) {
                var f = Qe(a.se + b);J(f, "key", a.j);e && J(f, "cb", ka().toString());var g = "GET" == c;if (g) for (var k in d) d.hasOwnProperty(k) && J(f, k, d[k]);return new C(function (b, e) {
                    pg(a, f.toString(), function (a) {
                        a ? a.error ? e(qg(a)) : b(a) : e(new O("network-request-failed"));
                    }, c, g ? void 0 : wc(tf(d)), a.vd, a.te.get());
                });
            },
                tg = function (a) {
                if (!hc.test(a.email)) throw new O("invalid-email");
            },
                ug = function (a) {
                "email" in a && tg(a);
            },
                wg = function (a, b) {
                return R(a, vg, { identifier: b, continueUri: of() ? Xe() : "http://localhost" }).then(function (a) {
                    return a.allProviders || [];
                });
            },
                yg = function (a) {
                return R(a, xg, {}).then(function (a) {
                    return a.authorizedDomains || [];
                });
            },
                zg = function (a) {
                if (!a.idToken) throw new O("internal-error");
            };S.prototype.signInAnonymously = function () {
                return R(this, Ag, {});
            };S.prototype.updateEmail = function (a, b) {
                return R(this, Bg, { idToken: a, email: b });
            };S.prototype.updatePassword = function (a, b) {
                return R(this, cg, { idToken: a, password: b });
            };var Cg = { displayName: "DISPLAY_NAME", photoUrl: "PHOTO_URL" };S.prototype.updateProfile = function (a, b) {
                var c = { idToken: a },
                    d = [];Na(Cg, function (a, f) {
                    var e = b[f];null === e ? d.push(a) : f in b && (c[f] = e);
                });d.length && (c.deleteAttribute = d);return R(this, Bg, c);
            };
            S.prototype.sendPasswordResetEmail = function (a) {
                return R(this, Dg, { requestType: "PASSWORD_RESET", email: a });
            };S.prototype.sendEmailVerification = function (a) {
                return R(this, Eg, { requestType: "VERIFY_EMAIL", idToken: a });
            };
            var Gg = function (a, b, c) {
                return R(a, Fg, { idToken: b, deleteProvider: c });
            },
                Hg = function (a) {
                if (!a.requestUri || !a.sessionId && !a.postBody) throw new O("internal-error");
            },
                Ig = function (a) {
                var b = null;a.needConfirmation ? (a.code = "account-exists-with-different-credential", b = hg(a)) : "FEDERATED_USER_ID_ALREADY_LINKED" == a.errorMessage ? (a.code = "credential-already-in-use", b = hg(a)) : "EMAIL_EXISTS" == a.errorMessage && (a.code = "email-already-in-use", b = hg(a));if (b) throw b;if (!a.idToken) throw new O("internal-error");
            },
                Pf = function (a, b) {
                b.returnIdpCredential = !0;return R(a, Jg, b);
            },
                Rf = function (a, b) {
                b.returnIdpCredential = !0;return R(a, Kg, b);
            },
                Lg = function (a) {
                if (!a.oobCode) throw new O("invalid-action-code");
            };S.prototype.confirmPasswordReset = function (a, b) {
                return R(this, Mg, { oobCode: a, newPassword: b });
            };S.prototype.checkActionCode = function (a) {
                return R(this, Ng, { oobCode: a });
            };S.prototype.applyActionCode = function (a) {
                return R(this, Og, { oobCode: a });
            };
            var Og = { endpoint: "setAccountInfo", K: Lg, jb: "email" },
                Ng = { endpoint: "resetPassword", K: Lg, va: function (a) {
                    if (!a.email || !a.requestType) throw new O("internal-error");
                } },
                Pg = { endpoint: "signupNewUser", K: function (a) {
                    tg(a);if (!a.password) throw new O("weak-password");
                }, va: zg, wa: !0 },
                vg = { endpoint: "createAuthUri" },
                Qg = { endpoint: "deleteAccount", ib: ["idToken"] },
                Fg = { endpoint: "setAccountInfo", ib: ["idToken", "deleteProvider"], K: function (a) {
                    if (!da(a.deleteProvider)) throw new O("internal-error");
                } },
                Rg = { endpoint: "getAccountInfo" },
                Eg = { endpoint: "getOobConfirmationCode", ib: ["idToken", "requestType"], K: function (a) {
                    if ("VERIFY_EMAIL" != a.requestType) throw new O("internal-error");
                }, jb: "email" },
                Dg = { endpoint: "getOobConfirmationCode", ib: ["requestType"], K: function (a) {
                    if ("PASSWORD_RESET" != a.requestType) throw new O("internal-error");tg(a);
                }, jb: "email" },
                xg = { je: !0, endpoint: "getProjectConfig", De: "GET" },
                Mg = { endpoint: "resetPassword", K: Lg, jb: "email" },
                Bg = { endpoint: "setAccountInfo", ib: ["idToken"], K: ug, wa: !0 },
                cg = { endpoint: "setAccountInfo", ib: ["idToken"],
                K: function (a) {
                    ug(a);if (!a.password) throw new O("weak-password");
                }, va: zg, wa: !0 },
                Ag = { endpoint: "signupNewUser", va: zg, wa: !0 },
                Jg = { endpoint: "verifyAssertion", K: Hg, va: Ig, wa: !0 },
                Kg = { endpoint: "verifyAssertion", K: function (a) {
                    Hg(a);if (!a.idToken) throw new O("internal-error");
                }, va: Ig, wa: !0 },
                Sg = { endpoint: "verifyCustomToken", K: function (a) {
                    if (!a.token) throw new O("invalid-custom-token");
                }, va: zg, wa: !0 },
                bg = { endpoint: "verifyPassword", K: function (a) {
                    tg(a);if (!a.password) throw new O("wrong-password");
                }, va: zg, wa: !0 },
                R = function (a, b, c) {
                if (!Df(c, b.ib)) return E(new O("internal-error"));var d = b.De || "POST",
                    e;return D(c).then(b.K).then(function () {
                    b.wa && (c.returnSecureToken = !0);return sg(a, b.endpoint, d, c, b.je || !1);
                }).then(function (a) {
                    return e = a;
                }).then(b.va).then(function () {
                    if (!b.jb) return e;if (!(b.jb in e)) throw new O("internal-error");return e[b.jb];
                });
            },
                qg = function (a) {
                var b, c;c = (a.error && a.error.errors && a.error.errors[0] || {}).reason || "";var d = { keyInvalid: "invalid-api-key", ipRefererBlocked: "app-not-authorized" };if (c = d[c] ? new O(d[c]) : null) return c;c = a.error && a.error.message || "";d = { INVALID_CUSTOM_TOKEN: "invalid-custom-token", CREDENTIAL_MISMATCH: "custom-token-mismatch", MISSING_CUSTOM_TOKEN: "internal-error", INVALID_IDENTIFIER: "invalid-email", MISSING_CONTINUE_URI: "internal-error", INVALID_EMAIL: "invalid-email", INVALID_PASSWORD: "wrong-password", USER_DISABLED: "user-disabled", MISSING_PASSWORD: "internal-error", EMAIL_EXISTS: "email-already-in-use", PASSWORD_LOGIN_DISABLED: "operation-not-allowed", INVALID_IDP_RESPONSE: "invalid-credential",
                    FEDERATED_USER_ID_ALREADY_LINKED: "credential-already-in-use", INVALID_MESSAGE_PAYLOAD: "invalid-message-payload", INVALID_RECIPIENT_EMAIL: "invalid-recipient-email", INVALID_SENDER: "invalid-sender", EMAIL_NOT_FOUND: "user-not-found", EXPIRED_OOB_CODE: "expired-action-code", INVALID_OOB_CODE: "invalid-action-code", MISSING_OOB_CODE: "internal-error", CREDENTIAL_TOO_OLD_LOGIN_AGAIN: "requires-recent-login", INVALID_ID_TOKEN: "invalid-user-token", TOKEN_EXPIRED: "user-token-expired", USER_NOT_FOUND: "user-token-expired",
                    CORS_UNSUPPORTED: "cors-unsupported", DYNAMIC_LINK_NOT_ACTIVATED: "dynamic-link-not-activated", TOO_MANY_ATTEMPTS_TRY_LATER: "too-many-requests", WEAK_PASSWORD: "weak-password", OPERATION_NOT_ALLOWED: "operation-not-allowed", USER_CANCELLED: "user-cancelled" };b = (b = c.match(/^[^\s]+\s*:\s*(.*)$/)) && 1 < b.length ? b[1] : void 0;for (var e in d) if (0 === c.indexOf(e)) return new O(d[e], b);!b && a && (b = sf(a));return new O("internal-error", b);
            };var Tg = function (a) {
                this.U = a;
            };Tg.prototype.value = function () {
                return this.U;
            };Tg.prototype.Sd = function (a) {
                this.U.style = a;return this;
            };var Ug = function (a) {
                this.U = a || {};
            };Ug.prototype.value = function () {
                return this.U;
            };Ug.prototype.Sd = function (a) {
                this.U.style = a;return this;
            };var Wg = function (a) {
                this.mf = a;this.bc = null;this.Sc = Vg(this);
            },
                Xg = function (a) {
                var b = new Ug();b.U.where = document.body;b.U.url = a.mf;b.U.messageHandlersFilter = M("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER");b.U.attributes = b.U.attributes || {};new Tg(b.U.attributes).Sd({ position: "absolute", top: "-100px", width: "1px", height: "1px" });b.U.dontclear = !0;return b;
            },
                Vg = function (a) {
                return Yg().then(function () {
                    return new C(function (b, c) {
                        M("gapi.iframes.getContext")().open(Xg(a).value(), function (d) {
                            a.bc = d;a.bc.restyle({ setHideOnLeave: !1 });
                            var e = setTimeout(function () {
                                c(Error("Network Error"));
                            }, Zg.get()),
                                f = function () {
                                clearTimeout(e);b();
                            };d.ping(f).then(f, function () {
                                c(Error("Network Error"));
                            });
                        });
                    });
                });
            };Wg.prototype.sendMessage = function (a) {
                var b = this;return this.Sc.then(function () {
                    return new C(function (c) {
                        b.bc.send(a.type, a, c, M("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"));
                    });
                });
            };
            var $g = function (a, b) {
                a.Sc.then(function () {
                    a.bc.register("authEvent", b, M("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"));
                });
            },
                ah = new yf(3E4, 6E4),
                Zg = new yf(5E3, 15E3),
                Yg = function () {
                return new C(function (a, b) {
                    if (xf()) {
                        var c = function () {
                            wf();M("gapi.load")("gapi.iframes", { callback: a, ontimeout: function () {
                                    wf();b(Error("Network Error"));
                                }, timeout: ah.get() });
                        };if (M("gapi.iframes.Iframe")) a();else if (M("gapi.load")) c();else {
                            var d = "__iframefcb" + Math.floor(1E6 * Math.random()).toString();l[d] = function () {
                                M("gapi.load") ? c() : b(Error("Network Error"));
                            };D(Cd("https://apis.google.com/js/api.js?onload=" + d)).g(function () {
                                b(Error("Network Error"));
                            });
                        }
                    } else b(Error("Network Error"));
                });
            };var ch = function (a, b, c) {
                this.v = a;this.j = b;this.B = c;this.Ma = null;this.Nb = Re(this.v, "/__/auth/iframe");J(this.Nb, "apiKey", this.j);J(this.Nb, "appName", this.B);
            };ch.prototype.setVersion = function (a) {
                this.Ma = a;return this;
            };ch.prototype.toString = function () {
                this.Ma ? J(this.Nb, "v", this.Ma) : Pe(this.Nb, "v");return this.Nb.toString();
            };var dh = function (a, b, c, d, e) {
                this.v = a;this.j = b;this.B = c;this.ie = d;this.Ma = this.F = this.Zc = null;this.Db = e;
            };dh.prototype.setVersion = function (a) {
                this.Ma = a;return this;
            };
            dh.prototype.toString = function () {
                var a = Re(this.v, "/__/auth/handler");J(a, "apiKey", this.j);J(a, "appName", this.B);J(a, "authType", this.ie);if (this.Db.isOAuthProvider) {
                    J(a, "providerId", this.Db.providerId);var b = this.Db,
                        c = tf(b.qd),
                        d;for (d in c) c[d] = c[d].toString();b = b.Ye;c = Sa(c);for (d = 0; d < b.length; d++) {
                        var e = b[d];e in c && delete c[e];
                    }Qa(c) || J(a, "customParameters", sf(c));
                }"function" === typeof this.Db.xd && (b = this.Db.xd(), b.length && J(a, "scopes", b.join(",")));this.Zc ? J(a, "redirectUrl", this.Zc) : Pe(a, "redirectUrl");
                this.F ? J(a, "eventId", this.F) : Pe(a, "eventId");this.Ma ? J(a, "v", this.Ma) : Pe(a, "v");if (this.Ob) for (var f in this.Ob) this.Ob.hasOwnProperty(f) && !Oe(a, f) && J(a, f, this.Ob[f]);return a.toString();
            };
            var eh = function (a, b, c, d) {
                this.v = a;this.j = b;this.B = c;this.ve = (this.za = d || null) ? nf(this.za) : null;d = this.za;this.Ee = new ch(a, b, c).setVersion(d).toString();this.ha = [];this.f = new S(b, null, this.ve);this.ec = this.sa = null;
            },
                fh = function (a) {
                var b = Xe();return yg(a).then(function (a) {
                    a: {
                        for (var c = Qe(b), e = c.da, c = c.$, f = 0; f < a.length; f++) {
                            var g;var k = a[f];g = c;var n = e;0 == k.indexOf("chrome-extension://") ? g = Qe(k).$ == g && "chrome-extension" == n : "http" != n && "https" != n ? g = !1 : ff.test(k) ? g = g == k : (k = k.split(".").join("\\."), g = new RegExp("^(.+\\." + k + "|" + k + ")$", "i").test(g));if (g) {
                                a = !0;break a;
                            }
                        }a = !1;
                    }if (!a) throw new Mf(Xe());
                });
            };h = eh.prototype;h.ub = function () {
                if (this.ec) return this.ec;var a = this;return this.ec = gf().then(function () {
                    a.ac = new Wg(a.Ee);gh(a);
                });
            };h.Ib = function (a, b, c) {
                var d = new O("popup-closed-by-user"),
                    e = new O("web-storage-unsupported"),
                    f = this,
                    g = !1;return this.Da().then(function () {
                    hh(f).then(function (c) {
                        c || (a && cf(a), b(e), g = !0);
                    });
                }).g(function () {}).then(function () {
                    if (!g) return ef(a);
                }).then(function () {
                    if (!g) return ke(c).then(function () {
                        b(d);
                    });
                });
            };
            h.Td = function () {
                var a = K();return !rf(a) && !vf(a);
            };h.Ad = function () {
                return !1;
            };h.Bb = function (a, b, c, d, e, f, g) {
                if (!a) return E(new O("popup-blocked"));if (g && !rf()) return this.Da().g(function (b) {
                    cf(a);e(b);
                }), d(), D();this.sa || (this.sa = fh(this.f));var k = this;return this.sa.then(function () {
                    var b = k.Da().g(function (b) {
                        cf(a);e(b);throw b;
                    });d();return b;
                }).then(function () {
                    fg(c);if (!g) {
                        var d = ih(k.v, k.j, k.B, b, c, null, f, k.za);Ye(d, a);
                    }
                }).g(function (a) {
                    "auth/network-request-failed" == a.code && (k.sa = null);throw a;
                });
            };
            h.Cb = function (a, b, c) {
                this.sa || (this.sa = fh(this.f));var d = this;return this.sa.then(function () {
                    fg(b);var e = ih(d.v, d.j, d.B, a, b, Xe(), c, d.za);Ye(e);
                });
            };h.Da = function () {
                var a = this;return this.ub().then(function () {
                    return a.ac.Sc;
                }).g(function () {
                    a.sa = null;throw new O("network-request-failed");
                });
            };h.Wd = function () {
                return !0;
            };
            var ih = function (a, b, c, d, e, f, g, k, n) {
                a = new dh(a, b, c, d, e);a.Zc = f;a.F = g;f = a.setVersion(k);f.Ob = Sa(n || null);return f.toString();
            },
                gh = function (a) {
                if (!a.ac) throw Error("IfcHandler must be initialized!");$g(a.ac, function (b) {
                    var c = {};if (b && b.authEvent) {
                        var d = !1;b = Lf(b.authEvent);for (c = 0; c < a.ha.length; c++) d = a.ha[c](b) || d;c = {};c.status = d ? "ACK" : "ERROR";return D(c);
                    }c.status = "ERROR";return D(c);
                });
            },
                hh = function (a) {
                var b = { type: "webStorageSupport" };return a.ub().then(function () {
                    return a.ac.sendMessage(b);
                }).then(function (a) {
                    if (a && a.length && "undefined" !== typeof a[0].webStorageSupport) return a[0].webStorageSupport;throw Error();
                });
            };eh.prototype.Oa = function (a) {
                this.ha.push(a);
            };eh.prototype.Gb = function (a) {
                Ka(this.ha, function (b) {
                    return b == a;
                });
            };var jh = function (a) {
                this.A = a || firebase.INTERNAL.reactNative && firebase.INTERNAL.reactNative.AsyncStorage;if (!this.A) throw new O("internal-error", "The React Native compatibility library was not found.");
            };h = jh.prototype;h.get = function (a) {
                return D(this.A.getItem(a)).then(function (a) {
                    return a && uf(a);
                });
            };h.set = function (a, b) {
                return D(this.A.setItem(a, sf(b)));
            };h.remove = function (a) {
                return D(this.A.removeItem(a));
            };h.Pa = function () {};h.Ja = function () {};var kh = function () {
                this.A = {};
            };h = kh.prototype;h.get = function (a) {
                return D(this.A[a]);
            };h.set = function (a, b) {
                this.A[a] = b;return D();
            };h.remove = function (a) {
                delete this.A[a];return D();
            };h.Pa = function () {};h.Ja = function () {};var mh = function () {
                if (!lh()) {
                    if ("Node" == L()) throw new O("internal-error", "The LocalStorage compatibility library was not found.");throw new O("web-storage-unsupported");
                }this.A = l.localStorage || firebase.INTERNAL.node.localStorage;
            },
                lh = function () {
                var a = "Node" == L(),
                    a = l.localStorage || a && firebase.INTERNAL.node && firebase.INTERNAL.node.localStorage;if (!a) return !1;try {
                    return a.setItem("__sak", "1"), a.removeItem("__sak"), !0;
                } catch (b) {
                    return !1;
                }
            };h = mh.prototype;
            h.get = function (a) {
                var b = this;return D().then(function () {
                    var c = b.A.getItem(a);return uf(c);
                });
            };h.set = function (a, b) {
                var c = this;return D().then(function () {
                    var d = sf(b);null === d ? c.remove(a) : c.A.setItem(a, d);
                });
            };h.remove = function (a) {
                var b = this;return D().then(function () {
                    b.A.removeItem(a);
                });
            };h.Pa = function (a) {
                l.window && Ub(l.window, "storage", a);
            };h.Ja = function (a) {
                l.window && cc(l.window, "storage", a);
            };var nh = function () {
                this.A = {};
            };h = nh.prototype;h.get = function () {
                return D(null);
            };h.set = function () {
                return D();
            };h.remove = function () {
                return D();
            };h.Pa = function () {};h.Ja = function () {};var ph = function () {
                if (!oh()) {
                    if ("Node" == L()) throw new O("internal-error", "The SessionStorage compatibility library was not found.");throw new O("web-storage-unsupported");
                }this.A = l.sessionStorage || firebase.INTERNAL.node.sessionStorage;
            },
                oh = function () {
                var a = "Node" == L(),
                    a = l.sessionStorage || a && firebase.INTERNAL.node && firebase.INTERNAL.node.sessionStorage;if (!a) return !1;try {
                    return a.setItem("__sak", "1"), a.removeItem("__sak"), !0;
                } catch (b) {
                    return !1;
                }
            };h = ph.prototype;
            h.get = function (a) {
                var b = this;return D().then(function () {
                    var c = b.A.getItem(a);return uf(c);
                });
            };h.set = function (a, b) {
                var c = this;return D().then(function () {
                    var d = sf(b);null === d ? c.remove(a) : c.A.setItem(a, d);
                });
            };h.remove = function (a) {
                var b = this;return D().then(function () {
                    b.A.removeItem(a);
                });
            };h.Pa = function () {};h.Ja = function () {};var qh = function (a, b, c, d, e, f) {
                if (!window.indexedDB) throw new O("web-storage-unsupported");this.me = a;this.Rc = b;this.Ec = c;this.ae = d;this.nb = e;this.Y = {};this.Jb = [];this.xb = 0;this.Fe = f || l.indexedDB;
            },
                rh,
                sh = function (a) {
                return new C(function (b, c) {
                    var d = a.Fe.open(a.me, a.nb);d.onerror = function (a) {
                        c(Error(a.target.errorCode));
                    };d.onupgradeneeded = function (b) {
                        b = b.target.result;try {
                            b.createObjectStore(a.Rc, { keyPath: a.Ec });
                        } catch (f) {
                            c(f);
                        }
                    };d.onsuccess = function (a) {
                        b(a.target.result);
                    };
                });
            },
                th = function (a) {
                a.Dd || (a.Dd = sh(a));return a.Dd;
            },
                uh = function (a, b) {
                return b.objectStore(a.Rc);
            },
                vh = function (a, b, c) {
                return b.transaction([a.Rc], c ? "readwrite" : "readonly");
            },
                wh = function (a) {
                return new C(function (b, c) {
                    a.onsuccess = function (a) {
                        a && a.target ? b(a.target.result) : b();
                    };a.onerror = function (a) {
                        c(Error(a.target.errorCode));
                    };
                });
            };h = qh.prototype;
            h.set = function (a, b) {
                var c = !1,
                    d,
                    e = this;return ld(th(this).then(function (b) {
                    d = b;b = uh(e, vh(e, d, !0));return wh(b.get(a));
                }).then(function (f) {
                    var g = uh(e, vh(e, d, !0));if (f) return f.value = b, wh(g.put(f));e.xb++;c = !0;f = {};f[e.Ec] = a;f[e.ae] = b;return wh(g.add(f));
                }).then(function () {
                    e.Y[a] = b;
                }), function () {
                    c && e.xb--;
                });
            };h.get = function (a) {
                var b = this;return th(this).then(function (c) {
                    return wh(uh(b, vh(b, c, !1)).get(a));
                }).then(function (a) {
                    return a && a.value;
                });
            };
            h.remove = function (a) {
                var b = !1,
                    c = this;return ld(th(this).then(function (d) {
                    b = !0;c.xb++;return wh(uh(c, vh(c, d, !0))["delete"](a));
                }).then(function () {
                    delete c.Y[a];
                }), function () {
                    b && c.xb--;
                });
            };
            h.hf = function () {
                var a = this;return th(this).then(function (b) {
                    var c = uh(a, vh(a, b, !1));return c.getAll ? wh(c.getAll()) : new C(function (a, b) {
                        var d = [],
                            e = c.openCursor();e.onsuccess = function (b) {
                            (b = b.target.result) ? (d.push(b.value), b["continue"]()) : a(d);
                        };e.onerror = function (a) {
                            b(Error(a.target.errorCode));
                        };
                    });
                }).then(function (b) {
                    var c = {},
                        d = [];if (0 == a.xb) {
                        for (d = 0; d < b.length; d++) c[b[d][a.Ec]] = b[d][a.ae];d = Ze(a.Y, c);a.Y = c;
                    }return d;
                });
            };h.Pa = function (a) {
                0 == this.Jb.length && this.fd();this.Jb.push(a);
            };
            h.Ja = function (a) {
                Ka(this.Jb, function (b) {
                    return b == a;
                });0 == this.Jb.length && this.qc();
            };h.fd = function () {
                var a = this;this.qc();var b = function () {
                    a.Vc = ke(800).then(r(a.hf, a)).then(function (b) {
                        0 < b.length && x(a.Jb, function (a) {
                            a(b);
                        });
                    }).then(b).g(function (a) {
                        "STOP_EVENT" != a.message && b();
                    });return a.Vc;
                };b();
            };h.qc = function () {
                this.Vc && this.Vc.cancel("STOP_EVENT");
            };var Ah = function () {
                this.sd = { Browser: xh, Node: yh, ReactNative: zh }[L()];
            },
                Bh,
                xh = { I: mh, jd: ph },
                yh = { I: mh, jd: ph },
                zh = { I: jh, jd: nh };var Ch = function (a) {
                var b = {},
                    c = a.email,
                    d = a.newEmail;a = a.requestType;if (!c || !a) throw Error("Invalid provider user info!");b.fromEmail = d || null;b.email = c;N(this, "operation", a);N(this, "data", Ef(b));
            };var Dh = "First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" "),
                T = function (a, b) {
                return { name: a || "", ea: "a valid string", optional: !!b, ga: p };
            },
                Eh = function (a) {
                return { name: a || "", ea: "a valid object", optional: !1, ga: ga };
            },
                Fh = function (a, b) {
                return { name: a || "", ea: "a function", optional: !!b, ga: q };
            },
                Gh = function () {
                return { name: "", ea: "null", optional: !1, ga: ca };
            },
                Hh = function () {
                return { name: "credential", ea: "a valid credential", optional: !1, ga: function (a) {
                        return !(!a || !a.Vb);
                    } };
            },
                Ih = function () {
                return { name: "authProvider",
                    ea: "a valid Auth provider", optional: !1, ga: function (a) {
                        return !!(a && a.providerId && a.hasOwnProperty && a.hasOwnProperty("isOAuthProvider"));
                    } };
            },
                Jh = function (a, b, c, d) {
                return { name: c || "", ea: a.ea + " or " + b.ea, optional: !!d, ga: function (c) {
                        return a.ga(c) || b.ga(c);
                    } };
            };var U = function (a, b) {
                for (var c in b) {
                    var d = b[c].name;a[d] = Kh(d, a[c], b[c].a);
                }
            },
                V = function (a, b, c, d) {
                a[b] = Kh(b, c, d);
            },
                Kh = function (a, b, c) {
                if (!c) return b;var d = Lh(a);a = function () {
                    var a = Array.prototype.slice.call(arguments),
                        e;a: {
                        e = Array.prototype.slice.call(a);var k;k = 0;for (var n = !1, A = 0; A < c.length; A++) if (c[A].optional) n = !0;else {
                            if (n) throw new O("internal-error", "Argument validator encountered a required argument after an optional argument.");k++;
                        }n = c.length;if (e.length < k || n < e.length) e = "Expected " + (k == n ? 1 == k ? "1 argument" : k + " arguments" : k + "-" + n + " arguments") + " but got " + e.length + ".";else {
                            for (k = 0; k < e.length; k++) if (n = c[k].optional && void 0 === e[k], !c[k].ga(e[k]) && !n) {
                                e = c[k];if (0 > k || k >= Dh.length) throw new O("internal-error", "Argument validator received an unsupported number of arguments.");e = Dh[k] + " argument " + (e.name ? '"' + e.name + '" ' : "") + "must be " + e.ea + ".";break a;
                            }e = null;
                        }
                    }if (e) throw new O("argument-error", d + " failed: " + e);return b.apply(this, a);
                };for (var e in b) a[e] = b[e];for (e in b.prototype) a.prototype[e] = b.prototype[e];return a;
            },
                Lh = function (a) {
                a = a.split(".");return a[a.length - 1];
            };var Mh = function (a, b, c, d) {
                this.Qe = a;this.Qd = b;this.$e = c;this.Hb = d;this.S = {};Bh || (Bh = new Ah());a = Bh;try {
                    var e;We() ? (rh || (rh = new qh("firebaseLocalStorageDb", "firebaseLocalStorage", "fbase_key", "value", 1)), e = rh) : e = new a.sd.I();this.Ha = e;
                } catch (f) {
                    this.Ha = new kh(), this.Hb = !0;
                }try {
                    this.sc = new a.sd.jd();
                } catch (f) {
                    this.sc = new kh();
                }this.gd = r(this.Ud, this);this.Y = {};
            },
                Nh,
                Oh = function () {
                Nh || (Nh = new Mh("firebase", ":", !vf(K()) && lf() ? !0 : !1, rf()));return Nh;
            };h = Mh.prototype;
            h.P = function (a, b) {
                return this.Qe + this.Qd + a.name + (b ? this.Qd + b : "");
            };h.get = function (a, b) {
                return (a.I ? this.Ha : this.sc).get(this.P(a, b));
            };h.remove = function (a, b) {
                b = this.P(a, b);a.I && !this.Hb && (this.Y[b] = null);return (a.I ? this.Ha : this.sc).remove(b);
            };h.set = function (a, b, c) {
                var d = this.P(a, c),
                    e = this,
                    f = a.I ? this.Ha : this.sc;return f.set(d, b).then(function () {
                    return f.get(d);
                }).then(function (b) {
                    a.I && !this.Hb && (e.Y[d] = b);
                });
            };
            h.addListener = function (a, b, c) {
                a = this.P(a, b);this.Hb || (this.Y[a] = l.localStorage.getItem(a));Qa(this.S) && this.fd();this.S[a] || (this.S[a] = []);this.S[a].push(c);
            };h.removeListener = function (a, b, c) {
                a = this.P(a, b);this.S[a] && (Ka(this.S[a], function (a) {
                    return a == c;
                }), 0 == this.S[a].length && delete this.S[a]);Qa(this.S) && this.qc();
            };h.fd = function () {
                this.Ha.Pa(this.gd);this.Hb || We() || Ph(this);
            };
            var Ph = function (a) {
                Qh(a);a.Qc = setInterval(function () {
                    for (var b in a.S) {
                        var c = l.localStorage.getItem(b),
                            d = a.Y[b];c != d && (a.Y[b] = c, c = new Jb({ type: "storage", key: b, target: window, oldValue: d, newValue: c, Ve: !0 }), a.Ud(c));
                    }
                }, 1E3);
            },
                Qh = function (a) {
                a.Qc && (clearInterval(a.Qc), a.Qc = null);
            };Mh.prototype.qc = function () {
                this.Ha.Ja(this.gd);Qh(this);
            };
            Mh.prototype.Ud = function (a) {
                if (a && a.we) {
                    var b = a.Ua.key;"undefined" !== typeof a.Ua.Ve ? this.Ha.Ja(this.gd) : Qh(this);if (this.$e) {
                        var c = l.localStorage.getItem(b);a = a.Ua.newValue;a != c && (a ? l.localStorage.setItem(b, a) : a || l.localStorage.removeItem(b));
                    }this.Y[b] = l.localStorage.getItem(b);this.md(b);
                } else x(a, r(this.md, this));
            };Mh.prototype.md = function (a) {
                this.S[a] && x(this.S[a], function (a) {
                    a();
                });
            };var Rh = function (a, b) {
                this.u = a;this.i = b || Oh();
            },
                Sh = { name: "authEvent", I: !0 },
                Th = function (a) {
                return a.i.get(Sh, a.u).then(function (a) {
                    return Lf(a);
                });
            };Rh.prototype.Oa = function (a) {
                this.i.addListener(Sh, this.u, a);
            };Rh.prototype.Gb = function (a) {
                this.i.removeListener(Sh, this.u, a);
            };var Uh = function (a) {
                this.i = a || Oh();
            },
                Vh = { name: "sessionId", I: !1 };Uh.prototype.Wb = function (a) {
                return this.i.get(Vh, a);
            };var Wh = function (a, b, c, d, e, f) {
                this.v = a;this.j = b;this.B = c;this.za = d || null;this.Vd = b + ":" + c;this.af = new Uh();this.wd = new Rh(this.Vd);this.Mc = null;this.ha = [];this.Ie = e || 500;this.Xe = f || 2E3;this.tb = this.ic = null;
            },
                Xh = function (a) {
                return new O("invalid-cordova-configuration", a);
            };
            Wh.prototype.Da = function () {
                return this.Oc ? this.Oc : this.Oc = jf().then(function () {
                    if ("function" !== typeof M("universalLinks.subscribe", l)) throw Xh("cordova-universal-links-plugin is not installed");if ("undefined" === typeof M("BuildInfo.packageName", l)) throw Xh("cordova-plugin-buildinfo is not installed");if ("function" !== typeof M("cordova.plugins.browsertab.openUrl", l)) throw Xh("cordova-plugin-browsertab is not installed");if ("function" !== typeof M("cordova.InAppBrowser.open", l)) throw Xh("cordova-plugin-inappbrowser is not installed");
                }, function () {
                    throw new O("cordova-not-ready");
                });
            };var Yh = function () {
                for (var a = 20, b = []; 0 < a;) b.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62 * Math.random()))), a--;return b.join("");
            },
                Zh = function (a) {
                var b = new Db();b.update(a);return ob(b.digest());
            };h = Wh.prototype;h.Ib = function (a, b) {
                b(new O("operation-not-supported-in-this-environment"));return D();
            };h.Bb = function () {
                return E(new O("operation-not-supported-in-this-environment"));
            };h.Wd = function () {
                return !1;
            };h.Td = function () {
                return !0;
            };
            h.Ad = function () {
                return !0;
            };
            h.Cb = function (a, b, c) {
                if (this.ic) return E(new O("redirect-operation-pending"));var d = this,
                    e = l.document,
                    f = null,
                    g = null,
                    k = null,
                    n = null;return this.ic = ld(D().then(function () {
                    fg(b);return $h(d);
                }).then(function () {
                    return ai(d, a, b, c);
                }).then(function () {
                    return new C(function (a, b) {
                        g = function () {
                            var b = M("cordova.plugins.browsertab.close", l);a();"function" === typeof b && b();d.tb && "function" === typeof d.tb.close && (d.tb.close(), d.tb = null);return !1;
                        };d.Oa(g);k = function () {
                            f || (f = ke(d.Xe).then(function () {
                                b(new O("redirect-cancelled-by-user"));
                            }));
                        };n = function () {
                            var a = l.document;(a && "undefined" !== typeof a.visibilityState ? "visible" == a.visibilityState : 1) && k();
                        };e.addEventListener("resume", k, !1);K().toLowerCase().match(/android/) || e.addEventListener("visibilitychange", n, !1);
                    }).g(function (a) {
                        return bi(d).then(function () {
                            throw a;
                        });
                    });
                }), function () {
                    k && e.removeEventListener("resume", k, !1);n && e.removeEventListener("visibilitychange", n, !1);f && f.cancel();g && d.Gb(g);d.ic = null;
                });
            };
            var ai = function (a, b, c, d) {
                var e = Yh(),
                    f = new P(b, d, null, e, new O("no-auth-event")),
                    g = M("BuildInfo.packageName", l);if ("string" !== typeof g) throw new O("invalid-cordova-configuration");var k = M("BuildInfo.displayName", l),
                    n = {};if (K().toLowerCase().match(/iphone|ipad|ipod/)) n.ibi = g;else if (K().toLowerCase().match(/android/)) n.apn = g;else return E(new O("operation-not-supported-in-this-environment"));k && (n.appDisplayName = k);e = Zh(e);n.sessionId = e;var A = ih(a.v, a.j, a.B, b, c, null, d, a.za, n);return a.Da().then(function () {
                    var b = a.Vd;return a.af.i.set(Sh, f.C(), b);
                }).then(function () {
                    var b = M("cordova.plugins.browsertab.isAvailable", l);if ("function" !== typeof b) throw new O("invalid-cordova-configuration");var c = null;b(function (b) {
                        if (b) {
                            c = M("cordova.plugins.browsertab.openUrl", l);if ("function" !== typeof c) throw new O("invalid-cordova-configuration");c(A);
                        } else {
                            c = M("cordova.InAppBrowser.open", l);if ("function" !== typeof c) throw new O("invalid-cordova-configuration");b = c;var d;d = K();d = !(!d.match(/(iPad|iPhone|iPod).*OS 7_\d/i) && !d.match(/(iPad|iPhone|iPod).*OS 8_\d/i));
                            a.tb = b(A, d ? "_blank" : "_system", "location=yes");
                        }
                    });
                });
            },
                ci = function (a, b) {
                for (var c = 0; c < a.ha.length; c++) try {
                    a.ha[c](b);
                } catch (d) {}
            },
                $h = function (a) {
                a.Mc || (a.Mc = a.Da().then(function () {
                    return new C(function (b) {
                        var c = function (d) {
                            b(d);a.Gb(c);return !1;
                        };a.Oa(c);di(a);
                    });
                }));return a.Mc;
            },
                bi = function (a) {
                var b = null;return Th(a.wd).then(function (c) {
                    b = c;c = a.wd;return c.i.remove(Sh, c.u);
                }).then(function () {
                    return b;
                });
            },
                di = function (a) {
                var b = M("universalLinks.subscribe", l);if ("function" !== typeof b) throw new O("invalid-cordova-configuration");
                var c = new P("unknown", null, null, null, new O("no-auth-event")),
                    d = !1,
                    e = ke(a.Ie).then(function () {
                    return bi(a).then(function () {
                        d || ci(a, c);
                    });
                }),
                    f = function (b) {
                    d = !0;e && e.cancel();bi(a).then(function (d) {
                        var e = c;if (d && b && b.url) {
                            var e = null,
                                f;f = b.url;var g = Qe(f),
                                k = Oe(g, "link"),
                                n = Oe(Qe(k), "link"),
                                g = Oe(g, "deep_link_id");f = Oe(Qe(g), "link") || g || n || k || f;-1 != f.indexOf("/__/auth/callback") && (e = Qe(f), e = uf(Oe(e, "firebaseError") || null), e = (e = "object" === typeof e ? Kf(e) : null) ? new P(d.fa, d.F, null, null, e) : new P(d.fa, d.F, f, d.Wb()));
                            e = e || c;
                        }ci(a, e);
                    });
                },
                    g = l.handleOpenURL;l.handleOpenURL = function (a) {
                    0 == a.indexOf(M("BuildInfo.packageName", l) + "://") && f({ url: a });if ("function" === typeof g) try {
                        g(a);
                    } catch (n) {
                        console.error(n);
                    }
                };b(null, f);
            };Wh.prototype.Oa = function (a) {
                this.ha.push(a);$h(this).g(function () {});
            };Wh.prototype.Gb = function (a) {
                Ka(this.ha, function (b) {
                    return b == a;
                });
            };var ei = function (a) {
                this.u = a;this.i = Oh();
            },
                fi = { name: "pendingRedirect", I: !1 },
                gi = function (a) {
                return a.i.set(fi, "pending", a.u);
            },
                hi = function (a) {
                return a.i.remove(fi, a.u);
            },
                ii = function (a) {
                return a.i.get(fi, a.u).then(function (a) {
                    return "pending" == a;
                });
            };var W = function (a, b, c) {
                this.v = a;this.j = b;this.B = c;this.Kb = [];this.Za = !1;this.Ac = r(this.Kc, this);this.cb = new ji(this);this.Kd = new ki(this);this.yb = new ei(this.j + ":" + this.B);this.lb = {};this.lb.unknown = this.cb;this.lb.signInViaRedirect = this.cb;this.lb.linkViaRedirect = this.cb;this.lb.signInViaPopup = this.Kd;this.lb.linkViaPopup = this.Kd;this.G = li(this.v, this.j, this.B);
            },
                li = function (a, b, c) {
                var d = firebase.SDK_VERSION || null;return hf() ? new Wh(a, b, c, d) : new eh(a, b, c, d);
            };
            W.prototype.reset = function () {
                this.Za = !1;this.G.Gb(this.Ac);this.G = li(this.v, this.j, this.B);
            };W.prototype.ub = function () {
                var a = this;this.Za || (this.Za = !0, this.G.Oa(this.Ac));var b = this.G;return this.G.Da().g(function (c) {
                    a.G == b && a.reset();throw c;
                });
            };var oi = function (a) {
                a.G.Td() && a.ub().g(function (b) {
                    var c = new P("unknown", null, null, null, new O("operation-not-supported-in-this-environment"));mi(b) && a.Kc(c);
                });a.G.Ad() || ni(a.cb);
            };
            W.prototype.subscribe = function (a) {
                Ha(this.Kb, a) || this.Kb.push(a);if (!this.Za) {
                    var b = this;ii(this.yb).then(function (a) {
                        a ? hi(b.yb).then(function () {
                            b.ub().g(function (a) {
                                var c = new P("unknown", null, null, null, new O("operation-not-supported-in-this-environment"));mi(a) && b.Kc(c);
                            });
                        }) : oi(b);
                    }).g(function () {
                        oi(b);
                    });
                }
            };W.prototype.unsubscribe = function (a) {
                Ka(this.Kb, function (b) {
                    return b == a;
                });
            };
            W.prototype.Kc = function (a) {
                if (!a) throw new O("invalid-auth-event");for (var b = !1, c = 0; c < this.Kb.length; c++) {
                    var d = this.Kb[c];if (d.nd(a.fa, a.F)) {
                        (b = this.lb[a.fa]) && b.Ld(a, d);b = !0;break;
                    }
                }ni(this.cb);return b;
            };var pi = new yf(2E3, 1E4),
                qi = new yf(3E4, 6E4);W.prototype.getRedirectResult = function () {
                return this.cb.getRedirectResult();
            };W.prototype.Bb = function (a, b, c, d, e) {
                var f = this;return this.G.Bb(a, b, c, function () {
                    f.Za || (f.Za = !0, f.G.Oa(f.Ac));
                }, function () {
                    f.reset();
                }, d, e);
            };
            var mi = function (a) {
                return a && "auth/cordova-not-ready" == a.code ? !0 : !1;
            };W.prototype.Cb = function (a, b, c) {
                var d = this,
                    e;return gi(this.yb).then(function () {
                    return d.G.Cb(a, b, c).g(function (a) {
                        if (mi(a)) throw new O("operation-not-supported-in-this-environment");e = a;return hi(d.yb).then(function () {
                            throw e;
                        });
                    }).then(function () {
                        return d.G.Wd() ? new C(function () {}) : hi(d.yb).then(function () {
                            return d.getRedirectResult();
                        }).then(function () {}).g(function () {});
                    });
                });
            };
            W.prototype.Ib = function (a, b, c, d) {
                return this.G.Ib(c, function (c) {
                    a.Ka(b, null, c, d);
                }, pi.get());
            };var ri = {},
                si = function (a, b, c) {
                var d = b + ":" + c;ri[d] || (ri[d] = new W(a, b, c));return ri[d];
            },
                ji = function (a) {
                this.i = a;this.gb = null;this.Fb = [];this.Eb = [];this.eb = null;this.Yc = !1;
            };ji.prototype.reset = function () {
                this.gb = null;this.eb && (this.eb.cancel(), this.eb = null);
            };
            ji.prototype.Ld = function (a, b) {
                if (!a) return E(new O("invalid-auth-event"));this.reset();this.Yc = !0;var c = a.fa,
                    d = a.F,
                    e = a.getError() && "auth/web-storage-unsupported" == a.getError().code,
                    f = a.getError() && "auth/operation-not-supported-in-this-environment" == a.getError().code;"unknown" != c || e || f ? a = a.O ? this.Wc(a, b) : b.qb(c, d) ? this.Xc(a, b) : E(new O("invalid-auth-event")) : (ti(this, !1, null, null), a = D());return a;
            };var ni = function (a) {
                a.Yc || (a.Yc = !0, ti(a, !1, null, null));
            };
            ji.prototype.Wc = function (a) {
                ti(this, !0, null, a.getError());return D();
            };ji.prototype.Xc = function (a, b) {
                var c = this,
                    d = a.fa;b = b.qb(d, a.F);var e = a.mb;a = a.Wb();var f = "signInViaRedirect" == d || "linkViaRedirect" == d;return b(e, a).then(function (a) {
                    ti(c, f, a, null);
                }).g(function (a) {
                    ti(c, f, null, a);
                });
            };
            var ui = function (a, b) {
                a.gb = function () {
                    return E(b);
                };if (a.Eb.length) for (var c = 0; c < a.Eb.length; c++) a.Eb[c](b);
            },
                vi = function (a, b) {
                a.gb = function () {
                    return D(b);
                };if (a.Fb.length) for (var c = 0; c < a.Fb.length; c++) a.Fb[c](b);
            },
                ti = function (a, b, c, d) {
                b ? d ? ui(a, d) : vi(a, c) : vi(a, { user: null });a.Fb = [];a.Eb = [];
            };ji.prototype.getRedirectResult = function () {
                var a = this;return new C(function (b, c) {
                    a.gb ? a.gb().then(b, c) : (a.Fb.push(b), a.Eb.push(c), wi(a));
                });
            };
            var wi = function (a) {
                var b = new O("timeout");a.eb && a.eb.cancel();a.eb = ke(qi.get()).then(function () {
                    a.gb || ti(a, !0, null, b);
                });
            },
                ki = function (a) {
                this.i = a;
            };ki.prototype.Ld = function (a, b) {
                if (!a) return E(new O("invalid-auth-event"));var c = a.fa,
                    d = a.F;return a.O ? this.Wc(a, b) : b.qb(c, d) ? this.Xc(a, b) : E(new O("invalid-auth-event"));
            };ki.prototype.Wc = function (a, b) {
                b.Ka(a.fa, null, a.getError(), a.F);return D();
            };
            ki.prototype.Xc = function (a, b) {
                var c = a.F,
                    d = a.fa,
                    e = b.qb(d, c),
                    f = a.mb;a = a.Wb();return e(f, a).then(function (a) {
                    b.Ka(d, a, null, c);
                }).g(function (a) {
                    b.Ka(d, null, a, c);
                });
            };var xi = function (a) {
                this.f = a;this.xa = this.W = null;this.Va = 0;
            };xi.prototype.C = function () {
                return { apiKey: this.f.j, refreshToken: this.W, accessToken: this.xa, expirationTime: this.Va };
            };
            var zi = function (a, b) {
                var c = b.idToken,
                    d = b.refreshToken;b = yi(b.expiresIn);a.xa = c;a.Va = b;a.W = d;
            },
                yi = function (a) {
                return ka() + 1E3 * parseInt(a, 10);
            },
                Ai = function (a, b) {
                return rg(a.f, b).then(function (b) {
                    a.xa = b.access_token;a.Va = yi(b.expires_in);a.W = b.refresh_token;return { accessToken: a.xa, expirationTime: a.Va, refreshToken: a.W };
                }).g(function (b) {
                    "auth/user-token-expired" == b.code && (a.W = null);throw b;
                });
            };
            xi.prototype.getToken = function (a) {
                a = !!a;return this.xa && !this.W ? E(new O("user-token-expired")) : a || !this.xa || ka() > this.Va - 3E4 ? this.W ? Ai(this, { grant_type: "refresh_token", refresh_token: this.W }) : D(null) : D({ accessToken: this.xa, expirationTime: this.Va, refreshToken: this.W });
            };var Bi = function (a, b, c, d, e) {
                Bf(this, { uid: a, displayName: d || null, photoURL: e || null, email: c || null, providerId: b });
            },
                Ci = function (a, b) {
                Ib.call(this, a);for (var c in b) this[c] = b[c];
            };t(Ci, Ib);
            var X = function (a, b, c) {
                this.Z = [];this.j = a.apiKey;this.B = a.appName;this.v = a.authDomain || null;a = firebase.SDK_VERSION ? nf(firebase.SDK_VERSION) : null;this.f = new S(this.j, null, a);this.na = new xi(this.f);Di(this, b.idToken);zi(this.na, b);N(this, "refreshToken", this.na.W);Ei(this, c || {});Od.call(this);this.jc = !1;this.v && qf() && (this.m = si(this.v, this.j, this.B));this.pc = [];this.oa = null;
            };t(X, Od);
            var Di = function (a, b) {
                a.Ed = b;N(a, "_lat", b);
            },
                Fi = function (a, b) {
                Ka(a.pc, function (a) {
                    return a == b;
                });
            },
                Gi = function (a) {
                for (var b = [], c = 0; c < a.pc.length; c++) b.push(a.pc[c](a));return id(b).then(function () {
                    return a;
                });
            },
                Hi = function (a) {
                a.m && !a.jc && (a.jc = !0, a.m.subscribe(a));
            },
                Ei = function (a, b) {
                Bf(a, { uid: b.uid, displayName: b.displayName || null, photoURL: b.photoURL || null, email: b.email || null, emailVerified: b.emailVerified || !1, isAnonymous: b.isAnonymous || !1, providerData: [] });
            };N(X.prototype, "providerId", "firebase");
            var Ii = function () {},
                Ji = function (a) {
                return D().then(function () {
                    if (a.ne) throw new O("app-deleted");
                });
            },
                Ki = function (a) {
                return Da(a.providerData, function (a) {
                    return a.providerId;
                });
            },
                Mi = function (a, b) {
                b && (Li(a, b.providerId), a.providerData.push(b));
            },
                Li = function (a, b) {
                Ka(a.providerData, function (a) {
                    return a.providerId == b;
                });
            },
                Ni = function (a, b, c) {
                ("uid" != b || c) && a.hasOwnProperty(b) && N(a, b, c);
            };
            X.prototype.copy = function (a) {
                var b = this;b != a && (Bf(this, { uid: a.uid, displayName: a.displayName, photoURL: a.photoURL, email: a.email, emailVerified: a.emailVerified, isAnonymous: a.isAnonymous, providerData: [] }), x(a.providerData, function (a) {
                    Mi(b, a);
                }), this.na = a.na, N(this, "refreshToken", this.na.W));
            };X.prototype.reload = function () {
                var a = this;return this.c(Ji(this).then(function () {
                    return Oi(a).then(function () {
                        return Gi(a);
                    }).then(Ii);
                }));
            };
            var Oi = function (a) {
                return a.getToken().then(function (b) {
                    var c = a.isAnonymous;return Pi(a, b).then(function () {
                        c || Ni(a, "isAnonymous", !1);return b;
                    });
                });
            };X.prototype.getToken = function (a) {
                var b = this;return this.c(Ji(this).then(function () {
                    return b.na.getToken(a);
                }).then(function (a) {
                    if (!a) throw new O("internal-error");a.accessToken != b.Ed && (Di(b, a.accessToken), b.Ea());Ni(b, "refreshToken", a.refreshToken);return a.accessToken;
                }));
            };
            var Qi = function (a, b) {
                b.idToken && a.Ed != b.idToken && (zi(a.na, b), a.Ea(), Di(a, b.idToken), Ni(a, "refreshToken", a.na.W));
            };X.prototype.Ea = function () {
                this.dispatchEvent(new Ci("tokenChanged"));
            };var Pi = function (a, b) {
                return R(a.f, Rg, { idToken: b }).then(r(a.Ue, a));
            };
            X.prototype.Ue = function (a) {
                a = a.users;if (!a || !a.length) throw new O("internal-error");a = a[0];Ei(this, { uid: a.localId, displayName: a.displayName, photoURL: a.photoUrl, email: a.email, emailVerified: !!a.emailVerified });for (var b = Ri(a), c = 0; c < b.length; c++) Mi(this, b[c]);Ni(this, "isAnonymous", !(this.email && a.passwordHash) && !(this.providerData && this.providerData.length));
            };
            var Ri = function (a) {
                return (a = a.providerUserInfo) && a.length ? Da(a, function (a) {
                    return new Bi(a.rawId, a.providerId, a.email, a.displayName, a.photoUrl);
                }) : [];
            };
            X.prototype.reauthenticate = function (a) {
                var b = this;return this.c(a.Vb(this.f).then(function (a) {
                    var c;a: {
                        var e = a.idToken.split(".");if (3 == e.length) {
                            for (var e = e[1], f = (4 - e.length % 4) % 4, g = 0; g < f; g++) e += ".";try {
                                var k = JSON.parse(sb(e));if (k.sub && k.iss && k.aud && k.exp) {
                                    c = new Nf(k);break a;
                                }
                            } catch (n) {}
                        }c = null;
                    }if (!c || b.uid != c.Me) throw new O("user-mismatch");Qi(b, a);b.oa = null;return b.reload();
                }), !0);
            };
            var Si = function (a, b) {
                return Oi(a).then(function () {
                    if (Ha(Ki(a), b)) return Gi(a).then(function () {
                        throw new O("provider-already-linked");
                    });
                });
            };h = X.prototype;h.link = function (a) {
                var b = this;return this.c(Si(this, a.provider).then(function () {
                    return b.getToken();
                }).then(function (c) {
                    return a.Gd(b.f, c);
                }).then(r(this.ud, this)));
            };h.ud = function (a) {
                Qi(this, a);var b = this;return this.reload().then(function () {
                    return b;
                });
            };
            h.updateEmail = function (a) {
                var b = this;return this.c(this.getToken().then(function (c) {
                    return b.f.updateEmail(c, a);
                }).then(function (a) {
                    Qi(b, a);return b.reload();
                }));
            };h.updatePassword = function (a) {
                var b = this;return this.c(this.getToken().then(function (c) {
                    return b.f.updatePassword(c, a);
                }).then(function (a) {
                    Qi(b, a);return b.reload();
                }));
            };
            h.updateProfile = function (a) {
                if (void 0 === a.displayName && void 0 === a.photoURL) return Ji(this);var b = this;return this.c(this.getToken().then(function (c) {
                    return b.f.updateProfile(c, { displayName: a.displayName, photoUrl: a.photoURL });
                }).then(function (a) {
                    Qi(b, a);Ni(b, "displayName", a.displayName || null);Ni(b, "photoURL", a.photoUrl || null);return Gi(b);
                }).then(Ii));
            };
            h.unlink = function (a) {
                var b = this;return this.c(Oi(this).then(function (c) {
                    return Ha(Ki(b), a) ? Gg(b.f, c, [a]).then(function (a) {
                        var c = {};x(a.providerUserInfo || [], function (a) {
                            c[a.providerId] = !0;
                        });x(Ki(b), function (a) {
                            c[a] || Li(b, a);
                        });return Gi(b);
                    }) : Gi(b).then(function () {
                        throw new O("no-such-provider");
                    });
                }));
            };
            h["delete"] = function () {
                var a = this;return this.c(this.getToken().then(function (b) {
                    return R(a.f, Qg, { idToken: b });
                }).then(function () {
                    a.dispatchEvent(new Ci("userDeleted"));
                })).then(function () {
                    for (var b = 0; b < a.Z.length; b++) a.Z[b].cancel("app-deleted");a.Z = [];a.ne = !0;N(a, "refreshToken", null);a.m && a.m.unsubscribe(a);
                });
            };h.nd = function (a, b) {
                return "linkViaPopup" == a && (this.ka || null) == b && this.ca || "linkViaRedirect" == a && (this.mc || null) == b ? !0 : !1;
            };
            h.Ka = function (a, b, c, d) {
                "linkViaPopup" == a && d == (this.ka || null) && (c && this.Ga ? this.Ga(c) : b && !c && this.ca && this.ca(b), this.J && (this.J.cancel(), this.J = null), delete this.ca, delete this.Ga);
            };h.qb = function (a, b) {
                return "linkViaPopup" == a && b == (this.ka || null) || "linkViaRedirect" == a && (this.mc || null) == b ? r(this.qe, this) : null;
            };h.Ub = function () {
                return pf(this.uid + ":::");
            };
            h.linkWithPopup = function (a) {
                if (!qf()) return E(new O("operation-not-supported-in-this-environment"));if (this.oa) return E(this.oa);var b = this,
                    c = If(a.providerId),
                    d = this.Ub(),
                    e = null;(!rf() || lf()) && this.v && a.isOAuthProvider && (e = ih(this.v, this.j, this.B, "linkViaPopup", a, null, d, firebase.SDK_VERSION || null));var f = df(e, c && c.Ab, c && c.zb),
                    c = Si(this, a.providerId).then(function () {
                    return Gi(b);
                }).then(function () {
                    Ti(b);return b.getToken();
                }).then(function () {
                    return b.m.Bb(f, "linkViaPopup", a, d, !!e);
                }).then(function () {
                    return new C(function (a, c) {
                        b.Ka("linkViaPopup", null, new O("cancelled-popup-request"), b.ka || null);b.ca = a;b.Ga = c;b.ka = d;b.J = b.m.Ib(b, "linkViaPopup", f, d);
                    });
                }).then(function (a) {
                    f && cf(f);return a;
                }).g(function (a) {
                    f && cf(f);throw a;
                });return this.c(c);
            };
            h.linkWithRedirect = function (a) {
                if (!qf()) return E(new O("operation-not-supported-in-this-environment"));if (this.oa) return E(this.oa);var b = this,
                    c = null,
                    d = this.Ub(),
                    e = Si(this, a.providerId).then(function () {
                    Ti(b);return b.getToken();
                }).then(function () {
                    b.mc = d;return Gi(b);
                }).then(function (a) {
                    b.Ia && (a = b.Ia, a = a.i.set(Ui, b.C(), a.u));return a;
                }).then(function () {
                    return b.m.Cb("linkViaRedirect", a, d);
                }).g(function (a) {
                    c = a;if (b.Ia) return Vi(b.Ia);throw c;
                }).then(function () {
                    if (c) throw c;
                });return this.c(e);
            };
            var Ti = function (a) {
                if (!a.m || !a.jc) {
                    if (a.m && !a.jc) throw new O("internal-error");throw new O("auth-domain-config-required");
                }
            };X.prototype.qe = function (a, b) {
                var c = this;this.J && (this.J.cancel(), this.J = null);var d = null,
                    e = this.getToken().then(function (d) {
                    return Rf(c.f, { requestUri: a, sessionId: b, idToken: d });
                }).then(function (a) {
                    d = eg(a);return c.ud(a);
                }).then(function (a) {
                    return { user: a, credential: d };
                });return this.c(e);
            };
            X.prototype.sendEmailVerification = function () {
                var a = this;return this.c(this.getToken().then(function (b) {
                    return a.f.sendEmailVerification(b);
                }).then(function (b) {
                    if (a.email != b) return a.reload();
                }).then(function () {}));
            };X.prototype.c = function (a, b) {
                var c = this,
                    d = Wi(this, a, b);this.Z.push(d);ld(d, function () {
                    Ja(c.Z, d);
                });return d;
            };
            var Wi = function (a, b, c) {
                return a.oa && !c ? (b.cancel(), E(a.oa)) : b.g(function (b) {
                    !b || "auth/user-disabled" != b.code && "auth/user-token-expired" != b.code || (a.oa || a.dispatchEvent(new Ci("userInvalidated")), a.oa = b);throw b;
                });
            };X.prototype.toJSON = function () {
                return this.C();
            };
            X.prototype.C = function () {
                var a = { uid: this.uid, displayName: this.displayName, photoURL: this.photoURL, email: this.email, emailVerified: this.emailVerified, isAnonymous: this.isAnonymous, providerData: [], apiKey: this.j, appName: this.B, authDomain: this.v, stsTokenManager: this.na.C(), redirectEventId: this.mc || null };x(this.providerData, function (b) {
                    a.providerData.push(Cf(b));
                });return a;
            };
            var Xi = function (a) {
                if (!a.apiKey) return null;var b = { apiKey: a.apiKey, authDomain: a.authDomain, appName: a.appName },
                    c = {};if (a.stsTokenManager && a.stsTokenManager.accessToken && a.stsTokenManager.expirationTime) c.idToken = a.stsTokenManager.accessToken, c.refreshToken = a.stsTokenManager.refreshToken || null, c.expiresIn = (a.stsTokenManager.expirationTime - ka()) / 1E3;else return null;var d = new X(b, c, a);a.providerData && x(a.providerData, function (a) {
                    if (a) {
                        var b = {};Bf(b, a);Mi(d, b);
                    }
                });a.redirectEventId && (d.mc = a.redirectEventId);
                return d;
            },
                Yi = function (a, b, c) {
                var d = new X(a, b);c && (d.Ia = c);return d.reload().then(function () {
                    return d;
                });
            };var Zi = function (a) {
                this.u = a;this.i = Oh();
            },
                Ui = { name: "redirectUser", I: !1 },
                Vi = function (a) {
                return a.i.remove(Ui, a.u);
            },
                $i = function (a, b) {
                return a.i.get(Ui, a.u).then(function (a) {
                    a && b && (a.authDomain = b);return Xi(a || {});
                });
            };var aj = function (a) {
                this.u = a;this.i = Oh();
            },
                bj = { name: "authUser", I: !0 },
                cj = function (a, b) {
                return a.i.set(bj, b.C(), a.u);
            },
                dj = function (a) {
                return a.i.remove(bj, a.u);
            },
                ej = function (a, b) {
                return a.i.get(bj, a.u).then(function (a) {
                    a && b && (a.authDomain = b);return Xi(a || {});
                });
            };var jj = function (a) {
                this.Sa = !1;N(this, "app", a);if (Y(this).options && Y(this).options.apiKey) a = firebase.SDK_VERSION ? nf(firebase.SDK_VERSION) : null, this.f = new S(Y(this).options && Y(this).options.apiKey, null, a);else throw new O("invalid-api-key");this.Z = [];this.Qa = [];this.Se = firebase.INTERNAL.createSubscribe(r(this.Ge, this));fj(this, null);this.pa = new aj(Y(this).options.apiKey + ":" + Y(this).name);this.fb = new Zi(Y(this).options.apiKey + ":" + Y(this).name);this.Pb = this.c(gj(this));this.ua = this.c(hj(this));this.Pc = !1;this.Jc = r(this.gf, this);this.Zd = r(this.Xa, this);this.$d = r(this.Ce, this);this.Xd = r(this.Ae, this);this.Yd = r(this.Be, this);ij(this);this.INTERNAL = {};this.INTERNAL["delete"] = r(this["delete"], this);
            };jj.prototype.toJSON = function () {
                return { apiKey: Y(this).options.apiKey, authDomain: Y(this).options.authDomain, appName: Y(this).name, currentUser: Z(this) && Z(this).C() };
            };
            var kj = function (a) {
                return a.oe || E(new O("auth-domain-config-required"));
            },
                ij = function (a) {
                var b = Y(a).options.authDomain,
                    c = Y(a).options.apiKey;b && qf() && (a.oe = a.Pb.then(function () {
                    if (!a.Sa) return a.m = si(b, c, Y(a).name), a.m.subscribe(a), Z(a) && Hi(Z(a)), a.$c && (Hi(a.$c), a.$c = null), a.m;
                }));
            };h = jj.prototype;h.nd = function (a, b) {
                switch (a) {case "unknown":case "signInViaRedirect":
                        return !0;case "signInViaPopup":
                        return this.ka == b && !!this.ca;default:
                        return !1;}
            };
            h.Ka = function (a, b, c, d) {
                "signInViaPopup" == a && this.ka == d && (c && this.Ga ? this.Ga(c) : b && !c && this.ca && this.ca(b), this.J && (this.J.cancel(), this.J = null), delete this.ca, delete this.Ga);
            };h.qb = function (a, b) {
                return "signInViaRedirect" == a || "signInViaPopup" == a && this.ka == b && this.ca ? r(this.re, this) : null;
            };
            h.re = function (a, b) {
                var c = this;a = { requestUri: a, sessionId: b };this.J && (this.J.cancel(), this.J = null);var d = null,
                    e = Pf(c.f, a).then(function (a) {
                    d = eg(a);return a;
                });a = c.Pb.then(function () {
                    return e;
                }).then(function (a) {
                    return lj(c, a);
                }).then(function () {
                    return { user: Z(c), credential: d };
                });return this.c(a);
            };h.Ub = function () {
                return pf();
            };
            h.signInWithPopup = function (a) {
                if (!qf()) return E(new O("operation-not-supported-in-this-environment"));var b = this,
                    c = If(a.providerId),
                    d = this.Ub(),
                    e = null;(!rf() || lf()) && Y(this).options.authDomain && a.isOAuthProvider && (e = ih(Y(this).options.authDomain, Y(this).options.apiKey, Y(this).name, "signInViaPopup", a, null, d, firebase.SDK_VERSION || null));var f = df(e, c && c.Ab, c && c.zb),
                    c = kj(this).then(function (b) {
                    return b.Bb(f, "signInViaPopup", a, d, !!e);
                }).then(function () {
                    return new C(function (a, c) {
                        b.Ka("signInViaPopup", null, new O("cancelled-popup-request"), b.ka);b.ca = a;b.Ga = c;b.ka = d;b.J = b.m.Ib(b, "signInViaPopup", f, d);
                    });
                }).then(function (a) {
                    f && cf(f);return a;
                }).g(function (a) {
                    f && cf(f);throw a;
                });return this.c(c);
            };h.signInWithRedirect = function (a) {
                if (!qf()) return E(new O("operation-not-supported-in-this-environment"));var b = this,
                    c = kj(this).then(function () {
                    return b.m.Cb("signInViaRedirect", a);
                });return this.c(c);
            };
            h.getRedirectResult = function () {
                if (!qf()) return E(new O("operation-not-supported-in-this-environment"));var a = this,
                    b = kj(this).then(function () {
                    return a.m.getRedirectResult();
                });return this.c(b);
            };
            var lj = function (a, b) {
                var c = {};c.apiKey = Y(a).options.apiKey;c.authDomain = Y(a).options.authDomain;c.appName = Y(a).name;return a.Pb.then(function () {
                    return Yi(c, b, a.fb);
                }).then(function (b) {
                    if (Z(a) && b.uid == Z(a).uid) return Z(a).copy(b), a.Xa(b);fj(a, b);Hi(b);return a.Xa(b);
                }).then(function () {
                    a.Ea();
                });
            },
                fj = function (a, b) {
                Z(a) && (Fi(Z(a), a.Zd), cc(Z(a), "tokenChanged", a.$d), cc(Z(a), "userDeleted", a.Xd), cc(Z(a), "userInvalidated", a.Yd));b && (b.pc.push(a.Zd), Ub(b, "tokenChanged", a.$d), Ub(b, "userDeleted", a.Xd), Ub(b, "userInvalidated", a.Yd));N(a, "currentUser", b);
            };jj.prototype.signOut = function () {
                var a = this,
                    b = this.ua.then(function () {
                    if (!Z(a)) return D();fj(a, null);return dj(a.pa).then(function () {
                        a.Ea();
                    });
                });return this.c(b);
            };
            var mj = function (a) {
                var b = $i(a.fb, Y(a).options.authDomain).then(function (b) {
                    if (a.$c = b) b.Ia = a.fb;return Vi(a.fb);
                });return a.c(b);
            },
                gj = function (a) {
                var b = Y(a).options.authDomain,
                    c = mj(a).then(function () {
                    return ej(a.pa, b);
                }).then(function (b) {
                    return b ? (b.Ia = a.fb, b.reload().then(function () {
                        return cj(a.pa, b).then(function () {
                            return b;
                        });
                    }).g(function (c) {
                        return "auth/network-request-failed" == c.code ? b : dj(a.pa);
                    })) : null;
                }).then(function (b) {
                    fj(a, b || null);
                });return a.c(c);
            },
                hj = function (a) {
                return a.Pb.then(function () {
                    return a.getRedirectResult();
                }).g(function () {}).then(function () {
                    if (!a.Sa) return a.Jc();
                }).g(function () {}).then(function () {
                    if (!a.Sa) {
                        a.Pc = !0;var b = a.pa;b.i.addListener(bj, b.u, a.Jc);
                    }
                });
            };h = jj.prototype;h.gf = function () {
                var a = this;return ej(this.pa, Y(this).options.authDomain).then(function (b) {
                    if (!a.Sa) {
                        var c;if (c = Z(a) && b) {
                            c = Z(a).uid;var d = b.uid;c = void 0 === c || null === c || "" === c || void 0 === d || null === d || "" === d ? !1 : c == d;
                        }if (c) return Z(a).copy(b), Z(a).getToken();if (Z(a) || b) fj(a, b), b && (Hi(b), b.Ia = a.fb), a.m && a.m.subscribe(a), a.Ea();
                    }
                });
            };h.Xa = function (a) {
                return cj(this.pa, a);
            };h.Ce = function () {
                this.Ea();this.Xa(Z(this));
            };h.Ae = function () {
                this.signOut();
            };
            h.Be = function () {
                this.signOut();
            };var nj = function (a, b) {
                return a.c(b.then(function (b) {
                    return lj(a, b);
                }).then(function () {
                    return Z(a);
                }));
            };h = jj.prototype;h.Ge = function (a) {
                var b = this;this.addAuthTokenListener(function () {
                    a.next(Z(b));
                });
            };h.onAuthStateChanged = function (a, b, c) {
                var d = this;this.Pc && firebase.Promise.resolve().then(function () {
                    q(a) ? a(Z(d)) : q(a.next) && a.next(Z(d));
                });return this.Se(a, b, c);
            };
            h.getToken = function (a) {
                var b = this,
                    c = this.ua.then(function () {
                    return Z(b) ? Z(b).getToken(a).then(function (a) {
                        return { accessToken: a };
                    }) : null;
                });return this.c(c);
            };h.signInWithCustomToken = function (a) {
                var b = this;return this.ua.then(function () {
                    return nj(b, R(b.f, Sg, { token: a }));
                }).then(function (a) {
                    Ni(a, "isAnonymous", !1);return b.Xa(a);
                }).then(function () {
                    return Z(b);
                });
            };h.signInWithEmailAndPassword = function (a, b) {
                var c = this;return this.ua.then(function () {
                    return nj(c, R(c.f, bg, { email: a, password: b }));
                });
            };
            h.createUserWithEmailAndPassword = function (a, b) {
                var c = this;return this.ua.then(function () {
                    return nj(c, R(c.f, Pg, { email: a, password: b }));
                });
            };h.signInWithCredential = function (a) {
                var b = this;return this.ua.then(function () {
                    return nj(b, a.Vb(b.f));
                });
            };h.signInAnonymously = function () {
                var a = Z(this),
                    b = this;return a && a.isAnonymous ? D(a) : this.ua.then(function () {
                    return nj(b, b.f.signInAnonymously());
                }).then(function (a) {
                    Ni(a, "isAnonymous", !0);return b.Xa(a);
                }).then(function () {
                    return Z(b);
                });
            };
            var Y = function (a) {
                return a.app;
            },
                Z = function (a) {
                return a.currentUser;
            };h = jj.prototype;h.getUid = function () {
                return Z(this) && Z(this).uid || null;
            };h.Ea = function () {
                if (this.Pc) for (var a = 0; a < this.Qa.length; a++) if (this.Qa[a]) this.Qa[a](Z(this) && Z(this)._lat || null);
            };h.addAuthTokenListener = function (a) {
                var b = this;this.Qa.push(a);this.c(this.ua.then(function () {
                    b.Sa || Ha(b.Qa, a) && a(Z(b) && Z(b)._lat || null);
                }));
            };h.removeAuthTokenListener = function (a) {
                Ka(this.Qa, function (b) {
                    return b == a;
                });
            };
            h["delete"] = function () {
                this.Sa = !0;for (var a = 0; a < this.Z.length; a++) this.Z[a].cancel("app-deleted");this.Z = [];this.pa && (a = this.pa, a.i.removeListener(bj, a.u, this.Jc));this.m && this.m.unsubscribe(this);return firebase.Promise.resolve();
            };h.c = function (a) {
                var b = this;this.Z.push(a);ld(a, function () {
                    Ja(b.Z, a);
                });return a;
            };h.fetchProvidersForEmail = function (a) {
                return this.c(wg(this.f, a));
            };h.verifyPasswordResetCode = function (a) {
                return this.checkActionCode(a).then(function (a) {
                    return a.data.email;
                });
            };
            h.confirmPasswordReset = function (a, b) {
                return this.c(this.f.confirmPasswordReset(a, b).then(function () {}));
            };h.checkActionCode = function (a) {
                return this.c(this.f.checkActionCode(a).then(function (a) {
                    return new Ch(a);
                }));
            };h.applyActionCode = function (a) {
                return this.c(this.f.applyActionCode(a).then(function () {}));
            };h.sendPasswordResetEmail = function (a) {
                return this.c(this.f.sendPasswordResetEmail(a).then(function () {}));
            };U(jj.prototype, { applyActionCode: { name: "applyActionCode", a: [T("code")] }, checkActionCode: { name: "checkActionCode", a: [T("code")] }, confirmPasswordReset: { name: "confirmPasswordReset", a: [T("code"), T("newPassword")] }, createUserWithEmailAndPassword: { name: "createUserWithEmailAndPassword", a: [T("email"), T("password")] }, fetchProvidersForEmail: { name: "fetchProvidersForEmail", a: [T("email")] }, getRedirectResult: { name: "getRedirectResult", a: [] }, onAuthStateChanged: { name: "onAuthStateChanged", a: [Jh(Eh(), Fh(), "nextOrObserver"), Fh("opt_error", !0), Fh("opt_completed", !0)] }, sendPasswordResetEmail: { name: "sendPasswordResetEmail", a: [T("email")] }, signInAnonymously: { name: "signInAnonymously", a: [] }, signInWithCredential: { name: "signInWithCredential", a: [Hh()] }, signInWithCustomToken: { name: "signInWithCustomToken", a: [T("token")] }, signInWithEmailAndPassword: { name: "signInWithEmailAndPassword", a: [T("email"), T("password")] }, signInWithPopup: { name: "signInWithPopup", a: [Ih()] }, signInWithRedirect: { name: "signInWithRedirect", a: [Ih()] }, signOut: { name: "signOut",
                    a: [] }, toJSON: { name: "toJSON", a: [T(null, !0)] }, verifyPasswordResetCode: { name: "verifyPasswordResetCode", a: [T("code")] } });
            U(X.prototype, { "delete": { name: "delete", a: [] }, getToken: { name: "getToken", a: [{ name: "opt_forceRefresh", ea: "a boolean", optional: !0, ga: function (a) {
                            return "boolean" == typeof a;
                        } }] }, link: { name: "link", a: [Hh()] }, linkWithPopup: { name: "linkWithPopup", a: [Ih()] }, linkWithRedirect: { name: "linkWithRedirect", a: [Ih()] }, reauthenticate: { name: "reauthenticate", a: [Hh()] }, reload: { name: "reload", a: [] }, sendEmailVerification: { name: "sendEmailVerification", a: [] }, toJSON: { name: "toJSON", a: [T(null, !0)] }, unlink: { name: "unlink", a: [T("provider")] },
                updateEmail: { name: "updateEmail", a: [T("email")] }, updatePassword: { name: "updatePassword", a: [T("password")] }, updateProfile: { name: "updateProfile", a: [Eh("profile")] } });U(C.prototype, { g: { name: "catch" }, then: { name: "then" } });V(dg, "credential", function (a, b) {
                return new ag(a, b);
            }, [T("email"), T("password")]);U(Tf.prototype, { addScope: { name: "addScope", a: [T("scope")] }, setCustomParameters: { name: "setCustomParameters", a: [Eh("customOAuthParameters")] } });V(Tf, "credential", Uf, [Jh(T(), Eh(), "token")]);
            U(Vf.prototype, { addScope: { name: "addScope", a: [T("scope")] }, setCustomParameters: { name: "setCustomParameters", a: [Eh("customOAuthParameters")] } });V(Vf, "credential", Wf, [Jh(T(), Eh(), "token")]);U(Xf.prototype, { addScope: { name: "addScope", a: [T("scope")] }, setCustomParameters: { name: "setCustomParameters", a: [Eh("customOAuthParameters")] } });V(Xf, "credential", Yf, [Jh(T(), Gh(), "idToken", !0), Jh(T(), Gh(), "accessToken", !0)]);U(Zf.prototype, { setCustomParameters: { name: "setCustomParameters", a: [Eh("customOAuthParameters")] } });
            V(Zf, "credential", $f, [Jh(T(), Eh(), "token"), T("secret", !0)]);U(O.prototype, { toJSON: { name: "toJSON", a: [T(null, !0)] } });U(gg.prototype, { toJSON: { name: "toJSON", a: [T(null, !0)] } });U(Mf.prototype, { toJSON: { name: "toJSON", a: [T(null, !0)] } });
            (function () {
                if ("undefined" !== typeof firebase && firebase.INTERNAL && firebase.INTERNAL.registerService) {
                    var a = { Auth: jj, Error: O };V(a, "EmailAuthProvider", dg, []);V(a, "FacebookAuthProvider", Tf, []);V(a, "GithubAuthProvider", Vf, []);V(a, "GoogleAuthProvider", Xf, []);V(a, "TwitterAuthProvider", Zf, []);firebase.INTERNAL.registerService("auth", function (a, c) {
                        a = new jj(a);c({ INTERNAL: { getUid: r(a.getUid, a), getToken: r(a.getToken, a), addAuthTokenListener: r(a.addAuthTokenListener, a), removeAuthTokenListener: r(a.removeAuthTokenListener, a) } });return a;
                    }, a, function (a, c) {
                        if ("create" === a) try {
                            c.auth();
                        } catch (d) {}
                    });firebase.INTERNAL.extendNamespace({ User: X });
                } else throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");
            })();
        }).call(this);
        (function () {
            var g,
                aa = this;function n(a) {
                return void 0 !== a;
            }function ba() {}function ca(a) {
                a.Vb = function () {
                    return a.Ye ? a.Ye : a.Ye = new a();
                };
            }
            function da(a) {
                var b = typeof a;if ("object" == b) {
                    if (a) {
                        if (a instanceof Array) return "array";if (a instanceof Object) return b;var c = Object.prototype.toString.call(a);if ("[object Window]" == c) return "object";if ("[object Array]" == c || "number" == typeof a.length && "undefined" != typeof a.splice && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("splice")) return "array";if ("[object Function]" == c || "undefined" != typeof a.call && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("call")) return "function";
                    } else return "null";
                } else if ("function" == b && "undefined" == typeof a.call) return "object";return b;
            }function ea(a) {
                return "array" == da(a);
            }function fa(a) {
                var b = da(a);return "array" == b || "object" == b && "number" == typeof a.length;
            }function p(a) {
                return "string" == typeof a;
            }function ga(a) {
                return "number" == typeof a;
            }function ha(a) {
                return "function" == da(a);
            }function ia(a) {
                var b = typeof a;return "object" == b && null != a || "function" == b;
            }function ja(a, b, c) {
                return a.call.apply(a.bind, arguments);
            }
            function ka(a, b, c) {
                if (!a) throw Error();if (2 < arguments.length) {
                    var d = Array.prototype.slice.call(arguments, 2);return function () {
                        var c = Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c, d);return a.apply(b, c);
                    };
                }return function () {
                    return a.apply(b, arguments);
                };
            }function q(a, b, c) {
                q = Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? ja : ka;return q.apply(null, arguments);
            }
            function la(a, b) {
                function c() {}c.prototype = b.prototype;a.wg = b.prototype;a.prototype = new c();a.prototype.constructor = a;a.sg = function (a, c, f) {
                    for (var h = Array(arguments.length - 2), k = 2; k < arguments.length; k++) h[k - 2] = arguments[k];return b.prototype[c].apply(a, h);
                };
            };function ma() {
                this.Wa = -1;
            };function na() {
                this.Wa = -1;this.Wa = 64;this.M = [];this.Vd = [];this.Af = [];this.zd = [];this.zd[0] = 128;for (var a = 1; a < this.Wa; ++a) this.zd[a] = 0;this.Pd = this.$b = 0;this.reset();
            }la(na, ma);na.prototype.reset = function () {
                this.M[0] = 1732584193;this.M[1] = 4023233417;this.M[2] = 2562383102;this.M[3] = 271733878;this.M[4] = 3285377520;this.Pd = this.$b = 0;
            };
            function oa(a, b, c) {
                c || (c = 0);var d = a.Af;if (p(b)) for (var e = 0; 16 > e; e++) d[e] = b.charCodeAt(c) << 24 | b.charCodeAt(c + 1) << 16 | b.charCodeAt(c + 2) << 8 | b.charCodeAt(c + 3), c += 4;else for (e = 0; 16 > e; e++) d[e] = b[c] << 24 | b[c + 1] << 16 | b[c + 2] << 8 | b[c + 3], c += 4;for (e = 16; 80 > e; e++) {
                    var f = d[e - 3] ^ d[e - 8] ^ d[e - 14] ^ d[e - 16];d[e] = (f << 1 | f >>> 31) & 4294967295;
                }b = a.M[0];c = a.M[1];for (var h = a.M[2], k = a.M[3], l = a.M[4], m, e = 0; 80 > e; e++) 40 > e ? 20 > e ? (f = k ^ c & (h ^ k), m = 1518500249) : (f = c ^ h ^ k, m = 1859775393) : 60 > e ? (f = c & h | k & (c | h), m = 2400959708) : (f = c ^ h ^ k, m = 3395469782), f = (b << 5 | b >>> 27) + f + l + m + d[e] & 4294967295, l = k, k = h, h = (c << 30 | c >>> 2) & 4294967295, c = b, b = f;a.M[0] = a.M[0] + b & 4294967295;a.M[1] = a.M[1] + c & 4294967295;a.M[2] = a.M[2] + h & 4294967295;a.M[3] = a.M[3] + k & 4294967295;a.M[4] = a.M[4] + l & 4294967295;
            }
            na.prototype.update = function (a, b) {
                if (null != a) {
                    n(b) || (b = a.length);for (var c = b - this.Wa, d = 0, e = this.Vd, f = this.$b; d < b;) {
                        if (0 == f) for (; d <= c;) oa(this, a, d), d += this.Wa;if (p(a)) for (; d < b;) {
                            if (e[f] = a.charCodeAt(d), ++f, ++d, f == this.Wa) {
                                oa(this, e);f = 0;break;
                            }
                        } else for (; d < b;) if (e[f] = a[d], ++f, ++d, f == this.Wa) {
                            oa(this, e);f = 0;break;
                        }
                    }this.$b = f;this.Pd += b;
                }
            };function r(a, b) {
                for (var c in a) b.call(void 0, a[c], c, a);
            }function pa(a, b) {
                var c = {},
                    d;for (d in a) c[d] = b.call(void 0, a[d], d, a);return c;
            }function qa(a, b) {
                for (var c in a) if (!b.call(void 0, a[c], c, a)) return !1;return !0;
            }function ra(a) {
                var b = 0,
                    c;for (c in a) b++;return b;
            }function sa(a) {
                for (var b in a) return b;
            }function ta(a) {
                var b = [],
                    c = 0,
                    d;for (d in a) b[c++] = a[d];return b;
            }function ua(a) {
                var b = [],
                    c = 0,
                    d;for (d in a) b[c++] = d;return b;
            }function va(a, b) {
                for (var c in a) if (a[c] == b) return !0;return !1;
            }
            function wa(a, b, c) {
                for (var d in a) if (b.call(c, a[d], d, a)) return d;
            }function xa(a, b) {
                var c = wa(a, b, void 0);return c && a[c];
            }function ya(a) {
                for (var b in a) return !1;return !0;
            }function za(a) {
                var b = {},
                    c;for (c in a) b[c] = a[c];return b;
            };function Aa(a) {
                a = String(a);if (/^\s*$/.test(a) ? 0 : /^[\],:{}\s\u2028\u2029]*$/.test(a.replace(/\\["\\\/bfnrtu]/g, "@").replace(/"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g, ""))) try {
                    return eval("(" + a + ")");
                } catch (b) {}throw Error("Invalid JSON string: " + a);
            }function Ba() {
                this.Fd = void 0;
            }
            function Ca(a, b, c) {
                switch (typeof b) {case "string":
                        Da(b, c);break;case "number":
                        c.push(isFinite(b) && !isNaN(b) ? b : "null");break;case "boolean":
                        c.push(b);break;case "undefined":
                        c.push("null");break;case "object":
                        if (null == b) {
                            c.push("null");break;
                        }if (ea(b)) {
                            var d = b.length;c.push("[");for (var e = "", f = 0; f < d; f++) c.push(e), e = b[f], Ca(a, a.Fd ? a.Fd.call(b, String(f), e) : e, c), e = ",";c.push("]");break;
                        }c.push("{");d = "";for (f in b) Object.prototype.hasOwnProperty.call(b, f) && (e = b[f], "function" != typeof e && (c.push(d), Da(f, c), c.push(":"), Ca(a, a.Fd ? a.Fd.call(b, f, e) : e, c), d = ","));c.push("}");break;case "function":
                        break;default:
                        throw Error("Unknown type: " + typeof b);}
            }var Ea = { '"': '\\"', "\\": "\\\\", "/": "\\/", "\b": "\\b", "\f": "\\f", "\n": "\\n", "\r": "\\r", "\t": "\\t", "\x0B": "\\u000b" },
                Fa = /\uffff/.test("\uffff") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;
            function Da(a, b) {
                b.push('"', a.replace(Fa, function (a) {
                    if (a in Ea) return Ea[a];var b = a.charCodeAt(0),
                        e = "\\u";16 > b ? e += "000" : 256 > b ? e += "00" : 4096 > b && (e += "0");return Ea[a] = e + b.toString(16);
                }), '"');
            };var t;a: {
                var Ga = aa.navigator;if (Ga) {
                    var Ha = Ga.userAgent;if (Ha) {
                        t = Ha;break a;
                    }
                }t = "";
            };var v = Array.prototype,
                Ia = v.indexOf ? function (a, b, c) {
                return v.indexOf.call(a, b, c);
            } : function (a, b, c) {
                c = null == c ? 0 : 0 > c ? Math.max(0, a.length + c) : c;if (p(a)) return p(b) && 1 == b.length ? a.indexOf(b, c) : -1;for (; c < a.length; c++) if (c in a && a[c] === b) return c;return -1;
            },
                Ja = v.forEach ? function (a, b, c) {
                v.forEach.call(a, b, c);
            } : function (a, b, c) {
                for (var d = a.length, e = p(a) ? a.split("") : a, f = 0; f < d; f++) f in e && b.call(c, e[f], f, a);
            },
                Ka = v.filter ? function (a, b, c) {
                return v.filter.call(a, b, c);
            } : function (a, b, c) {
                for (var d = a.length, e = [], f = 0, h = p(a) ? a.split("") : a, k = 0; k < d; k++) if (k in h) {
                    var l = h[k];b.call(c, l, k, a) && (e[f++] = l);
                }return e;
            },
                La = v.map ? function (a, b, c) {
                return v.map.call(a, b, c);
            } : function (a, b, c) {
                for (var d = a.length, e = Array(d), f = p(a) ? a.split("") : a, h = 0; h < d; h++) h in f && (e[h] = b.call(c, f[h], h, a));return e;
            },
                Ma = v.reduce ? function (a, b, c, d) {
                for (var e = [], f = 1, h = arguments.length; f < h; f++) e.push(arguments[f]);d && (e[0] = q(b, d));return v.reduce.apply(a, e);
            } : function (a, b, c, d) {
                var e = c;Ja(a, function (c, h) {
                    e = b.call(d, e, c, h, a);
                });return e;
            },
                Na = v.every ? function (a, b, c) {
                return v.every.call(a, b, c);
            } : function (a, b, c) {
                for (var d = a.length, e = p(a) ? a.split("") : a, f = 0; f < d; f++) if (f in e && !b.call(c, e[f], f, a)) return !1;return !0;
            };function Oa(a, b) {
                var c = Pa(a, b, void 0);return 0 > c ? null : p(a) ? a.charAt(c) : a[c];
            }function Pa(a, b, c) {
                for (var d = a.length, e = p(a) ? a.split("") : a, f = 0; f < d; f++) if (f in e && b.call(c, e[f], f, a)) return f;return -1;
            }function Qa(a, b) {
                var c = Ia(a, b);0 <= c && v.splice.call(a, c, 1);
            }function Ra(a, b, c) {
                return 2 >= arguments.length ? v.slice.call(a, b) : v.slice.call(a, b, c);
            }
            function Sa(a, b) {
                a.sort(b || Ta);
            }function Ta(a, b) {
                return a > b ? 1 : a < b ? -1 : 0;
            };var Ua = -1 != t.indexOf("Opera") || -1 != t.indexOf("OPR"),
                Va = -1 != t.indexOf("Trident") || -1 != t.indexOf("MSIE"),
                Wa = -1 != t.indexOf("Gecko") && -1 == t.toLowerCase().indexOf("webkit") && !(-1 != t.indexOf("Trident") || -1 != t.indexOf("MSIE")),
                Xa = -1 != t.toLowerCase().indexOf("webkit");
            (function () {
                var a = "",
                    b;if (Ua && aa.opera) return a = aa.opera.version, ha(a) ? a() : a;Wa ? b = /rv\:([^\);]+)(\)|;)/ : Va ? b = /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/ : Xa && (b = /WebKit\/(\S+)/);b && (a = (a = b.exec(t)) ? a[1] : "");return Va && (b = (b = aa.document) ? b.documentMode : void 0, b > parseFloat(a)) ? String(b) : a;
            })();var Ya = null,
                Za = null,
                $a = null;function ab(a, b) {
                if (!fa(a)) throw Error("encodeByteArray takes an array as a parameter");bb();for (var c = b ? Za : Ya, d = [], e = 0; e < a.length; e += 3) {
                    var f = a[e],
                        h = e + 1 < a.length,
                        k = h ? a[e + 1] : 0,
                        l = e + 2 < a.length,
                        m = l ? a[e + 2] : 0,
                        u = f >> 2,
                        f = (f & 3) << 4 | k >> 4,
                        k = (k & 15) << 2 | m >> 6,
                        m = m & 63;l || (m = 64, h || (k = 64));d.push(c[u], c[f], c[k], c[m]);
                }return d.join("");
            }
            function bb() {
                if (!Ya) {
                    Ya = {};Za = {};$a = {};for (var a = 0; 65 > a; a++) Ya[a] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(a), Za[a] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.".charAt(a), $a[Za[a]] = a, 62 <= a && ($a["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(a)] = a);
                }
            };function cb(a, b) {
                return Object.prototype.hasOwnProperty.call(a, b);
            }function w(a, b) {
                if (Object.prototype.hasOwnProperty.call(a, b)) return a[b];
            }function db(a, b) {
                for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && b(c, a[c]);
            };function x(a, b, c, d) {
                var e;d < b ? e = "at least " + b : d > c && (e = 0 === c ? "none" : "no more than " + c);if (e) throw Error(a + " failed: Was called with " + d + (1 === d ? " argument." : " arguments.") + " Expects " + e + ".");
            }function y(a, b, c) {
                var d = "";switch (b) {case 1:
                        d = c ? "first" : "First";break;case 2:
                        d = c ? "second" : "Second";break;case 3:
                        d = c ? "third" : "Third";break;case 4:
                        d = c ? "fourth" : "Fourth";break;default:
                        throw Error("errorPrefix called with argumentNumber > 4.  Need to update it?");}return a = a + " failed: " + (d + " argument ");
            }
            function A(a, b, c, d) {
                if ((!d || n(c)) && !ha(c)) throw Error(y(a, b, d) + "must be a valid function.");
            }function eb(a, b, c) {
                if (n(c) && (!ia(c) || null === c)) throw Error(y(a, b, !0) + "must be a valid context object.");
            };function fb(a) {
                var b = [];db(a, function (a, d) {
                    ea(d) ? Ja(d, function (d) {
                        b.push(encodeURIComponent(a) + "=" + encodeURIComponent(d));
                    }) : b.push(encodeURIComponent(a) + "=" + encodeURIComponent(d));
                });return b.length ? "&" + b.join("&") : "";
            };var gb = firebase.Promise;function hb() {
                var a = this;this.reject = this.resolve = null;this.ra = new gb(function (b, c) {
                    a.resolve = b;a.reject = c;
                });
            }function ib(a, b) {
                return function (c, d) {
                    c ? a.reject(c) : a.resolve(d);ha(b) && (jb(a.ra), 1 === b.length ? b(c) : b(c, d));
                };
            }function jb(a) {
                a.then(void 0, ba);
            };function kb(a, b) {
                if (!a) throw lb(b);
            }function lb(a) {
                return Error("Firebase Database (" + firebase.SDK_VERSION + ") INTERNAL ASSERT FAILED: " + a);
            };function mb(a) {
                for (var b = [], c = 0, d = 0; d < a.length; d++) {
                    var e = a.charCodeAt(d);55296 <= e && 56319 >= e && (e -= 55296, d++, kb(d < a.length, "Surrogate pair missing trail surrogate."), e = 65536 + (e << 10) + (a.charCodeAt(d) - 56320));128 > e ? b[c++] = e : (2048 > e ? b[c++] = e >> 6 | 192 : (65536 > e ? b[c++] = e >> 12 | 224 : (b[c++] = e >> 18 | 240, b[c++] = e >> 12 & 63 | 128), b[c++] = e >> 6 & 63 | 128), b[c++] = e & 63 | 128);
                }return b;
            }function nb(a) {
                for (var b = 0, c = 0; c < a.length; c++) {
                    var d = a.charCodeAt(c);128 > d ? b++ : 2048 > d ? b += 2 : 55296 <= d && 56319 >= d ? (b += 4, c++) : b += 3;
                }return b;
            };function ob(a) {
                return "undefined" !== typeof JSON && n(JSON.parse) ? JSON.parse(a) : Aa(a);
            }function B(a) {
                if ("undefined" !== typeof JSON && n(JSON.stringify)) a = JSON.stringify(a);else {
                    var b = [];Ca(new Ba(), a, b);a = b.join("");
                }return a;
            };function pb(a, b) {
                this.committed = a;this.snapshot = b;
            };function qb() {
                return "undefined" !== typeof window && !!(window.cordova || window.phonegap || window.PhoneGap) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test("undefined" !== typeof navigator && "string" === typeof navigator.userAgent ? navigator.userAgent : "");
            };function rb(a) {
                this.re = a;this.Bd = [];this.Qb = 0;this.Xd = -1;this.Fb = null;
            }function sb(a, b, c) {
                a.Xd = b;a.Fb = c;a.Xd < a.Qb && (a.Fb(), a.Fb = null);
            }function tb(a, b, c) {
                for (a.Bd[b] = c; a.Bd[a.Qb];) {
                    var d = a.Bd[a.Qb];delete a.Bd[a.Qb];for (var e = 0; e < d.length; ++e) if (d[e]) {
                        var f = a;ub(function () {
                            f.re(d[e]);
                        });
                    }if (a.Qb === a.Xd) {
                        a.Fb && (clearTimeout(a.Fb), a.Fb(), a.Fb = null);break;
                    }a.Qb++;
                }
            };function vb() {
                this.pc = {};
            }vb.prototype.set = function (a, b) {
                null == b ? delete this.pc[a] : this.pc[a] = b;
            };vb.prototype.get = function (a) {
                return cb(this.pc, a) ? this.pc[a] : null;
            };vb.prototype.remove = function (a) {
                delete this.pc[a];
            };vb.prototype.Ze = !0;function wb(a) {
                this.uc = a;this.Cd = "firebase:";
            }g = wb.prototype;g.set = function (a, b) {
                null == b ? this.uc.removeItem(this.Cd + a) : this.uc.setItem(this.Cd + a, B(b));
            };g.get = function (a) {
                a = this.uc.getItem(this.Cd + a);return null == a ? null : ob(a);
            };g.remove = function (a) {
                this.uc.removeItem(this.Cd + a);
            };g.Ze = !1;g.toString = function () {
                return this.uc.toString();
            };function xb(a) {
                try {
                    if ("undefined" !== typeof window && "undefined" !== typeof window[a]) {
                        var b = window[a];b.setItem("firebase:sentinel", "cache");b.removeItem("firebase:sentinel");return new wb(b);
                    }
                } catch (c) {}return new vb();
            }var yb = xb("localStorage"),
                zb = xb("sessionStorage");function Ab(a, b, c) {
                this.type = Bb;this.source = a;this.path = b;this.Ga = c;
            }Ab.prototype.Mc = function (a) {
                return this.path.e() ? new Ab(this.source, C, this.Ga.Q(a)) : new Ab(this.source, D(this.path), this.Ga);
            };Ab.prototype.toString = function () {
                return "Operation(" + this.path + ": " + this.source.toString() + " overwrite: " + this.Ga.toString() + ")";
            };function Cb(a, b) {
                this.type = Db;this.source = a;this.path = b;
            }Cb.prototype.Mc = function () {
                return this.path.e() ? new Cb(this.source, C) : new Cb(this.source, D(this.path));
            };Cb.prototype.toString = function () {
                return "Operation(" + this.path + ": " + this.source.toString() + " listen_complete)";
            };function Eb(a) {
                this.oc = a;
            }Eb.prototype.getToken = function (a) {
                return this.oc.INTERNAL.getToken(a).then(null, function (a) {
                    return a && "auth/token-not-initialized" === a.code ? (E("Got auth/token-not-initialized error.  Treating as null token."), null) : Promise.reject(a);
                });
            };function Fb(a, b) {
                a.oc.INTERNAL.addAuthTokenListener(b);
            };function Gb() {
                this.Jd = G;
            }Gb.prototype.j = function (a) {
                return this.Jd.P(a);
            };Gb.prototype.toString = function () {
                return this.Jd.toString();
            };function Hb(a, b, c, d, e) {
                this.host = a.toLowerCase();this.domain = this.host.substr(this.host.indexOf(".") + 1);this.Sc = b;this.ne = c;this.qg = d;this.gf = e || "";this.$a = yb.get("host:" + a) || this.host;
            }function Ib(a, b) {
                b !== a.$a && (a.$a = b, "s-" === a.$a.substr(0, 2) && yb.set("host:" + a.host, a.$a));
            }
            function Jb(a, b, c) {
                H("string" === typeof b, "typeof type must == string");H("object" === typeof c, "typeof params must == object");if ("websocket" === b) b = (a.Sc ? "wss://" : "ws://") + a.$a + "/.ws?";else if ("long_polling" === b) b = (a.Sc ? "https://" : "http://") + a.$a + "/.lp?";else throw Error("Unknown connection type: " + b);a.host !== a.$a && (c.ns = a.ne);var d = [];r(c, function (a, b) {
                    d.push(b + "=" + a);
                });return b + d.join("&");
            }
            Hb.prototype.toString = function () {
                var a = (this.Sc ? "https://" : "http://") + this.host;this.gf && (a += "<" + this.gf + ">");return a;
            };function Kb() {
                this.tc = {};
            }function Lb(a, b, c) {
                n(c) || (c = 1);cb(a.tc, b) || (a.tc[b] = 0);a.tc[b] += c;
            }Kb.prototype.get = function () {
                return za(this.tc);
            };function Mb(a) {
                this.Ef = a;this.rd = null;
            }Mb.prototype.get = function () {
                var a = this.Ef.get(),
                    b = za(a);if (this.rd) for (var c in this.rd) b[c] -= this.rd[c];this.rd = a;return b;
            };function Nb() {
                this.vb = [];
            }function Ob(a, b) {
                for (var c = null, d = 0; d < b.length; d++) {
                    var e = b[d],
                        f = e.Yb();null === c || f.Z(c.Yb()) || (a.vb.push(c), c = null);null === c && (c = new Pb(f));c.add(e);
                }c && a.vb.push(c);
            }function Qb(a, b, c) {
                Ob(a, c);Rb(a, function (a) {
                    return a.Z(b);
                });
            }function Sb(a, b, c) {
                Ob(a, c);Rb(a, function (a) {
                    return a.contains(b) || b.contains(a);
                });
            }
            function Rb(a, b) {
                for (var c = !0, d = 0; d < a.vb.length; d++) {
                    var e = a.vb[d];if (e) if (e = e.Yb(), b(e)) {
                        for (var e = a.vb[d], f = 0; f < e.jd.length; f++) {
                            var h = e.jd[f];if (null !== h) {
                                e.jd[f] = null;var k = h.Tb();Tb && E("event: " + h.toString());ub(k);
                            }
                        }a.vb[d] = null;
                    } else c = !1;
                }c && (a.vb = []);
            }function Pb(a) {
                this.qa = a;this.jd = [];
            }Pb.prototype.add = function (a) {
                this.jd.push(a);
            };Pb.prototype.Yb = function () {
                return this.qa;
            };function Ub(a, b, c, d) {
                this.$d = b;this.Md = c;this.Dd = d;this.hd = a;
            }Ub.prototype.Yb = function () {
                var a = this.Md.wb();return "value" === this.hd ? a.path : a.getParent().path;
            };Ub.prototype.ee = function () {
                return this.hd;
            };Ub.prototype.Tb = function () {
                return this.$d.Tb(this);
            };Ub.prototype.toString = function () {
                return this.Yb().toString() + ":" + this.hd + ":" + B(this.Md.Qe());
            };function Vb(a, b, c) {
                this.$d = a;this.error = b;this.path = c;
            }Vb.prototype.Yb = function () {
                return this.path;
            };Vb.prototype.ee = function () {
                return "cancel";
            };
            Vb.prototype.Tb = function () {
                return this.$d.Tb(this);
            };Vb.prototype.toString = function () {
                return this.path.toString() + ":cancel";
            };function Wb() {}Wb.prototype.Te = function () {
                return null;
            };Wb.prototype.de = function () {
                return null;
            };var Xb = new Wb();function Yb(a, b, c) {
                this.xf = a;this.Ka = b;this.yd = c;
            }Yb.prototype.Te = function (a) {
                var b = this.Ka.N;if (Zb(b, a)) return b.j().Q(a);b = null != this.yd ? new $b(this.yd, !0, !1) : this.Ka.w();return this.xf.qc(a, b);
            };Yb.prototype.de = function (a, b, c) {
                var d = null != this.yd ? this.yd : ac(this.Ka);a = this.xf.Wd(d, b, 1, c, a);return 0 === a.length ? null : a[0];
            };function I(a, b, c, d) {
                this.type = a;this.Ja = b;this.Xa = c;this.oe = d;this.Dd = void 0;
            }function bc(a) {
                return new I(cc, a);
            }var cc = "value";function $b(a, b, c) {
                this.A = a;this.da = b;this.Sb = c;
            }function dc(a) {
                return a.da;
            }function ec(a) {
                return a.Sb;
            }function fc(a, b) {
                return b.e() ? a.da && !a.Sb : Zb(a, J(b));
            }function Zb(a, b) {
                return a.da && !a.Sb || a.A.Da(b);
            }$b.prototype.j = function () {
                return this.A;
            };function gc(a, b) {
                return hc(a.name, b.name);
            }function ic(a, b) {
                return hc(a, b);
            };function K(a, b) {
                this.name = a;this.R = b;
            }function jc(a, b) {
                return new K(a, b);
            };function kc(a, b) {
                return a && "object" === typeof a ? (H(".sv" in a, "Unexpected leaf node or priority contents"), b[a[".sv"]]) : a;
            }function lc(a, b) {
                var c = new mc();nc(a, new L(""), function (a, e) {
                    oc(c, a, pc(e, b));
                });return c;
            }function pc(a, b) {
                var c = a.C().H(),
                    c = kc(c, b),
                    d;if (a.J()) {
                    var e = kc(a.Ca(), b);return e !== a.Ca() || c !== a.C().H() ? new qc(e, M(c)) : a;
                }d = a;c !== a.C().H() && (d = d.fa(new qc(c)));a.O(N, function (a, c) {
                    var e = pc(c, b);e !== c && (d = d.T(a, e));
                });return d;
            };var rc = function () {
                var a = 1;return function () {
                    return a++;
                };
            }(),
                H = kb,
                sc = lb;
            function tc(a) {
                try {
                    var b;bb();for (var c = $a, d = [], e = 0; e < a.length;) {
                        var f = c[a.charAt(e++)],
                            h = e < a.length ? c[a.charAt(e)] : 0;++e;var k = e < a.length ? c[a.charAt(e)] : 64;++e;var l = e < a.length ? c[a.charAt(e)] : 64;++e;if (null == f || null == h || null == k || null == l) throw Error();d.push(f << 2 | h >> 4);64 != k && (d.push(h << 4 & 240 | k >> 2), 64 != l && d.push(k << 6 & 192 | l));
                    }if (8192 > d.length) b = String.fromCharCode.apply(null, d);else {
                        a = "";for (c = 0; c < d.length; c += 8192) a += String.fromCharCode.apply(null, Ra(d, c, c + 8192));b = a;
                    }return b;
                } catch (m) {
                    E("base64Decode failed: ", m);
                }return null;
            }function uc(a) {
                var b = mb(a);a = new na();a.update(b);var b = [],
                    c = 8 * a.Pd;56 > a.$b ? a.update(a.zd, 56 - a.$b) : a.update(a.zd, a.Wa - (a.$b - 56));for (var d = a.Wa - 1; 56 <= d; d--) a.Vd[d] = c & 255, c /= 256;oa(a, a.Vd);for (d = c = 0; 5 > d; d++) for (var e = 24; 0 <= e; e -= 8) b[c] = a.M[d] >> e & 255, ++c;return ab(b);
            }function vc(a) {
                for (var b = "", c = 0; c < arguments.length; c++) b = fa(arguments[c]) ? b + vc.apply(null, arguments[c]) : "object" === typeof arguments[c] ? b + B(arguments[c]) : b + arguments[c], b += " ";return b;
            }var Tb = null,
                wc = !0;
            function xc(a, b) {
                kb(!b || !0 === a || !1 === a, "Can't turn on custom loggers persistently.");!0 === a ? ("undefined" !== typeof console && ("function" === typeof console.log ? Tb = q(console.log, console) : "object" === typeof console.log && (Tb = function (a) {
                    console.log(a);
                })), b && zb.set("logging_enabled", !0)) : ha(a) ? Tb = a : (Tb = null, zb.remove("logging_enabled"));
            }function E(a) {
                !0 === wc && (wc = !1, null === Tb && !0 === zb.get("logging_enabled") && xc(!0));if (Tb) {
                    var b = vc.apply(null, arguments);Tb(b);
                }
            }
            function yc(a) {
                return function () {
                    E(a, arguments);
                };
            }function zc(a) {
                if ("undefined" !== typeof console) {
                    var b = "FIREBASE INTERNAL ERROR: " + vc.apply(null, arguments);"undefined" !== typeof console.error ? console.error(b) : console.log(b);
                }
            }function Ac(a) {
                var b = vc.apply(null, arguments);throw Error("FIREBASE FATAL ERROR: " + b);
            }function O(a) {
                if ("undefined" !== typeof console) {
                    var b = "FIREBASE WARNING: " + vc.apply(null, arguments);"undefined" !== typeof console.warn ? console.warn(b) : console.log(b);
                }
            }
            function Bc(a) {
                var b,
                    c,
                    d,
                    e,
                    f,
                    h = a;f = c = a = b = "";d = !0;e = "https";if (p(h)) {
                    var k = h.indexOf("//");0 <= k && (e = h.substring(0, k - 1), h = h.substring(k + 2));k = h.indexOf("/");-1 === k && (k = h.length);b = h.substring(0, k);f = "";h = h.substring(k).split("/");for (k = 0; k < h.length; k++) if (0 < h[k].length) {
                        var l = h[k];try {
                            l = decodeURIComponent(l.replace(/\+/g, " "));
                        } catch (m) {}f += "/" + l;
                    }h = b.split(".");3 === h.length ? (a = h[1], c = h[0].toLowerCase()) : 2 === h.length && (a = h[0]);k = b.indexOf(":");0 <= k && (d = "https" === e || "wss" === e);
                }"firebase" === a && Ac(b + " is no longer supported. Please use <YOUR FIREBASE>.firebaseio.com instead");
                c && "undefined" != c || Ac("Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com");d || "undefined" !== typeof window && window.location && window.location.protocol && -1 !== window.location.protocol.indexOf("https:") && O("Insecure Firebase access from a secure page. Please use https in calls to new Firebase().");return { jc: new Hb(b, d, c, "ws" === e || "wss" === e), path: new L(f) };
            }function Cc(a) {
                return ga(a) && (a != a || a == Number.POSITIVE_INFINITY || a == Number.NEGATIVE_INFINITY);
            }
            function Dc(a) {
                if ("complete" === document.readyState) a();else {
                    var b = !1,
                        c = function () {
                        document.body ? b || (b = !0, a()) : setTimeout(c, Math.floor(10));
                    };document.addEventListener ? (document.addEventListener("DOMContentLoaded", c, !1), window.addEventListener("load", c, !1)) : document.attachEvent && (document.attachEvent("onreadystatechange", function () {
                        "complete" === document.readyState && c();
                    }), window.attachEvent("onload", c));
                }
            }
            function hc(a, b) {
                if (a === b) return 0;if ("[MIN_NAME]" === a || "[MAX_NAME]" === b) return -1;if ("[MIN_NAME]" === b || "[MAX_NAME]" === a) return 1;var c = Ec(a),
                    d = Ec(b);return null !== c ? null !== d ? 0 == c - d ? a.length - b.length : c - d : -1 : null !== d ? 1 : a < b ? -1 : 1;
            }function Fc(a, b) {
                if (b && a in b) return b[a];throw Error("Missing required key (" + a + ") in object: " + B(b));
            }
            function Gc(a) {
                if ("object" !== typeof a || null === a) return B(a);var b = [],
                    c;for (c in a) b.push(c);b.sort();c = "{";for (var d = 0; d < b.length; d++) 0 !== d && (c += ","), c += B(b[d]), c += ":", c += Gc(a[b[d]]);return c + "}";
            }function Hc(a, b) {
                if (a.length <= b) return [a];for (var c = [], d = 0; d < a.length; d += b) d + b > a ? c.push(a.substring(d, a.length)) : c.push(a.substring(d, d + b));return c;
            }function Ic(a, b) {
                if (ea(a)) for (var c = 0; c < a.length; ++c) b(c, a[c]);else r(a, b);
            }
            function Jc(a) {
                H(!Cc(a), "Invalid JSON number");var b, c, d, e;0 === a ? (d = c = 0, b = -Infinity === 1 / a ? 1 : 0) : (b = 0 > a, a = Math.abs(a), a >= Math.pow(2, -1022) ? (d = Math.min(Math.floor(Math.log(a) / Math.LN2), 1023), c = d + 1023, d = Math.round(a * Math.pow(2, 52 - d) - Math.pow(2, 52))) : (c = 0, d = Math.round(a / Math.pow(2, -1074))));e = [];for (a = 52; a; --a) e.push(d % 2 ? 1 : 0), d = Math.floor(d / 2);for (a = 11; a; --a) e.push(c % 2 ? 1 : 0), c = Math.floor(c / 2);e.push(b ? 1 : 0);e.reverse();b = e.join("");c = "";for (a = 0; 64 > a; a += 8) d = parseInt(b.substr(a, 8), 2).toString(16), 1 === d.length && (d = "0" + d), c += d;return c.toLowerCase();
            }var Kc = /^-?\d{1,10}$/;function Ec(a) {
                return Kc.test(a) && (a = Number(a), -2147483648 <= a && 2147483647 >= a) ? a : null;
            }function ub(a) {
                try {
                    a();
                } catch (b) {
                    setTimeout(function () {
                        O("Exception was thrown by user callback.", b.stack || "");throw b;
                    }, Math.floor(0));
                }
            }function Lc(a, b, c) {
                Object.defineProperty(a, b, { get: c });
            }function Mc(a, b) {
                var c = setTimeout(a, b);"object" === typeof c && c.unref && c.unref();return c;
            };function Nc(a) {
                var b = {},
                    c = {},
                    d = {},
                    e = "";try {
                    var f = a.split("."),
                        b = ob(tc(f[0]) || ""),
                        c = ob(tc(f[1]) || ""),
                        e = f[2],
                        d = c.d || {};delete c.d;
                } catch (h) {}return { tg: b, Ie: c, data: d, mg: e };
            }function Oc(a) {
                a = Nc(a);var b = a.Ie;return !!a.mg && !!b && "object" === typeof b && b.hasOwnProperty("iat");
            }function Pc(a) {
                a = Nc(a).Ie;return "object" === typeof a && !0 === w(a, "admin");
            };function Qc(a, b, c) {
                this.f = yc("p:rest:");this.L = a;this.Gb = b;this.$c = c;this.$ = {};
            }function Rc(a, b) {
                if (n(b)) return "tag$" + b;H(Sc(a.m), "should have a tag if it's not a default query.");return a.path.toString();
            }g = Qc.prototype;
            g.$e = function (a, b, c, d) {
                var e = a.path.toString();this.f("Listen called for " + e + " " + a.ja());var f = Rc(a, c),
                    h = {};this.$[f] = h;a = Tc(a.m);var k = this;Uc(this, e + ".json", a, function (a, b) {
                    var u = b;404 === a && (a = u = null);null === a && k.Gb(e, u, !1, c);w(k.$, f) === h && d(a ? 401 == a ? "permission_denied" : "rest_error:" + a : "ok", null);
                });
            };g.uf = function (a, b) {
                var c = Rc(a, b);delete this.$[c];
            };g.kf = function () {};g.pe = function () {};g.cf = function () {};g.xd = function () {};g.put = function () {};g.af = function () {};g.we = function () {};
            function Uc(a, b, c, d) {
                c = c || {};c.format = "export";a.$c.getToken(!1).then(function (e) {
                    (e = e && e.accessToken) && (c.auth = e);var f = (a.L.Sc ? "https://" : "http://") + a.L.host + b + "?" + fb(c);a.f("Sending REST request for " + f);var h = new XMLHttpRequest();h.onreadystatechange = function () {
                        if (d && 4 === h.readyState) {
                            a.f("REST Response for " + f + " received. status:", h.status, "response:", h.responseText);var b = null;if (200 <= h.status && 300 > h.status) {
                                try {
                                    b = ob(h.responseText);
                                } catch (c) {
                                    O("Failed to parse JSON response for " + f + ": " + h.responseText);
                                }d(null, b);
                            } else 401 !== h.status && 404 !== h.status && O("Got unsuccessful REST response for " + f + " Status: " + h.status), d(h.status);d = null;
                        }
                    };h.open("GET", f, !0);h.send();
                });
            };function Vc(a, b, c) {
                this.type = Wc;this.source = a;this.path = b;this.children = c;
            }Vc.prototype.Mc = function (a) {
                if (this.path.e()) return a = this.children.subtree(new L(a)), a.e() ? null : a.value ? new Ab(this.source, C, a.value) : new Vc(this.source, C, a);H(J(this.path) === a, "Can't get a merge for a child not on the path of the operation");return new Vc(this.source, D(this.path), this.children);
            };Vc.prototype.toString = function () {
                return "Operation(" + this.path + ": " + this.source.toString() + " merge: " + this.children.toString() + ")";
            };function Xc(a, b) {
                this.rf = {};this.Vc = new Mb(a);this.va = b;var c = 1E4 + 2E4 * Math.random();Mc(q(this.lf, this), Math.floor(c));
            }Xc.prototype.lf = function () {
                var a = this.Vc.get(),
                    b = {},
                    c = !1,
                    d;for (d in a) 0 < a[d] && cb(this.rf, d) && (b[d] = a[d], c = !0);c && this.va.we(b);Mc(q(this.lf, this), Math.floor(6E5 * Math.random()));
            };var Yc = {},
                Zc = {};function $c(a) {
                a = a.toString();Yc[a] || (Yc[a] = new Kb());return Yc[a];
            }function ad(a, b) {
                var c = a.toString();Zc[c] || (Zc[c] = b());return Zc[c];
            };var bd = null;"undefined" !== typeof MozWebSocket ? bd = MozWebSocket : "undefined" !== typeof WebSocket && (bd = WebSocket);function cd(a, b, c, d) {
                this.Yd = a;this.f = yc(this.Yd);this.frames = this.zc = null;this.pb = this.qb = this.De = 0;this.Va = $c(b);a = { v: "5" };"undefined" !== typeof location && location.href && -1 !== location.href.indexOf("firebaseio.com") && (a.r = "f");c && (a.s = c);d && (a.ls = d);this.Je = Jb(b, "websocket", a);
            }var dd;
            cd.prototype.open = function (a, b) {
                this.ib = b;this.Xf = a;this.f("Websocket connecting to " + this.Je);this.wc = !1;yb.set("previous_websocket_failure", !0);try {
                    this.Ia = new bd(this.Je);
                } catch (c) {
                    this.f("Error instantiating WebSocket.");var d = c.message || c.data;d && this.f(d);this.bb();return;
                }var e = this;this.Ia.onopen = function () {
                    e.f("Websocket connected.");e.wc = !0;
                };this.Ia.onclose = function () {
                    e.f("Websocket connection was disconnected.");e.Ia = null;e.bb();
                };this.Ia.onmessage = function (a) {
                    if (null !== e.Ia) if (a = a.data, e.pb += a.length, Lb(e.Va, "bytes_received", a.length), ed(e), null !== e.frames) fd(e, a);else {
                        a: {
                            H(null === e.frames, "We already have a frame buffer");if (6 >= a.length) {
                                var b = Number(a);if (!isNaN(b)) {
                                    e.De = b;e.frames = [];a = null;break a;
                                }
                            }e.De = 1;e.frames = [];
                        }null !== a && fd(e, a);
                    }
                };this.Ia.onerror = function (a) {
                    e.f("WebSocket error.  Closing connection.");(a = a.message || a.data) && e.f(a);e.bb();
                };
            };cd.prototype.start = function () {};
            cd.isAvailable = function () {
                var a = !1;if ("undefined" !== typeof navigator && navigator.userAgent) {
                    var b = navigator.userAgent.match(/Android ([0-9]{0,}\.[0-9]{0,})/);b && 1 < b.length && 4.4 > parseFloat(b[1]) && (a = !0);
                }return !a && null !== bd && !dd;
            };cd.responsesRequiredToBeHealthy = 2;cd.healthyTimeout = 3E4;g = cd.prototype;g.sd = function () {
                yb.remove("previous_websocket_failure");
            };function fd(a, b) {
                a.frames.push(b);if (a.frames.length == a.De) {
                    var c = a.frames.join("");a.frames = null;c = ob(c);a.Xf(c);
                }
            }
            g.send = function (a) {
                ed(this);a = B(a);this.qb += a.length;Lb(this.Va, "bytes_sent", a.length);a = Hc(a, 16384);1 < a.length && gd(this, String(a.length));for (var b = 0; b < a.length; b++) gd(this, a[b]);
            };g.Tc = function () {
                this.Ab = !0;this.zc && (clearInterval(this.zc), this.zc = null);this.Ia && (this.Ia.close(), this.Ia = null);
            };g.bb = function () {
                this.Ab || (this.f("WebSocket is closing itself"), this.Tc(), this.ib && (this.ib(this.wc), this.ib = null));
            };g.close = function () {
                this.Ab || (this.f("WebSocket is being closed"), this.Tc());
            };
            function ed(a) {
                clearInterval(a.zc);a.zc = setInterval(function () {
                    a.Ia && gd(a, "0");ed(a);
                }, Math.floor(45E3));
            }function gd(a, b) {
                try {
                    a.Ia.send(b);
                } catch (c) {
                    a.f("Exception thrown from WebSocket.send():", c.message || c.data, "Closing connection."), setTimeout(q(a.bb, a), 0);
                }
            };function hd() {
                this.fb = {};
            }
            function jd(a, b) {
                var c = b.type,
                    d = b.Xa;H("child_added" == c || "child_changed" == c || "child_removed" == c, "Only child changes supported for tracking");H(".priority" !== d, "Only non-priority child changes can be tracked.");var e = w(a.fb, d);if (e) {
                    var f = e.type;if ("child_added" == c && "child_removed" == f) a.fb[d] = new I("child_changed", b.Ja, d, e.Ja);else if ("child_removed" == c && "child_added" == f) delete a.fb[d];else if ("child_removed" == c && "child_changed" == f) a.fb[d] = new I("child_removed", e.oe, d);else if ("child_changed" == c && "child_added" == f) a.fb[d] = new I("child_added", b.Ja, d);else if ("child_changed" == c && "child_changed" == f) a.fb[d] = new I("child_changed", b.Ja, d, e.oe);else throw sc("Illegal combination of changes: " + b + " occurred after " + e);
                } else a.fb[d] = b;
            };function kd(a) {
                this.V = a;this.g = a.m.g;
            }function ld(a, b, c, d) {
                var e = [],
                    f = [];Ja(b, function (b) {
                    "child_changed" === b.type && a.g.nd(b.oe, b.Ja) && f.push(new I("child_moved", b.Ja, b.Xa));
                });md(a, e, "child_removed", b, d, c);md(a, e, "child_added", b, d, c);md(a, e, "child_moved", f, d, c);md(a, e, "child_changed", b, d, c);md(a, e, cc, b, d, c);return e;
            }function md(a, b, c, d, e, f) {
                d = Ka(d, function (a) {
                    return a.type === c;
                });Sa(d, q(a.Ff, a));Ja(d, function (c) {
                    var d = nd(a, c, f);Ja(e, function (e) {
                        e.nf(c.type) && b.push(e.createEvent(d, a.V));
                    });
                });
            }
            function nd(a, b, c) {
                "value" !== b.type && "child_removed" !== b.type && (b.Dd = c.Ve(b.Xa, b.Ja, a.g));return b;
            }kd.prototype.Ff = function (a, b) {
                if (null == a.Xa || null == b.Xa) throw sc("Should only compare child_ events.");return this.g.compare(new K(a.Xa, a.Ja), new K(b.Xa, b.Ja));
            };function od(a, b) {
                this.Sd = a;this.Df = b;
            }function pd(a) {
                this.U = a;
            }
            pd.prototype.eb = function (a, b, c, d) {
                var e = new hd(),
                    f;if (b.type === Bb) b.source.ce ? c = qd(this, a, b.path, b.Ga, c, d, e) : (H(b.source.Se, "Unknown source."), f = b.source.Ce || ec(a.w()) && !b.path.e(), c = rd(this, a, b.path, b.Ga, c, d, f, e));else if (b.type === Wc) b.source.ce ? c = sd(this, a, b.path, b.children, c, d, e) : (H(b.source.Se, "Unknown source."), f = b.source.Ce || ec(a.w()), c = td(this, a, b.path, b.children, c, d, f, e));else if (b.type === ud) {
                    if (b.Id) {
                        if (b = b.path, null != c.lc(b)) c = a;else {
                            f = new Yb(c, a, d);d = a.N.j();if (b.e() || ".priority" === J(b)) dc(a.w()) ? b = c.Aa(ac(a)) : (b = a.w().j(), H(b instanceof P, "serverChildren would be complete if leaf node"), b = c.rc(b)), b = this.U.ya(d, b, e);else {
                                var h = J(b),
                                    k = c.qc(h, a.w());null == k && Zb(a.w(), h) && (k = d.Q(h));b = null != k ? this.U.F(d, h, k, D(b), f, e) : a.N.j().Da(h) ? this.U.F(d, h, G, D(b), f, e) : d;b.e() && dc(a.w()) && (d = c.Aa(ac(a)), d.J() && (b = this.U.ya(b, d, e)));
                            }d = dc(a.w()) || null != c.lc(C);c = vd(a, b, d, this.U.Na());
                        }
                    } else c = wd(this, a, b.path, b.Ob, c, d, e);
                } else if (b.type === Db) d = b.path, b = a.w(), f = b.j(), h = b.da || d.e(), c = xd(this, new yd(a.N, new $b(f, h, b.Sb)), d, c, Xb, e);else throw sc("Unknown operation type: " + b.type);e = ta(e.fb);d = c;b = d.N;b.da && (f = b.j().J() || b.j().e(), h = zd(a), (0 < e.length || !a.N.da || f && !b.j().Z(h) || !b.j().C().Z(h.C())) && e.push(bc(zd(d))));return new od(c, e);
            };
            function xd(a, b, c, d, e, f) {
                var h = b.N;if (null != d.lc(c)) return b;var k;if (c.e()) H(dc(b.w()), "If change path is empty, we must have complete server data"), ec(b.w()) ? (e = ac(b), d = d.rc(e instanceof P ? e : G)) : d = d.Aa(ac(b)), f = a.U.ya(b.N.j(), d, f);else {
                    var l = J(c);if (".priority" == l) H(1 == Ad(c), "Can't have a priority with additional path components"), f = h.j(), k = b.w().j(), d = d.ad(c, f, k), f = null != d ? a.U.fa(f, d) : h.j();else {
                        var m = D(c);Zb(h, l) ? (k = b.w().j(), d = d.ad(c, h.j(), k), d = null != d ? h.j().Q(l).F(m, d) : h.j().Q(l)) : d = d.qc(l, b.w());f = null != d ? a.U.F(h.j(), l, d, m, e, f) : h.j();
                    }
                }return vd(b, f, h.da || c.e(), a.U.Na());
            }function rd(a, b, c, d, e, f, h, k) {
                var l = b.w();h = h ? a.U : a.U.Ub();if (c.e()) d = h.ya(l.j(), d, null);else if (h.Na() && !l.Sb) d = l.j().F(c, d), d = h.ya(l.j(), d, null);else {
                    var m = J(c);if (!fc(l, c) && 1 < Ad(c)) return b;var u = D(c);d = l.j().Q(m).F(u, d);d = ".priority" == m ? h.fa(l.j(), d) : h.F(l.j(), m, d, u, Xb, null);
                }l = l.da || c.e();b = new yd(b.N, new $b(d, l, h.Na()));return xd(a, b, c, e, new Yb(e, b, f), k);
            }
            function qd(a, b, c, d, e, f, h) {
                var k = b.N;e = new Yb(e, b, f);if (c.e()) h = a.U.ya(b.N.j(), d, h), a = vd(b, h, !0, a.U.Na());else if (f = J(c), ".priority" === f) h = a.U.fa(b.N.j(), d), a = vd(b, h, k.da, k.Sb);else {
                    c = D(c);var l = k.j().Q(f);if (!c.e()) {
                        var m = e.Te(f);d = null != m ? ".priority" === Bd(c) && m.P(c.parent()).e() ? m : m.F(c, d) : G;
                    }l.Z(d) ? a = b : (h = a.U.F(k.j(), f, d, c, e, h), a = vd(b, h, k.da, a.U.Na()));
                }return a;
            }
            function sd(a, b, c, d, e, f, h) {
                var k = b;Cd(d, function (d, m) {
                    var u = c.n(d);Zb(b.N, J(u)) && (k = qd(a, k, u, m, e, f, h));
                });Cd(d, function (d, m) {
                    var u = c.n(d);Zb(b.N, J(u)) || (k = qd(a, k, u, m, e, f, h));
                });return k;
            }function Dd(a, b) {
                Cd(b, function (b, d) {
                    a = a.F(b, d);
                });return a;
            }
            function td(a, b, c, d, e, f, h, k) {
                if (b.w().j().e() && !dc(b.w())) return b;var l = b;c = c.e() ? d : Ed(Q, c, d);var m = b.w().j();c.children.ha(function (c, d) {
                    if (m.Da(c)) {
                        var F = b.w().j().Q(c),
                            F = Dd(F, d);l = rd(a, l, new L(c), F, e, f, h, k);
                    }
                });c.children.ha(function (c, d) {
                    var F = !Zb(b.w(), c) && null == d.value;m.Da(c) || F || (F = b.w().j().Q(c), F = Dd(F, d), l = rd(a, l, new L(c), F, e, f, h, k));
                });return l;
            }
            function wd(a, b, c, d, e, f, h) {
                if (null != e.lc(c)) return b;var k = ec(b.w()),
                    l = b.w();if (null != d.value) {
                    if (c.e() && l.da || fc(l, c)) return rd(a, b, c, l.j().P(c), e, f, k, h);if (c.e()) {
                        var m = Q;l.j().O(Fd, function (a, b) {
                            m = m.set(new L(a), b);
                        });return td(a, b, c, m, e, f, k, h);
                    }return b;
                }m = Q;Cd(d, function (a) {
                    var b = c.n(a);fc(l, b) && (m = m.set(a, l.j().P(b)));
                });return td(a, b, c, m, e, f, k, h);
            };function Gd(a) {
                this.g = a;
            }g = Gd.prototype;g.F = function (a, b, c, d, e, f) {
                H(a.yc(this.g), "A node must be indexed if only a child is updated");e = a.Q(b);if (e.P(d).Z(c.P(d)) && e.e() == c.e()) return a;null != f && (c.e() ? a.Da(b) ? jd(f, new I("child_removed", e, b)) : H(a.J(), "A child remove without an old child only makes sense on a leaf node") : e.e() ? jd(f, new I("child_added", c, b)) : jd(f, new I("child_changed", c, b, e)));return a.J() && c.e() ? a : a.T(b, c).nb(this.g);
            };
            g.ya = function (a, b, c) {
                null != c && (a.J() || a.O(N, function (a, e) {
                    b.Da(a) || jd(c, new I("child_removed", e, a));
                }), b.J() || b.O(N, function (b, e) {
                    if (a.Da(b)) {
                        var f = a.Q(b);f.Z(e) || jd(c, new I("child_changed", e, b, f));
                    } else jd(c, new I("child_added", e, b));
                }));return b.nb(this.g);
            };g.fa = function (a, b) {
                return a.e() ? G : a.fa(b);
            };g.Na = function () {
                return !1;
            };g.Ub = function () {
                return this;
            };function Hd(a) {
                this.fe = new Gd(a.g);this.g = a.g;var b;a.ka ? (b = Id(a), b = a.g.Ec(Jd(a), b)) : b = a.g.Hc();this.Uc = b;a.na ? (b = Kd(a), a = a.g.Ec(Ld(a), b)) : a = a.g.Fc();this.vc = a;
            }g = Hd.prototype;g.matches = function (a) {
                return 0 >= this.g.compare(this.Uc, a) && 0 >= this.g.compare(a, this.vc);
            };g.F = function (a, b, c, d, e, f) {
                this.matches(new K(b, c)) || (c = G);return this.fe.F(a, b, c, d, e, f);
            };
            g.ya = function (a, b, c) {
                b.J() && (b = G);var d = b.nb(this.g),
                    d = d.fa(G),
                    e = this;b.O(N, function (a, b) {
                    e.matches(new K(a, b)) || (d = d.T(a, G));
                });return this.fe.ya(a, d, c);
            };g.fa = function (a) {
                return a;
            };g.Na = function () {
                return !0;
            };g.Ub = function () {
                return this.fe;
            };function Md(a) {
                this.sa = new Hd(a);this.g = a.g;H(a.xa, "Only valid if limit has been set");this.oa = a.oa;this.Ib = !Nd(a);
            }g = Md.prototype;g.F = function (a, b, c, d, e, f) {
                this.sa.matches(new K(b, c)) || (c = G);return a.Q(b).Z(c) ? a : a.Eb() < this.oa ? this.sa.Ub().F(a, b, c, d, e, f) : Od(this, a, b, c, e, f);
            };
            g.ya = function (a, b, c) {
                var d;if (b.J() || b.e()) d = G.nb(this.g);else if (2 * this.oa < b.Eb() && b.yc(this.g)) {
                    d = G.nb(this.g);b = this.Ib ? b.Zb(this.sa.vc, this.g) : b.Xb(this.sa.Uc, this.g);for (var e = 0; 0 < b.Pa.length && e < this.oa;) {
                        var f = R(b),
                            h;if (h = this.Ib ? 0 >= this.g.compare(this.sa.Uc, f) : 0 >= this.g.compare(f, this.sa.vc)) d = d.T(f.name, f.R), e++;else break;
                    }
                } else {
                    d = b.nb(this.g);d = d.fa(G);var k, l, m;if (this.Ib) {
                        b = d.We(this.g);k = this.sa.vc;l = this.sa.Uc;var u = Pd(this.g);m = function (a, b) {
                            return u(b, a);
                        };
                    } else b = d.Wb(this.g), k = this.sa.Uc, l = this.sa.vc, m = Pd(this.g);for (var e = 0, z = !1; 0 < b.Pa.length;) f = R(b), !z && 0 >= m(k, f) && (z = !0), (h = z && e < this.oa && 0 >= m(f, l)) ? e++ : d = d.T(f.name, G);
                }return this.sa.Ub().ya(a, d, c);
            };g.fa = function (a) {
                return a;
            };g.Na = function () {
                return !0;
            };g.Ub = function () {
                return this.sa.Ub();
            };
            function Od(a, b, c, d, e, f) {
                var h;if (a.Ib) {
                    var k = Pd(a.g);h = function (a, b) {
                        return k(b, a);
                    };
                } else h = Pd(a.g);H(b.Eb() == a.oa, "");var l = new K(c, d),
                    m = a.Ib ? Qd(b, a.g) : Rd(b, a.g),
                    u = a.sa.matches(l);if (b.Da(c)) {
                    for (var z = b.Q(c), m = e.de(a.g, m, a.Ib); null != m && (m.name == c || b.Da(m.name));) m = e.de(a.g, m, a.Ib);e = null == m ? 1 : h(m, l);if (u && !d.e() && 0 <= e) return null != f && jd(f, new I("child_changed", d, c, z)), b.T(c, d);null != f && jd(f, new I("child_removed", z, c));b = b.T(c, G);return null != m && a.sa.matches(m) ? (null != f && jd(f, new I("child_added", m.R, m.name)), b.T(m.name, m.R)) : b;
                }return d.e() ? b : u && 0 <= h(m, l) ? (null != f && (jd(f, new I("child_removed", m.R, m.name)), jd(f, new I("child_added", d, c))), b.T(c, d).T(m.name, G)) : b;
            };function qc(a, b) {
                this.B = a;H(n(this.B) && null !== this.B, "LeafNode shouldn't be created with null/undefined value.");this.aa = b || G;Sd(this.aa);this.Db = null;
            }var Td = ["object", "boolean", "number", "string"];g = qc.prototype;g.J = function () {
                return !0;
            };g.C = function () {
                return this.aa;
            };g.fa = function (a) {
                return new qc(this.B, a);
            };g.Q = function (a) {
                return ".priority" === a ? this.aa : G;
            };g.P = function (a) {
                return a.e() ? this : ".priority" === J(a) ? this.aa : G;
            };g.Da = function () {
                return !1;
            };g.Ve = function () {
                return null;
            };
            g.T = function (a, b) {
                return ".priority" === a ? this.fa(b) : b.e() && ".priority" !== a ? this : G.T(a, b).fa(this.aa);
            };g.F = function (a, b) {
                var c = J(a);if (null === c) return b;if (b.e() && ".priority" !== c) return this;H(".priority" !== c || 1 === Ad(a), ".priority must be the last token in a path");return this.T(c, G.F(D(a), b));
            };g.e = function () {
                return !1;
            };g.Eb = function () {
                return 0;
            };g.O = function () {
                return !1;
            };g.H = function (a) {
                return a && !this.C().e() ? { ".value": this.Ca(), ".priority": this.C().H() } : this.Ca();
            };
            g.hash = function () {
                if (null === this.Db) {
                    var a = "";this.aa.e() || (a += "priority:" + Ud(this.aa.H()) + ":");var b = typeof this.B,
                        a = a + (b + ":"),
                        a = "number" === b ? a + Jc(this.B) : a + this.B;this.Db = uc(a);
                }return this.Db;
            };g.Ca = function () {
                return this.B;
            };g.sc = function (a) {
                if (a === G) return 1;if (a instanceof P) return -1;H(a.J(), "Unknown node type");var b = typeof a.B,
                    c = typeof this.B,
                    d = Ia(Td, b),
                    e = Ia(Td, c);H(0 <= d, "Unknown leaf type: " + b);H(0 <= e, "Unknown leaf type: " + c);return d === e ? "object" === c ? 0 : this.B < a.B ? -1 : this.B === a.B ? 0 : 1 : e - d;
            };
            g.nb = function () {
                return this;
            };g.yc = function () {
                return !0;
            };g.Z = function (a) {
                return a === this ? !0 : a.J() ? this.B === a.B && this.aa.Z(a.aa) : !1;
            };g.toString = function () {
                return B(this.H(!0));
            };function Vd() {}var Wd = {};function Pd(a) {
                return q(a.compare, a);
            }Vd.prototype.nd = function (a, b) {
                return 0 !== this.compare(new K("[MIN_NAME]", a), new K("[MIN_NAME]", b));
            };Vd.prototype.Hc = function () {
                return Xd;
            };function Yd(a) {
                H(!a.e() && ".priority" !== J(a), "Can't create PathIndex with empty path or .priority key");this.bc = a;
            }la(Yd, Vd);g = Yd.prototype;g.xc = function (a) {
                return !a.P(this.bc).e();
            };g.compare = function (a, b) {
                var c = a.R.P(this.bc),
                    d = b.R.P(this.bc),
                    c = c.sc(d);return 0 === c ? hc(a.name, b.name) : c;
            };
            g.Ec = function (a, b) {
                var c = M(a),
                    c = G.F(this.bc, c);return new K(b, c);
            };g.Fc = function () {
                var a = G.F(this.bc, Zd);return new K("[MAX_NAME]", a);
            };g.toString = function () {
                return this.bc.slice().join("/");
            };function $d() {}la($d, Vd);g = $d.prototype;g.compare = function (a, b) {
                var c = a.R.C(),
                    d = b.R.C(),
                    c = c.sc(d);return 0 === c ? hc(a.name, b.name) : c;
            };g.xc = function (a) {
                return !a.C().e();
            };g.nd = function (a, b) {
                return !a.C().Z(b.C());
            };g.Hc = function () {
                return Xd;
            };g.Fc = function () {
                return new K("[MAX_NAME]", new qc("[PRIORITY-POST]", Zd));
            };
            g.Ec = function (a, b) {
                var c = M(a);return new K(b, new qc("[PRIORITY-POST]", c));
            };g.toString = function () {
                return ".priority";
            };var N = new $d();function ae() {}la(ae, Vd);g = ae.prototype;g.compare = function (a, b) {
                return hc(a.name, b.name);
            };g.xc = function () {
                throw sc("KeyIndex.isDefinedOn not expected to be called.");
            };g.nd = function () {
                return !1;
            };g.Hc = function () {
                return Xd;
            };g.Fc = function () {
                return new K("[MAX_NAME]", G);
            };g.Ec = function (a) {
                H(p(a), "KeyIndex indexValue must always be a string.");return new K(a, G);
            };g.toString = function () {
                return ".key";
            };
            var Fd = new ae();function be() {}la(be, Vd);g = be.prototype;g.compare = function (a, b) {
                var c = a.R.sc(b.R);return 0 === c ? hc(a.name, b.name) : c;
            };g.xc = function () {
                return !0;
            };g.nd = function (a, b) {
                return !a.Z(b);
            };g.Hc = function () {
                return Xd;
            };g.Fc = function () {
                return ce;
            };g.Ec = function (a, b) {
                var c = M(a);return new K(b, c);
            };g.toString = function () {
                return ".value";
            };var de = new be();function ee() {
                this.Rb = this.na = this.Kb = this.ka = this.xa = !1;this.oa = 0;this.mb = "";this.dc = null;this.zb = "";this.ac = null;this.xb = "";this.g = N;
            }var fe = new ee();function Nd(a) {
                return "" === a.mb ? a.ka : "l" === a.mb;
            }function Jd(a) {
                H(a.ka, "Only valid if start has been set");return a.dc;
            }function Id(a) {
                H(a.ka, "Only valid if start has been set");return a.Kb ? a.zb : "[MIN_NAME]";
            }function Ld(a) {
                H(a.na, "Only valid if end has been set");return a.ac;
            }
            function Kd(a) {
                H(a.na, "Only valid if end has been set");return a.Rb ? a.xb : "[MAX_NAME]";
            }function ge(a) {
                var b = new ee();b.xa = a.xa;b.oa = a.oa;b.ka = a.ka;b.dc = a.dc;b.Kb = a.Kb;b.zb = a.zb;b.na = a.na;b.ac = a.ac;b.Rb = a.Rb;b.xb = a.xb;b.g = a.g;b.mb = a.mb;return b;
            }g = ee.prototype;g.le = function (a) {
                var b = ge(this);b.xa = !0;b.oa = a;b.mb = "l";return b;
            };g.me = function (a) {
                var b = ge(this);b.xa = !0;b.oa = a;b.mb = "r";return b;
            };g.Nd = function (a, b) {
                var c = ge(this);c.ka = !0;n(a) || (a = null);c.dc = a;null != b ? (c.Kb = !0, c.zb = b) : (c.Kb = !1, c.zb = "");return c;
            };
            g.gd = function (a, b) {
                var c = ge(this);c.na = !0;n(a) || (a = null);c.ac = a;n(b) ? (c.Rb = !0, c.xb = b) : (c.vg = !1, c.xb = "");return c;
            };function he(a, b) {
                var c = ge(a);c.g = b;return c;
            }function ie(a) {
                var b = {};a.ka && (b.sp = a.dc, a.Kb && (b.sn = a.zb));a.na && (b.ep = a.ac, a.Rb && (b.en = a.xb));if (a.xa) {
                    b.l = a.oa;var c = a.mb;"" === c && (c = Nd(a) ? "l" : "r");b.vf = c;
                }a.g !== N && (b.i = a.g.toString());return b;
            }function S(a) {
                return !(a.ka || a.na || a.xa);
            }function Sc(a) {
                return S(a) && a.g == N;
            }
            function Tc(a) {
                var b = {};if (Sc(a)) return b;var c;a.g === N ? c = "$priority" : a.g === de ? c = "$value" : a.g === Fd ? c = "$key" : (H(a.g instanceof Yd, "Unrecognized index type!"), c = a.g.toString());b.orderBy = B(c);a.ka && (b.startAt = B(a.dc), a.Kb && (b.startAt += "," + B(a.zb)));a.na && (b.endAt = B(a.ac), a.Rb && (b.endAt += "," + B(a.xb)));a.xa && (Nd(a) ? b.limitToFirst = a.oa : b.limitToLast = a.oa);return b;
            }g.toString = function () {
                return B(ie(this));
            };function je(a, b) {
                this.od = a;this.cc = b;
            }je.prototype.get = function (a) {
                var b = w(this.od, a);if (!b) throw Error("No index defined for " + a);return b === Wd ? null : b;
            };function ke(a, b, c) {
                var d = pa(a.od, function (d, f) {
                    var h = w(a.cc, f);H(h, "Missing index implementation for " + f);if (d === Wd) {
                        if (h.xc(b.R)) {
                            for (var k = [], l = c.Wb(jc), m = R(l); m;) m.name != b.name && k.push(m), m = R(l);k.push(b);return le(k, Pd(h));
                        }return Wd;
                    }h = c.get(b.name);k = d;h && (k = k.remove(new K(b.name, h)));return k.Oa(b, b.R);
                });return new je(d, a.cc);
            }
            function me(a, b, c) {
                var d = pa(a.od, function (a) {
                    if (a === Wd) return a;var d = c.get(b.name);return d ? a.remove(new K(b.name, d)) : a;
                });return new je(d, a.cc);
            }var ne = new je({ ".priority": Wd }, { ".priority": N });function oe() {
                this.set = {};
            }g = oe.prototype;g.add = function (a, b) {
                this.set[a] = null !== b ? b : !0;
            };g.contains = function (a) {
                return cb(this.set, a);
            };g.get = function (a) {
                return this.contains(a) ? this.set[a] : void 0;
            };g.remove = function (a) {
                delete this.set[a];
            };g.clear = function () {
                this.set = {};
            };g.e = function () {
                return ya(this.set);
            };g.count = function () {
                return ra(this.set);
            };function pe(a, b) {
                r(a.set, function (a, d) {
                    b(d, a);
                });
            }g.keys = function () {
                var a = [];r(this.set, function (b, c) {
                    a.push(c);
                });return a;
            };function qe(a, b, c, d) {
                this.Yd = a;this.f = yc(a);this.jc = b;this.pb = this.qb = 0;this.Va = $c(b);this.tf = c;this.wc = !1;this.Cb = d;this.Yc = function (a) {
                    return Jb(b, "long_polling", a);
                };
            }var re, se;
            qe.prototype.open = function (a, b) {
                this.Me = 0;this.ia = b;this.bf = new rb(a);this.Ab = !1;var c = this;this.sb = setTimeout(function () {
                    c.f("Timed out trying to connect.");c.bb();c.sb = null;
                }, Math.floor(3E4));Dc(function () {
                    if (!c.Ab) {
                        c.Ta = new te(function (a, b, d, k, l) {
                            ue(c, arguments);if (c.Ta) if (c.sb && (clearTimeout(c.sb), c.sb = null), c.wc = !0, "start" == a) c.id = b, c.ff = d;else if ("close" === a) b ? (c.Ta.Kd = !1, sb(c.bf, b, function () {
                                c.bb();
                            })) : c.bb();else throw Error("Unrecognized command received: " + a);
                        }, function (a, b) {
                            ue(c, arguments);
                            tb(c.bf, a, b);
                        }, function () {
                            c.bb();
                        }, c.Yc);var a = { start: "t" };a.ser = Math.floor(1E8 * Math.random());c.Ta.Qd && (a.cb = c.Ta.Qd);a.v = "5";c.tf && (a.s = c.tf);c.Cb && (a.ls = c.Cb);"undefined" !== typeof location && location.href && -1 !== location.href.indexOf("firebaseio.com") && (a.r = "f");a = c.Yc(a);c.f("Connecting via long-poll to " + a);ve(c.Ta, a, function () {});
                    }
                });
            };
            qe.prototype.start = function () {
                var a = this.Ta,
                    b = this.ff;a.Vf = this.id;a.Wf = b;for (a.Ud = !0; we(a););a = this.id;b = this.ff;this.fc = document.createElement("iframe");var c = { dframe: "t" };c.id = a;c.pw = b;this.fc.src = this.Yc(c);this.fc.style.display = "none";document.body.appendChild(this.fc);
            };
            qe.isAvailable = function () {
                return re || !se && "undefined" !== typeof document && null != document.createElement && !("object" === typeof window && window.chrome && window.chrome.extension && !/^chrome/.test(window.location.href)) && !("object" === typeof Windows && "object" === typeof Windows.rg) && !0;
            };g = qe.prototype;g.sd = function () {};g.Tc = function () {
                this.Ab = !0;this.Ta && (this.Ta.close(), this.Ta = null);this.fc && (document.body.removeChild(this.fc), this.fc = null);this.sb && (clearTimeout(this.sb), this.sb = null);
            };
            g.bb = function () {
                this.Ab || (this.f("Longpoll is closing itself"), this.Tc(), this.ia && (this.ia(this.wc), this.ia = null));
            };g.close = function () {
                this.Ab || (this.f("Longpoll is being closed."), this.Tc());
            };g.send = function (a) {
                a = B(a);this.qb += a.length;Lb(this.Va, "bytes_sent", a.length);a = mb(a);a = ab(a, !0);a = Hc(a, 1840);for (var b = 0; b < a.length; b++) {
                    var c = this.Ta;c.Qc.push({ jg: this.Me, pg: a.length, Oe: a[b] });c.Ud && we(c);this.Me++;
                }
            };function ue(a, b) {
                var c = B(b).length;a.pb += c;Lb(a.Va, "bytes_received", c);
            }
            function te(a, b, c, d) {
                this.Yc = d;this.ib = c;this.te = new oe();this.Qc = [];this.Zd = Math.floor(1E8 * Math.random());this.Kd = !0;this.Qd = rc();window["pLPCommand" + this.Qd] = a;window["pRTLPCB" + this.Qd] = b;a = document.createElement("iframe");a.style.display = "none";if (document.body) {
                    document.body.appendChild(a);try {
                        a.contentWindow.document || E("No IE domain setting required");
                    } catch (e) {
                        a.src = "javascript:void((function(){document.open();document.domain='" + document.domain + "';document.close();})())";
                    }
                } else throw "Document body has not initialized. Wait to initialize Firebase until after the document is ready.";
                a.contentDocument ? a.gb = a.contentDocument : a.contentWindow ? a.gb = a.contentWindow.document : a.document && (a.gb = a.document);this.Ea = a;a = "";this.Ea.src && "javascript:" === this.Ea.src.substr(0, 11) && (a = '<script>document.domain="' + document.domain + '";\x3c/script>');a = "<html><body>" + a + "</body></html>";try {
                    this.Ea.gb.open(), this.Ea.gb.write(a), this.Ea.gb.close();
                } catch (f) {
                    E("frame writing exception"), f.stack && E(f.stack), E(f);
                }
            }
            te.prototype.close = function () {
                this.Ud = !1;if (this.Ea) {
                    this.Ea.gb.body.innerHTML = "";var a = this;setTimeout(function () {
                        null !== a.Ea && (document.body.removeChild(a.Ea), a.Ea = null);
                    }, Math.floor(0));
                }var b = this.ib;b && (this.ib = null, b());
            };
            function we(a) {
                if (a.Ud && a.Kd && a.te.count() < (0 < a.Qc.length ? 2 : 1)) {
                    a.Zd++;var b = {};b.id = a.Vf;b.pw = a.Wf;b.ser = a.Zd;for (var b = a.Yc(b), c = "", d = 0; 0 < a.Qc.length;) if (1870 >= a.Qc[0].Oe.length + 30 + c.length) {
                        var e = a.Qc.shift(),
                            c = c + "&seg" + d + "=" + e.jg + "&ts" + d + "=" + e.pg + "&d" + d + "=" + e.Oe;d++;
                    } else break;xe(a, b + c, a.Zd);return !0;
                }return !1;
            }function xe(a, b, c) {
                function d() {
                    a.te.remove(c);we(a);
                }a.te.add(c, 1);var e = setTimeout(d, Math.floor(25E3));ve(a, b, function () {
                    clearTimeout(e);d();
                });
            }
            function ve(a, b, c) {
                setTimeout(function () {
                    try {
                        if (a.Kd) {
                            var d = a.Ea.gb.createElement("script");d.type = "text/javascript";d.async = !0;d.src = b;d.onload = d.onreadystatechange = function () {
                                var a = d.readyState;a && "loaded" !== a && "complete" !== a || (d.onload = d.onreadystatechange = null, d.parentNode && d.parentNode.removeChild(d), c());
                            };d.onerror = function () {
                                E("Long-poll script failed to load: " + b);a.Kd = !1;a.close();
                            };a.Ea.gb.body.appendChild(d);
                        }
                    } catch (e) {}
                }, Math.floor(1));
            };function ye(a) {
                ze(this, a);
            }var Ae = [qe, cd];function ze(a, b) {
                var c = cd && cd.isAvailable(),
                    d = c && !(yb.Ze || !0 === yb.get("previous_websocket_failure"));b.qg && (c || O("wss:// URL used, but browser isn't known to support websockets.  Trying anyway."), d = !0);if (d) a.Wc = [cd];else {
                    var e = a.Wc = [];Ic(Ae, function (a, b) {
                        b && b.isAvailable() && e.push(b);
                    });
                }
            }function Be(a) {
                if (0 < a.Wc.length) return a.Wc[0];throw Error("No transports available");
            };function Ce(a, b, c, d, e, f, h) {
                this.id = a;this.f = yc("c:" + this.id + ":");this.re = c;this.Lc = d;this.ia = e;this.qe = f;this.L = b;this.Ad = [];this.Ke = 0;this.sf = new ye(b);this.Ua = 0;this.Cb = h;this.f("Connection created");De(this);
            }
            function De(a) {
                var b = Be(a.sf);a.I = new b("c:" + a.id + ":" + a.Ke++, a.L, void 0, a.Cb);a.ve = b.responsesRequiredToBeHealthy || 0;var c = Ee(a, a.I),
                    d = Fe(a, a.I);a.Xc = a.I;a.Rc = a.I;a.D = null;a.Bb = !1;setTimeout(function () {
                    a.I && a.I.open(c, d);
                }, Math.floor(0));b = b.healthyTimeout || 0;0 < b && (a.md = Mc(function () {
                    a.md = null;a.Bb || (a.I && 102400 < a.I.pb ? (a.f("Connection exceeded healthy timeout but has received " + a.I.pb + " bytes.  Marking connection healthy."), a.Bb = !0, a.I.sd()) : a.I && 10240 < a.I.qb ? a.f("Connection exceeded healthy timeout but has sent " + a.I.qb + " bytes.  Leaving connection alive.") : (a.f("Closing unhealthy connection after timeout."), a.close()));
                }, Math.floor(b)));
            }function Fe(a, b) {
                return function (c) {
                    b === a.I ? (a.I = null, c || 0 !== a.Ua ? 1 === a.Ua && a.f("Realtime connection lost.") : (a.f("Realtime connection failed."), "s-" === a.L.$a.substr(0, 2) && (yb.remove("host:" + a.L.host), a.L.$a = a.L.host)), a.close()) : b === a.D ? (a.f("Secondary connection lost."), c = a.D, a.D = null, a.Xc !== c && a.Rc !== c || a.close()) : a.f("closing an old connection");
                };
            }
            function Ee(a, b) {
                return function (c) {
                    if (2 != a.Ua) if (b === a.Rc) {
                        var d = Fc("t", c);c = Fc("d", c);if ("c" == d) {
                            if (d = Fc("t", c), "d" in c) if (c = c.d, "h" === d) {
                                var d = c.ts,
                                    e = c.v,
                                    f = c.h;a.qf = c.s;Ib(a.L, f);0 == a.Ua && (a.I.start(), Ge(a, a.I, d), "5" !== e && O("Protocol version mismatch detected"), c = a.sf, (c = 1 < c.Wc.length ? c.Wc[1] : null) && He(a, c));
                            } else if ("n" === d) {
                                a.f("recvd end transmission on primary");a.Rc = a.D;for (c = 0; c < a.Ad.length; ++c) a.wd(a.Ad[c]);a.Ad = [];Ie(a);
                            } else "s" === d ? (a.f("Connection shutdown command received. Shutting down..."), a.qe && (a.qe(c), a.qe = null), a.ia = null, a.close()) : "r" === d ? (a.f("Reset packet received.  New host: " + c), Ib(a.L, c), 1 === a.Ua ? a.close() : (Je(a), De(a))) : "e" === d ? zc("Server Error: " + c) : "o" === d ? (a.f("got pong on primary."), Ke(a), Le(a)) : zc("Unknown control packet command: " + d);
                        } else "d" == d && a.wd(c);
                    } else if (b === a.D) {
                        if (d = Fc("t", c), c = Fc("d", c), "c" == d) "t" in c && (c = c.t, "a" === c ? Me(a) : "r" === c ? (a.f("Got a reset on secondary, closing it"), a.D.close(), a.Xc !== a.D && a.Rc !== a.D || a.close()) : "o" === c && (a.f("got pong on secondary."), a.pf--, Me(a)));else if ("d" == d) a.Ad.push(c);else throw Error("Unknown protocol layer: " + d);
                    } else a.f("message on old connection");
                };
            }Ce.prototype.ua = function (a) {
                Ne(this, { t: "d", d: a });
            };function Ie(a) {
                a.Xc === a.D && a.Rc === a.D && (a.f("cleaning up and promoting a connection: " + a.D.Yd), a.I = a.D, a.D = null);
            }
            function Me(a) {
                0 >= a.pf ? (a.f("Secondary connection is healthy."), a.Bb = !0, a.D.sd(), a.D.start(), a.f("sending client ack on secondary"), a.D.send({ t: "c", d: { t: "a", d: {} } }), a.f("Ending transmission on primary"), a.I.send({ t: "c", d: { t: "n", d: {} } }), a.Xc = a.D, Ie(a)) : (a.f("sending ping on secondary."), a.D.send({ t: "c", d: { t: "p", d: {} } }));
            }Ce.prototype.wd = function (a) {
                Ke(this);this.re(a);
            };function Ke(a) {
                a.Bb || (a.ve--, 0 >= a.ve && (a.f("Primary connection is healthy."), a.Bb = !0, a.I.sd()));
            }
            function He(a, b) {
                a.D = new b("c:" + a.id + ":" + a.Ke++, a.L, a.qf);a.pf = b.responsesRequiredToBeHealthy || 0;a.D.open(Ee(a, a.D), Fe(a, a.D));Mc(function () {
                    a.D && (a.f("Timed out trying to upgrade."), a.D.close());
                }, Math.floor(6E4));
            }function Ge(a, b, c) {
                a.f("Realtime connection established.");a.I = b;a.Ua = 1;a.Lc && (a.Lc(c, a.qf), a.Lc = null);0 === a.ve ? (a.f("Primary connection is healthy."), a.Bb = !0) : Mc(function () {
                    Le(a);
                }, Math.floor(5E3));
            }
            function Le(a) {
                a.Bb || 1 !== a.Ua || (a.f("sending ping on primary."), Ne(a, { t: "c", d: { t: "p", d: {} } }));
            }function Ne(a, b) {
                if (1 !== a.Ua) throw "Connection is not connected";a.Xc.send(b);
            }Ce.prototype.close = function () {
                2 !== this.Ua && (this.f("Closing realtime connection."), this.Ua = 2, Je(this), this.ia && (this.ia(), this.ia = null));
            };function Je(a) {
                a.f("Shutting down all connections");a.I && (a.I.close(), a.I = null);a.D && (a.D.close(), a.D = null);a.md && (clearTimeout(a.md), a.md = null);
            };function L(a, b) {
                if (1 == arguments.length) {
                    this.o = a.split("/");for (var c = 0, d = 0; d < this.o.length; d++) 0 < this.o[d].length && (this.o[c] = this.o[d], c++);this.o.length = c;this.Y = 0;
                } else this.o = a, this.Y = b;
            }function T(a, b) {
                var c = J(a);if (null === c) return b;if (c === J(b)) return T(D(a), D(b));throw Error("INTERNAL ERROR: innerPath (" + b + ") is not within outerPath (" + a + ")");
            }
            function Oe(a, b) {
                for (var c = a.slice(), d = b.slice(), e = 0; e < c.length && e < d.length; e++) {
                    var f = hc(c[e], d[e]);if (0 !== f) return f;
                }return c.length === d.length ? 0 : c.length < d.length ? -1 : 1;
            }function J(a) {
                return a.Y >= a.o.length ? null : a.o[a.Y];
            }function Ad(a) {
                return a.o.length - a.Y;
            }function D(a) {
                var b = a.Y;b < a.o.length && b++;return new L(a.o, b);
            }function Bd(a) {
                return a.Y < a.o.length ? a.o[a.o.length - 1] : null;
            }g = L.prototype;
            g.toString = function () {
                for (var a = "", b = this.Y; b < this.o.length; b++) "" !== this.o[b] && (a += "/" + this.o[b]);return a || "/";
            };g.slice = function (a) {
                return this.o.slice(this.Y + (a || 0));
            };g.parent = function () {
                if (this.Y >= this.o.length) return null;for (var a = [], b = this.Y; b < this.o.length - 1; b++) a.push(this.o[b]);return new L(a, 0);
            };
            g.n = function (a) {
                for (var b = [], c = this.Y; c < this.o.length; c++) b.push(this.o[c]);if (a instanceof L) for (c = a.Y; c < a.o.length; c++) b.push(a.o[c]);else for (a = a.split("/"), c = 0; c < a.length; c++) 0 < a[c].length && b.push(a[c]);return new L(b, 0);
            };g.e = function () {
                return this.Y >= this.o.length;
            };g.Z = function (a) {
                if (Ad(this) !== Ad(a)) return !1;for (var b = this.Y, c = a.Y; b <= this.o.length; b++, c++) if (this.o[b] !== a.o[c]) return !1;return !0;
            };
            g.contains = function (a) {
                var b = this.Y,
                    c = a.Y;if (Ad(this) > Ad(a)) return !1;for (; b < this.o.length;) {
                    if (this.o[b] !== a.o[c]) return !1;++b;++c;
                }return !0;
            };var C = new L("");function Pe(a, b) {
                this.Qa = a.slice();this.Ha = Math.max(1, this.Qa.length);this.Pe = b;for (var c = 0; c < this.Qa.length; c++) this.Ha += nb(this.Qa[c]);Qe(this);
            }Pe.prototype.push = function (a) {
                0 < this.Qa.length && (this.Ha += 1);this.Qa.push(a);this.Ha += nb(a);Qe(this);
            };Pe.prototype.pop = function () {
                var a = this.Qa.pop();this.Ha -= nb(a);0 < this.Qa.length && --this.Ha;
            };
            function Qe(a) {
                if (768 < a.Ha) throw Error(a.Pe + "has a key path longer than 768 bytes (" + a.Ha + ").");if (32 < a.Qa.length) throw Error(a.Pe + "path specified exceeds the maximum depth that can be written (32) or object contains a cycle " + Re(a));
            }function Re(a) {
                return 0 == a.Qa.length ? "" : "in property '" + a.Qa.join(".") + "'";
            };function Se(a) {
                a instanceof Te || Ac("Don't call new Database() directly - please use firebase.database().");this.ta = a;this.ba = new U(a, C);this.INTERNAL = new Ue(this);
            }var Ve = { TIMESTAMP: { ".sv": "timestamp" } };g = Se.prototype;g.app = null;g.jf = function (a) {
                We(this, "ref");x("database.ref", 0, 1, arguments.length);return n(a) ? this.ba.n(a) : this.ba;
            };
            g.gg = function (a) {
                We(this, "database.refFromURL");x("database.refFromURL", 1, 1, arguments.length);var b = Bc(a);Xe("database.refFromURL", b);var c = b.jc;c.host !== this.ta.L.host && Ac("database.refFromURL: Host name does not match the current database: (found " + c.host + " but expected " + this.ta.L.host + ")");return this.jf(b.path.toString());
            };function We(a, b) {
                null === a.ta && Ac("Cannot call " + b + " on a deleted database.");
            }g.Pf = function () {
                x("database.goOffline", 0, 0, arguments.length);We(this, "goOffline");this.ta.ab();
            };
            g.Qf = function () {
                x("database.goOnline", 0, 0, arguments.length);We(this, "goOnline");this.ta.kc();
            };Object.defineProperty(Se.prototype, "app", { get: function () {
                    return this.ta.app;
                } });function Ue(a) {
                this.Ya = a;
            }Ue.prototype.delete = function () {
                We(this.Ya, "delete");var a = Ye.Vb(),
                    b = this.Ya.ta;w(a.lb, b.app.name) !== b && Ac("Database " + b.app.name + " has already been deleted.");b.ab();delete a.lb[b.app.name];this.Ya.ta = null;this.Ya.ba = null;this.Ya = this.Ya.INTERNAL = null;return firebase.Promise.resolve();
            };
            Se.prototype.ref = Se.prototype.jf;Se.prototype.refFromURL = Se.prototype.gg;Se.prototype.goOnline = Se.prototype.Qf;Se.prototype.goOffline = Se.prototype.Pf;Ue.prototype["delete"] = Ue.prototype.delete;function mc() {
                this.k = this.B = null;
            }mc.prototype.find = function (a) {
                if (null != this.B) return this.B.P(a);if (a.e() || null == this.k) return null;var b = J(a);a = D(a);return this.k.contains(b) ? this.k.get(b).find(a) : null;
            };function oc(a, b, c) {
                if (b.e()) a.B = c, a.k = null;else if (null !== a.B) a.B = a.B.F(b, c);else {
                    null == a.k && (a.k = new oe());var d = J(b);a.k.contains(d) || a.k.add(d, new mc());a = a.k.get(d);b = D(b);oc(a, b, c);
                }
            }
            function Ze(a, b) {
                if (b.e()) return a.B = null, a.k = null, !0;if (null !== a.B) {
                    if (a.B.J()) return !1;var c = a.B;a.B = null;c.O(N, function (b, c) {
                        oc(a, new L(b), c);
                    });return Ze(a, b);
                }return null !== a.k ? (c = J(b), b = D(b), a.k.contains(c) && Ze(a.k.get(c), b) && a.k.remove(c), a.k.e() ? (a.k = null, !0) : !1) : !0;
            }function nc(a, b, c) {
                null !== a.B ? c(b, a.B) : a.O(function (a, e) {
                    var f = new L(b.toString() + "/" + a);nc(e, f, c);
                });
            }mc.prototype.O = function (a) {
                null !== this.k && pe(this.k, function (b, c) {
                    a(b, c);
                });
            };var $e = /[\[\].#$\/\u0000-\u001F\u007F]/,
                af = /[\[\].#$\u0000-\u001F\u007F]/;function bf(a) {
                return p(a) && 0 !== a.length && !$e.test(a);
            }function cf(a) {
                return null === a || p(a) || ga(a) && !Cc(a) || ia(a) && cb(a, ".sv");
            }function df(a, b, c, d) {
                d && !n(b) || ef(y(a, 1, d), b, c);
            }
            function ef(a, b, c) {
                c instanceof L && (c = new Pe(c, a));if (!n(b)) throw Error(a + "contains undefined " + Re(c));if (ha(b)) throw Error(a + "contains a function " + Re(c) + " with contents: " + b.toString());if (Cc(b)) throw Error(a + "contains " + b.toString() + " " + Re(c));if (p(b) && b.length > 10485760 / 3 && 10485760 < nb(b)) throw Error(a + "contains a string greater than 10485760 utf8 bytes " + Re(c) + " ('" + b.substring(0, 50) + "...')");if (ia(b)) {
                    var d = !1,
                        e = !1;db(b, function (b, h) {
                        if (".value" === b) d = !0;else if (".priority" !== b && ".sv" !== b && (e = !0, !bf(b))) throw Error(a + " contains an invalid key (" + b + ") " + Re(c) + '.  Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');c.push(b);ef(a, h, c);c.pop();
                    });if (d && e) throw Error(a + ' contains ".value" child ' + Re(c) + " in addition to actual children.");
                }
            }
            function ff(a, b) {
                var c, d;for (c = 0; c < b.length; c++) {
                    d = b[c];for (var e = d.slice(), f = 0; f < e.length; f++) if ((".priority" !== e[f] || f !== e.length - 1) && !bf(e[f])) throw Error(a + "contains an invalid key (" + e[f] + ") in path " + d.toString() + '. Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');
                }b.sort(Oe);e = null;for (c = 0; c < b.length; c++) {
                    d = b[c];if (null !== e && e.contains(d)) throw Error(a + "contains a path " + e.toString() + " that is ancestor of another path " + d.toString());e = d;
                }
            }
            function gf(a, b, c) {
                var d = y(a, 1, !1);if (!ia(b) || ea(b)) throw Error(d + " must be an object containing the children to replace.");var e = [];db(b, function (a, b) {
                    var k = new L(a);ef(d, b, c.n(k));if (".priority" === Bd(k) && !cf(b)) throw Error(d + "contains an invalid value for '" + k.toString() + "', which must be a valid Firebase priority (a string, finite number, server value, or null).");e.push(k);
                });ff(d, e);
            }
            function hf(a, b, c) {
                if (Cc(c)) throw Error(y(a, b, !1) + "is " + c.toString() + ", but must be a valid Firebase priority (a string, finite number, server value, or null).");if (!cf(c)) throw Error(y(a, b, !1) + "must be a valid Firebase priority (a string, finite number, server value, or null).");
            }
            function jf(a, b, c) {
                if (!c || n(b)) switch (b) {case "value":case "child_added":case "child_removed":case "child_changed":case "child_moved":
                        break;default:
                        throw Error(y(a, 1, c) + 'must be a valid event type: "value", "child_added", "child_removed", "child_changed", or "child_moved".');}
            }function kf(a, b) {
                if (n(b) && !bf(b)) throw Error(y(a, 2, !0) + 'was an invalid key: "' + b + '".  Firebase keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]").');
            }
            function lf(a, b) {
                if (!p(b) || 0 === b.length || af.test(b)) throw Error(y(a, 1, !1) + 'was an invalid path: "' + b + '". Paths must be non-empty strings and can\'t contain ".", "#", "$", "[", or "]"');
            }function mf(a, b) {
                if (".info" === J(b)) throw Error(a + " failed: Can't modify data under /.info/");
            }
            function Xe(a, b) {
                var c = b.path.toString(),
                    d;!(d = !p(b.jc.host) || 0 === b.jc.host.length || !bf(b.jc.ne)) && (d = 0 !== c.length) && (c && (c = c.replace(/^\/*\.info(\/|$)/, "/")), d = !(p(c) && 0 !== c.length && !af.test(c)));if (d) throw Error(y(a, 1, !1) + 'must be a valid firebase URL and the path can\'t contain ".", "#", "$", "[", or "]".');
            };function V(a, b) {
                this.ta = a;this.qa = b;
            }V.prototype.cancel = function (a) {
                x("Firebase.onDisconnect().cancel", 0, 1, arguments.length);A("Firebase.onDisconnect().cancel", 1, a, !0);var b = new hb();this.ta.xd(this.qa, ib(b, a));return b.ra;
            };V.prototype.cancel = V.prototype.cancel;V.prototype.remove = function (a) {
                x("Firebase.onDisconnect().remove", 0, 1, arguments.length);mf("Firebase.onDisconnect().remove", this.qa);A("Firebase.onDisconnect().remove", 1, a, !0);var b = new hb();nf(this.ta, this.qa, null, ib(b, a));return b.ra;
            };
            V.prototype.remove = V.prototype.remove;V.prototype.set = function (a, b) {
                x("Firebase.onDisconnect().set", 1, 2, arguments.length);mf("Firebase.onDisconnect().set", this.qa);df("Firebase.onDisconnect().set", a, this.qa, !1);A("Firebase.onDisconnect().set", 2, b, !0);var c = new hb();nf(this.ta, this.qa, a, ib(c, b));return c.ra;
            };V.prototype.set = V.prototype.set;
            V.prototype.Jb = function (a, b, c) {
                x("Firebase.onDisconnect().setWithPriority", 2, 3, arguments.length);mf("Firebase.onDisconnect().setWithPriority", this.qa);df("Firebase.onDisconnect().setWithPriority", a, this.qa, !1);hf("Firebase.onDisconnect().setWithPriority", 2, b);A("Firebase.onDisconnect().setWithPriority", 3, c, !0);var d = new hb();of(this.ta, this.qa, a, b, ib(d, c));return d.ra;
            };V.prototype.setWithPriority = V.prototype.Jb;
            V.prototype.update = function (a, b) {
                x("Firebase.onDisconnect().update", 1, 2, arguments.length);mf("Firebase.onDisconnect().update", this.qa);if (ea(a)) {
                    for (var c = {}, d = 0; d < a.length; ++d) c["" + d] = a[d];a = c;O("Passing an Array to Firebase.onDisconnect().update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.");
                }gf("Firebase.onDisconnect().update", a, this.qa);A("Firebase.onDisconnect().update", 2, b, !0);
                c = new hb();pf(this.ta, this.qa, a, ib(c, b));return c.ra;
            };V.prototype.update = V.prototype.update;function qf(a) {
                H(ea(a) && 0 < a.length, "Requires a non-empty array");this.Bf = a;this.Dc = {};
            }qf.prototype.Ee = function (a, b) {
                var c;c = this.Dc[a] || [];var d = c.length;if (0 < d) {
                    for (var e = Array(d), f = 0; f < d; f++) e[f] = c[f];c = e;
                } else c = [];for (d = 0; d < c.length; d++) c[d].He.apply(c[d].Ma, Array.prototype.slice.call(arguments, 1));
            };qf.prototype.gc = function (a, b, c) {
                rf(this, a);this.Dc[a] = this.Dc[a] || [];this.Dc[a].push({ He: b, Ma: c });(a = this.Ue(a)) && b.apply(c, a);
            };
            qf.prototype.Ic = function (a, b, c) {
                rf(this, a);a = this.Dc[a] || [];for (var d = 0; d < a.length; d++) if (a[d].He === b && (!c || c === a[d].Ma)) {
                    a.splice(d, 1);break;
                }
            };function rf(a, b) {
                H(Oa(a.Bf, function (a) {
                    return a === b;
                }), "Unknown event: " + b);
            };function sf() {
                qf.call(this, ["online"]);this.hc = !0;if ("undefined" !== typeof window && "undefined" !== typeof window.addEventListener && !qb()) {
                    var a = this;window.addEventListener("online", function () {
                        a.hc || (a.hc = !0, a.Ee("online", !0));
                    }, !1);window.addEventListener("offline", function () {
                        a.hc && (a.hc = !1, a.Ee("online", !1));
                    }, !1);
                }
            }la(sf, qf);sf.prototype.Ue = function (a) {
                H("online" === a, "Unknown event type: " + a);return [this.hc];
            };ca(sf);function tf() {
                qf.call(this, ["visible"]);var a, b;"undefined" !== typeof document && "undefined" !== typeof document.addEventListener && ("undefined" !== typeof document.hidden ? (b = "visibilitychange", a = "hidden") : "undefined" !== typeof document.mozHidden ? (b = "mozvisibilitychange", a = "mozHidden") : "undefined" !== typeof document.msHidden ? (b = "msvisibilitychange", a = "msHidden") : "undefined" !== typeof document.webkitHidden && (b = "webkitvisibilitychange", a = "webkitHidden"));this.Mb = !0;if (b) {
                    var c = this;document.addEventListener(b, function () {
                        var b = !document[a];b !== c.Mb && (c.Mb = b, c.Ee("visible", b));
                    }, !1);
                }
            }la(tf, qf);tf.prototype.Ue = function (a) {
                H("visible" === a, "Unknown event type: " + a);return [this.Mb];
            };ca(tf);var uf = function () {
                var a = 0,
                    b = [];return function (c) {
                    var d = c === a;a = c;for (var e = Array(8), f = 7; 0 <= f; f--) e[f] = "-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".charAt(c % 64), c = Math.floor(c / 64);H(0 === c, "Cannot push at time == 0");c = e.join("");if (d) {
                        for (f = 11; 0 <= f && 63 === b[f]; f--) b[f] = 0;b[f]++;
                    } else for (f = 0; 12 > f; f++) b[f] = Math.floor(64 * Math.random());for (f = 0; 12 > f; f++) c += "-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".charAt(b[f]);H(20 === c.length, "nextPushId: Length should be 20.");
                    return c;
                };
            }();function vf(a, b) {
                this.La = a;this.ba = b ? b : wf;
            }g = vf.prototype;g.Oa = function (a, b) {
                return new vf(this.La, this.ba.Oa(a, b, this.La).X(null, null, !1, null, null));
            };g.remove = function (a) {
                return new vf(this.La, this.ba.remove(a, this.La).X(null, null, !1, null, null));
            };g.get = function (a) {
                for (var b, c = this.ba; !c.e();) {
                    b = this.La(a, c.key);if (0 === b) return c.value;0 > b ? c = c.left : 0 < b && (c = c.right);
                }return null;
            };
            function xf(a, b) {
                for (var c, d = a.ba, e = null; !d.e();) {
                    c = a.La(b, d.key);if (0 === c) {
                        if (d.left.e()) return e ? e.key : null;for (d = d.left; !d.right.e();) d = d.right;return d.key;
                    }0 > c ? d = d.left : 0 < c && (e = d, d = d.right);
                }throw Error("Attempted to find predecessor key for a nonexistent key.  What gives?");
            }g.e = function () {
                return this.ba.e();
            };g.count = function () {
                return this.ba.count();
            };g.Gc = function () {
                return this.ba.Gc();
            };g.ec = function () {
                return this.ba.ec();
            };g.ha = function (a) {
                return this.ba.ha(a);
            };
            g.Wb = function (a) {
                return new yf(this.ba, null, this.La, !1, a);
            };g.Xb = function (a, b) {
                return new yf(this.ba, a, this.La, !1, b);
            };g.Zb = function (a, b) {
                return new yf(this.ba, a, this.La, !0, b);
            };g.We = function (a) {
                return new yf(this.ba, null, this.La, !0, a);
            };function yf(a, b, c, d, e) {
                this.Hd = e || null;this.je = d;this.Pa = [];for (e = 1; !a.e();) if (e = b ? c(a.key, b) : 1, d && (e *= -1), 0 > e) a = this.je ? a.left : a.right;else if (0 === e) {
                    this.Pa.push(a);break;
                } else this.Pa.push(a), a = this.je ? a.right : a.left;
            }
            function R(a) {
                if (0 === a.Pa.length) return null;var b = a.Pa.pop(),
                    c;c = a.Hd ? a.Hd(b.key, b.value) : { key: b.key, value: b.value };if (a.je) for (b = b.left; !b.e();) a.Pa.push(b), b = b.right;else for (b = b.right; !b.e();) a.Pa.push(b), b = b.left;return c;
            }function zf(a) {
                if (0 === a.Pa.length) return null;var b;b = a.Pa;b = b[b.length - 1];return a.Hd ? a.Hd(b.key, b.value) : { key: b.key, value: b.value };
            }function Af(a, b, c, d, e) {
                this.key = a;this.value = b;this.color = null != c ? c : !0;this.left = null != d ? d : wf;this.right = null != e ? e : wf;
            }g = Af.prototype;
            g.X = function (a, b, c, d, e) {
                return new Af(null != a ? a : this.key, null != b ? b : this.value, null != c ? c : this.color, null != d ? d : this.left, null != e ? e : this.right);
            };g.count = function () {
                return this.left.count() + 1 + this.right.count();
            };g.e = function () {
                return !1;
            };g.ha = function (a) {
                return this.left.ha(a) || a(this.key, this.value) || this.right.ha(a);
            };function Bf(a) {
                return a.left.e() ? a : Bf(a.left);
            }g.Gc = function () {
                return Bf(this).key;
            };g.ec = function () {
                return this.right.e() ? this.key : this.right.ec();
            };
            g.Oa = function (a, b, c) {
                var d, e;e = this;d = c(a, e.key);e = 0 > d ? e.X(null, null, null, e.left.Oa(a, b, c), null) : 0 === d ? e.X(null, b, null, null, null) : e.X(null, null, null, null, e.right.Oa(a, b, c));return Cf(e);
            };function Df(a) {
                if (a.left.e()) return wf;a.left.ea() || a.left.left.ea() || (a = Ef(a));a = a.X(null, null, null, Df(a.left), null);return Cf(a);
            }
            g.remove = function (a, b) {
                var c, d;c = this;if (0 > b(a, c.key)) c.left.e() || c.left.ea() || c.left.left.ea() || (c = Ef(c)), c = c.X(null, null, null, c.left.remove(a, b), null);else {
                    c.left.ea() && (c = Ff(c));c.right.e() || c.right.ea() || c.right.left.ea() || (c = Gf(c), c.left.left.ea() && (c = Ff(c), c = Gf(c)));if (0 === b(a, c.key)) {
                        if (c.right.e()) return wf;d = Bf(c.right);c = c.X(d.key, d.value, null, null, Df(c.right));
                    }c = c.X(null, null, null, null, c.right.remove(a, b));
                }return Cf(c);
            };g.ea = function () {
                return this.color;
            };
            function Cf(a) {
                a.right.ea() && !a.left.ea() && (a = Hf(a));a.left.ea() && a.left.left.ea() && (a = Ff(a));a.left.ea() && a.right.ea() && (a = Gf(a));return a;
            }function Ef(a) {
                a = Gf(a);a.right.left.ea() && (a = a.X(null, null, null, null, Ff(a.right)), a = Hf(a), a = Gf(a));return a;
            }function Hf(a) {
                return a.right.X(null, null, a.color, a.X(null, null, !0, null, a.right.left), null);
            }function Ff(a) {
                return a.left.X(null, null, a.color, null, a.X(null, null, !0, a.left.right, null));
            }
            function Gf(a) {
                return a.X(null, null, !a.color, a.left.X(null, null, !a.left.color, null, null), a.right.X(null, null, !a.right.color, null, null));
            }function If() {}g = If.prototype;g.X = function () {
                return this;
            };g.Oa = function (a, b) {
                return new Af(a, b, null);
            };g.remove = function () {
                return this;
            };g.count = function () {
                return 0;
            };g.e = function () {
                return !0;
            };g.ha = function () {
                return !1;
            };g.Gc = function () {
                return null;
            };g.ec = function () {
                return null;
            };g.ea = function () {
                return !1;
            };var wf = new If();function P(a, b, c) {
                this.k = a;(this.aa = b) && Sd(this.aa);a.e() && H(!this.aa || this.aa.e(), "An empty node cannot have a priority");this.yb = c;this.Db = null;
            }g = P.prototype;g.J = function () {
                return !1;
            };g.C = function () {
                return this.aa || G;
            };g.fa = function (a) {
                return this.k.e() ? this : new P(this.k, a, this.yb);
            };g.Q = function (a) {
                if (".priority" === a) return this.C();a = this.k.get(a);return null === a ? G : a;
            };g.P = function (a) {
                var b = J(a);return null === b ? this : this.Q(b).P(D(a));
            };g.Da = function (a) {
                return null !== this.k.get(a);
            };
            g.T = function (a, b) {
                H(b, "We should always be passing snapshot nodes");if (".priority" === a) return this.fa(b);var c = new K(a, b),
                    d,
                    e;b.e() ? (d = this.k.remove(a), c = me(this.yb, c, this.k)) : (d = this.k.Oa(a, b), c = ke(this.yb, c, this.k));e = d.e() ? G : this.aa;return new P(d, e, c);
            };g.F = function (a, b) {
                var c = J(a);if (null === c) return b;H(".priority" !== J(a) || 1 === Ad(a), ".priority must be the last token in a path");var d = this.Q(c).F(D(a), b);return this.T(c, d);
            };g.e = function () {
                return this.k.e();
            };g.Eb = function () {
                return this.k.count();
            };
            var Jf = /^(0|[1-9]\d*)$/;g = P.prototype;g.H = function (a) {
                if (this.e()) return null;var b = {},
                    c = 0,
                    d = 0,
                    e = !0;this.O(N, function (f, h) {
                    b[f] = h.H(a);c++;e && Jf.test(f) ? d = Math.max(d, Number(f)) : e = !1;
                });if (!a && e && d < 2 * c) {
                    var f = [],
                        h;for (h in b) f[h] = b[h];return f;
                }a && !this.C().e() && (b[".priority"] = this.C().H());return b;
            };g.hash = function () {
                if (null === this.Db) {
                    var a = "";this.C().e() || (a += "priority:" + Ud(this.C().H()) + ":");this.O(N, function (b, c) {
                        var d = c.hash();"" !== d && (a += ":" + b + ":" + d);
                    });this.Db = "" === a ? "" : uc(a);
                }return this.Db;
            };
            g.Ve = function (a, b, c) {
                return (c = Kf(this, c)) ? (a = xf(c, new K(a, b))) ? a.name : null : xf(this.k, a);
            };function Qd(a, b) {
                var c;c = (c = Kf(a, b)) ? (c = c.Gc()) && c.name : a.k.Gc();return c ? new K(c, a.k.get(c)) : null;
            }function Rd(a, b) {
                var c;c = (c = Kf(a, b)) ? (c = c.ec()) && c.name : a.k.ec();return c ? new K(c, a.k.get(c)) : null;
            }g.O = function (a, b) {
                var c = Kf(this, a);return c ? c.ha(function (a) {
                    return b(a.name, a.R);
                }) : this.k.ha(b);
            };g.Wb = function (a) {
                return this.Xb(a.Hc(), a);
            };
            g.Xb = function (a, b) {
                var c = Kf(this, b);if (c) return c.Xb(a, function (a) {
                    return a;
                });for (var c = this.k.Xb(a.name, jc), d = zf(c); null != d && 0 > b.compare(d, a);) R(c), d = zf(c);return c;
            };g.We = function (a) {
                return this.Zb(a.Fc(), a);
            };g.Zb = function (a, b) {
                var c = Kf(this, b);if (c) return c.Zb(a, function (a) {
                    return a;
                });for (var c = this.k.Zb(a.name, jc), d = zf(c); null != d && 0 < b.compare(d, a);) R(c), d = zf(c);return c;
            };g.sc = function (a) {
                return this.e() ? a.e() ? 0 : -1 : a.J() || a.e() ? 1 : a === Zd ? -1 : 0;
            };
            g.nb = function (a) {
                if (a === Fd || va(this.yb.cc, a.toString())) return this;var b = this.yb,
                    c = this.k;H(a !== Fd, "KeyIndex always exists and isn't meant to be added to the IndexMap.");for (var d = [], e = !1, c = c.Wb(jc), f = R(c); f;) e = e || a.xc(f.R), d.push(f), f = R(c);d = e ? le(d, Pd(a)) : Wd;e = a.toString();c = za(b.cc);c[e] = a;a = za(b.od);a[e] = d;return new P(this.k, this.aa, new je(a, c));
            };g.yc = function (a) {
                return a === Fd || va(this.yb.cc, a.toString());
            };
            g.Z = function (a) {
                if (a === this) return !0;if (a.J()) return !1;if (this.C().Z(a.C()) && this.k.count() === a.k.count()) {
                    var b = this.Wb(N);a = a.Wb(N);for (var c = R(b), d = R(a); c && d;) {
                        if (c.name !== d.name || !c.R.Z(d.R)) return !1;c = R(b);d = R(a);
                    }return null === c && null === d;
                }return !1;
            };function Kf(a, b) {
                return b === Fd ? null : a.yb.get(b.toString());
            }g.toString = function () {
                return B(this.H(!0));
            };function M(a, b) {
                if (null === a) return G;var c = null;"object" === typeof a && ".priority" in a ? c = a[".priority"] : "undefined" !== typeof b && (c = b);H(null === c || "string" === typeof c || "number" === typeof c || "object" === typeof c && ".sv" in c, "Invalid priority type found: " + typeof c);"object" === typeof a && ".value" in a && null !== a[".value"] && (a = a[".value"]);if ("object" !== typeof a || ".sv" in a) return new qc(a, M(c));if (a instanceof Array) {
                    var d = G,
                        e = a;r(e, function (a, b) {
                        if (cb(e, b) && "." !== b.substring(0, 1)) {
                            var c = M(a);if (c.J() || !c.e()) d = d.T(b, c);
                        }
                    });return d.fa(M(c));
                }var f = [],
                    h = !1,
                    k = a;db(k, function (a) {
                    if ("string" !== typeof a || "." !== a.substring(0, 1)) {
                        var b = M(k[a]);b.e() || (h = h || !b.C().e(), f.push(new K(a, b)));
                    }
                });if (0 == f.length) return G;var l = le(f, gc, function (a) {
                    return a.name;
                }, ic);if (h) {
                    var m = le(f, Pd(N));return new P(l, M(c), new je({ ".priority": m }, { ".priority": N }));
                }return new P(l, M(c), ne);
            }var Lf = Math.log(2);
            function Mf(a) {
                this.count = parseInt(Math.log(a + 1) / Lf, 10);this.Ne = this.count - 1;this.Cf = a + 1 & parseInt(Array(this.count + 1).join("1"), 2);
            }function Nf(a) {
                var b = !(a.Cf & 1 << a.Ne);a.Ne--;return b;
            }
            function le(a, b, c, d) {
                function e(b, d) {
                    var f = d - b;if (0 == f) return null;if (1 == f) {
                        var m = a[b],
                            u = c ? c(m) : m;return new Af(u, m.R, !1, null, null);
                    }var m = parseInt(f / 2, 10) + b,
                        f = e(b, m),
                        z = e(m + 1, d),
                        m = a[m],
                        u = c ? c(m) : m;return new Af(u, m.R, !1, f, z);
                }a.sort(b);var f = function (b) {
                    function d(b, h) {
                        var k = u - b,
                            z = u;u -= b;var z = e(k + 1, z),
                            k = a[k],
                            F = c ? c(k) : k,
                            z = new Af(F, k.R, h, null, z);f ? f.left = z : m = z;f = z;
                    }for (var f = null, m = null, u = a.length, z = 0; z < b.count; ++z) {
                        var F = Nf(b),
                            id = Math.pow(2, b.count - (z + 1));F ? d(id, !1) : (d(id, !1), d(id, !0));
                    }return m;
                }(new Mf(a.length));
                return null !== f ? new vf(d || b, f) : new vf(d || b);
            }function Ud(a) {
                return "number" === typeof a ? "number:" + Jc(a) : "string:" + a;
            }function Sd(a) {
                if (a.J()) {
                    var b = a.H();H("string" === typeof b || "number" === typeof b || "object" === typeof b && cb(b, ".sv"), "Priority must be a string or number.");
                } else H(a === Zd || a.e(), "priority of unexpected type.");H(a === Zd || a.C().e(), "Priority nodes can't have a priority of their own.");
            }var G = new P(new vf(ic), null, ne);function Of() {
                P.call(this, new vf(ic), G, ne);
            }la(Of, P);g = Of.prototype;
            g.sc = function (a) {
                return a === this ? 0 : 1;
            };g.Z = function (a) {
                return a === this;
            };g.C = function () {
                return this;
            };g.Q = function () {
                return G;
            };g.e = function () {
                return !1;
            };var Zd = new Of(),
                Xd = new K("[MIN_NAME]", G),
                ce = new K("[MAX_NAME]", Zd);function W(a, b, c) {
                this.A = a;this.V = b;this.g = c;
            }W.prototype.H = function () {
                x("Firebase.DataSnapshot.val", 0, 0, arguments.length);return this.A.H();
            };W.prototype.val = W.prototype.H;W.prototype.Qe = function () {
                x("Firebase.DataSnapshot.exportVal", 0, 0, arguments.length);return this.A.H(!0);
            };W.prototype.exportVal = W.prototype.Qe;W.prototype.Lf = function () {
                x("Firebase.DataSnapshot.exists", 0, 0, arguments.length);return !this.A.e();
            };W.prototype.exists = W.prototype.Lf;
            W.prototype.n = function (a) {
                x("Firebase.DataSnapshot.child", 0, 1, arguments.length);ga(a) && (a = String(a));lf("Firebase.DataSnapshot.child", a);var b = new L(a),
                    c = this.V.n(b);return new W(this.A.P(b), c, N);
            };W.prototype.child = W.prototype.n;W.prototype.Da = function (a) {
                x("Firebase.DataSnapshot.hasChild", 1, 1, arguments.length);lf("Firebase.DataSnapshot.hasChild", a);var b = new L(a);return !this.A.P(b).e();
            };W.prototype.hasChild = W.prototype.Da;
            W.prototype.C = function () {
                x("Firebase.DataSnapshot.getPriority", 0, 0, arguments.length);return this.A.C().H();
            };W.prototype.getPriority = W.prototype.C;W.prototype.forEach = function (a) {
                x("Firebase.DataSnapshot.forEach", 1, 1, arguments.length);A("Firebase.DataSnapshot.forEach", 1, a, !1);if (this.A.J()) return !1;var b = this;return !!this.A.O(this.g, function (c, d) {
                    return a(new W(d, b.V.n(c), N));
                });
            };W.prototype.forEach = W.prototype.forEach;
            W.prototype.kd = function () {
                x("Firebase.DataSnapshot.hasChildren", 0, 0, arguments.length);return this.A.J() ? !1 : !this.A.e();
            };W.prototype.hasChildren = W.prototype.kd;W.prototype.getKey = function () {
                x("Firebase.DataSnapshot.key", 0, 0, arguments.length);return this.V.getKey();
            };Lc(W.prototype, "key", W.prototype.getKey);W.prototype.Eb = function () {
                x("Firebase.DataSnapshot.numChildren", 0, 0, arguments.length);return this.A.Eb();
            };W.prototype.numChildren = W.prototype.Eb;
            W.prototype.wb = function () {
                x("Firebase.DataSnapshot.ref", 0, 0, arguments.length);return this.V;
            };Lc(W.prototype, "ref", W.prototype.wb);function yd(a, b) {
                this.N = a;this.Ld = b;
            }function vd(a, b, c, d) {
                return new yd(new $b(b, c, d), a.Ld);
            }function zd(a) {
                return a.N.da ? a.N.j() : null;
            }yd.prototype.w = function () {
                return this.Ld;
            };function ac(a) {
                return a.Ld.da ? a.Ld.j() : null;
            };function Pf(a, b) {
                this.V = a;var c = a.m,
                    d = new Gd(c.g),
                    c = S(c) ? new Gd(c.g) : c.xa ? new Md(c) : new Hd(c);this.hf = new pd(c);var e = b.w(),
                    f = b.N,
                    h = d.ya(G, e.j(), null),
                    k = c.ya(G, f.j(), null);this.Ka = new yd(new $b(k, f.da, c.Na()), new $b(h, e.da, d.Na()));this.Za = [];this.Jf = new kd(a);
            }function Qf(a) {
                return a.V;
            }g = Pf.prototype;g.w = function () {
                return this.Ka.w().j();
            };g.hb = function (a) {
                var b = ac(this.Ka);return b && (S(this.V.m) || !a.e() && !b.Q(J(a)).e()) ? b.P(a) : null;
            };g.e = function () {
                return 0 === this.Za.length;
            };g.Nb = function (a) {
                this.Za.push(a);
            };
            g.kb = function (a, b) {
                var c = [];if (b) {
                    H(null == a, "A cancel should cancel all event registrations.");var d = this.V.path;Ja(this.Za, function (a) {
                        (a = a.Le(b, d)) && c.push(a);
                    });
                }if (a) {
                    for (var e = [], f = 0; f < this.Za.length; ++f) {
                        var h = this.Za[f];if (!h.matches(a)) e.push(h);else if (a.Xe()) {
                            e = e.concat(this.Za.slice(f + 1));break;
                        }
                    }this.Za = e;
                } else this.Za = [];return c;
            };
            g.eb = function (a, b, c) {
                a.type === Wc && null !== a.source.Hb && (H(ac(this.Ka), "We should always have a full cache before handling merges"), H(zd(this.Ka), "Missing event cache, even though we have a server cache"));var d = this.Ka;a = this.hf.eb(d, a, b, c);b = this.hf;c = a.Sd;H(c.N.j().yc(b.U.g), "Event snap not indexed");H(c.w().j().yc(b.U.g), "Server snap not indexed");H(dc(a.Sd.w()) || !dc(d.w()), "Once a server snap is complete, it should never go back");this.Ka = a.Sd;return Rf(this, a.Df, a.Sd.N.j(), null);
            };
            function Sf(a, b) {
                var c = a.Ka.N,
                    d = [];c.j().J() || c.j().O(N, function (a, b) {
                    d.push(new I("child_added", b, a));
                });c.da && d.push(bc(c.j()));return Rf(a, d, c.j(), b);
            }function Rf(a, b, c, d) {
                return ld(a.Jf, b, c, d ? [d] : a.Za);
            };function Tf(a, b, c) {
                this.Pb = a;this.rb = b;this.tb = c || null;
            }g = Tf.prototype;g.nf = function (a) {
                return "value" === a;
            };g.createEvent = function (a, b) {
                var c = b.m.g;return new Ub("value", this, new W(a.Ja, b.wb(), c));
            };g.Tb = function (a) {
                var b = this.tb;if ("cancel" === a.ee()) {
                    H(this.rb, "Raising a cancel event on a listener with no cancel callback");var c = this.rb;return function () {
                        c.call(b, a.error);
                    };
                }var d = this.Pb;return function () {
                    d.call(b, a.Md);
                };
            };g.Le = function (a, b) {
                return this.rb ? new Vb(this, a, b) : null;
            };
            g.matches = function (a) {
                return a instanceof Tf ? a.Pb && this.Pb ? a.Pb === this.Pb && a.tb === this.tb : !0 : !1;
            };g.Xe = function () {
                return null !== this.Pb;
            };function Uf(a, b, c) {
                this.ga = a;this.rb = b;this.tb = c;
            }g = Uf.prototype;g.nf = function (a) {
                a = "children_added" === a ? "child_added" : a;return ("children_removed" === a ? "child_removed" : a) in this.ga;
            };g.Le = function (a, b) {
                return this.rb ? new Vb(this, a, b) : null;
            };
            g.createEvent = function (a, b) {
                H(null != a.Xa, "Child events should have a childName.");var c = b.wb().n(a.Xa);return new Ub(a.type, this, new W(a.Ja, c, b.m.g), a.Dd);
            };g.Tb = function (a) {
                var b = this.tb;if ("cancel" === a.ee()) {
                    H(this.rb, "Raising a cancel event on a listener with no cancel callback");var c = this.rb;return function () {
                        c.call(b, a.error);
                    };
                }var d = this.ga[a.hd];return function () {
                    d.call(b, a.Md, a.Dd);
                };
            };
            g.matches = function (a) {
                if (a instanceof Uf) {
                    if (!this.ga || !a.ga) return !0;if (this.tb === a.tb) {
                        var b = ra(a.ga);if (b === ra(this.ga)) {
                            if (1 === b) {
                                var b = sa(a.ga),
                                    c = sa(this.ga);return c === b && (!a.ga[b] || !this.ga[c] || a.ga[b] === this.ga[c]);
                            }return qa(this.ga, function (b, c) {
                                return a.ga[c] === b;
                            });
                        }
                    }
                }return !1;
            };g.Xe = function () {
                return null !== this.ga;
            };function X(a, b, c, d) {
                this.u = a;this.path = b;this.m = c;this.Nc = d;
            }
            function Vf(a) {
                var b = null,
                    c = null;a.ka && (b = Jd(a));a.na && (c = Ld(a));if (a.g === Fd) {
                    if (a.ka) {
                        if ("[MIN_NAME]" != Id(a)) throw Error("Query: When ordering by key, you may only pass one argument to startAt(), endAt(), or equalTo().");if ("string" !== typeof b) throw Error("Query: When ordering by key, the argument passed to startAt(), endAt(),or equalTo() must be a string.");
                    }if (a.na) {
                        if ("[MAX_NAME]" != Kd(a)) throw Error("Query: When ordering by key, you may only pass one argument to startAt(), endAt(), or equalTo().");if ("string" !== typeof c) throw Error("Query: When ordering by key, the argument passed to startAt(), endAt(),or equalTo() must be a string.");
                    }
                } else if (a.g === N) {
                    if (null != b && !cf(b) || null != c && !cf(c)) throw Error("Query: When ordering by priority, the first argument passed to startAt(), endAt(), or equalTo() must be a valid priority value (null, a number, or a string).");
                } else if (H(a.g instanceof Yd || a.g === de, "unknown index type."), null != b && "object" === typeof b || null != c && "object" === typeof c) throw Error("Query: First argument passed to startAt(), endAt(), or equalTo() cannot be an object.");
            }function Wf(a) {
                if (a.ka && a.na && a.xa && (!a.xa || "" === a.mb)) throw Error("Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.");
            }function Xf(a, b) {
                if (!0 === a.Nc) throw Error(b + ": You can't combine multiple orderBy calls.");
            }g = X.prototype;g.wb = function () {
                x("Query.ref", 0, 0, arguments.length);return new U(this.u, this.path);
            };
            g.gc = function (a, b, c, d) {
                x("Query.on", 2, 4, arguments.length);jf("Query.on", a, !1);A("Query.on", 2, b, !1);var e = Yf("Query.on", c, d);if ("value" === a) Zf(this.u, this, new Tf(b, e.cancel || null, e.Ma || null));else {
                    var f = {};f[a] = b;Zf(this.u, this, new Uf(f, e.cancel, e.Ma));
                }return b;
            };
            g.Ic = function (a, b, c) {
                x("Query.off", 0, 3, arguments.length);jf("Query.off", a, !0);A("Query.off", 2, b, !0);eb("Query.off", 3, c);var d = null,
                    e = null;"value" === a ? d = new Tf(b || null, null, c || null) : a && (b && (e = {}, e[a] = b), d = new Uf(e, null, c || null));e = this.u;d = ".info" === J(this.path) ? e.pd.kb(this, d) : e.K.kb(this, d);Qb(e.ca, this.path, d);
            };
            g.$f = function (a, b) {
                function c(k) {
                    f && (f = !1, e.Ic(a, c), b && b.call(d.Ma, k), h.resolve(k));
                }x("Query.once", 1, 4, arguments.length);jf("Query.once", a, !1);A("Query.once", 2, b, !0);var d = Yf("Query.once", arguments[2], arguments[3]),
                    e = this,
                    f = !0,
                    h = new hb();jb(h.ra);this.gc(a, c, function (b) {
                    e.Ic(a, c);d.cancel && d.cancel.call(d.Ma, b);h.reject(b);
                });return h.ra;
            };
            g.le = function (a) {
                x("Query.limitToFirst", 1, 1, arguments.length);if (!ga(a) || Math.floor(a) !== a || 0 >= a) throw Error("Query.limitToFirst: First argument must be a positive integer.");if (this.m.xa) throw Error("Query.limitToFirst: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new X(this.u, this.path, this.m.le(a), this.Nc);
            };
            g.me = function (a) {
                x("Query.limitToLast", 1, 1, arguments.length);if (!ga(a) || Math.floor(a) !== a || 0 >= a) throw Error("Query.limitToLast: First argument must be a positive integer.");if (this.m.xa) throw Error("Query.limitToLast: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new X(this.u, this.path, this.m.me(a), this.Nc);
            };
            g.ag = function (a) {
                x("Query.orderByChild", 1, 1, arguments.length);if ("$key" === a) throw Error('Query.orderByChild: "$key" is invalid.  Use Query.orderByKey() instead.');if ("$priority" === a) throw Error('Query.orderByChild: "$priority" is invalid.  Use Query.orderByPriority() instead.');if ("$value" === a) throw Error('Query.orderByChild: "$value" is invalid.  Use Query.orderByValue() instead.');lf("Query.orderByChild", a);Xf(this, "Query.orderByChild");var b = new L(a);if (b.e()) throw Error("Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.");
                b = new Yd(b);b = he(this.m, b);Vf(b);return new X(this.u, this.path, b, !0);
            };g.bg = function () {
                x("Query.orderByKey", 0, 0, arguments.length);Xf(this, "Query.orderByKey");var a = he(this.m, Fd);Vf(a);return new X(this.u, this.path, a, !0);
            };g.cg = function () {
                x("Query.orderByPriority", 0, 0, arguments.length);Xf(this, "Query.orderByPriority");var a = he(this.m, N);Vf(a);return new X(this.u, this.path, a, !0);
            };
            g.dg = function () {
                x("Query.orderByValue", 0, 0, arguments.length);Xf(this, "Query.orderByValue");var a = he(this.m, de);Vf(a);return new X(this.u, this.path, a, !0);
            };g.Nd = function (a, b) {
                x("Query.startAt", 0, 2, arguments.length);df("Query.startAt", a, this.path, !0);kf("Query.startAt", b);var c = this.m.Nd(a, b);Wf(c);Vf(c);if (this.m.ka) throw Error("Query.startAt: Starting point was already set (by another call to startAt or equalTo).");n(a) || (b = a = null);return new X(this.u, this.path, c, this.Nc);
            };
            g.gd = function (a, b) {
                x("Query.endAt", 0, 2, arguments.length);df("Query.endAt", a, this.path, !0);kf("Query.endAt", b);var c = this.m.gd(a, b);Wf(c);Vf(c);if (this.m.na) throw Error("Query.endAt: Ending point was already set (by another call to endAt or equalTo).");return new X(this.u, this.path, c, this.Nc);
            };
            g.If = function (a, b) {
                x("Query.equalTo", 1, 2, arguments.length);df("Query.equalTo", a, this.path, !1);kf("Query.equalTo", b);if (this.m.ka) throw Error("Query.equalTo: Starting point was already set (by another call to endAt or equalTo).");if (this.m.na) throw Error("Query.equalTo: Ending point was already set (by another call to endAt or equalTo).");return this.Nd(a, b).gd(a, b);
            };
            g.toString = function () {
                x("Query.toString", 0, 0, arguments.length);for (var a = this.path, b = "", c = a.Y; c < a.o.length; c++) "" !== a.o[c] && (b += "/" + encodeURIComponent(String(a.o[c])));return this.u.toString() + (b || "/");
            };g.ja = function () {
                var a = Gc(ie(this.m));return "{}" === a ? "default" : a;
            };
            g.isEqual = function (a) {
                x("Query.isEqual", 1, 1, arguments.length);if (!(a instanceof X)) throw Error("Query.isEqual failed: First argument must be an instance of firebase.database.Query.");var b = this.u === a.u,
                    c = this.path.Z(a.path),
                    d = this.ja() === a.ja();return b && c && d;
            };
            function Yf(a, b, c) {
                var d = { cancel: null, Ma: null };if (b && c) d.cancel = b, A(a, 3, d.cancel, !0), d.Ma = c, eb(a, 4, d.Ma);else if (b) if ("object" === typeof b && null !== b) d.Ma = b;else if ("function" === typeof b) d.cancel = b;else throw Error(y(a, 3, !0) + " must either be a cancel callback or a context object.");return d;
            }X.prototype.on = X.prototype.gc;X.prototype.off = X.prototype.Ic;X.prototype.once = X.prototype.$f;X.prototype.limitToFirst = X.prototype.le;X.prototype.limitToLast = X.prototype.me;X.prototype.orderByChild = X.prototype.ag;
            X.prototype.orderByKey = X.prototype.bg;X.prototype.orderByPriority = X.prototype.cg;X.prototype.orderByValue = X.prototype.dg;X.prototype.startAt = X.prototype.Nd;X.prototype.endAt = X.prototype.gd;X.prototype.equalTo = X.prototype.If;X.prototype.toString = X.prototype.toString;X.prototype.isEqual = X.prototype.isEqual;Lc(X.prototype, "ref", X.prototype.wb);function $f(a, b) {
                this.value = a;this.children = b || ag;
            }var ag = new vf(function (a, b) {
                return a === b ? 0 : a < b ? -1 : 1;
            });function bg(a) {
                var b = Q;r(a, function (a, d) {
                    b = b.set(new L(d), a);
                });return b;
            }g = $f.prototype;g.e = function () {
                return null === this.value && this.children.e();
            };function cg(a, b, c) {
                if (null != a.value && c(a.value)) return { path: C, value: a.value };if (b.e()) return null;var d = J(b);a = a.children.get(d);return null !== a ? (b = cg(a, D(b), c), null != b ? { path: new L(d).n(b.path), value: b.value } : null) : null;
            }
            function dg(a, b) {
                return cg(a, b, function () {
                    return !0;
                });
            }g.subtree = function (a) {
                if (a.e()) return this;var b = this.children.get(J(a));return null !== b ? b.subtree(D(a)) : Q;
            };g.set = function (a, b) {
                if (a.e()) return new $f(b, this.children);var c = J(a),
                    d = (this.children.get(c) || Q).set(D(a), b),
                    c = this.children.Oa(c, d);return new $f(this.value, c);
            };
            g.remove = function (a) {
                if (a.e()) return this.children.e() ? Q : new $f(null, this.children);var b = J(a),
                    c = this.children.get(b);return c ? (a = c.remove(D(a)), b = a.e() ? this.children.remove(b) : this.children.Oa(b, a), null === this.value && b.e() ? Q : new $f(this.value, b)) : this;
            };g.get = function (a) {
                if (a.e()) return this.value;var b = this.children.get(J(a));return b ? b.get(D(a)) : null;
            };
            function Ed(a, b, c) {
                if (b.e()) return c;var d = J(b);b = Ed(a.children.get(d) || Q, D(b), c);d = b.e() ? a.children.remove(d) : a.children.Oa(d, b);return new $f(a.value, d);
            }function eg(a, b) {
                return fg(a, C, b);
            }function fg(a, b, c) {
                var d = {};a.children.ha(function (a, f) {
                    d[a] = fg(f, b.n(a), c);
                });return c(b, a.value, d);
            }function gg(a, b, c) {
                return hg(a, b, C, c);
            }function hg(a, b, c, d) {
                var e = a.value ? d(c, a.value) : !1;if (e) return e;if (b.e()) return null;e = J(b);return (a = a.children.get(e)) ? hg(a, D(b), c.n(e), d) : null;
            }
            function ig(a, b, c) {
                jg(a, b, C, c);
            }function jg(a, b, c, d) {
                if (b.e()) return a;a.value && d(c, a.value);var e = J(b);return (a = a.children.get(e)) ? jg(a, D(b), c.n(e), d) : Q;
            }function Cd(a, b) {
                kg(a, C, b);
            }function kg(a, b, c) {
                a.children.ha(function (a, e) {
                    kg(e, b.n(a), c);
                });a.value && c(b, a.value);
            }function lg(a, b) {
                a.children.ha(function (a, d) {
                    d.value && b(a, d.value);
                });
            }var Q = new $f(null);$f.prototype.toString = function () {
                var a = {};Cd(this, function (b, c) {
                    a[b.toString()] = c.toString();
                });return B(a);
            };function mg(a, b, c) {
                this.type = ud;this.source = ng;this.path = a;this.Ob = b;this.Id = c;
            }mg.prototype.Mc = function (a) {
                if (this.path.e()) {
                    if (null != this.Ob.value) return H(this.Ob.children.e(), "affectedTree should not have overlapping affected paths."), this;a = this.Ob.subtree(new L(a));return new mg(C, a, this.Id);
                }H(J(this.path) === a, "operationForChild called for unrelated child.");return new mg(D(this.path), this.Ob, this.Id);
            };
            mg.prototype.toString = function () {
                return "Operation(" + this.path + ": " + this.source.toString() + " ack write revert=" + this.Id + " affectedTree=" + this.Ob + ")";
            };var Bb = 0,
                Wc = 1,
                ud = 2,
                Db = 3;function og(a, b, c, d) {
                this.ce = a;this.Se = b;this.Hb = c;this.Ce = d;H(!d || b, "Tagged queries must be from server.");
            }var ng = new og(!0, !1, null, !1),
                pg = new og(!1, !0, null, !1);og.prototype.toString = function () {
                return this.ce ? "user" : this.Ce ? "server(queryID=" + this.Hb + ")" : "server";
            };function qg(a) {
                this.W = a;
            }var rg = new qg(new $f(null));function sg(a, b, c) {
                if (b.e()) return new qg(new $f(c));var d = dg(a.W, b);if (null != d) {
                    var e = d.path,
                        d = d.value;b = T(e, b);d = d.F(b, c);return new qg(a.W.set(e, d));
                }a = Ed(a.W, b, new $f(c));return new qg(a);
            }function tg(a, b, c) {
                var d = a;db(c, function (a, c) {
                    d = sg(d, b.n(a), c);
                });return d;
            }qg.prototype.Ed = function (a) {
                if (a.e()) return rg;a = Ed(this.W, a, Q);return new qg(a);
            };function ug(a, b) {
                var c = dg(a.W, b);return null != c ? a.W.get(c.path).P(T(c.path, b)) : null;
            }
            function vg(a) {
                var b = [],
                    c = a.W.value;null != c ? c.J() || c.O(N, function (a, c) {
                    b.push(new K(a, c));
                }) : a.W.children.ha(function (a, c) {
                    null != c.value && b.push(new K(a, c.value));
                });return b;
            }function wg(a, b) {
                if (b.e()) return a;var c = ug(a, b);return null != c ? new qg(new $f(c)) : new qg(a.W.subtree(b));
            }qg.prototype.e = function () {
                return this.W.e();
            };qg.prototype.apply = function (a) {
                return xg(C, this.W, a);
            };
            function xg(a, b, c) {
                if (null != b.value) return c.F(a, b.value);var d = null;b.children.ha(function (b, f) {
                    ".priority" === b ? (H(null !== f.value, "Priority writes must always be leaf nodes"), d = f.value) : c = xg(a.n(b), f, c);
                });c.P(a).e() || null === d || (c = c.F(a.n(".priority"), d));return c;
            };function yg() {
                this.za = {};
            }g = yg.prototype;g.e = function () {
                return ya(this.za);
            };g.eb = function (a, b, c) {
                var d = a.source.Hb;if (null !== d) return d = w(this.za, d), H(null != d, "SyncTree gave us an op for an invalid query."), d.eb(a, b, c);var e = [];r(this.za, function (d) {
                    e = e.concat(d.eb(a, b, c));
                });return e;
            };g.Nb = function (a, b, c, d, e) {
                var f = a.ja(),
                    h = w(this.za, f);if (!h) {
                    var h = c.Aa(e ? d : null),
                        k = !1;h ? k = !0 : (h = d instanceof P ? c.rc(d) : G, k = !1);h = new Pf(a, new yd(new $b(h, k, !1), new $b(d, e, !1)));this.za[f] = h;
                }h.Nb(b);return Sf(h, b);
            };
            g.kb = function (a, b, c) {
                var d = a.ja(),
                    e = [],
                    f = [],
                    h = null != zg(this);if ("default" === d) {
                    var k = this;r(this.za, function (a, d) {
                        f = f.concat(a.kb(b, c));a.e() && (delete k.za[d], S(a.V.m) || e.push(a.V));
                    });
                } else {
                    var l = w(this.za, d);l && (f = f.concat(l.kb(b, c)), l.e() && (delete this.za[d], S(l.V.m) || e.push(l.V)));
                }h && null == zg(this) && e.push(new U(a.u, a.path));return { hg: e, Kf: f };
            };function Ag(a) {
                return Ka(ta(a.za), function (a) {
                    return !S(a.V.m);
                });
            }g.hb = function (a) {
                var b = null;r(this.za, function (c) {
                    b = b || c.hb(a);
                });return b;
            };
            function Bg(a, b) {
                if (S(b.m)) return zg(a);var c = b.ja();return w(a.za, c);
            }function zg(a) {
                return xa(a.za, function (a) {
                    return S(a.V.m);
                }) || null;
            };function Cg() {
                this.S = rg;this.la = [];this.Bc = -1;
            }function Dg(a, b) {
                for (var c = 0; c < a.la.length; c++) {
                    var d = a.la[c];if (d.Zc === b) return d;
                }return null;
            }g = Cg.prototype;
            g.Ed = function (a) {
                var b = Pa(this.la, function (b) {
                    return b.Zc === a;
                });H(0 <= b, "removeWrite called with nonexistent writeId.");var c = this.la[b];this.la.splice(b, 1);for (var d = c.visible, e = !1, f = this.la.length - 1; d && 0 <= f;) {
                    var h = this.la[f];h.visible && (f >= b && Eg(h, c.path) ? d = !1 : c.path.contains(h.path) && (e = !0));f--;
                }if (d) {
                    if (e) this.S = Fg(this.la, Gg, C), this.Bc = 0 < this.la.length ? this.la[this.la.length - 1].Zc : -1;else if (c.Ga) this.S = this.S.Ed(c.path);else {
                        var k = this;r(c.children, function (a, b) {
                            k.S = k.S.Ed(c.path.n(b));
                        });
                    }return !0;
                }return !1;
            };
            g.Aa = function (a, b, c, d) {
                if (c || d) {
                    var e = wg(this.S, a);return !d && e.e() ? b : d || null != b || null != ug(e, C) ? (e = Fg(this.la, function (b) {
                        return (b.visible || d) && (!c || !(0 <= Ia(c, b.Zc))) && (b.path.contains(a) || a.contains(b.path));
                    }, a), b = b || G, e.apply(b)) : null;
                }e = ug(this.S, a);if (null != e) return e;e = wg(this.S, a);return e.e() ? b : null != b || null != ug(e, C) ? (b = b || G, e.apply(b)) : null;
            };
            g.rc = function (a, b) {
                var c = G,
                    d = ug(this.S, a);if (d) d.J() || d.O(N, function (a, b) {
                    c = c.T(a, b);
                });else if (b) {
                    var e = wg(this.S, a);b.O(N, function (a, b) {
                        var d = wg(e, new L(a)).apply(b);c = c.T(a, d);
                    });Ja(vg(e), function (a) {
                        c = c.T(a.name, a.R);
                    });
                } else e = wg(this.S, a), Ja(vg(e), function (a) {
                    c = c.T(a.name, a.R);
                });return c;
            };g.ad = function (a, b, c, d) {
                H(c || d, "Either existingEventSnap or existingServerSnap must exist");a = a.n(b);if (null != ug(this.S, a)) return null;a = wg(this.S, a);return a.e() ? d.P(b) : a.apply(d.P(b));
            };
            g.qc = function (a, b, c) {
                a = a.n(b);var d = ug(this.S, a);return null != d ? d : Zb(c, b) ? wg(this.S, a).apply(c.j().Q(b)) : null;
            };g.lc = function (a) {
                return ug(this.S, a);
            };g.Wd = function (a, b, c, d, e, f) {
                var h;a = wg(this.S, a);h = ug(a, C);if (null == h) if (null != b) h = a.apply(b);else return [];h = h.nb(f);if (h.e() || h.J()) return [];b = [];a = Pd(f);e = e ? h.Zb(c, f) : h.Xb(c, f);for (f = R(e); f && b.length < d;) 0 !== a(f, c) && b.push(f), f = R(e);return b;
            };
            function Eg(a, b) {
                return a.Ga ? a.path.contains(b) : !!wa(a.children, function (c, d) {
                    return a.path.n(d).contains(b);
                });
            }function Gg(a) {
                return a.visible;
            }
            function Fg(a, b, c) {
                for (var d = rg, e = 0; e < a.length; ++e) {
                    var f = a[e];if (b(f)) {
                        var h = f.path;if (f.Ga) c.contains(h) ? (h = T(c, h), d = sg(d, h, f.Ga)) : h.contains(c) && (h = T(h, c), d = sg(d, C, f.Ga.P(h)));else if (f.children) {
                            if (c.contains(h)) h = T(c, h), d = tg(d, h, f.children);else {
                                if (h.contains(c)) if (h = T(h, c), h.e()) d = tg(d, C, f.children);else if (f = w(f.children, J(h))) f = f.P(D(h)), d = sg(d, C, f);
                            }
                        } else throw sc("WriteRecord should have .snap or .children");
                    }
                }return d;
            }function Hg(a, b) {
                this.Lb = a;this.W = b;
            }g = Hg.prototype;
            g.Aa = function (a, b, c) {
                return this.W.Aa(this.Lb, a, b, c);
            };g.rc = function (a) {
                return this.W.rc(this.Lb, a);
            };g.ad = function (a, b, c) {
                return this.W.ad(this.Lb, a, b, c);
            };g.lc = function (a) {
                return this.W.lc(this.Lb.n(a));
            };g.Wd = function (a, b, c, d, e) {
                return this.W.Wd(this.Lb, a, b, c, d, e);
            };g.qc = function (a, b) {
                return this.W.qc(this.Lb, a, b);
            };g.n = function (a) {
                return new Hg(this.Lb.n(a), this.W);
            };function Ig() {
                this.children = {};this.bd = 0;this.value = null;
            }function Jg(a, b, c) {
                this.ud = a ? a : "";this.Pc = b ? b : null;this.A = c ? c : new Ig();
            }function Kg(a, b) {
                for (var c = b instanceof L ? b : new L(b), d = a, e; null !== (e = J(c));) d = new Jg(e, d, w(d.A.children, e) || new Ig()), c = D(c);return d;
            }g = Jg.prototype;g.Ca = function () {
                return this.A.value;
            };function Lg(a, b) {
                H("undefined" !== typeof b, "Cannot set value to undefined");a.A.value = b;Mg(a);
            }g.clear = function () {
                this.A.value = null;this.A.children = {};this.A.bd = 0;Mg(this);
            };
            g.kd = function () {
                return 0 < this.A.bd;
            };g.e = function () {
                return null === this.Ca() && !this.kd();
            };g.O = function (a) {
                var b = this;r(this.A.children, function (c, d) {
                    a(new Jg(d, b, c));
                });
            };function Ng(a, b, c, d) {
                c && !d && b(a);a.O(function (a) {
                    Ng(a, b, !0, d);
                });c && d && b(a);
            }function Og(a, b) {
                for (var c = a.parent(); null !== c && !b(c);) c = c.parent();
            }g.path = function () {
                return new L(null === this.Pc ? this.ud : this.Pc.path() + "/" + this.ud);
            };g.name = function () {
                return this.ud;
            };g.parent = function () {
                return this.Pc;
            };
            function Mg(a) {
                if (null !== a.Pc) {
                    var b = a.Pc,
                        c = a.ud,
                        d = a.e(),
                        e = cb(b.A.children, c);d && e ? (delete b.A.children[c], b.A.bd--, Mg(b)) : d || e || (b.A.children[c] = a.A, b.A.bd++, Mg(b));
                }
            };function Pg(a, b, c, d, e, f) {
                this.id = Qg++;this.f = yc("p:" + this.id + ":");this.qd = {};this.$ = {};this.pa = [];this.Oc = 0;this.Kc = [];this.ma = !1;this.Sa = 1E3;this.td = 3E5;this.Gb = b;this.Jc = c;this.se = d;this.L = a;this.ob = this.Fa = this.Cb = this.xe = null;this.$c = e;this.be = !1;this.ie = 0;if (f) throw Error("Auth override specified in options, but not supported on non Node.js platforms");this.Ge = f || null;this.ub = null;this.Mb = !1;this.Gd = {};this.ig = 0;this.Re = !0;this.Ac = this.ke = null;Rg(this, 0);tf.Vb().gc("visible", this.Zf, this);-1 === a.host.indexOf("fblocal") && sf.Vb().gc("online", this.Yf, this);
            }var Qg = 0,
                Sg = 0;g = Pg.prototype;g.ua = function (a, b, c) {
                var d = ++this.ig;a = { r: d, a: a, b: b };this.f(B(a));H(this.ma, "sendRequest call when we're not connected not allowed.");this.Fa.ua(a);c && (this.Gd[d] = c);
            };
            g.$e = function (a, b, c, d) {
                var e = a.ja(),
                    f = a.path.toString();this.f("Listen called for " + f + " " + e);this.$[f] = this.$[f] || {};H(Sc(a.m) || !S(a.m), "listen() called for non-default but complete query");H(!this.$[f][e], "listen() called twice for same path/queryId.");a = { G: d, ld: b, eg: a, tag: c };this.$[f][e] = a;this.ma && Tg(this, a);
            };
            function Tg(a, b) {
                var c = b.eg,
                    d = c.path.toString(),
                    e = c.ja();a.f("Listen on " + d + " for " + e);var f = { p: d };b.tag && (f.q = ie(c.m), f.t = b.tag);f.h = b.ld();a.ua("q", f, function (f) {
                    var k = f.d,
                        l = f.s;if (k && "object" === typeof k && cb(k, "w")) {
                        var m = w(k, "w");ea(m) && 0 <= Ia(m, "no_index") && O("Using an unspecified index. Consider adding " + ('".indexOn": "' + c.m.g.toString() + '"') + " at " + c.path.toString() + " to your security rules for better performance");
                    }(a.$[d] && a.$[d][e]) === b && (a.f("listen response", f), "ok" !== l && Ug(a, d, e), b.G && b.G(l, k));
                });
            }g.kf = function (a) {
                this.ob = a;this.f("Auth token refreshed");this.ob ? Vg(this) : this.ma && this.ua("unauth", {}, function () {});if (a && 40 === a.length || Pc(a)) this.f("Admin auth credential detected.  Reducing max reconnect time."), this.td = 3E4;
            };function Vg(a) {
                if (a.ma && a.ob) {
                    var b = a.ob,
                        c = Oc(b) ? "auth" : "gauth",
                        d = { cred: b };a.Ge && (d.authvar = a.Ge);a.ua(c, d, function (c) {
                        var d = c.s;c = c.d || "error";a.ob === b && ("ok" === d ? a.ie = 0 : Wg(a, d, c));
                    });
                }
            }
            g.uf = function (a, b) {
                var c = a.path.toString(),
                    d = a.ja();this.f("Unlisten called for " + c + " " + d);H(Sc(a.m) || !S(a.m), "unlisten() called for non-default but complete query");if (Ug(this, c, d) && this.ma) {
                    var e = ie(a.m);this.f("Unlisten on " + c + " for " + d);c = { p: c };b && (c.q = e, c.t = b);this.ua("n", c);
                }
            };g.pe = function (a, b, c) {
                this.ma ? Xg(this, "o", a, b, c) : this.Kc.push({ ue: a, action: "o", data: b, G: c });
            };g.cf = function (a, b, c) {
                this.ma ? Xg(this, "om", a, b, c) : this.Kc.push({ ue: a, action: "om", data: b, G: c });
            };
            g.xd = function (a, b) {
                this.ma ? Xg(this, "oc", a, null, b) : this.Kc.push({ ue: a, action: "oc", data: null, G: b });
            };function Xg(a, b, c, d, e) {
                c = { p: c, d: d };a.f("onDisconnect " + b, c);a.ua(b, c, function (a) {
                    e && setTimeout(function () {
                        e(a.s, a.d);
                    }, Math.floor(0));
                });
            }g.put = function (a, b, c, d) {
                Yg(this, "p", a, b, c, d);
            };g.af = function (a, b, c, d) {
                Yg(this, "m", a, b, c, d);
            };function Yg(a, b, c, d, e, f) {
                d = { p: c, d: d };n(f) && (d.h = f);a.pa.push({ action: b, mf: d, G: e });a.Oc++;b = a.pa.length - 1;a.ma ? Zg(a, b) : a.f("Buffering put: " + c);
            }
            function Zg(a, b) {
                var c = a.pa[b].action,
                    d = a.pa[b].mf,
                    e = a.pa[b].G;a.pa[b].fg = a.ma;a.ua(c, d, function (d) {
                    a.f(c + " response", d);delete a.pa[b];a.Oc--;0 === a.Oc && (a.pa = []);e && e(d.s, d.d);
                });
            }g.we = function (a) {
                this.ma && (a = { c: a }, this.f("reportStats", a), this.ua("s", a, function (a) {
                    "ok" !== a.s && this.f("reportStats", "Error sending stats: " + a.d);
                }));
            };
            g.wd = function (a) {
                if ("r" in a) {
                    this.f("from server: " + B(a));var b = a.r,
                        c = this.Gd[b];c && (delete this.Gd[b], c(a.b));
                } else {
                    if ("error" in a) throw "A server-side error has occurred: " + a.error;"a" in a && (b = a.a, a = a.b, this.f("handleServerMessage", b, a), "d" === b ? this.Gb(a.p, a.d, !1, a.t) : "m" === b ? this.Gb(a.p, a.d, !0, a.t) : "c" === b ? $g(this, a.p, a.q) : "ac" === b ? Wg(this, a.s, a.d) : "sd" === b ? this.xe ? this.xe(a) : "msg" in a && "undefined" !== typeof console && console.log("FIREBASE: " + a.msg.replace("\n", "\nFIREBASE: ")) : zc("Unrecognized action received from server: " + B(b) + "\nAre you using the latest client?"));
                }
            };g.Lc = function (a, b) {
                this.f("connection ready");this.ma = !0;this.Ac = new Date().getTime();this.se({ serverTimeOffset: a - new Date().getTime() });this.Cb = b;if (this.Re) {
                    var c = {};c["sdk.js." + firebase.SDK_VERSION.replace(/\./g, "-")] = 1;qb() ? c["framework.cordova"] = 1 : "object" === typeof navigator && "ReactNative" === navigator.product && (c["framework.reactnative"] = 1);this.we(c);
                }ah(this);this.Re = !1;this.Jc(!0);
            };
            function Rg(a, b) {
                H(!a.Fa, "Scheduling a connect when we're already connected/ing?");a.ub && clearTimeout(a.ub);a.ub = setTimeout(function () {
                    a.ub = null;bh(a);
                }, Math.floor(b));
            }g.Zf = function (a) {
                a && !this.Mb && this.Sa === this.td && (this.f("Window became visible.  Reducing delay."), this.Sa = 1E3, this.Fa || Rg(this, 0));this.Mb = a;
            };g.Yf = function (a) {
                a ? (this.f("Browser went online."), this.Sa = 1E3, this.Fa || Rg(this, 0)) : (this.f("Browser went offline.  Killing connection."), this.Fa && this.Fa.close());
            };
            g.df = function () {
                this.f("data client disconnected");this.ma = !1;this.Fa = null;for (var a = 0; a < this.pa.length; a++) {
                    var b = this.pa[a];b && "h" in b.mf && b.fg && (b.G && b.G("disconnect"), delete this.pa[a], this.Oc--);
                }0 === this.Oc && (this.pa = []);this.Gd = {};ch(this) && (this.Mb ? this.Ac && (3E4 < new Date().getTime() - this.Ac && (this.Sa = 1E3), this.Ac = null) : (this.f("Window isn't visible.  Delaying reconnect."), this.Sa = this.td, this.ke = new Date().getTime()), a = Math.max(0, this.Sa - (new Date().getTime() - this.ke)), a *= Math.random(), this.f("Trying to reconnect in " + a + "ms"), Rg(this, a), this.Sa = Math.min(this.td, 1.3 * this.Sa));this.Jc(!1);
            };
            function bh(a) {
                if (ch(a)) {
                    a.f("Making a connection attempt");a.ke = new Date().getTime();a.Ac = null;var b = q(a.wd, a),
                        c = q(a.Lc, a),
                        d = q(a.df, a),
                        e = a.id + ":" + Sg++,
                        f = a.Cb,
                        h = !1,
                        k = null,
                        l = function () {
                        k ? k.close() : (h = !0, d());
                    };a.Fa = { close: l, ua: function (a) {
                            H(k, "sendRequest call when we're not connected not allowed.");k.ua(a);
                        } };var m = a.be;a.be = !1;a.$c.getToken(m).then(function (l) {
                        h ? E("getToken() completed but was canceled") : (E("getToken() completed. Creating connection."), a.ob = l && l.accessToken, k = new Ce(e, a.L, b, c, d, function (b) {
                            O(b + " (" + a.L.toString() + ")");a.ab("server_kill");
                        }, f));
                    }).then(null, function (b) {
                        a.f("Failed to get token: " + b);h || l();
                    });
                }
            }g.ab = function (a) {
                E("Interrupting connection for reason: " + a);this.qd[a] = !0;this.Fa ? this.Fa.close() : (this.ub && (clearTimeout(this.ub), this.ub = null), this.ma && this.df());
            };g.kc = function (a) {
                E("Resuming connection for reason: " + a);delete this.qd[a];ya(this.qd) && (this.Sa = 1E3, this.Fa || Rg(this, 0));
            };
            function $g(a, b, c) {
                c = c ? La(c, function (a) {
                    return Gc(a);
                }).join("$") : "default";(a = Ug(a, b, c)) && a.G && a.G("permission_denied");
            }function Ug(a, b, c) {
                b = new L(b).toString();var d;n(a.$[b]) ? (d = a.$[b][c], delete a.$[b][c], 0 === ra(a.$[b]) && delete a.$[b]) : d = void 0;return d;
            }
            function Wg(a, b, c) {
                E("Auth token revoked: " + b + "/" + c);a.ob = null;a.be = !0;a.Fa.close();"invalid_token" === b && (a.ie++, 3 <= a.ie && (a.Sa = 3E4, a = a.$c, b = 'Provided authentication credentials for the app named "' + a.oc.name + '" are invalid. This usually indicates your app was not initialized correctly. ', b = "credential" in a.oc.options ? b + 'Make sure the "credential" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.' : "serviceAccount" in a.oc.options ? b + 'Make sure the "serviceAccount" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.' : b + 'Make sure the "apiKey" and "databaseURL" properties provided to initializeApp() match the values provided for your app at https://console.firebase.google.com/.', O(b)));
            }
            function ah(a) {
                Vg(a);r(a.$, function (b) {
                    r(b, function (b) {
                        Tg(a, b);
                    });
                });for (var b = 0; b < a.pa.length; b++) a.pa[b] && Zg(a, b);for (; a.Kc.length;) b = a.Kc.shift(), Xg(a, b.action, b.ue, b.data, b.G);
            }function ch(a) {
                var b;b = sf.Vb().hc;return ya(a.qd) && b;
            };var Y = { Mf: function () {
                    re = dd = !0;
                } };Y.forceLongPolling = Y.Mf;Y.Nf = function () {
                se = !0;
            };Y.forceWebSockets = Y.Nf;Y.Tf = function () {
                return cd.isAvailable();
            };Y.isWebSocketsAvailable = Y.Tf;Y.lg = function (a, b) {
                a.u.Ra.xe = b;
            };Y.setSecurityDebugCallback = Y.lg;Y.ze = function (a, b) {
                a.u.ze(b);
            };Y.stats = Y.ze;Y.Ae = function (a, b) {
                a.u.Ae(b);
            };Y.statsIncrementCounter = Y.Ae;Y.fd = function (a) {
                return a.u.fd;
            };Y.dataUpdateCount = Y.fd;Y.Sf = function (a, b) {
                a.u.he = b;
            };Y.interceptServerData = Y.Sf;function dh(a) {
                this.wa = Q;this.jb = new Cg();this.Be = {};this.ic = {};this.Cc = a;
            }function eh(a, b, c, d, e) {
                var f = a.jb,
                    h = e;H(d > f.Bc, "Stacking an older write on top of newer ones");n(h) || (h = !0);f.la.push({ path: b, Ga: c, Zc: d, visible: h });h && (f.S = sg(f.S, b, c));f.Bc = d;return e ? fh(a, new Ab(ng, b, c)) : [];
            }function gh(a, b, c, d) {
                var e = a.jb;H(d > e.Bc, "Stacking an older merge on top of newer ones");e.la.push({ path: b, children: c, Zc: d, visible: !0 });e.S = tg(e.S, b, c);e.Bc = d;c = bg(c);return fh(a, new Vc(ng, b, c));
            }
            function hh(a, b, c) {
                c = c || !1;var d = Dg(a.jb, b);if (a.jb.Ed(b)) {
                    var e = Q;null != d.Ga ? e = e.set(C, !0) : db(d.children, function (a, b) {
                        e = e.set(new L(a), b);
                    });return fh(a, new mg(d.path, e, c));
                }return [];
            }function ih(a, b, c) {
                c = bg(c);return fh(a, new Vc(pg, b, c));
            }function jh(a, b, c, d) {
                d = kh(a, d);if (null != d) {
                    var e = lh(d);d = e.path;e = e.Hb;b = T(d, b);c = new Ab(new og(!1, !0, e, !0), b, c);return mh(a, d, c);
                }return [];
            }
            function nh(a, b, c, d) {
                if (d = kh(a, d)) {
                    var e = lh(d);d = e.path;e = e.Hb;b = T(d, b);c = bg(c);c = new Vc(new og(!1, !0, e, !0), b, c);return mh(a, d, c);
                }return [];
            }
            dh.prototype.Nb = function (a, b) {
                var c = a.path,
                    d = null,
                    e = !1;ig(this.wa, c, function (a, b) {
                    var f = T(a, c);d = d || b.hb(f);e = e || null != zg(b);
                });var f = this.wa.get(c);f ? (e = e || null != zg(f), d = d || f.hb(C)) : (f = new yg(), this.wa = this.wa.set(c, f));var h;null != d ? h = !0 : (h = !1, d = G, lg(this.wa.subtree(c), function (a, b) {
                    var c = b.hb(C);c && (d = d.T(a, c));
                }));var k = null != Bg(f, a);if (!k && !S(a.m)) {
                    var l = oh(a);H(!(l in this.ic), "View does not exist, but we have a tag");var m = ph++;this.ic[l] = m;this.Be["_" + m] = l;
                }h = f.Nb(a, b, new Hg(c, this.jb), d, h);k || e || (f = Bg(f, a), h = h.concat(qh(this, a, f)));return h;
            };
            dh.prototype.kb = function (a, b, c) {
                var d = a.path,
                    e = this.wa.get(d),
                    f = [];if (e && ("default" === a.ja() || null != Bg(e, a))) {
                    f = e.kb(a, b, c);e.e() && (this.wa = this.wa.remove(d));e = f.hg;f = f.Kf;b = -1 !== Pa(e, function (a) {
                        return S(a.m);
                    });var h = gg(this.wa, d, function (a, b) {
                        return null != zg(b);
                    });if (b && !h && (d = this.wa.subtree(d), !d.e())) for (var d = rh(d), k = 0; k < d.length; ++k) {
                        var l = d[k],
                            m = l.V,
                            l = sh(this, l);this.Cc.ye(th(m), uh(this, m), l.ld, l.G);
                    }if (!h && 0 < e.length && !c) if (b) this.Cc.Od(th(a), null);else {
                        var u = this;Ja(e, function (a) {
                            a.ja();
                            var b = u.ic[oh(a)];u.Cc.Od(th(a), b);
                        });
                    }vh(this, e);
                }return f;
            };dh.prototype.Aa = function (a, b) {
                var c = this.jb,
                    d = gg(this.wa, a, function (b, c) {
                    var d = T(b, a);if (d = c.hb(d)) return d;
                });return c.Aa(a, d, b, !0);
            };function rh(a) {
                return eg(a, function (a, c, d) {
                    if (c && null != zg(c)) return [zg(c)];var e = [];c && (e = Ag(c));r(d, function (a) {
                        e = e.concat(a);
                    });return e;
                });
            }function vh(a, b) {
                for (var c = 0; c < b.length; ++c) {
                    var d = b[c];if (!S(d.m)) {
                        var d = oh(d),
                            e = a.ic[d];delete a.ic[d];delete a.Be["_" + e];
                    }
                }
            }
            function th(a) {
                return S(a.m) && !Sc(a.m) ? a.wb() : a;
            }function qh(a, b, c) {
                var d = b.path,
                    e = uh(a, b);c = sh(a, c);b = a.Cc.ye(th(b), e, c.ld, c.G);d = a.wa.subtree(d);if (e) H(null == zg(d.value), "If we're adding a query, it shouldn't be shadowed");else for (e = eg(d, function (a, b, c) {
                    if (!a.e() && b && null != zg(b)) return [Qf(zg(b))];var d = [];b && (d = d.concat(La(Ag(b), function (a) {
                        return a.V;
                    })));r(c, function (a) {
                        d = d.concat(a);
                    });return d;
                }), d = 0; d < e.length; ++d) c = e[d], a.Cc.Od(th(c), uh(a, c));return b;
            }
            function sh(a, b) {
                var c = b.V,
                    d = uh(a, c);return { ld: function () {
                        return (b.w() || G).hash();
                    }, G: function (b) {
                        if ("ok" === b) {
                            if (d) {
                                var f = c.path;if (b = kh(a, d)) {
                                    var h = lh(b);b = h.path;h = h.Hb;f = T(b, f);f = new Cb(new og(!1, !0, h, !0), f);b = mh(a, b, f);
                                } else b = [];
                            } else b = fh(a, new Cb(pg, c.path));return b;
                        }f = "Unknown Error";"too_big" === b ? f = "The data requested exceeds the maximum size that can be accessed with a single request." : "permission_denied" == b ? f = "Client doesn't have permission to access the desired data." : "unavailable" == b && (f = "The service is unavailable");f = Error(b + " at " + c.path.toString() + ": " + f);f.code = b.toUpperCase();return a.kb(c, null, f);
                    } };
            }function oh(a) {
                return a.path.toString() + "$" + a.ja();
            }function lh(a) {
                var b = a.indexOf("$");H(-1 !== b && b < a.length - 1, "Bad queryKey.");return { Hb: a.substr(b + 1), path: new L(a.substr(0, b)) };
            }function kh(a, b) {
                var c = a.Be,
                    d = "_" + b;return d in c ? c[d] : void 0;
            }function uh(a, b) {
                var c = oh(b);return w(a.ic, c);
            }var ph = 1;
            function mh(a, b, c) {
                var d = a.wa.get(b);H(d, "Missing sync point for query tag that we're tracking");return d.eb(c, new Hg(b, a.jb), null);
            }function fh(a, b) {
                return wh(a, b, a.wa, null, new Hg(C, a.jb));
            }function wh(a, b, c, d, e) {
                if (b.path.e()) return xh(a, b, c, d, e);var f = c.get(C);null == d && null != f && (d = f.hb(C));var h = [],
                    k = J(b.path),
                    l = b.Mc(k);if ((c = c.children.get(k)) && l) var m = d ? d.Q(k) : null,
                    k = e.n(k),
                    h = h.concat(wh(a, l, c, m, k));f && (h = h.concat(f.eb(b, e, d)));return h;
            }
            function xh(a, b, c, d, e) {
                var f = c.get(C);null == d && null != f && (d = f.hb(C));var h = [];c.children.ha(function (c, f) {
                    var m = d ? d.Q(c) : null,
                        u = e.n(c),
                        z = b.Mc(c);z && (h = h.concat(xh(a, z, f, m, u)));
                });f && (h = h.concat(f.eb(b, e, d)));return h;
            };function Te(a, b, c) {
                this.app = c;var d = new Eb(c);this.L = a;this.Va = $c(a);this.Vc = null;this.ca = new Nb();this.vd = 1;this.Ra = null;if (b || 0 <= ("object" === typeof window && window.navigator && window.navigator.userAgent || "").search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i)) this.va = new Qc(this.L, q(this.Gb, this), d), setTimeout(q(this.Jc, this, !0), 0);else {
                    b = c.options.databaseAuthVariableOverride || null;if (null !== b) {
                        if ("object" !== da(b)) throw Error("Only objects are supported for option databaseAuthVariableOverride");
                        try {
                            B(b);
                        } catch (e) {
                            throw Error("Invalid authOverride provided: " + e);
                        }
                    }this.va = this.Ra = new Pg(this.L, q(this.Gb, this), q(this.Jc, this), q(this.se, this), d, b);
                }var f = this;Fb(d, function (a) {
                    f.va.kf(a);
                });this.og = ad(a, q(function () {
                    return new Xc(this.Va, this.va);
                }, this));this.mc = new Jg();this.ge = new Gb();this.pd = new dh({ ye: function (a, b, c, d) {
                        b = [];c = f.ge.j(a.path);c.e() || (b = fh(f.pd, new Ab(pg, a.path, c)), setTimeout(function () {
                            d("ok");
                        }, 0));return b;
                    }, Od: ba });yh(this, "connected", !1);this.ia = new mc();this.Ya = new Se(this);this.fd = 0;this.he = null;this.K = new dh({ ye: function (a, b, c, d) {
                        f.va.$e(a, c, b, function (b, c) {
                            var e = d(b, c);Sb(f.ca, a.path, e);
                        });return [];
                    }, Od: function (a, b) {
                        f.va.uf(a, b);
                    } });
            }g = Te.prototype;g.toString = function () {
                return (this.L.Sc ? "https://" : "http://") + this.L.host;
            };g.name = function () {
                return this.L.ne;
            };function zh(a) {
                a = a.ge.j(new L(".info/serverTimeOffset")).H() || 0;return new Date().getTime() + a;
            }function Ah(a) {
                a = a = { timestamp: zh(a) };a.timestamp = a.timestamp || new Date().getTime();return a;
            }
            g.Gb = function (a, b, c, d) {
                this.fd++;var e = new L(a);b = this.he ? this.he(a, b) : b;a = [];d ? c ? (b = pa(b, function (a) {
                    return M(a);
                }), a = nh(this.K, e, b, d)) : (b = M(b), a = jh(this.K, e, b, d)) : c ? (d = pa(b, function (a) {
                    return M(a);
                }), a = ih(this.K, e, d)) : (d = M(b), a = fh(this.K, new Ab(pg, e, d)));d = e;0 < a.length && (d = Bh(this, e));Sb(this.ca, d, a);
            };g.Jc = function (a) {
                yh(this, "connected", a);!1 === a && Ch(this);
            };g.se = function (a) {
                var b = this;Ic(a, function (a, d) {
                    yh(b, d, a);
                });
            };
            function yh(a, b, c) {
                b = new L("/.info/" + b);c = M(c);var d = a.ge;d.Jd = d.Jd.F(b, c);c = fh(a.pd, new Ab(pg, b, c));Sb(a.ca, b, c);
            }g.Jb = function (a, b, c, d) {
                this.f("set", { path: a.toString(), value: b, ug: c });var e = Ah(this);b = M(b, c);var e = pc(b, e),
                    f = this.vd++,
                    e = eh(this.K, a, e, f, !0);Ob(this.ca, e);var h = this;this.va.put(a.toString(), b.H(!0), function (b, c) {
                    var e = "ok" === b;e || O("set at " + a + " failed: " + b);e = hh(h.K, f, !e);Sb(h.ca, a, e);Dh(d, b, c);
                });e = Eh(this, a);Bh(this, e);Sb(this.ca, e, []);
            };
            g.update = function (a, b, c) {
                this.f("update", { path: a.toString(), value: b });var d = !0,
                    e = Ah(this),
                    f = {};r(b, function (a, b) {
                    d = !1;var c = M(a);f[b] = pc(c, e);
                });if (d) E("update() called with empty data.  Don't do anything."), Dh(c, "ok");else {
                    var h = this.vd++,
                        k = gh(this.K, a, f, h);Ob(this.ca, k);var l = this;this.va.af(a.toString(), b, function (b, d) {
                        var e = "ok" === b;e || O("update at " + a + " failed: " + b);var e = hh(l.K, h, !e),
                            f = a;0 < e.length && (f = Bh(l, a));Sb(l.ca, f, e);Dh(c, b, d);
                    });r(b, function (b, c) {
                        var d = Eh(l, a.n(c));Bh(l, d);
                    });Sb(this.ca, a, []);
                }
            };function Ch(a) {
                a.f("onDisconnectEvents");var b = Ah(a),
                    c = [];nc(lc(a.ia, b), C, function (b, e) {
                    c = c.concat(fh(a.K, new Ab(pg, b, e)));var f = Eh(a, b);Bh(a, f);
                });a.ia = new mc();Sb(a.ca, C, c);
            }g.xd = function (a, b) {
                var c = this;this.va.xd(a.toString(), function (d, e) {
                    "ok" === d && Ze(c.ia, a);Dh(b, d, e);
                });
            };function nf(a, b, c, d) {
                var e = M(c);a.va.pe(b.toString(), e.H(!0), function (c, h) {
                    "ok" === c && oc(a.ia, b, e);Dh(d, c, h);
                });
            }
            function of(a, b, c, d, e) {
                var f = M(c, d);a.va.pe(b.toString(), f.H(!0), function (c, d) {
                    "ok" === c && oc(a.ia, b, f);Dh(e, c, d);
                });
            }function pf(a, b, c, d) {
                var e = !0,
                    f;for (f in c) e = !1;e ? (E("onDisconnect().update() called with empty data.  Don't do anything."), Dh(d, "ok")) : a.va.cf(b.toString(), c, function (e, f) {
                    if ("ok" === e) for (var l in c) {
                        var m = M(c[l]);oc(a.ia, b.n(l), m);
                    }Dh(d, e, f);
                });
            }function Zf(a, b, c) {
                c = ".info" === J(b.path) ? a.pd.Nb(b, c) : a.K.Nb(b, c);Qb(a.ca, b.path, c);
            }g.ab = function () {
                this.Ra && this.Ra.ab("repo_interrupt");
            };
            g.kc = function () {
                this.Ra && this.Ra.kc("repo_interrupt");
            };g.ze = function (a) {
                if ("undefined" !== typeof console) {
                    a ? (this.Vc || (this.Vc = new Mb(this.Va)), a = this.Vc.get()) : a = this.Va.get();var b = Ma(ua(a), function (a, b) {
                        return Math.max(b.length, a);
                    }, 0),
                        c;for (c in a) {
                        for (var d = a[c], e = c.length; e < b + 2; e++) c += " ";console.log(c + d);
                    }
                }
            };g.Ae = function (a) {
                Lb(this.Va, a);this.og.rf[a] = !0;
            };g.f = function (a) {
                var b = "";this.Ra && (b = this.Ra.id + ":");E(b, arguments);
            };
            function Dh(a, b, c) {
                a && ub(function () {
                    if ("ok" == b) a(null);else {
                        var d = (b || "error").toUpperCase(),
                            e = d;c && (e += ": " + c);e = Error(e);e.code = d;a(e);
                    }
                });
            };function Fh(a, b, c, d, e) {
                function f() {}a.f("transaction on " + b);var h = new U(a, b);h.gc("value", f);c = { path: b, update: c, G: d, status: null, ef: rc(), Fe: e, of: 0, Rd: function () {
                        h.Ic("value", f);
                    }, Td: null, Ba: null, cd: null, dd: null, ed: null };d = a.K.Aa(b, void 0) || G;c.cd = d;d = c.update(d.H());if (n(d)) {
                    ef("transaction failed: Data returned ", d, c.path);c.status = 1;e = Kg(a.mc, b);var k = e.Ca() || [];k.push(c);Lg(e, k);"object" === typeof d && null !== d && cb(d, ".priority") ? (k = w(d, ".priority"), H(cf(k), "Invalid priority returned by transaction. Priority must be a valid string, finite number, server value, or null.")) : k = (a.K.Aa(b) || G).C().H();e = Ah(a);d = M(d, k);e = pc(d, e);c.dd = d;c.ed = e;c.Ba = a.vd++;c = eh(a.K, b, e, c.Ba, c.Fe);Sb(a.ca, b, c);Gh(a);
                } else c.Rd(), c.dd = null, c.ed = null, c.G && (a = new W(c.cd, new U(a, c.path), N), c.G(null, !1, a));
            }function Gh(a, b) {
                var c = b || a.mc;b || Hh(a, c);if (null !== c.Ca()) {
                    var d = Ih(a, c);H(0 < d.length, "Sending zero length transaction queue");Na(d, function (a) {
                        return 1 === a.status;
                    }) && Jh(a, c.path(), d);
                } else c.kd() && c.O(function (b) {
                    Gh(a, b);
                });
            }
            function Jh(a, b, c) {
                for (var d = La(c, function (a) {
                    return a.Ba;
                }), e = a.K.Aa(b, d) || G, d = e, e = e.hash(), f = 0; f < c.length; f++) {
                    var h = c[f];H(1 === h.status, "tryToSendTransactionQueue_: items in queue should all be run.");h.status = 2;h.of++;var k = T(b, h.path),
                        d = d.F(k, h.dd);
                }d = d.H(!0);a.va.put(b.toString(), d, function (d) {
                    a.f("transaction put response", { path: b.toString(), status: d });var e = [];if ("ok" === d) {
                        d = [];for (f = 0; f < c.length; f++) {
                            c[f].status = 3;e = e.concat(hh(a.K, c[f].Ba));if (c[f].G) {
                                var h = c[f].ed,
                                    k = new U(a, c[f].path);d.push(q(c[f].G, null, null, !0, new W(h, k, N)));
                            }c[f].Rd();
                        }Hh(a, Kg(a.mc, b));Gh(a);Sb(a.ca, b, e);for (f = 0; f < d.length; f++) ub(d[f]);
                    } else {
                        if ("datastale" === d) for (f = 0; f < c.length; f++) c[f].status = 4 === c[f].status ? 5 : 1;else for (O("transaction at " + b.toString() + " failed: " + d), f = 0; f < c.length; f++) c[f].status = 5, c[f].Td = d;Bh(a, b);
                    }
                }, e);
            }function Bh(a, b) {
                var c = Kh(a, b),
                    d = c.path(),
                    c = Ih(a, c);Lh(a, c, d);return d;
            }
            function Lh(a, b, c) {
                if (0 !== b.length) {
                    for (var d = [], e = [], f = Ka(b, function (a) {
                        return 1 === a.status;
                    }), f = La(f, function (a) {
                        return a.Ba;
                    }), h = 0; h < b.length; h++) {
                        var k = b[h],
                            l = T(c, k.path),
                            m = !1,
                            u;H(null !== l, "rerunTransactionsUnderNode_: relativePath should not be null.");if (5 === k.status) m = !0, u = k.Td, e = e.concat(hh(a.K, k.Ba, !0));else if (1 === k.status) if (25 <= k.of) m = !0, u = "maxretry", e = e.concat(hh(a.K, k.Ba, !0));else {
                            var z = a.K.Aa(k.path, f) || G;k.cd = z;var F = b[h].update(z.H());n(F) ? (ef("transaction failed: Data returned ", F, k.path), l = M(F), "object" === typeof F && null != F && cb(F, ".priority") || (l = l.fa(z.C())), z = k.Ba, F = Ah(a), F = pc(l, F), k.dd = l, k.ed = F, k.Ba = a.vd++, Qa(f, z), e = e.concat(eh(a.K, k.path, F, k.Ba, k.Fe)), e = e.concat(hh(a.K, z, !0))) : (m = !0, u = "nodata", e = e.concat(hh(a.K, k.Ba, !0)));
                        }Sb(a.ca, c, e);e = [];m && (b[h].status = 3, setTimeout(b[h].Rd, Math.floor(0)), b[h].G && ("nodata" === u ? (k = new U(a, b[h].path), d.push(q(b[h].G, null, null, !1, new W(b[h].cd, k, N)))) : d.push(q(b[h].G, null, Error(u), !1, null))));
                    }Hh(a, a.mc);for (h = 0; h < d.length; h++) ub(d[h]);Gh(a);
                }
            }
            function Kh(a, b) {
                for (var c, d = a.mc; null !== (c = J(b)) && null === d.Ca();) d = Kg(d, c), b = D(b);return d;
            }function Ih(a, b) {
                var c = [];Mh(a, b, c);c.sort(function (a, b) {
                    return a.ef - b.ef;
                });return c;
            }function Mh(a, b, c) {
                var d = b.Ca();if (null !== d) for (var e = 0; e < d.length; e++) c.push(d[e]);b.O(function (b) {
                    Mh(a, b, c);
                });
            }function Hh(a, b) {
                var c = b.Ca();if (c) {
                    for (var d = 0, e = 0; e < c.length; e++) 3 !== c[e].status && (c[d] = c[e], d++);c.length = d;Lg(b, 0 < c.length ? c : null);
                }b.O(function (b) {
                    Hh(a, b);
                });
            }
            function Eh(a, b) {
                var c = Kh(a, b).path(),
                    d = Kg(a.mc, b);Og(d, function (b) {
                    Nh(a, b);
                });Nh(a, d);Ng(d, function (b) {
                    Nh(a, b);
                });return c;
            }
            function Nh(a, b) {
                var c = b.Ca();if (null !== c) {
                    for (var d = [], e = [], f = -1, h = 0; h < c.length; h++) 4 !== c[h].status && (2 === c[h].status ? (H(f === h - 1, "All SENT items should be at beginning of queue."), f = h, c[h].status = 4, c[h].Td = "set") : (H(1 === c[h].status, "Unexpected transaction status in abort"), c[h].Rd(), e = e.concat(hh(a.K, c[h].Ba, !0)), c[h].G && d.push(q(c[h].G, null, Error("set"), !1, null))));-1 === f ? Lg(b, null) : c.length = f + 1;Sb(a.ca, b.path(), e);for (h = 0; h < d.length; h++) ub(d[h]);
                }
            };function Ye() {
                this.lb = {};this.wf = !1;
            }Ye.prototype.ab = function () {
                for (var a in this.lb) this.lb[a].ab();
            };Ye.prototype.kc = function () {
                for (var a in this.lb) this.lb[a].kc();
            };Ye.prototype.ae = function (a) {
                this.wf = a;
            };ca(Ye);Ye.prototype.interrupt = Ye.prototype.ab;Ye.prototype.resume = Ye.prototype.kc;var Z = {};Z.nc = Pg;Z.DataConnection = Z.nc;Pg.prototype.ng = function (a, b) {
                this.ua("q", { p: a }, b);
            };Z.nc.prototype.simpleListen = Z.nc.prototype.ng;Pg.prototype.Hf = function (a, b) {
                this.ua("echo", { d: a }, b);
            };Z.nc.prototype.echo = Z.nc.prototype.Hf;Pg.prototype.interrupt = Pg.prototype.ab;Z.zf = Ce;Z.RealTimeConnection = Z.zf;Ce.prototype.sendRequest = Ce.prototype.ua;Ce.prototype.close = Ce.prototype.close;
            Z.Rf = function (a) {
                var b = Pg.prototype.put;Pg.prototype.put = function (c, d, e, f) {
                    n(f) && (f = a());b.call(this, c, d, e, f);
                };return function () {
                    Pg.prototype.put = b;
                };
            };Z.hijackHash = Z.Rf;Z.yf = Hb;Z.ConnectionTarget = Z.yf;Z.ja = function (a) {
                return a.ja();
            };Z.queryIdentifier = Z.ja;Z.Uf = function (a) {
                return a.u.Ra.$;
            };Z.listens = Z.Uf;Z.ae = function (a) {
                Ye.Vb().ae(a);
            };Z.forceRestClient = Z.ae;Z.Context = Ye;function U(a, b) {
                if (!(a instanceof Te)) throw Error("new Firebase() no longer supported - use app.database().");X.call(this, a, b, fe, !1);this.then = void 0;this["catch"] = void 0;
            }la(U, X);g = U.prototype;g.getKey = function () {
                x("Firebase.key", 0, 0, arguments.length);return this.path.e() ? null : Bd(this.path);
            };
            g.n = function (a) {
                x("Firebase.child", 1, 1, arguments.length);if (ga(a)) a = String(a);else if (!(a instanceof L)) if (null === J(this.path)) {
                    var b = a;b && (b = b.replace(/^\/*\.info(\/|$)/, "/"));lf("Firebase.child", b);
                } else lf("Firebase.child", a);return new U(this.u, this.path.n(a));
            };g.getParent = function () {
                x("Firebase.parent", 0, 0, arguments.length);var a = this.path.parent();return null === a ? null : new U(this.u, a);
            };
            g.Of = function () {
                x("Firebase.ref", 0, 0, arguments.length);for (var a = this; null !== a.getParent();) a = a.getParent();return a;
            };g.Gf = function () {
                return this.u.Ya;
            };g.set = function (a, b) {
                x("Firebase.set", 1, 2, arguments.length);mf("Firebase.set", this.path);df("Firebase.set", a, this.path, !1);A("Firebase.set", 2, b, !0);var c = new hb();this.u.Jb(this.path, a, null, ib(c, b));return c.ra;
            };
            g.update = function (a, b) {
                x("Firebase.update", 1, 2, arguments.length);mf("Firebase.update", this.path);if (ea(a)) {
                    for (var c = {}, d = 0; d < a.length; ++d) c["" + d] = a[d];a = c;O("Passing an Array to Firebase.update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.");
                }gf("Firebase.update", a, this.path);A("Firebase.update", 2, b, !0);c = new hb();this.u.update(this.path, a, ib(c, b));return c.ra;
            };
            g.Jb = function (a, b, c) {
                x("Firebase.setWithPriority", 2, 3, arguments.length);mf("Firebase.setWithPriority", this.path);df("Firebase.setWithPriority", a, this.path, !1);hf("Firebase.setWithPriority", 2, b);A("Firebase.setWithPriority", 3, c, !0);if (".length" === this.getKey() || ".keys" === this.getKey()) throw "Firebase.setWithPriority failed: " + this.getKey() + " is a read-only object.";var d = new hb();this.u.Jb(this.path, a, b, ib(d, c));return d.ra;
            };
            g.remove = function (a) {
                x("Firebase.remove", 0, 1, arguments.length);mf("Firebase.remove", this.path);A("Firebase.remove", 1, a, !0);return this.set(null, a);
            };
            g.transaction = function (a, b, c) {
                x("Firebase.transaction", 1, 3, arguments.length);mf("Firebase.transaction", this.path);A("Firebase.transaction", 1, a, !1);A("Firebase.transaction", 2, b, !0);if (n(c) && "boolean" != typeof c) throw Error(y("Firebase.transaction", 3, !0) + "must be a boolean.");if (".length" === this.getKey() || ".keys" === this.getKey()) throw "Firebase.transaction failed: " + this.getKey() + " is a read-only object.";"undefined" === typeof c && (c = !0);var d = new hb();ha(b) && jb(d.ra);Fh(this.u, this.path, a, function (a, c, h) {
                    a ? d.reject(a) : d.resolve(new pb(c, h));ha(b) && b(a, c, h);
                }, c);return d.ra;
            };g.kg = function (a, b) {
                x("Firebase.setPriority", 1, 2, arguments.length);mf("Firebase.setPriority", this.path);hf("Firebase.setPriority", 1, a);A("Firebase.setPriority", 2, b, !0);var c = new hb();this.u.Jb(this.path.n(".priority"), a, null, ib(c, b));return c.ra;
            };
            g.push = function (a, b) {
                x("Firebase.push", 0, 2, arguments.length);mf("Firebase.push", this.path);df("Firebase.push", a, this.path, !0);A("Firebase.push", 2, b, !0);var c = zh(this.u),
                    d = uf(c),
                    c = this.n(d);if (null != a) {
                    var e = this,
                        f = c.set(a, b).then(function () {
                        return e.n(d);
                    });c.then = q(f.then, f);c["catch"] = q(f.then, f, void 0);ha(b) && jb(f);
                }return c;
            };g.ib = function () {
                mf("Firebase.onDisconnect", this.path);return new V(this.u, this.path);
            };U.prototype.child = U.prototype.n;U.prototype.set = U.prototype.set;U.prototype.update = U.prototype.update;
            U.prototype.setWithPriority = U.prototype.Jb;U.prototype.remove = U.prototype.remove;U.prototype.transaction = U.prototype.transaction;U.prototype.setPriority = U.prototype.kg;U.prototype.push = U.prototype.push;U.prototype.onDisconnect = U.prototype.ib;Lc(U.prototype, "database", U.prototype.Gf);Lc(U.prototype, "key", U.prototype.getKey);Lc(U.prototype, "parent", U.prototype.getParent);Lc(U.prototype, "root", U.prototype.Of);if ("undefined" === typeof firebase) throw Error("Cannot install Firebase Database - be sure to load firebase-app.js first.");
            try {
                firebase.INTERNAL.registerService("database", function (a) {
                    var b = Ye.Vb(),
                        c = a.options.databaseURL;n(c) || Ac("Can't determine Firebase Database URL.  Be sure to include databaseURL option when calling firebase.intializeApp().");var d = Bc(c),
                        c = d.jc;Xe("Invalid Firebase Database URL", d);d.path.e() || Ac("Database URL must point to the root of a Firebase Database (not including a child path).");(d = w(b.lb, a.name)) && Ac("FIREBASE INTERNAL ERROR: Database initialized multiple times.");d = new Te(c, b.wf, a);b.lb[a.name] = d;return d.Ya;
                }, { Reference: U, Query: X, Database: Se, enableLogging: xc, INTERNAL: Y, TEST_ACCESS: Z, ServerValue: Ve });
            } catch (Oh) {
                Ac("Failed to register the Firebase Database Service (" + Oh + ")");
            };
        })();

        (function () {
            var f = function (a, b) {
                function c() {}c.prototype = b.prototype;a.prototype = new c();for (var d in b) if (Object.defineProperties) {
                    var e = Object.getOwnPropertyDescriptor(b, d);e && Object.defineProperty(a, d, e);
                } else a[d] = b[d];
            },
                g = this,
                h = function (a) {
                var b = typeof a;if ("object" == b) {
                    if (a) {
                        if (a instanceof Array) return "array";if (a instanceof Object) return b;var c = Object.prototype.toString.call(a);if ("[object Window]" == c) return "object";if ("[object Array]" == c || "number" == typeof a.length && "undefined" != typeof a.splice && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("splice")) return "array";if ("[object Function]" == c || "undefined" != typeof a.call && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("call")) return "function";
                    } else return "null";
                } else if ("function" == b && "undefined" == typeof a.call) return "object";return b;
            },
                k = function (a, b) {
                function c() {}c.prototype = b.prototype;a.B = b.prototype;a.prototype = new c();a.u = function (a, c, n) {
                    for (var d = Array(arguments.length - 2), e = 2; e < arguments.length; e++) d[e - 2] = arguments[e];
                    return b.prototype[c].apply(a, d);
                };
            };var m = {},
                p = (m["only-available-in-window"] = "This method is available in a Window context.", m["only-available-in-sw"] = "This method is available in a service worker context.", m["should-be-overriden"] = "This method should be overriden by extended classes.", m["bad-sender-id"] = "Please ensure that 'messagingSenderId' is set correctly in the options passed into firebase.initializeApp().", m["permission-default"] = "The required permissions were not granted and dismissed instead.", m["permission-blocked"] = "The required permissions were not granted and blocked instead.", m["unsupported-browser"] = "This browser doesn't support the API's required to use the firebase SDK.", m["notifications-blocked"] = "Notifications have been blocked.", m["failed-serviceworker-registration"] = "We are unable to register the default service worker. {$browserErrorMessage}", m["sw-registration-expected"] = "A service worker registration was the expected input.", m["get-subscription-failed"] = "There was an error when trying to get any existing Push Subscriptions.", m["invalid-saved-token"] = "Unable to access details of the saved token.", m["sw-reg-redundant"] = "The service worker being used for push was made redundant.", m["token-subscribe-failed"] = "A problem occured while subscribing the user to FCM: {$message}", m["token-subscribe-no-token"] = "FCM returned no token when subscribing the user to push.", m["token-subscribe-no-push-set"] = "FCM returned an invalid response when getting an FCM token.", m["use-sw-before-get-token"] = "You must call useServiceWorker() before calling getToken() to ensure your service worker is used.", m["invalid-delete-token"] = "You must pass a valid token into deleteToken(), i.e. the token from getToken().", m["delete-token-not-found"] = "The deletion attempt for token could not be performed as the token was not found.", m["bg-handler-function-expected"] = "The input to setBackgroundMessageHandler() must be a function.", m["no-window-client-to-msg"] = "An attempt was made to message a non-existant window client.", m["unable-to-resubscribe"] = "There was an error while re-subscribing the FCM token for push messaging. Will have to resubscribe the user on next visit. {$message}", m["no-fcm-token-for-resubscribe"] = "Could not find an FCM token and as a result, unable to resubscribe. Will have to resubscribe the user on next visit.", m["failed-to-delete-token"] = "Unable to delete the currently saved token.", m["no-sw-in-reg"] = "Even though the service worker registration was successful, there was a problem accessing the service worker itself.", m["incorrect-gcm-sender-id"] = "Please change your web app manifest's 'gcm_sender_id' value to '103953800507' to use Firebase messaging.", m);var q = { userVisibleOnly: !0, applicationServerKey: new Uint8Array([4, 51, 148, 247, 223, 161, 235, 177, 220, 3, 162, 94, 21, 113, 219, 72, 211, 46, 237, 237, 178, 52, 219, 183, 71, 58, 12, 143, 196, 204, 225, 111, 60, 140, 132, 223, 171, 182, 102, 62, 242, 12, 212, 139, 254, 227, 249, 118, 47, 20, 28, 99, 8, 106, 111, 45, 177, 26, 149, 176, 206, 55, 192, 156, 110]) };var r = function (a, b) {
                var c = {};return c["firebase-messaging-msg-type"] = a, c["firebase-messaging-msg-data"] = b, c;
            };var u = function (a) {
                if (Error.captureStackTrace) Error.captureStackTrace(this, u);else {
                    var b = Error().stack;b && (this.stack = b);
                }a && (this.message = String(a));
            };k(u, Error);var v = function (a, b) {
                for (var c = a.split("%s"), d = "", e = Array.prototype.slice.call(arguments, 1); e.length && 1 < c.length;) d += c.shift() + e.shift();return d + c.join("%s");
            };var w = function (a, b) {
                b.unshift(a);u.call(this, v.apply(null, b));b.shift();
            };k(w, u);var x = function (a, b, c) {
                if (!a) {
                    var d = "Assertion failed";if (b) var d = d + (": " + b),
                        e = Array.prototype.slice.call(arguments, 2);throw new w("" + d, e || []);
                }
            };var y = null;var A = function (a) {
                a = new Uint8Array(a);var b = h(a);x("array" == b || "object" == b && "number" == typeof a.length, "encodeByteArray takes an array as a parameter");if (!y) for (y = {}, b = 0; 65 > b; b++) y[b] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(b);for (var b = y, c = [], d = 0; d < a.length; d += 3) {
                    var e = a[d],
                        n = d + 1 < a.length,
                        l = n ? a[d + 1] : 0,
                        z = d + 2 < a.length,
                        t = z ? a[d + 2] : 0,
                        M = e >> 2,
                        e = (e & 3) << 4 | l >> 4,
                        l = (l & 15) << 2 | t >> 6,
                        t = t & 63;z || (t = 64, n || (l = 64));c.push(b[M], b[e], b[l], b[t]);
                }return c.join("").replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/, "");
            };var B = new firebase.INTERNAL.ErrorFactory("messaging", "Messaging", p),
                C = function () {
                this.a = null;
            },
                D = function (a) {
                if (a.a) return a.a;a.a = new Promise(function (a, c) {
                    var b = g.indexedDB.open("fcm_token_details_db", 1);b.onerror = function (a) {
                        c(a.target.error);
                    };b.onsuccess = function (b) {
                        a(b.target.result);
                    };b.onupgradeneeded = function (a) {
                        a = a.target.result.createObjectStore("fcm_token_object_Store", { keyPath: "swScope" });a.createIndex("fcmSenderId", "fcmSenderId", { unique: !1 });a.createIndex("fcmToken", "fcmToken", { unique: !0 });
                    };
                });
                return a.a;
            },
                E = function (a) {
                a.a ? a.a.then(function (b) {
                    b.close();a.a = null;
                }) : Promise.resolve();
            },
                F = function (a, b) {
                return D(a).then(function (a) {
                    return new Promise(function (c, e) {
                        var d = a.transaction(["fcm_token_object_Store"]).objectStore("fcm_token_object_Store").index("fcmToken").get(b);d.onerror = function (a) {
                            e(a.target.error);
                        };d.onsuccess = function (a) {
                            c(a.target.result);
                        };
                    });
                });
            },
                G = function (a, b) {
                return D(a).then(function (a) {
                    return new Promise(function (c, e) {
                        var d = [],
                            l = a.transaction(["fcm_token_object_Store"]).objectStore("fcm_token_object_Store").openCursor();
                        l.onerror = function (a) {
                            e(a.target.error);
                        };l.onsuccess = function (a) {
                            (a = a.target.result) ? (a.value.fcmSenderId === b && d.push(a.value), a.continue()) : c(d);
                        };
                    });
                });
            },
                H = function (a, b, c) {
                var d = A(b.getKey("p256dh")),
                    e = A(b.getKey("auth"));a = "authorized_entity=" + a + "&" + ("endpoint=" + b.endpoint + "&") + ("encryption_key=" + d + "&") + ("encryption_auth=" + e);c && (a += "&pushSet=" + c);c = new Headers();c.append("Content-Type", "application/x-www-form-urlencoded");return fetch("https://fcm.googleapis.com/fcm/connect/subscribe", { method: "POST",
                    headers: c, body: a }).then(function (a) {
                    return a.json();
                }).then(function (a) {
                    if (a.error) throw B.create("token-subscribe-failed", { message: a.error.message });if (!a.token) throw B.create("token-subscribe-no-token");if (!a.pushSet) throw B.create("token-subscribe-no-push-set");return { token: a.token, pushSet: a.pushSet };
                });
            },
                I = function (a, b, c, d, e, n) {
                var l = { swScope: c.scope, endpoint: d.endpoint, auth: A(d.getKey("auth")), p256dh: A(d.getKey("p256dh")), fcmToken: e, fcmPushSet: n, fcmSenderId: b };return D(a).then(function (a) {
                    return new Promise(function (b, c) {
                        var d = a.transaction(["fcm_token_object_Store"], "readwrite").objectStore("fcm_token_object_Store").put(l);d.onerror = function (a) {
                            c(a.target.error);
                        };d.onsuccess = function () {
                            b();
                        };
                    });
                });
            };
            C.prototype.i = function (a, b) {
                return b instanceof ServiceWorkerRegistration ? "string" !== typeof a || 0 === a.length ? Promise.reject(B.create("bad-sender-id")) : G(this, a).then(function (c) {
                    if (0 !== c.length) {
                        var d = c.findIndex(function (c) {
                            return b.scope === c.swScope && a === c.fcmSenderId;
                        });if (-1 !== d) return c[d];
                    }
                }).then(function (a) {
                    if (a) return b.pushManager.getSubscription().catch(function () {
                        throw B.create("get-subscription-failed");
                    }).then(function (b) {
                        var c;if (c = b) c = b.endpoint === a.endpoint && A(b.getKey("auth")) === a.auth && A(b.getKey("p256dh")) === a.p256dh;if (c) return a.fcmToken;
                    });
                }) : Promise.reject(B.create("sw-registration-expected"));
            };C.prototype.getSavedToken = C.prototype.i;
            C.prototype.h = function (a, b) {
                var c = this;return "string" !== typeof a || 0 === a.length ? Promise.reject(B.create("bad-sender-id")) : b instanceof ServiceWorkerRegistration ? b.pushManager.getSubscription().then(function (a) {
                    return a ? a : b.pushManager.subscribe(q);
                }).then(function (d) {
                    return H(a, d).then(function (e) {
                        return I(c, a, b, d, e.token, e.pushSet).then(function () {
                            return e.token;
                        });
                    });
                }) : Promise.reject(B.create("sw-registration-expected"));
            };C.prototype.createToken = C.prototype.h;
            C.prototype.deleteToken = function (a) {
                var b = this;return "string" !== typeof a || 0 === a.length ? Promise.reject(B.create("invalid-delete-token")) : F(this, a).then(function (a) {
                    if (!a) throw B.create("delete-token-not-found");return D(b).then(function (b) {
                        return new Promise(function (c, d) {
                            var e = b.transaction(["fcm_token_object_Store"], "readwrite").objectStore("fcm_token_object_Store").delete(a.swScope);e.onerror = function (a) {
                                d(a.target.error);
                            };e.onsuccess = function (b) {
                                0 === b.target.result ? d(B.create("failed-to-delete-token")) : c(a);
                            };
                        });
                    });
                });
            };var J = function (a) {
                var b = this;this.a = new firebase.INTERNAL.ErrorFactory("messaging", "Messaging", p);if (!a.options.messagingSenderId || "string" !== typeof a.options.messagingSenderId) throw this.a.create("bad-sender-id");this.l = a.options.messagingSenderId;this.c = new C();this.app = a;this.INTERNAL = {};this.INTERNAL.delete = function () {
                    return b.delete;
                };
            };
            J.prototype.getToken = function () {
                var a = this,
                    b = Notification.permission;return "granted" !== b ? "denied" === b ? Promise.reject(this.a.create("notifications-blocked")) : Promise.resolve(null) : this.f().then(function (b) {
                    return a.c.i(a.l, b).then(function (c) {
                        return c ? c : a.c.h(a.l, b);
                    });
                });
            };J.prototype.getToken = J.prototype.getToken;J.prototype.deleteToken = function (a) {
                var b = this;return this.c.deleteToken(a).then(function () {
                    return b.f();
                }).then(function (a) {
                    return a ? a.pushManager.getSubscription() : null;
                }).then(function (a) {
                    if (a) return a.unsubscribe();
                });
            };
            J.prototype.deleteToken = J.prototype.deleteToken;J.prototype.f = function () {
                throw this.a.create("should-be-overriden");
            };J.prototype.requestPermission = function () {
                throw this.a.create("only-available-in-window");
            };J.prototype.useServiceWorker = function () {
                throw this.a.create("only-available-in-window");
            };J.prototype.useServiceWorker = J.prototype.useServiceWorker;J.prototype.onMessage = function () {
                throw this.a.create("only-available-in-window");
            };J.prototype.onMessage = J.prototype.onMessage;
            J.prototype.onTokenRefresh = function () {
                throw this.a.create("only-available-in-window");
            };J.prototype.onTokenRefresh = J.prototype.onTokenRefresh;J.prototype.setBackgroundMessageHandler = function () {
                throw this.a.create("only-available-in-sw");
            };J.prototype.setBackgroundMessageHandler = J.prototype.setBackgroundMessageHandler;J.prototype.delete = function () {
                E(this.c);
            };var K = self,
                P = function (a) {
                J.call(this, a);var b = this;this.a = new firebase.INTERNAL.ErrorFactory("messaging", "Messaging", p);K.addEventListener("push", function (a) {
                    return L(b, a);
                }, !1);K.addEventListener("pushsubscriptionchange", function (a) {
                    return N(b, a);
                }, !1);K.addEventListener("notificationclick", function (a) {
                    return O(b, a);
                }, !1);this.b = null;
            };f(P, J);
            var L = function (a, b) {
                var c;try {
                    c = b.data.json();
                } catch (e) {
                    return;
                }var d = Q().then(function (b) {
                    if (b) {
                        if (c.notification || a.b) return R(a, c);
                    } else {
                        if ((b = c) && "object" === typeof b.notification) {
                            var d = Object.assign({}, b.notification),
                                e = {};d.data = (e.FCM_MSG = b, e);b = d;
                        } else b = void 0;if (b) return K.registration.showNotification(b.title || "", b);if (a.b) return a.b(c);
                    }
                });b.waitUntil(d);
            },
                N = function (a, b) {
                var c = a.getToken().then(function (b) {
                    if (!b) throw a.a.create("no-fcm-token-for-resubscribe");var c = a.c;return F(c, b).then(function (b) {
                        if (!b) throw a.a.create("invalid-saved-token");
                        return K.registration.pushManager.subscribe(q).then(function (a) {
                            return H(b.w, a, b.v);
                        }).catch(function (d) {
                            return c.deleteToken(b.A).then(function () {
                                throw a.a.create("unable-to-resubscribe", { message: d });
                            });
                        });
                    });
                });b.waitUntil(c);
            },
                O = function (a, b) {
                if (b.notification && b.notification.data && b.notification.data.FCM_MSG) {
                    b.stopImmediatePropagation();b.notification.close();var c = b.notification.data.FCM_MSG,
                        d = c.notification.click_action;if (d) {
                        var e = S(d).then(function (a) {
                            return a ? a : K.clients.openWindow(d);
                        }).then(function (b) {
                            if (b) return delete c.notification, T(a, b, r("notification-clicked", c));
                        });b.waitUntil(e);
                    }
                }
            };P.prototype.setBackgroundMessageHandler = function (a) {
                if (a && "function" !== typeof a) throw this.a.create("bg-handler-function-expected");this.b = a;
            };P.prototype.setBackgroundMessageHandler = P.prototype.setBackgroundMessageHandler;
            var S = function (a) {
                var b = new URL(a).href;return K.clients.matchAll({ type: "window", includeUncontrolled: !0 }).then(function (a) {
                    for (var c = null, e = 0; e < a.length; e++) if (new URL(a[e].url).href === b) {
                        c = a[e];break;
                    }if (c) return c.focus(), c;
                });
            },
                T = function (a, b, c) {
                return new Promise(function (d, e) {
                    if (!b) return e(a.a.create("no-window-client-to-msg"));b.postMessage(c);d();
                });
            },
                Q = function () {
                return K.clients.matchAll({ type: "window", includeUncontrolled: !0 }).then(function (a) {
                    return a.some(function (a) {
                        return "visible" === a.visibilityState;
                    });
                });
            },
                R = function (a, b) {
                return K.clients.matchAll({ type: "window", includeUncontrolled: !0 }).then(function (c) {
                    var d = r("push-msg-received", b);return Promise.all(c.map(function (b) {
                        return T(a, b, d);
                    }));
                });
            };P.prototype.f = function () {
                return Promise.resolve(K.registration);
            };var V = function (a) {
                J.call(this, a);var b = this;this.j = null;this.m = firebase.INTERNAL.createSubscribe(function (a) {
                    b.j = a;
                });this.s = null;this.o = firebase.INTERNAL.createSubscribe(function (a) {
                    b.s = a;
                });U(this);
            };f(V, J);
            V.prototype.getToken = function () {
                var a = this;return "serviceWorker" in navigator && "PushManager" in window && "Notification" in window && ServiceWorkerRegistration.prototype.hasOwnProperty("showNotification") && PushSubscription.prototype.hasOwnProperty("getKey") ? W(this).then(function () {
                    return J.prototype.getToken.call(a);
                }) : Promise.reject(this.a.create("unsupported-browser"));
            };V.prototype.getToken = V.prototype.getToken;
            var W = function (a) {
                if (a.g) return a.g;var b = document.querySelector('link[rel="manifest"]');b ? a.g = fetch(b.href).then(function (a) {
                    return a.json();
                }).catch(function () {
                    return Promise.resolve();
                }).then(function (b) {
                    if (b && b.gcm_sender_id && "103953800507" !== b.gcm_sender_id) throw a.a.create("incorrect-gcm-sender-id");
                }) : a.g = Promise.resolve();return a.g;
            };
            V.prototype.requestPermission = function () {
                var a = this;return "granted" === Notification.permission ? Promise.resolve() : new Promise(function (b, c) {
                    var d = function (d) {
                        return "granted" === d ? b() : "denied" === d ? c(a.a.create("permission-blocked")) : c(a.a.create("permission-default"));
                    },
                        e = Notification.requestPermission(function (a) {
                        e || d(a);
                    });e && e.then(d);
                });
            };V.prototype.requestPermission = V.prototype.requestPermission;
            V.prototype.useServiceWorker = function (a) {
                if (!(a instanceof ServiceWorkerRegistration)) throw this.a.create("sw-registration-expected");if ("undefined" !== typeof this.b) throw this.a.create("use-sw-before-get-token");this.b = a;
            };V.prototype.useServiceWorker = V.prototype.useServiceWorker;V.prototype.onMessage = function (a, b, c) {
                return this.m(a, b, c);
            };V.prototype.onMessage = V.prototype.onMessage;V.prototype.onTokenRefresh = function (a, b, c) {
                return this.o(a, b, c);
            };V.prototype.onTokenRefresh = V.prototype.onTokenRefresh;
            var X = function (a, b) {
                var c = b.installing || b.waiting || b.active;return new Promise(function (d, e) {
                    if (c) {
                        if ("activated" === c.state) d(b);else if ("redundant" === c.state) e(a.a.create("sw-reg-redundant"));else {
                            var n = function () {
                                if ("activated" === c.state) d(b);else if ("redundant" === c.state) e(a.a.create("sw-reg-redundant"));else return;c.removeEventListener("statechange", n);
                            };c.addEventListener("statechange", n);
                        }
                    } else e(a.a.create("no-sw-in-reg"));
                });
            };
            V.prototype.f = function () {
                var a = this;if (this.b) return X(this, this.b);this.b = null;return navigator.serviceWorker.register("/firebase-messaging-sw.js", { scope: "/firebase-cloud-messaging-push-scope" }).catch(function (b) {
                    throw a.a.create("failed-serviceworker-registration", { browserErrorMessage: b.message });
                }).then(function (b) {
                    return X(a, b).then(function () {
                        a.b = b;b.update();return b;
                    });
                });
            };
            var U = function (a) {
                "serviceWorker" in navigator && navigator.serviceWorker.addEventListener("message", function (b) {
                    if (b.data && b.data["firebase-messaging-msg-type"]) switch (b = b.data, b["firebase-messaging-msg-type"]) {case "push-msg-received":case "notification-clicked":
                            a.j.next(b["firebase-messaging-msg-data"]);}
                }, !1);
            };if (!(firebase && firebase.INTERNAL && firebase.INTERNAL.registerService)) throw Error("Cannot install Firebase Messaging - be sure to load firebase-app.js first.");firebase.INTERNAL.registerService("messaging", function (a) {
                return self && "ServiceWorkerGlobalScope" in self ? new P(a) : new V(a);
            }, { Messaging: V });
        }).call(this);
        (function () {
            for (var k, aa = "function" == typeof Object.defineProperties ? Object.defineProperty : function (a, b, c) {
                if (c.get || c.set) throw new TypeError("ES3 does not support getters and setters.");a != Array.prototype && a != Object.prototype && (a[b] = c.value);
            }, l = "undefined" != typeof window && window === this ? this : "undefined" != typeof global && null != global ? global : this, m = ["Number", "MIN_SAFE_INTEGER"], ba = 0; ba < m.length - 1; ba++) {
                var ca = m[ba];ca in l || (l[ca] = {});l = l[ca];
            }var da = m[m.length - 1];
            -9007199254740991 != l[da] && aa(l, da, { configurable: !0, writable: !0, value: -9007199254740991 });
            var n = this,
                q = function (a) {
                return void 0 !== a;
            },
                ea = function (a) {
                var b = typeof a;if ("object" == b) {
                    if (a) {
                        if (a instanceof Array) return "array";if (a instanceof Object) return b;var c = Object.prototype.toString.call(a);if ("[object Window]" == c) return "object";if ("[object Array]" == c || "number" == typeof a.length && "undefined" != typeof a.splice && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("splice")) return "array";if ("[object Function]" == c || "undefined" != typeof a.call && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("call")) return "function";
                    } else return "null";
                } else if ("function" == b && "undefined" == typeof a.call) return "object";return b;
            };var r = function (a, b) {
                return -1 !== a.indexOf(b);
            };var fa = function (a, b, c) {
                function d() {
                    z || (z = !0, b.apply(null, arguments));
                }function e(b) {
                    p = setTimeout(function () {
                        p = null;a(g, 2 === C);
                    }, b);
                }function g(a, b) {
                    if (!z) if (a) d.apply(null, arguments);else if (2 === C || B) d.apply(null, arguments);else {
                        64 > h && (h *= 2);var c;1 === C ? (C = 2, c = 0) : c = 1E3 * (h + Math.random());e(c);
                    }
                }function f(a) {
                    Ma || (Ma = !0, z || (null !== p ? (a || (C = 2), clearTimeout(p), e(0)) : a || (C = 1)));
                }var h = 1,
                    p = null,
                    B = !1,
                    C = 0,
                    z = !1,
                    Ma = !1;e(0);setTimeout(function () {
                    B = !0;f(!0);
                }, c);return f;
            };var t = "https://firebasestorage.googleapis.com";var u = function (a, b) {
                this.code = "storage/" + a;this.message = "Firebase Storage: " + b;this.serverResponse = null;this.name = "FirebaseError";
            };(function () {
                var a = Error;function b() {}b.prototype = a.prototype;u.b = a.prototype;u.prototype = new b();u.a = function (b, d, e) {
                    for (var c = Array(arguments.length - 2), f = 2; f < arguments.length; f++) c[f - 2] = arguments[f];return a.prototype[d].apply(b, c);
                };
            })();
            var ga = function () {
                return new u("unknown", "An unknown error occurred, please check the error payload for server response.");
            },
                ha = function () {
                return new u("canceled", "User canceled the upload/download.");
            },
                ia = function () {
                return new u("cannot-slice-blob", "Cannot slice blob for upload. Please retry the upload.");
            },
                ja = function (a, b, c) {
                return new u("invalid-argument", "Invalid argument in `" + b + "` at index " + a + ": " + c);
            },
                ka = function () {
                return new u("app-deleted", "The Firebase app was deleted.");
            },
                v = function (a, b) {
                return new u("invalid-format", "String does not match format '" + a + "': " + b);
            },
                la = function (a) {
                throw new u("internal-error", "Internal error: " + a);
            };var ma = function (a, b) {
                for (var c in a) Object.prototype.hasOwnProperty.call(a, c) && b(c, a[c]);
            },
                na = function (a) {
                var b = {};ma(a, function (a, d) {
                    b[a] = d;
                });return b;
            };var oa = function (a, b) {
                b = b.split("/").filter(function (a) {
                    return 0 < a.length;
                }).join("/");return 0 === a.length ? b : a + "/" + b;
            },
                pa = function (a) {
                var b = a.lastIndexOf("/", a.length - 2);return -1 === b ? a : a.slice(b + 1);
            };var qa = function (a) {
                if ("undefined" !== typeof firebase) return new firebase.Promise(a);throw Error("Error in Firebase Storage - be sure to load firebase-app.js first.");
            };var w = function (a, b, c, d) {
                this.h = a;this.b = {};this.method = b;this.headers = {};this.body = null;this.j = c;this.l = this.a = null;this.c = [200];this.g = [];this.timeout = d;this.f = !0;
            };var ra = { STATE_CHANGED: "state_changed" },
                x = { RUNNING: "running", PAUSED: "paused", SUCCESS: "success", CANCELED: "canceled", ERROR: "error" },
                sa = function (a) {
                switch (a) {case "running":case "pausing":case "canceling":
                        return "running";case "paused":
                        return "paused";case "success":
                        return "success";case "canceled":
                        return "canceled";case "error":
                        return "error";default:
                        return "error";}
            };var y = function (a) {
                return q(a) && null !== a;
            },
                ta = function (a) {
                return "string" === typeof a || a instanceof String;
            },
                ua = function () {
                return "undefined" !== typeof Blob;
            };var wa = function (a, b) {
                var c = va;return Object.prototype.hasOwnProperty.call(c, a) ? c[a] : c[a] = b(a);
            };var xa = String.prototype.trim ? function (a) {
                return a.trim();
            } : function (a) {
                return a.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
            },
                ya = function (a, b) {
                return a < b ? -1 : a > b ? 1 : 0;
            };var A = function (a) {
                return function () {
                    var b = [];Array.prototype.push.apply(b, arguments);firebase.Promise.resolve(!0).then(function () {
                        a.apply(null, b);
                    });
                };
            };var D = function (a, b) {
                this.bucket = a;this.path = b;
            },
                za = function (a) {
                var b = encodeURIComponent;return "/b/" + b(a.bucket) + "/o/" + b(a.path);
            },
                Ba = function (a) {
                var b;try {
                    b = Aa(a);
                } catch (c) {
                    return new D(a, "");
                }if ("" === b.path) return b;throw new u("invalid-default-bucket", "Invalid default bucket '" + a + "'.");
            },
                Aa = function (a) {
                for (var b = null, c = [{ K: /^gs:\/\/([A-Za-z0-9.\-]+)(\/(.*))?$/i, G: { bucket: 1, path: 3 }, J: function (a) {
                        "/" === a.path.charAt(a.path.length - 1) && (a.path = a.path.slice(0, -1));
                    } }, { K: /^https?:\/\/firebasestorage\.googleapis\.com\/v[A-Za-z0-9_]+\/b\/([A-Za-z0-9.\-]+)\/o(\/([^?#]*).*)?$/i,
                    G: { bucket: 1, path: 3 }, J: function (a) {
                        a.path = decodeURIComponent(a.path);
                    } }], d = 0; d < c.length; d++) {
                    var e = c[d],
                        g = e.K.exec(a);if (g) {
                        b = g[e.G.bucket];(g = g[e.G.path]) || (g = "");b = new D(b, g);e.J(b);break;
                    }
                }if (null == b) throw new u("invalid-url", "Invalid URL '" + a + "'.");return b;
            };var Ca = function (a, b, c) {
                "function" == ea(a) || y(b) || y(c) ? (this.b = a, this.error = b || null, this.a = c || null) : (this.b = a.next || null, this.error = a.error || null, this.a = a.complete || null);
            };var E = { RAW: "raw", BASE64: "base64", BASE64URL: "base64url", DATA_URL: "data_url" },
                Da = function (a) {
                switch (a) {case "raw":case "base64":case "base64url":case "data_url":
                        break;default:
                        throw "Expected one of the event types: [raw, base64, base64url, data_url].";}
            },
                Ea = function (a, b) {
                this.data = a;this.a = b || null;
            },
                Ia = function (a, b) {
                switch (a) {case "raw":
                        return new Ea(Fa(b));case "base64":case "base64url":
                        return new Ea(Ga(a, b));case "data_url":
                        a = new Ha(b);var c;if (a.a) c = Ga("base64", a.c);else {
                            try {
                                c = decodeURIComponent(a.c);
                            } catch (d) {
                                throw v("data_url", "Malformed data URL.");
                            }c = Fa(c);
                        }return new Ea(c, new Ha(b).b);}throw ga();
            },
                Fa = function (a) {
                for (var b = [], c = 0; c < a.length; c++) {
                    var d = a.charCodeAt(c);if (127 >= d) b.push(d);else if (2047 >= d) b.push(192 | d >> 6, 128 | d & 63);else if (55296 == (d & 64512)) {
                        if (c < a.length - 1 && 56320 == (a.charCodeAt(c + 1) & 64512)) {
                            var e = a.charCodeAt(++c),
                                d = 65536 | (d & 1023) << 10 | e & 1023;b.push(240 | d >> 18, 128 | d >> 12 & 63, 128 | d >> 6 & 63, 128 | d & 63);
                        } else b.push(239, 191, 189);
                    } else 56320 == (d & 64512) ? b.push(239, 191, 189) : b.push(224 | d >> 12, 128 | d >> 6 & 63, 128 | d & 63);
                }return new Uint8Array(b);
            },
                Ga = function (a, b) {
                switch (a) {case "base64":
                        var c = -1 !== b.indexOf("-"),
                            d = -1 !== b.indexOf("_");if (c || d) throw v(a, "Invalid character '" + (c ? "-" : "_") + "' found: is it base64url encoded?");break;case "base64url":
                        c = -1 !== b.indexOf("+");d = -1 !== b.indexOf("/");if (c || d) throw v(a, "Invalid character '" + (c ? "+" : "/") + "' found: is it base64 encoded?");b = b.replace(/-/g, "+").replace(/_/g, "/");}var e;try {
                    e = atob(b);
                } catch (g) {
                    throw v(a, "Invalid character found");
                }a = new Uint8Array(e.length);for (b = 0; b < e.length; b++) a[b] = e.charCodeAt(b);
                return a;
            },
                Ha = function (a) {
                var b = a.match(/^data:([^,]+)?,/);if (null === b) throw v("data_url", "Must be formatted 'data:[<mediatype>][;base64],<data>");b = b[1] || null;this.a = !1;this.b = null;if (null != b) {
                    var c = b.length - 7;this.b = (this.a = 0 <= c && b.indexOf(";base64", c) == c) ? b.substring(0, b.length - 7) : b;
                }this.c = a.substring(a.indexOf(",") + 1);
            };var Ja = function (a) {
                var b = encodeURIComponent,
                    c = "?";ma(a, function (a, e) {
                    a = b(a) + "=" + b(e);c = c + a + "&";
                });return c = c.slice(0, -1);
            };var Ka = function () {
                var a = this;this.a = new XMLHttpRequest();this.c = 0;this.f = qa(function (b) {
                    a.a.addEventListener("abort", function () {
                        a.c = 2;b(a);
                    });a.a.addEventListener("error", function () {
                        a.c = 1;b(a);
                    });a.a.addEventListener("load", function () {
                        b(a);
                    });
                });this.b = !1;
            },
                La = function (a, b, c, d, e) {
                if (a.b) throw la("cannot .send() more than once");a.b = !0;a.a.open(c, b, !0);y(e) && ma(e, function (b, c) {
                    a.a.setRequestHeader(b, c.toString());
                });y(d) ? a.a.send(d) : a.a.send();return a.f;
            },
                Na = function (a) {
                if (!a.b) throw la("cannot .getErrorCode() before sending");
                return a.c;
            },
                F = function (a) {
                if (!a.b) throw la("cannot .getStatus() before sending");try {
                    return a.a.status;
                } catch (b) {
                    return -1;
                }
            },
                Oa = function (a) {
                if (!a.b) throw la("cannot .getResponseText() before sending");return a.a.responseText;
            };Ka.prototype.abort = function () {
                this.a.abort();
            };var G = function (a, b, c, d, e, g) {
                this.b = a;this.h = b;this.f = c;this.a = d;this.g = e;this.c = g;
            };k = G.prototype;k.V = function () {
                return this.b;
            };k.qa = function () {
                return this.h;
            };k.na = function () {
                return this.f;
            };k.ia = function () {
                return this.a;
            };k.W = function () {
                if (y(this.a)) {
                    var a = this.a.downloadURLs;return y(a) && y(a[0]) ? a[0] : null;
                }return null;
            };k.pa = function () {
                return this.g;
            };k.la = function () {
                return this.c;
            };var H;a: {
                var Pa = n.navigator;if (Pa) {
                    var Qa = Pa.userAgent;if (Qa) {
                        H = Qa;break a;
                    }
                }H = "";
            };var Sa = function (a, b, c, d, e, g, f, h, p, B, C) {
                this.C = a;this.A = b;this.v = c;this.o = d;this.B = e.slice();this.m = g.slice();this.j = this.l = this.c = this.b = null;this.f = this.g = !1;this.s = f;this.h = h;this.D = C;this.w = p;var z = this;this.u = qa(function (a, b) {
                    z.l = a;z.j = b;Ra(z);
                });
            },
                Ta = function (a, b, c) {
                this.b = a;this.c = b;this.a = !!c;
            },
                Ra = function (a) {
                function b(a, b) {
                    b ? a(!1, new Ta(!1, null, !0)) : (b = new Ka(), b.a.withCredentials = d.D, d.b = b, La(b, d.C, d.A, d.o, d.v).then(function (b) {
                        d.b = null;var c = 0 === Na(b),
                            e = F(b);if (!(c = !c)) var c = r([408, 429], e),
                            g = r(d.m, e),
                            c = 500 <= e && 600 > e || c || g;c ? (b = 2 === Na(b), a(!1, new Ta(!1, null, b))) : a(!0, new Ta(r(d.B, e), b));
                    }));
                }function c(a, b) {
                    var c = d.l;a = d.j;var e = b.c;if (b.b) try {
                        var g = d.s(e, Oa(e));q(g) ? c(g) : c();
                    } catch (B) {
                        a(B);
                    } else null !== e ? (b = ga(), g = Oa(e), b.serverResponse = g, d.h ? a(d.h(e, b)) : a(b)) : (b = b.a ? d.f ? ka() : ha() : new u("retry-limit-exceeded", "Max retry time for operation exceeded, please try again."), a(b));
                }var d = a;a.g ? c(0, new Ta(!1, null, !0)) : a.c = fa(b, c, a.w);
            };Sa.prototype.a = function () {
                return this.u;
            };
            Sa.prototype.cancel = function (a) {
                this.g = !0;this.f = a || !1;null !== this.c && (0, this.c)(!1);null !== this.b && this.b.abort();
            };var Ua = function (a, b, c) {
                var d = Ja(a.b),
                    d = a.h + d,
                    e = a.headers ? na(a.headers) : {};null !== b && 0 < b.length && (e.Authorization = "Firebase " + b);e["X-Firebase-Storage-Version"] = "webjs/" + ("undefined" !== typeof firebase ? firebase.SDK_VERSION : "AppManager");return new Sa(d, a.method, e, a.body, a.c, a.g, a.j, a.a, a.timeout, 0, c);
            };var Va = function () {};var Wa = function (a) {
                this.b = firebase.Promise.reject(a);
            };Wa.prototype.a = function () {
                return this.b;
            };Wa.prototype.cancel = function () {};var Xa = function () {
                this.a = {};this.b = Number.MIN_SAFE_INTEGER;
            },
                Ya = function (a, b) {
                function c() {
                    delete e.a[d];
                }var d = a.b;a.b++;a.a[d] = b;var e = a;b.a().then(c, c);
            },
                Za = function (a) {
                ma(a.a, function (a, c) {
                    c && c.cancel(!0);
                });a.a = {};
            };var $a = function (a, b, c, d, e) {
                this.a = a;this.g = null;null !== this.a && (a = this.a.options, y(a) && (a = a.storageBucket || null, this.g = null == a ? null : Ba(a).bucket));this.o = b;this.m = c;this.j = e;this.l = d;this.c = 12E4;this.b = 6E4;this.h = new Xa();this.f = !1;
            },
                ab = function (a) {
                return null !== a.a && y(a.a.INTERNAL) && y(a.a.INTERNAL.getToken) ? a.a.INTERNAL.getToken().then(function (a) {
                    return y(a) ? a.accessToken : null;
                }, function () {
                    return null;
                }) : firebase.Promise.resolve(null);
            };$a.prototype.bucket = function () {
                if (this.f) throw ka();return this.g;
            };
            var I = function (a, b, c) {
                if (a.f) return new Wa(ka());b = a.m(b, c, null === a.a, a.j);Ya(a.h, b);return b;
            };var bb = -1 != H.indexOf("Opera"),
                cb = -1 != H.indexOf("Trident") || -1 != H.indexOf("MSIE"),
                db = -1 != H.indexOf("Edge"),
                eb = -1 != H.indexOf("Gecko") && !(-1 != H.toLowerCase().indexOf("webkit") && -1 == H.indexOf("Edge")) && !(-1 != H.indexOf("Trident") || -1 != H.indexOf("MSIE")) && -1 == H.indexOf("Edge"),
                fb = -1 != H.toLowerCase().indexOf("webkit") && -1 == H.indexOf("Edge"),
                gb;
            a: {
                var hb = "",
                    ib = function () {
                    var a = H;if (eb) return (/rv\:([^\);]+)(\)|;)/.exec(a)
                    );if (db) return (/Edge\/([\d\.]+)/.exec(a)
                    );if (cb) return (/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a)
                    );if (fb) return (/WebKit\/(\S+)/.exec(a)
                    );if (bb) return (/(?:Version)[ \/]?(\S+)/.exec(a)
                    );
                }();ib && (hb = ib ? ib[1] : "");if (cb) {
                    var jb,
                        kb = n.document;jb = kb ? kb.documentMode : void 0;if (null != jb && jb > parseFloat(hb)) {
                        gb = String(jb);break a;
                    }
                }gb = hb;
            }
            var lb = gb,
                va = {},
                mb = function (a) {
                return wa(a, function () {
                    for (var b = 0, c = xa(String(lb)).split("."), d = xa(String(a)).split("."), e = Math.max(c.length, d.length), g = 0; 0 == b && g < e; g++) {
                        var f = c[g] || "",
                            h = d[g] || "";do {
                            f = /(\d*)(\D*)(.*)/.exec(f) || ["", "", "", ""];h = /(\d*)(\D*)(.*)/.exec(h) || ["", "", "", ""];if (0 == f[0].length && 0 == h[0].length) break;b = ya(0 == f[1].length ? 0 : parseInt(f[1], 10), 0 == h[1].length ? 0 : parseInt(h[1], 10)) || ya(0 == f[2].length, 0 == h[2].length) || ya(f[2], h[2]);f = f[3];h = h[3];
                        } while (0 == b);
                    }return 0 <= b;
                });
            };var nb = function (a) {
                var b = n.BlobBuilder || n.WebKitBlobBuilder;if (q(b)) {
                    for (var b = new b(), c = 0; c < arguments.length; c++) b.append(arguments[c]);return b.getBlob();
                }b = Array.prototype.slice.call(arguments);c = n.BlobBuilder || n.WebKitBlobBuilder;if (q(c)) {
                    for (var c = new c(), d = 0; d < b.length; d++) c.append(b[d], void 0);b = c.getBlob(void 0);
                } else if (q(n.Blob)) b = new Blob(b, {});else throw Error("This browser doesn't seem to support creating Blobs");return b;
            },
                ob = function (a, b, c) {
                q(c) || (c = a.size);return a.webkitSlice ? a.webkitSlice(b, c) : a.mozSlice ? a.mozSlice(b, c) : a.slice ? eb && !mb("13.0") || fb && !mb("537.1") ? (0 > b && (b += a.size), 0 > b && (b = 0), 0 > c && (c += a.size), c < b && (c = b), a.slice(b, c - b)) : a.slice(b, c) : null;
            };var pb = function (a, b) {
                return b;
            },
                J = function (a, b, c, d) {
                this.c = a;this.b = b || a;this.writable = !!c;this.a = d || pb;
            },
                qb = null,
                rb = function () {
                if (qb) return qb;var a = [];a.push(new J("bucket"));a.push(new J("generation"));a.push(new J("metageneration"));a.push(new J("name", "fullPath", !0));var b = new J("name");b.a = function (a, b) {
                    return !ta(b) || 2 > b.length ? b : pa(b);
                };a.push(b);b = new J("size");b.a = function (a, b) {
                    return y(b) ? +b : b;
                };a.push(b);a.push(new J("timeCreated"));a.push(new J("updated"));a.push(new J("md5Hash", null, !0));
                a.push(new J("cacheControl", null, !0));a.push(new J("contentDisposition", null, !0));a.push(new J("contentEncoding", null, !0));a.push(new J("contentLanguage", null, !0));a.push(new J("contentType", null, !0));a.push(new J("metadata", "customMetadata", !0));a.push(new J("downloadTokens", "downloadURLs", !1, function (a, b) {
                    if (!(ta(b) && 0 < b.length)) return [];var c = encodeURIComponent;return b.split(",").map(function (b) {
                        var d = a.fullPath,
                            d = "https://firebasestorage.googleapis.com/v0" + ("/b/" + c(a.bucket) + "/o/" + c(d));b = Ja({ alt: "media",
                            token: b });return d + b;
                    });
                }));return qb = a;
            },
                sb = function (a, b) {
                Object.defineProperty(a, "ref", { get: function () {
                        return b.o(b, new D(a.bucket, a.fullPath));
                    } });
            },
                tb = function (a, b) {
                for (var c = {}, d = b.length, e = 0; e < d; e++) {
                    var g = b[e];g.writable && (c[g.c] = a[g.b]);
                }return JSON.stringify(c);
            },
                ub = function (a) {
                if (!a || "object" !== typeof a) throw "Expected Metadata object.";for (var b in a) {
                    var c = a[b];if ("customMetadata" === b) {
                        if ("object" !== typeof c) throw "Expected object for 'customMetadata' mapping.";
                    } else if (null != c && "object" === typeof c) throw "Mapping for '" + b + "' cannot be an object.";
                }
            };var K = function (a, b, c) {
                for (var d = b.length, e = b.length, g = 0; g < b.length; g++) if (b[g].b) {
                    d = g;break;
                }if (!(d <= c.length && c.length <= e)) throw d === e ? (b = d, d = 1 === d ? "argument" : "arguments") : (b = "between " + d + " and " + e, d = "arguments"), new u("invalid-argument-count", "Invalid argument count in `" + a + "`: Expected " + b + " " + d + ", received " + c.length + ".");for (g = 0; g < c.length; g++) try {
                    b[g].a(c[g]);
                } catch (f) {
                    if (f instanceof Error) throw ja(g, a, f.message);throw ja(g, a, f);
                }
            },
                L = function (a, b) {
                var c = this;this.a = function (b) {
                    c.b && !q(b) || a(b);
                };
                this.b = !!b;
            },
                vb = function (a, b) {
                return function (c) {
                    a(c);b(c);
                };
            },
                M = function (a, b) {
                function c(a) {
                    if (!("string" === typeof a || a instanceof String)) throw "Expected string.";
                }var d;a ? d = vb(c, a) : d = c;return new L(d, b);
            },
                wb = function () {
                return new L(function (a) {
                    if (!(a instanceof Uint8Array || a instanceof ArrayBuffer || ua() && a instanceof Blob)) throw "Expected Blob or File.";
                });
            },
                xb = function () {
                return new L(function (a) {
                    if (!(("number" === typeof a || a instanceof Number) && 0 <= a)) throw "Expected a number 0 or greater.";
                });
            },
                yb = function (a, b) {
                return new L(function (b) {
                    if (!(null === b || y(b) && b instanceof Object)) throw "Expected an Object.";y(a) && a(b);
                }, b);
            },
                N = function () {
                return new L(function (a) {
                    if (null !== a && "function" != ea(a)) throw "Expected a Function.";
                }, !0);
            };var O = function (a, b) {
                ua() && a instanceof Blob ? (this.i = a, b = a.size, a = a.type) : (a instanceof ArrayBuffer ? (b ? this.i = new Uint8Array(a) : (this.i = new Uint8Array(a.byteLength), this.i.set(new Uint8Array(a))), b = this.i.length) : (b ? this.i = a : (this.i = new Uint8Array(a.length), this.i.set(a)), b = a.length), a = "");this.a = b;this.b = a;
            };O.prototype.type = function () {
                return this.b;
            };
            O.prototype.slice = function (a, b) {
                if (ua() && this.i instanceof Blob) return a = ob(this.i, a, b), null === a ? null : new O(a);a = new Uint8Array(this.i.buffer, a, b - a);return new O(a, !0);
            };
            var zb = function (a) {
                var b = [];Array.prototype.push.apply(b, arguments);if (ua()) return b = b.map(function (a) {
                    return a instanceof O ? a.i : a;
                }), new O(nb.apply(null, b));var b = b.map(function (a) {
                    return ta(a) ? Ia("raw", a).data.buffer : a.i.buffer;
                }),
                    c = 0;b.forEach(function (a) {
                    c += a.byteLength;
                });var d = new Uint8Array(c),
                    e = 0;b.forEach(function (a) {
                    a = new Uint8Array(a);for (var b = 0; b < a.length; b++) d[e++] = a[b];
                });return new O(d, !0);
            };var P = function (a) {
                if (!a) throw ga();
            },
                Ab = function (a, b) {
                return function (c, d) {
                    var e;a: {
                        try {
                            e = JSON.parse(d);
                        } catch (h) {
                            e = null;break a;
                        }c = typeof e;e = "object" == c && null != e || "function" == c ? e : null;
                    }if (null === e) e = null;else {
                        c = { type: "file" };d = b.length;for (var g = 0; g < d; g++) {
                            var f = b[g];c[f.b] = f.a(c, e[f.c]);
                        }sb(c, a);e = c;
                    }P(null !== e);return e;
                };
            },
                Q = function (a) {
                return function (b, c) {
                    b = 401 === F(b) ? new u("unauthenticated", "User is not authenticated, please authenticate using Firebase Authentication and try again.") : 402 === F(b) ? new u("quota-exceeded", "Quota for bucket '" + a.bucket + "' exceeded, please view quota on https://firebase.google.com/pricing/.") : 403 === F(b) ? new u("unauthorized", "User does not have permission to access '" + a.path + "'.") : c;b.serverResponse = c.serverResponse;return b;
                };
            },
                Bb = function (a) {
                var b = Q(a);return function (c, d) {
                    var e = b(c, d);404 === F(c) && (e = new u("object-not-found", "Object '" + a.path + "' does not exist."));e.serverResponse = d.serverResponse;return e;
                };
            },
                Cb = function (a, b, c) {
                var d = za(b);a = new w(t + "/v0" + d, "GET", Ab(a, c), a.c);a.a = Bb(b);return a;
            },
                Db = function (a, b) {
                var c = za(b);a = new w(t + "/v0" + c, "DELETE", function () {}, a.c);a.c = [200, 204];a.a = Bb(b);return a;
            },
                Eb = function (a, b, c) {
                c = c ? na(c) : {};c.fullPath = a.path;c.size = b.a;c.contentType || (a = b && b.type() || "application/octet-stream", c.contentType = a);return c;
            },
                Fb = function (a, b, c, d, e) {
                var g = "/b/" + encodeURIComponent(b.bucket) + "/o",
                    f = { "X-Goog-Upload-Protocol": "multipart" },
                    h;h = "";for (var p = 0; 2 > p; p++) h += Math.random().toString().slice(2);f["Content-Type"] = "multipart/related; boundary=" + h;e = Eb(b, d, e);p = tb(e, c);d = zb("--" + h + "\r\nContent-Type: application/json; charset=utf-8\r\n\r\n" + p + "\r\n--" + h + "\r\nContent-Type: " + e.contentType + "\r\n\r\n", d, "\r\n--" + h + "--");if (null === d) throw ia();a = new w(t + "/v0" + g, "POST", Ab(a, c), a.b);a.b = { name: e.fullPath };a.headers = f;a.body = d.i;a.a = Q(b);return a;
            },
                Gb = function (a, b, c, d) {
                this.a = a;this.total = b;this.b = !!c;this.c = d || null;
            },
                Hb = function (a, b) {
                var c;try {
                    c = a.a.getResponseHeader("X-Goog-Upload-Status");
                } catch (d) {
                    P(!1);
                }P(r(b || ["active"], c));return c;
            },
                Ib = function (a, b, c, d, e) {
                var g = "/b/" + encodeURIComponent(b.bucket) + "/o",
                    f = Eb(b, d, e);e = { name: f.fullPath };g = t + "/v0" + g;d = { "X-Goog-Upload-Protocol": "resumable", "X-Goog-Upload-Command": "start", "X-Goog-Upload-Header-Content-Length": d.a, "X-Goog-Upload-Header-Content-Type": f.contentType, "Content-Type": "application/json; charset=utf-8" };c = tb(f, c);a = new w(g, "POST", function (a) {
                    Hb(a);var b;try {
                        b = a.a.getResponseHeader("X-Goog-Upload-URL");
                    } catch (B) {
                        P(!1);
                    }P(ta(b));return b;
                }, a.b);a.b = e;a.headers = d;a.body = c;a.a = Q(b);return a;
            },
                Jb = function (a, b, c, d) {
                a = new w(c, "POST", function (a) {
                    var b = Hb(a, ["active", "final"]),
                        c;try {
                        c = a.a.getResponseHeader("X-Goog-Upload-Size-Received");
                    } catch (h) {
                        P(!1);
                    }a = c;isFinite(a) && (a = String(a));a = "string" == typeof a ? /^\s*-?0x/i.test(a) ? parseInt(a, 16) : parseInt(a, 10) : NaN;P(!isNaN(a));return new Gb(a, d.a, "final" === b);
                }, a.b);a.headers = { "X-Goog-Upload-Command": "query" };a.a = Q(b);a.f = !1;return a;
            },
                Kb = function (a, b, c, d, e, g, f) {
                var h = new Gb(0, 0);f ? (h.a = f.a, h.total = f.total) : (h.a = 0, h.total = d.a);if (d.a !== h.total) throw new u("server-file-wrong-size", "Server recorded incorrect upload file size, please retry the upload.");var p = f = h.total - h.a;0 < e && (p = Math.min(p, e));var B = h.a;e = { "X-Goog-Upload-Command": p === f ? "upload, finalize" : "upload", "X-Goog-Upload-Offset": h.a };f = d.slice(B, B + p);if (null === f) throw ia();c = new w(c, "POST", function (a, c) {
                    var e = Hb(a, ["active", "final"]),
                        f = h.a + p,
                        C = d.a,
                        z;"final" === e ? z = Ab(b, g)(a, c) : z = null;return new Gb(f, C, "final" === e, z);
                }, b.b);c.headers = e;c.body = f.i;c.l = null;c.a = Q(a);c.f = !1;return c;
            };var T = function (a, b, c, d, e, g) {
                this.L = a;this.c = b;this.l = c;this.f = e;this.h = g || null;this.s = d;this.m = 0;this.D = this.u = !1;this.B = [];this.S = 262144 < this.f.a;this.b = "running";this.a = this.v = this.g = null;this.j = 1;var f = this;this.F = function (a) {
                    f.a = null;f.j = 1;"storage/canceled" === a.code ? (f.u = !0, R(f)) : (f.g = a, S(f, "error"));
                };this.P = function (a) {
                    f.a = null;"storage/canceled" === a.code ? R(f) : (f.g = a, S(f, "error"));
                };this.A = this.o = null;this.C = qa(function (a, b) {
                    f.o = a;f.A = b;Lb(f);
                });this.C.then(null, function () {});
            },
                Lb = function (a) {
                "running" === a.b && null === a.a && (a.S ? null === a.v ? Mb(a) : a.u ? Nb(a) : a.D ? Ob(a) : Pb(a) : Qb(a));
            },
                U = function (a, b) {
                ab(a.c).then(function (c) {
                    switch (a.b) {case "running":
                            b(c);break;case "canceling":
                            S(a, "canceled");break;case "pausing":
                            S(a, "paused");}
                });
            },
                Mb = function (a) {
                U(a, function (b) {
                    var c = Ib(a.c, a.l, a.s, a.f, a.h);a.a = I(a.c, c, b);a.a.a().then(function (b) {
                        a.a = null;a.v = b;a.u = !1;R(a);
                    }, this.F);
                });
            },
                Nb = function (a) {
                var b = a.v;U(a, function (c) {
                    var d = Jb(a.c, a.l, b, a.f);a.a = I(a.c, d, c);a.a.a().then(function (b) {
                        a.a = null;Rb(a, b.a);a.u = !1;b.b && (a.D = !0);R(a);
                    }, a.F);
                });
            },
                Pb = function (a) {
                var b = 262144 * a.j,
                    c = new Gb(a.m, a.f.a),
                    d = a.v;U(a, function (e) {
                    var g;try {
                        g = Kb(a.l, a.c, d, a.f, b, a.s, c);
                    } catch (f) {
                        a.g = f;S(a, "error");return;
                    }a.a = I(a.c, g, e);a.a.a().then(function (b) {
                        33554432 > 262144 * a.j && (a.j *= 2);a.a = null;Rb(a, b.a);b.b ? (a.h = b.c, S(a, "success")) : R(a);
                    }, a.F);
                });
            },
                Ob = function (a) {
                U(a, function (b) {
                    var c = Cb(a.c, a.l, a.s);a.a = I(a.c, c, b);a.a.a().then(function (b) {
                        a.a = null;a.h = b;S(a, "success");
                    }, a.P);
                });
            },
                Qb = function (a) {
                U(a, function (b) {
                    var c = Fb(a.c, a.l, a.s, a.f, a.h);a.a = I(a.c, c, b);a.a.a().then(function (b) {
                        a.a = null;a.h = b;Rb(a, a.f.a);S(a, "success");
                    }, a.F);
                });
            },
                Rb = function (a, b) {
                var c = a.m;a.m = b;a.m > c && V(a);
            },
                S = function (a, b) {
                if (a.b !== b) switch (b) {case "canceling":
                        a.b = b;null !== a.a && a.a.cancel();break;case "pausing":
                        a.b = b;null !== a.a && a.a.cancel();break;case "running":
                        var c = "paused" === a.b;a.b = b;c && (V(a), Lb(a));break;case "paused":
                        a.b = b;V(a);break;case "canceled":
                        a.g = ha();a.b = b;V(a);break;case "error":
                        a.b = b;V(a);break;case "success":
                        a.b = b, V(a);}
            },
                R = function (a) {
                switch (a.b) {case "pausing":
                        S(a, "paused");break;case "canceling":
                        S(a, "canceled");break;case "running":
                        Lb(a);}
            };T.prototype.w = function () {
                return new G(this.m, this.f.a, sa(this.b), this.h, this, this.L);
            };
            T.prototype.M = function (a, b, c, d) {
                function e(a) {
                    try {
                        f(a);return;
                    } catch (z) {}try {
                        if (h(a), !(q(a.next) || q(a.error) || q(a.complete))) throw "";
                    } catch (z) {
                        throw "Expected a function or an Object with one of `next`, `error`, `complete` properties.";
                    }
                }function g(a) {
                    return function (b, c, d) {
                        null !== a && K("on", a, arguments);var e = new Ca(b, c, d);Sb(p, e);return function () {
                            var a = p.B,
                                b = a.indexOf(e);-1 !== b && a.splice(b, 1);
                        };
                    };
                }var f = N().a,
                    h = yb(null, !0).a;K("on", [M(function () {
                    if ("state_changed" !== a) throw "Expected one of the event types: [state_changed].";
                }), yb(e, !0), N(), N()], arguments);var p = this,
                    B = [yb(function (a) {
                    if (null === a) throw "Expected a function or an Object with one of `next`, `error`, `complete` properties.";e(a);
                }), N(), N()];return q(b) || q(c) || q(d) ? g(null)(b, c, d) : g(B);
            };T.prototype.then = function (a, b) {
                return this.C.then(a, b);
            };T.prototype["catch"] = function (a) {
                return this.then(null, a);
            };
            var Sb = function (a, b) {
                a.B.push(b);Tb(a, b);
            },
                V = function (a) {
                Ub(a);Array.prototype.slice.call(a.B).forEach(function (b) {
                    Tb(a, b);
                });
            },
                Ub = function (a) {
                if (null !== a.o) {
                    var b = !0;switch (sa(a.b)) {case "success":
                            A(a.o.bind(null, a.w()))();break;case "canceled":case "error":
                            A(a.A.bind(null, a.g))();break;default:
                            b = !1;}b && (a.o = null, a.A = null);
                }
            },
                Tb = function (a, b) {
                switch (sa(a.b)) {case "running":case "paused":
                        null !== b.b && A(b.b.bind(b, a.w()))();break;case "success":
                        null !== b.a && A(b.a.bind(b))();break;case "canceled":case "error":
                        null !== b.error && A(b.error.bind(b, a.g))();break;default:
                        null !== b.error && A(b.error.bind(b, a.g))();}
            };T.prototype.O = function () {
                K("resume", [], arguments);var a = "paused" === this.b || "pausing" === this.b;a && S(this, "running");return a;
            };T.prototype.N = function () {
                K("pause", [], arguments);var a = "running" === this.b;a && S(this, "pausing");return a;
            };T.prototype.cancel = function () {
                K("cancel", [], arguments);var a = "running" === this.b || "pausing" === this.b;a && S(this, "canceling");return a;
            };var W = function (a, b) {
                this.a = a;this.location = b instanceof D ? b : Aa(b);
            };W.prototype.toString = function () {
                K("toString", [], arguments);return "gs://" + this.location.bucket + "/" + this.location.path;
            };var Vb = function (a, b) {
                return new W(a, b);
            };k = W.prototype;k.H = function (a) {
                K("child", [M()], arguments);var b = oa(this.location.path, a);return Vb(this.a, new D(this.location.bucket, b));
            };
            k.ka = function () {
                var a;a = this.location.path;if (0 == a.length) a = null;else {
                    var b = a.lastIndexOf("/");a = -1 === b ? "" : a.slice(0, b);
                }return null === a ? null : Vb(this.a, new D(this.location.bucket, a));
            };k.ma = function () {
                return Vb(this.a, new D(this.location.bucket, ""));
            };k.U = function () {
                return this.location.bucket;
            };k.fa = function () {
                return this.location.path;
            };k.ja = function () {
                return pa(this.location.path);
            };k.oa = function () {
                return this.a.l;
            };
            k.Z = function (a, b) {
                K("put", [wb(), new L(ub, !0)], arguments);X(this, "put");return new T(this, this.a, this.location, rb(), new O(a), b);
            };k.$ = function (a, b, c) {
                K("putString", [M(), M(Da, !0), new L(ub, !0)], arguments);X(this, "putString");var d = Ia(y(b) ? b : "raw", a),
                    e = c ? na(c) : {};!y(e.contentType) && y(d.a) && (e.contentType = d.a);return new T(this, this.a, this.location, rb(), new O(d.data, !0), e);
            };
            k.X = function () {
                K("delete", [], arguments);X(this, "delete");var a = this;return ab(this.a).then(function (b) {
                    var c = Db(a.a, a.location);return I(a.a, c, b).a();
                });
            };k.I = function () {
                K("getMetadata", [], arguments);X(this, "getMetadata");var a = this;return ab(this.a).then(function (b) {
                    var c = Cb(a.a, a.location, rb());return I(a.a, c, b).a();
                });
            };
            k.aa = function (a) {
                K("updateMetadata", [new L(ub, void 0)], arguments);X(this, "updateMetadata");var b = this;return ab(this.a).then(function (c) {
                    var d = b.a,
                        e = b.location,
                        g = a,
                        f = rb(),
                        h = za(e),
                        h = t + "/v0" + h,
                        g = tb(g, f),
                        d = new w(h, "PATCH", Ab(d, f), d.c);d.headers = { "Content-Type": "application/json; charset=utf-8" };d.body = g;d.a = Bb(e);return I(b.a, d, c).a();
                });
            };
            k.Y = function () {
                K("getDownloadURL", [], arguments);X(this, "getDownloadURL");return this.I().then(function (a) {
                    a = a.downloadURLs[0];if (y(a)) return a;throw new u("no-download-url", "The given file does not have any download URLs.");
                });
            };var X = function (a, b) {
                if ("" === a.location.path) throw new u("invalid-root-operation", "The operation '" + b + "' cannot be performed on a root reference, create a non-root reference using child, such as .child('file.png').");
            };var Y = function (a, b, c) {
                this.a = new $a(a, function (a, b) {
                    return new W(a, b);
                }, Ua, this, b);this.c = a;q(c) ? this.b = Ba(c) : null != this.a.bucket() && (this.b = new D(this.a.bucket(), ""));this.f = new Wb(this);
            };k = Y.prototype;k.ba = function (a) {
                K("ref", [M(function (a) {
                    if (/^[A-Za-z]+:\/\//.test(a)) throw "Expected child path but got a URL, use refFromURL instead.";
                }, !0)], arguments);if (null === this.b) throw Error("No Storage Bucket defined in Firebase Options.");var b = new W(this.a, this.b);return q(a) ? b.H(a) : b;
            };
            k.ca = function (a) {
                K("refFromURL", [M(function (a) {
                    if (!/^[A-Za-z]+:\/\//.test(a)) throw "Expected full URL but got a child path, use ref instead.";try {
                        Aa(a);
                    } catch (c) {
                        throw "Expected valid full URL but got an invalid one.";
                    }
                }, !1)], arguments);return new W(this.a, a);
            };k.ha = function () {
                return this.a.b;
            };k.ea = function (a) {
                K("setMaxUploadRetryTime", [xb()], arguments);this.a.b = a;
            };k.ga = function () {
                return this.a.c;
            };k.da = function (a) {
                K("setMaxOperationRetryTime", [xb()], arguments);this.a.c = a;
            };k.T = function () {
                return this.c;
            };
            k.R = function () {
                return this.f;
            };var Wb = function (a) {
                this.a = a;
            };Wb.prototype.b = function () {
                var a = this.a.a;a.f = !0;a.a = null;Za(a.h);
            };var Z = function (a, b, c) {
                Object.defineProperty(a, b, { get: c });
            };W.prototype.toString = W.prototype.toString;W.prototype.child = W.prototype.H;W.prototype.put = W.prototype.Z;W.prototype.putString = W.prototype.$;W.prototype["delete"] = W.prototype.X;W.prototype.getMetadata = W.prototype.I;W.prototype.updateMetadata = W.prototype.aa;W.prototype.getDownloadURL = W.prototype.Y;Z(W.prototype, "parent", W.prototype.ka);Z(W.prototype, "root", W.prototype.ma);Z(W.prototype, "bucket", W.prototype.U);Z(W.prototype, "fullPath", W.prototype.fa);
            Z(W.prototype, "name", W.prototype.ja);Z(W.prototype, "storage", W.prototype.oa);Y.prototype.ref = Y.prototype.ba;Y.prototype.refFromURL = Y.prototype.ca;Z(Y.prototype, "maxOperationRetryTime", Y.prototype.ga);Y.prototype.setMaxOperationRetryTime = Y.prototype.da;Z(Y.prototype, "maxUploadRetryTime", Y.prototype.ha);Y.prototype.setMaxUploadRetryTime = Y.prototype.ea;Z(Y.prototype, "app", Y.prototype.T);Z(Y.prototype, "INTERNAL", Y.prototype.R);Wb.prototype["delete"] = Wb.prototype.b;Y.prototype.capi_ = function (a) {
                t = a;
            };
            T.prototype.on = T.prototype.M;T.prototype.resume = T.prototype.O;T.prototype.pause = T.prototype.N;T.prototype.cancel = T.prototype.cancel;T.prototype.then = T.prototype.then;T.prototype["catch"] = T.prototype["catch"];Z(T.prototype, "snapshot", T.prototype.w);Z(G.prototype, "bytesTransferred", G.prototype.V);Z(G.prototype, "totalBytes", G.prototype.qa);Z(G.prototype, "state", G.prototype.na);Z(G.prototype, "metadata", G.prototype.ia);Z(G.prototype, "downloadURL", G.prototype.W);Z(G.prototype, "task", G.prototype.pa);
            Z(G.prototype, "ref", G.prototype.la);ra.STATE_CHANGED = "state_changed";x.RUNNING = "running";x.PAUSED = "paused";x.SUCCESS = "success";x.CANCELED = "canceled";x.ERROR = "error";E.RAW = "raw";E.BASE64 = "base64";E.BASE64URL = "base64url";E.DATA_URL = "data_url";
            (function () {
                function a(a, b, e) {
                    return new Y(a, new Va(), e);
                }var b = { TaskState: x, TaskEvent: ra, StringFormat: E, Storage: Y, Reference: W };if ("undefined" !== typeof firebase) firebase.INTERNAL.registerService("storage", a, b);else throw Error("Cannot install Firebase Storage - be sure to load firebase-app.js first.");
            })();
        }).call(this);
        $__global["firebase"] = firebase;
    })(this);

    return _retrieveGlobal();
});
$__System.register("135", [], function() { return { setters: [], execute: function() {} } });

$__System.register("136", [], function() { return { setters: [], execute: function() {} } });

$__System.registerDynamic('137', ['138', '139'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var baseMerge = $__require('138'),
      createAssigner = $__require('139');

  /**
   * This method is like `_.assign` except that it recursively merges own and
   * inherited enumerable string keyed properties of source objects into the
   * destination object. Source properties that resolve to `undefined` are
   * skipped if a destination value exists. Array and plain object properties
   * are merged recursively. Other objects and value types are overridden by
   * assignment. Source objects are applied from left to right. Subsequent
   * sources overwrite property assignments of previous sources.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 0.5.0
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @example
   *
   * var object = {
   *   'a': [{ 'b': 2 }, { 'd': 4 }]
   * };
   *
   * var other = {
   *   'a': [{ 'c': 3 }, { 'e': 5 }]
   * };
   *
   * _.merge(object, other);
   * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
   */
  var merge = createAssigner(function (object, source, srcIndex) {
    baseMerge(object, source, srcIndex);
  });

  module.exports = merge;
});
$__System.registerDynamic('13a', ['13b', '139', '13c'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var copyObject = $__require('13b'),
      createAssigner = $__require('139'),
      keysIn = $__require('13c');

  /**
   * This method is like `_.assign` except that it iterates over own and
   * inherited source properties.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @alias extend
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @see _.assign
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   * }
   *
   * function Bar() {
   *   this.c = 3;
   * }
   *
   * Foo.prototype.b = 2;
   * Bar.prototype.d = 4;
   *
   * _.assignIn({ 'a': 0 }, new Foo, new Bar);
   * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
   */
  var assignIn = createAssigner(function (object, source) {
    copyObject(source, keysIn(source), object);
  });

  module.exports = assignIn;
});
$__System.registerDynamic('13d', ['13a'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  module.exports = $__require('13a');
});
$__System.registerDynamic('13e', [], true, function ($__require, exports, module) {
	'use strict';

	var global = this || self,
	    GLOBAL = global;
	function preserveCamelCase(str) {
		var isLastCharLower = false;

		for (var i = 0; i < str.length; i++) {
			var c = str.charAt(i);

			if (isLastCharLower && /[a-zA-Z]/.test(c) && c.toUpperCase() === c) {
				str = str.substr(0, i) + '-' + str.substr(i);
				isLastCharLower = false;
				i++;
			} else {
				isLastCharLower = c.toLowerCase() === c;
			}
		}

		return str;
	}

	module.exports = function () {
		var str = [].map.call(arguments, function (str) {
			return str.trim();
		}).filter(function (str) {
			return str.length;
		}).join('-');

		if (!str.length) {
			return '';
		}

		if (str.length === 1) {
			return str;
		}

		if (!/[_.\- ]+/.test(str)) {
			if (str === str.toUpperCase()) {
				return str.toLowerCase();
			}

			if (str[0] !== str[0].toLowerCase()) {
				return str[0].toLowerCase() + str.slice(1);
			}

			return str;
		}

		str = preserveCamelCase(str);

		return str.replace(/^[_.\- ]+/, '').toLowerCase().replace(/[_.\- ]+(\w|$)/g, function (m, p1) {
			return p1.toUpperCase();
		});
	};
});
$__System.registerDynamic('13f', ['140', '141', '142', '143', '144', '145', '146'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var getTag = $__require('140'),
      isArguments = $__require('141'),
      isArray = $__require('142'),
      isArrayLike = $__require('143'),
      isBuffer = $__require('144'),
      isPrototype = $__require('145'),
      nativeKeys = $__require('146');

  /** `Object#toString` result references. */
  var mapTag = '[object Map]',
      setTag = '[object Set]';

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /** Built-in value references. */
  var propertyIsEnumerable = objectProto.propertyIsEnumerable;

  /** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */
  var nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');

  /**
   * Checks if `value` is an empty object, collection, map, or set.
   *
   * Objects are considered empty if they have no own enumerable string keyed
   * properties.
   *
   * Array-like values such as `arguments` objects, arrays, buffers, strings, or
   * jQuery-like collections are considered empty if they have a `length` of `0`.
   * Similarly, maps and sets are considered empty if they have a `size` of `0`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is empty, else `false`.
   * @example
   *
   * _.isEmpty(null);
   * // => true
   *
   * _.isEmpty(true);
   * // => true
   *
   * _.isEmpty(1);
   * // => true
   *
   * _.isEmpty([1, 2, 3]);
   * // => false
   *
   * _.isEmpty({ 'a': 1 });
   * // => false
   */
  function isEmpty(value) {
    if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isArguments(value))) {
      return !value.length;
    }
    var tag = getTag(value);
    if (tag == mapTag || tag == setTag) {
      return !value.size;
    }
    if (nonEnumShadows || isPrototype(value)) {
      return !nativeKeys(value).length;
    }
    for (var key in value) {
      if (hasOwnProperty.call(value, key)) {
        return false;
      }
    }
    return true;
  }

  module.exports = isEmpty;
});
$__System.registerDynamic('147', ['148'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var eq = $__require('148');

  /**
   * This function is like `assignValue` except that it doesn't assign
   * `undefined` values.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function assignMergeValue(object, key, value) {
    if (value !== undefined && !eq(object[key], value) || typeof key == 'number' && value === undefined && !(key in object)) {
      object[key] = value;
    }
  }

  module.exports = assignMergeValue;
});
$__System.registerDynamic('149', ['14a', '14b', '14c'], true, function ($__require, exports, module) {
    var global = this || self,
        GLOBAL = global;
    var getPrototype = $__require('14a'),
        isHostObject = $__require('14b'),
        isObjectLike = $__require('14c');

    /** `Object#toString` result references. */
    var objectTag = '[object Object]';

    /** Used for built-in method references. */
    var funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objectToString = objectProto.toString;

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
        if (!isObjectLike(value) || objectToString.call(value) != objectTag || isHostObject(value)) {
            return false;
        }
        var proto = getPrototype(value);
        if (proto === null) {
            return true;
        }
        var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
        return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }

    module.exports = isPlainObject;
});
$__System.registerDynamic("14d", [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /**
   * This function is like
   * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * except that it includes inherited enumerable properties.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function nativeKeysIn(object) {
    var result = [];
    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }
    return result;
  }

  module.exports = nativeKeysIn;
});
$__System.registerDynamic('14e', ['14f', '145', '14d'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var isObject = $__require('14f'),
      isPrototype = $__require('145'),
      nativeKeysIn = $__require('14d');

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeysIn(object) {
    if (!isObject(object)) {
      return nativeKeysIn(object);
    }
    var isProto = isPrototype(object),
        result = [];

    for (var key in object) {
      if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
        result.push(key);
      }
    }
    return result;
  }

  module.exports = baseKeysIn;
});
$__System.registerDynamic('13c', ['150', '14e', '143'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var arrayLikeKeys = $__require('150'),
      baseKeysIn = $__require('14e'),
      isArrayLike = $__require('143');

  /**
   * Creates an array of the own and inherited enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keysIn(new Foo);
   * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
   */
  function keysIn(object) {
    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
  }

  module.exports = keysIn;
});
$__System.registerDynamic('151', ['13b', '13c'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var copyObject = $__require('13b'),
      keysIn = $__require('13c');

  /**
   * Converts `value` to a plain object flattening inherited enumerable string
   * keyed properties of `value` to own properties of the plain object.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {Object} Returns the converted plain object.
   * @example
   *
   * function Foo() {
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.assign({ 'a': 1 }, new Foo);
   * // => { 'a': 1, 'b': 2 }
   *
   * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
   * // => { 'a': 1, 'b': 2, 'c': 3 }
   */
  function toPlainObject(value) {
    return copyObject(value, keysIn(value));
  }

  module.exports = toPlainObject;
});
$__System.registerDynamic('152', ['147', '153', '154', '141', '142', '155', '156', '14f', '149', '157', '151'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var assignMergeValue = $__require('147'),
      baseClone = $__require('153'),
      copyArray = $__require('154'),
      isArguments = $__require('141'),
      isArray = $__require('142'),
      isArrayLikeObject = $__require('155'),
      isFunction = $__require('156'),
      isObject = $__require('14f'),
      isPlainObject = $__require('149'),
      isTypedArray = $__require('157'),
      toPlainObject = $__require('151');

  /**
   * A specialized version of `baseMerge` for arrays and objects which performs
   * deep merges and tracks traversed objects enabling objects with circular
   * references to be merged.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @param {string} key The key of the value to merge.
   * @param {number} srcIndex The index of `source`.
   * @param {Function} mergeFunc The function to merge values.
   * @param {Function} [customizer] The function to customize assigned values.
   * @param {Object} [stack] Tracks traversed source values and their merged
   *  counterparts.
   */
  function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
    var objValue = object[key],
        srcValue = source[key],
        stacked = stack.get(srcValue);

    if (stacked) {
      assignMergeValue(object, key, stacked);
      return;
    }
    var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;

    var isCommon = newValue === undefined;

    if (isCommon) {
      newValue = srcValue;
      if (isArray(srcValue) || isTypedArray(srcValue)) {
        if (isArray(objValue)) {
          newValue = objValue;
        } else if (isArrayLikeObject(objValue)) {
          newValue = copyArray(objValue);
        } else {
          isCommon = false;
          newValue = baseClone(srcValue, true);
        }
      } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
        if (isArguments(objValue)) {
          newValue = toPlainObject(objValue);
        } else if (!isObject(objValue) || srcIndex && isFunction(objValue)) {
          isCommon = false;
          newValue = baseClone(srcValue, true);
        } else {
          newValue = objValue;
        }
      } else {
        isCommon = false;
      }
    }
    if (isCommon) {
      // Recursively merge objects and arrays (susceptible to call stack limits).
      stack.set(srcValue, newValue);
      mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
      stack['delete'](srcValue);
    }
    assignMergeValue(object, key, newValue);
  }

  module.exports = baseMergeDeep;
});
$__System.registerDynamic('138', ['158', '159', '147', '14e', '152', '142', '14f', '157'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var Stack = $__require('158'),
      arrayEach = $__require('159'),
      assignMergeValue = $__require('147'),
      baseKeysIn = $__require('14e'),
      baseMergeDeep = $__require('152'),
      isArray = $__require('142'),
      isObject = $__require('14f'),
      isTypedArray = $__require('157');

  /**
   * The base implementation of `_.merge` without support for multiple sources.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @param {number} srcIndex The index of `source`.
   * @param {Function} [customizer] The function to customize merged values.
   * @param {Object} [stack] Tracks traversed source values and their merged
   *  counterparts.
   */
  function baseMerge(object, source, srcIndex, customizer, stack) {
    if (object === source) {
      return;
    }
    if (!(isArray(source) || isTypedArray(source))) {
      var props = baseKeysIn(source);
    }
    arrayEach(props || source, function (srcValue, key) {
      if (props) {
        key = srcValue;
        srcValue = source[key];
      }
      if (isObject(srcValue)) {
        stack || (stack = new Stack());
        baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
      } else {
        var newValue = customizer ? customizer(object[key], srcValue, key + '', object, source, stack) : undefined;

        if (newValue === undefined) {
          newValue = srcValue;
        }
        assignMergeValue(object, key, newValue);
      }
    });
  }

  module.exports = baseMerge;
});
$__System.registerDynamic("15a", [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg);
      case 1:
        return func.call(thisArg, args[0]);
      case 2:
        return func.call(thisArg, args[0], args[1]);
      case 3:
        return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  module.exports = apply;
});
$__System.registerDynamic('15b', ['15a'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var apply = $__require('15a');

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax = Math.max;

  /**
   * The base implementation of `_.rest` which doesn't validate or coerce arguments.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @returns {Function} Returns the new function.
   */
  function baseRest(func, start) {
    start = nativeMax(start === undefined ? func.length - 1 : start, 0);
    return function () {
      var args = arguments,
          index = -1,
          length = nativeMax(args.length - start, 0),
          array = Array(length);

      while (++index < length) {
        array[index] = args[start + index];
      }
      index = -1;
      var otherArgs = Array(start + 1);
      while (++index < start) {
        otherArgs[index] = args[index];
      }
      otherArgs[start] = array;
      return apply(func, this, otherArgs);
    };
  }

  module.exports = baseRest;
});
$__System.registerDynamic('15c', ['148', '143', '15d', '14f'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var eq = $__require('148'),
      isArrayLike = $__require('143'),
      isIndex = $__require('15d'),
      isObject = $__require('14f');

  /**
   * Checks if the given arguments are from an iteratee call.
   *
   * @private
   * @param {*} value The potential iteratee value argument.
   * @param {*} index The potential iteratee index or key argument.
   * @param {*} object The potential iteratee object argument.
   * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
   *  else `false`.
   */
  function isIterateeCall(value, index, object) {
    if (!isObject(object)) {
      return false;
    }
    var type = typeof index;
    if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
      return eq(object[index], value);
    }
    return false;
  }

  module.exports = isIterateeCall;
});
$__System.registerDynamic('139', ['15b', '15c'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var baseRest = $__require('15b'),
      isIterateeCall = $__require('15c');

  /**
   * Creates a function like `_.assign`.
   *
   * @private
   * @param {Function} assigner The function to assign values.
   * @returns {Function} Returns the new assigner function.
   */
  function createAssigner(assigner) {
    return baseRest(function (object, sources) {
      var index = -1,
          length = sources.length,
          customizer = length > 1 ? sources[length - 1] : undefined,
          guard = length > 2 ? sources[2] : undefined;

      customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        customizer = length < 3 ? undefined : customizer;
        length = 1;
      }
      object = Object(object);
      while (++index < length) {
        var source = sources[index];
        if (source) {
          assigner(object, source, index, customizer);
        }
      }
      return object;
    });
  }

  module.exports = createAssigner;
});
$__System.registerDynamic('15e', ['138', '139'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var baseMerge = $__require('138'),
      createAssigner = $__require('139');

  /**
   * This method is like `_.merge` except that it accepts `customizer` which
   * is invoked to produce the merged values of the destination and source
   * properties. If `customizer` returns `undefined`, merging is handled by the
   * method instead. The `customizer` is invoked with seven arguments:
   * (objValue, srcValue, key, object, source, stack).
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} sources The source objects.
   * @param {Function} customizer The function to customize assigned values.
   * @returns {Object} Returns `object`.
   * @example
   *
   * function customizer(objValue, srcValue) {
   *   if (_.isArray(objValue)) {
   *     return objValue.concat(srcValue);
   *   }
   * }
   *
   * var object = { 'a': [1], 'b': [2] };
   * var other = { 'a': [3], 'b': [4] };
   *
   * _.mergeWith(object, other, customizer);
   * // => { 'a': [1, 3], 'b': [2, 4] }
   */
  var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
    baseMerge(object, source, srcIndex, customizer);
  });

  module.exports = mergeWith;
});
$__System.registerDynamic('15f', ['153'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var baseClone = $__require('153');

  /**
   * This method is like `_.cloneWith` except that it recursively clones `value`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to recursively clone.
   * @param {Function} [customizer] The function to customize cloning.
   * @returns {*} Returns the deep cloned value.
   * @see _.cloneWith
   * @example
   *
   * function customizer(value) {
   *   if (_.isElement(value)) {
   *     return value.cloneNode(true);
   *   }
   * }
   *
   * var el = _.cloneDeepWith(document.body, customizer);
   *
   * console.log(el === document.body);
   * // => false
   * console.log(el.nodeName);
   * // => 'BODY'
   * console.log(el.childNodes.length);
   * // => 20
   */
  function cloneDeepWith(value, customizer) {
    return baseClone(value, true, true, customizer);
  }

  module.exports = cloneDeepWith;
});
$__System.registerDynamic('160', [], false, function ($__require, $__exports, $__module) {
    var _retrieveGlobal = $__System.registry.get("@@global-helpers").prepareGlobal($__module.id, null, null);

    (function ($__global) {
        /** Polyfill Function.name for IE9+ support */

        /* Credits: http://matt.scharley.me/2012/03/monkey-patch-name-ie.html */
        (function () {
            if (Function.prototype.name === undefined && Object.defineProperty !== undefined) {
                Object.defineProperty(Function.prototype, 'name', {
                    get: function () {
                        var funcNameRegex = /function\s([^(]{1,})\(/;
                        var results = funcNameRegex.exec(this.toString());
                        return results && results.length > 1 ? results[1].trim() : '';
                    },
                    set: function (value) {}
                });
            }
        })();
    })(this);

    return _retrieveGlobal();
});
$__System.registerDynamic('161', [], false, function ($__require, $__exports, $__module) {
    var _retrieveGlobal = $__System.registry.get("@@global-helpers").prepareGlobal($__module.id, null, null);

    (function ($__global) {
        /** Polyfill requestAnimationFrame for IE9+ support */

        /* Credits: Opera engineer Erik Moller */
        (function () {
            var lastTime = 0;
            var vendors = ['webkit', 'moz'];
            for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
                window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];
                window.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];
            }

            if (!window.requestAnimationFrame) window.requestAnimationFrame = function (callback, element) {
                var currTime = new Date().getTime();
                var timeToCall = Math.max(0, 16 - (currTime - lastTime));
                var id = window.setTimeout(function () {
                    callback(currTime + timeToCall);
                }, timeToCall);
                lastTime = currTime + timeToCall;
                return id;
            };

            if (!window.cancelAnimationFrame) window.cancelAnimationFrame = function (id) {
                clearTimeout(id);
            };
        })();
    })(this);

    return _retrieveGlobal();
});
$__System.registerDynamic("162", [], false, function ($__require, $__exports, $__module) {
    var _retrieveGlobal = $__System.registry.get("@@global-helpers").prepareGlobal($__module.id, null, null);

    (function ($__global) {
        /**
         * Created by lundfall on 2/4/16.
         */

        if (!String.prototype.startsWith) {
            String.prototype.startsWith = function (searchString, position) {
                position = position || 0;
                return this.substr(position, searchString.length) === searchString;
            };
        }
    })(this);

    return _retrieveGlobal();
});
$__System.registerDynamic('163', [], false, function ($__require, $__exports, $__module) {
    var _retrieveGlobal = $__System.registry.get("@@global-helpers").prepareGlobal($__module.id, null, null);

    (function ($__global) {
        // From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys
        if (!Object.keys) {
            Object.keys = function () {
                'use strict';

                var hasOwnProperty = Object.prototype.hasOwnProperty,
                    hasDontEnumBug = !{ toString: null }.propertyIsEnumerable('toString'),
                    dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'],
                    dontEnumsLength = dontEnums.length;

                return function (obj) {
                    if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {
                        throw new TypeError('Object.keys called on non-object');
                    }

                    var result = [],
                        prop,
                        i;

                    for (prop in obj) {
                        if (hasOwnProperty.call(obj, prop)) {
                            result.push(prop);
                        }
                    }

                    if (hasDontEnumBug) {
                        for (i = 0; i < dontEnumsLength; i++) {
                            if (hasOwnProperty.call(obj, dontEnums[i])) {
                                result.push(dontEnums[i]);
                            }
                        }
                    }
                    return result;
                };
            }();
        }
    })(this);

    return _retrieveGlobal();
});
$__System.registerDynamic('164', [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /*!
   * Bowser - a browser detector
   * https://github.com/ded/bowser
   * MIT License | (c) Dustin Diaz 2015
   */

  !function (root, name, definition) {
    if (typeof module != 'undefined' && module.exports) module.exports = definition();else if (typeof undefined == 'function' && define.amd) define(name, definition);else root[name] = definition();
  }(exports, 'bowser', function () {
    /**
      * See useragents.js for examples of navigator.userAgent
      */

    var t = true;

    function detect(ua) {

      function getFirstMatch(regex) {
        var match = ua.match(regex);
        return match && match.length > 1 && match[1] || '';
      }

      function getSecondMatch(regex) {
        var match = ua.match(regex);
        return match && match.length > 1 && match[2] || '';
      }

      var iosdevice = getFirstMatch(/(ipod|iphone|ipad)/i).toLowerCase(),
          likeAndroid = /like android/i.test(ua),
          android = !likeAndroid && /android/i.test(ua),
          nexusMobile = /nexus\s*[0-6]\s*/i.test(ua),
          nexusTablet = !nexusMobile && /nexus\s*[0-9]+/i.test(ua),
          chromeos = /CrOS/.test(ua),
          silk = /silk/i.test(ua),
          sailfish = /sailfish/i.test(ua),
          tizen = /tizen/i.test(ua),
          webos = /(web|hpw)os/i.test(ua),
          windowsphone = /windows phone/i.test(ua),
          samsungBrowser = /SamsungBrowser/i.test(ua),
          windows = !windowsphone && /windows/i.test(ua),
          mac = !iosdevice && !silk && /macintosh/i.test(ua),
          linux = !android && !sailfish && !tizen && !webos && /linux/i.test(ua),
          edgeVersion = getFirstMatch(/edge\/(\d+(\.\d+)?)/i),
          versionIdentifier = getFirstMatch(/version\/(\d+(\.\d+)?)/i),
          tablet = /tablet/i.test(ua),
          mobile = !tablet && /[^-]mobi/i.test(ua),
          xbox = /xbox/i.test(ua),
          result;

      if (/opera/i.test(ua)) {
        //  an old Opera
        result = {
          name: 'Opera',
          opera: t,
          version: versionIdentifier || getFirstMatch(/(?:opera|opr|opios)[\s\/](\d+(\.\d+)?)/i)
        };
      } else if (/opr|opios/i.test(ua)) {
        // a new Opera
        result = {
          name: 'Opera',
          opera: t,
          version: getFirstMatch(/(?:opr|opios)[\s\/](\d+(\.\d+)?)/i) || versionIdentifier
        };
      } else if (/SamsungBrowser/i.test(ua)) {
        result = {
          name: 'Samsung Internet for Android',
          samsungBrowser: t,
          version: versionIdentifier || getFirstMatch(/(?:SamsungBrowser)[\s\/](\d+(\.\d+)?)/i)
        };
      } else if (/coast/i.test(ua)) {
        result = {
          name: 'Opera Coast',
          coast: t,
          version: versionIdentifier || getFirstMatch(/(?:coast)[\s\/](\d+(\.\d+)?)/i)
        };
      } else if (/yabrowser/i.test(ua)) {
        result = {
          name: 'Yandex Browser',
          yandexbrowser: t,
          version: versionIdentifier || getFirstMatch(/(?:yabrowser)[\s\/](\d+(\.\d+)?)/i)
        };
      } else if (/ucbrowser/i.test(ua)) {
        result = {
          name: 'UC Browser',
          ucbrowser: t,
          version: getFirstMatch(/(?:ucbrowser)[\s\/](\d+(?:\.\d+)+)/i)
        };
      } else if (/mxios/i.test(ua)) {
        result = {
          name: 'Maxthon',
          maxthon: t,
          version: getFirstMatch(/(?:mxios)[\s\/](\d+(?:\.\d+)+)/i)
        };
      } else if (/epiphany/i.test(ua)) {
        result = {
          name: 'Epiphany',
          epiphany: t,
          version: getFirstMatch(/(?:epiphany)[\s\/](\d+(?:\.\d+)+)/i)
        };
      } else if (/puffin/i.test(ua)) {
        result = {
          name: 'Puffin',
          puffin: t,
          version: getFirstMatch(/(?:puffin)[\s\/](\d+(?:\.\d+)?)/i)
        };
      } else if (/sleipnir/i.test(ua)) {
        result = {
          name: 'Sleipnir',
          sleipnir: t,
          version: getFirstMatch(/(?:sleipnir)[\s\/](\d+(?:\.\d+)+)/i)
        };
      } else if (/k-meleon/i.test(ua)) {
        result = {
          name: 'K-Meleon',
          kMeleon: t,
          version: getFirstMatch(/(?:k-meleon)[\s\/](\d+(?:\.\d+)+)/i)
        };
      } else if (windowsphone) {
        result = {
          name: 'Windows Phone',
          windowsphone: t
        };
        if (edgeVersion) {
          result.msedge = t;
          result.version = edgeVersion;
        } else {
          result.msie = t;
          result.version = getFirstMatch(/iemobile\/(\d+(\.\d+)?)/i);
        }
      } else if (/msie|trident/i.test(ua)) {
        result = {
          name: 'Internet Explorer',
          msie: t,
          version: getFirstMatch(/(?:msie |rv:)(\d+(\.\d+)?)/i)
        };
      } else if (chromeos) {
        result = {
          name: 'Chrome',
          chromeos: t,
          chromeBook: t,
          chrome: t,
          version: getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)
        };
      } else if (/chrome.+? edge/i.test(ua)) {
        result = {
          name: 'Microsoft Edge',
          msedge: t,
          version: edgeVersion
        };
      } else if (/vivaldi/i.test(ua)) {
        result = {
          name: 'Vivaldi',
          vivaldi: t,
          version: getFirstMatch(/vivaldi\/(\d+(\.\d+)?)/i) || versionIdentifier
        };
      } else if (sailfish) {
        result = {
          name: 'Sailfish',
          sailfish: t,
          version: getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i)
        };
      } else if (/seamonkey\//i.test(ua)) {
        result = {
          name: 'SeaMonkey',
          seamonkey: t,
          version: getFirstMatch(/seamonkey\/(\d+(\.\d+)?)/i)
        };
      } else if (/firefox|iceweasel|fxios/i.test(ua)) {
        result = {
          name: 'Firefox',
          firefox: t,
          version: getFirstMatch(/(?:firefox|iceweasel|fxios)[ \/](\d+(\.\d+)?)/i)
        };
        if (/\((mobile|tablet);[^\)]*rv:[\d\.]+\)/i.test(ua)) {
          result.firefoxos = t;
        }
      } else if (silk) {
        result = {
          name: 'Amazon Silk',
          silk: t,
          version: getFirstMatch(/silk\/(\d+(\.\d+)?)/i)
        };
      } else if (/phantom/i.test(ua)) {
        result = {
          name: 'PhantomJS',
          phantom: t,
          version: getFirstMatch(/phantomjs\/(\d+(\.\d+)?)/i)
        };
      } else if (/slimerjs/i.test(ua)) {
        result = {
          name: 'SlimerJS',
          slimer: t,
          version: getFirstMatch(/slimerjs\/(\d+(\.\d+)?)/i)
        };
      } else if (/blackberry|\bbb\d+/i.test(ua) || /rim\stablet/i.test(ua)) {
        result = {
          name: 'BlackBerry',
          blackberry: t,
          version: versionIdentifier || getFirstMatch(/blackberry[\d]+\/(\d+(\.\d+)?)/i)
        };
      } else if (webos) {
        result = {
          name: 'WebOS',
          webos: t,
          version: versionIdentifier || getFirstMatch(/w(?:eb)?osbrowser\/(\d+(\.\d+)?)/i)
        };
        /touchpad\//i.test(ua) && (result.touchpad = t);
      } else if (/bada/i.test(ua)) {
        result = {
          name: 'Bada',
          bada: t,
          version: getFirstMatch(/dolfin\/(\d+(\.\d+)?)/i)
        };
      } else if (tizen) {
        result = {
          name: 'Tizen',
          tizen: t,
          version: getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.\d+)?)/i) || versionIdentifier
        };
      } else if (/qupzilla/i.test(ua)) {
        result = {
          name: 'QupZilla',
          qupzilla: t,
          version: getFirstMatch(/(?:qupzilla)[\s\/](\d+(?:\.\d+)+)/i) || versionIdentifier
        };
      } else if (/chromium/i.test(ua)) {
        result = {
          name: 'Chromium',
          chromium: t,
          version: getFirstMatch(/(?:chromium)[\s\/](\d+(?:\.\d+)?)/i) || versionIdentifier
        };
      } else if (/chrome|crios|crmo/i.test(ua)) {
        result = {
          name: 'Chrome',
          chrome: t,
          version: getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)
        };
      } else if (android) {
        result = {
          name: 'Android',
          version: versionIdentifier
        };
      } else if (/safari|applewebkit/i.test(ua)) {
        result = {
          name: 'Safari',
          safari: t
        };
        if (versionIdentifier) {
          result.version = versionIdentifier;
        }
      } else if (iosdevice) {
        result = {
          name: iosdevice == 'iphone' ? 'iPhone' : iosdevice == 'ipad' ? 'iPad' : 'iPod'
        };
        // WTF: version is not part of user agent in web apps
        if (versionIdentifier) {
          result.version = versionIdentifier;
        }
      } else if (/googlebot/i.test(ua)) {
        result = {
          name: 'Googlebot',
          googlebot: t,
          version: getFirstMatch(/googlebot\/(\d+(\.\d+))/i) || versionIdentifier
        };
      } else {
        result = {
          name: getFirstMatch(/^(.*)\/(.*) /),
          version: getSecondMatch(/^(.*)\/(.*) /)
        };
      }

      // set webkit or gecko flag for browsers based on these engines
      if (!result.msedge && /(apple)?webkit/i.test(ua)) {
        if (/(apple)?webkit\/537\.36/i.test(ua)) {
          result.name = result.name || "Blink";
          result.blink = t;
        } else {
          result.name = result.name || "Webkit";
          result.webkit = t;
        }
        if (!result.version && versionIdentifier) {
          result.version = versionIdentifier;
        }
      } else if (!result.opera && /gecko\//i.test(ua)) {
        result.name = result.name || "Gecko";
        result.gecko = t;
        result.version = result.version || getFirstMatch(/gecko\/(\d+(\.\d+)?)/i);
      }

      // set OS flags for platforms that have multiple browsers
      if (!result.windowsphone && !result.msedge && (android || result.silk)) {
        result.android = t;
      } else if (!result.windowsphone && !result.msedge && iosdevice) {
        result[iosdevice] = t;
        result.ios = t;
      } else if (mac) {
        result.mac = t;
      } else if (xbox) {
        result.xbox = t;
      } else if (windows) {
        result.windows = t;
      } else if (linux) {
        result.linux = t;
      }

      // OS version extraction
      var osVersion = '';
      if (result.windowsphone) {
        osVersion = getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i);
      } else if (iosdevice) {
        osVersion = getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i);
        osVersion = osVersion.replace(/[_\s]/g, '.');
      } else if (android) {
        osVersion = getFirstMatch(/android[ \/-](\d+(\.\d+)*)/i);
      } else if (result.webos) {
        osVersion = getFirstMatch(/(?:web|hpw)os\/(\d+(\.\d+)*)/i);
      } else if (result.blackberry) {
        osVersion = getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i);
      } else if (result.bada) {
        osVersion = getFirstMatch(/bada\/(\d+(\.\d+)*)/i);
      } else if (result.tizen) {
        osVersion = getFirstMatch(/tizen[\/\s](\d+(\.\d+)*)/i);
      }
      if (osVersion) {
        result.osversion = osVersion;
      }

      // device type extraction
      var osMajorVersion = osVersion.split('.')[0];
      if (tablet || nexusTablet || iosdevice == 'ipad' || android && (osMajorVersion == 3 || osMajorVersion >= 4 && !mobile) || result.silk) {
        result.tablet = t;
      } else if (mobile || iosdevice == 'iphone' || iosdevice == 'ipod' || android || nexusMobile || result.blackberry || result.webos || result.bada) {
        result.mobile = t;
      }

      // Graded Browser Support
      // http://developer.yahoo.com/yui/articles/gbs
      if (result.msedge || result.msie && result.version >= 10 || result.yandexbrowser && result.version >= 15 || result.vivaldi && result.version >= 1.0 || result.chrome && result.version >= 20 || result.samsungBrowser && result.version >= 4 || result.firefox && result.version >= 20.0 || result.safari && result.version >= 6 || result.opera && result.version >= 10.0 || result.ios && result.osversion && result.osversion.split(".")[0] >= 6 || result.blackberry && result.version >= 10.1 || result.chromium && result.version >= 20) {
        result.a = t;
      } else if (result.msie && result.version < 10 || result.chrome && result.version < 20 || result.firefox && result.version < 20.0 || result.safari && result.version < 6 || result.opera && result.version < 10.0 || result.ios && result.osversion && result.osversion.split(".")[0] < 6 || result.chromium && result.version < 20) {
        result.c = t;
      } else result.x = t;

      return result;
    }

    var bowser = detect(typeof navigator !== 'undefined' ? navigator.userAgent || '' : '');

    bowser.test = function (browserList) {
      for (var i = 0; i < browserList.length; ++i) {
        var browserItem = browserList[i];
        if (typeof browserItem === 'string') {
          if (browserItem in bowser) {
            return true;
          }
        }
      }
      return false;
    };

    /**
     * Get version precisions count
     *
     * @example
     *   getVersionPrecision("1.10.3") // 3
     *
     * @param  {string} version
     * @return {number}
     */
    function getVersionPrecision(version) {
      return version.split(".").length;
    }

    /**
     * Array::map polyfill
     *
     * @param  {Array} arr
     * @param  {Function} iterator
     * @return {Array}
     */
    function map(arr, iterator) {
      var result = [],
          i;
      if (Array.prototype.map) {
        return Array.prototype.map.call(arr, iterator);
      }
      for (i = 0; i < arr.length; i++) {
        result.push(iterator(arr[i]));
      }
      return result;
    }

    /**
     * Calculate browser version weight
     *
     * @example
     *   compareVersions(['1.10.2.1',  '1.8.2.1.90'])    // 1
     *   compareVersions(['1.010.2.1', '1.09.2.1.90']);  // 1
     *   compareVersions(['1.10.2.1',  '1.10.2.1']);     // 0
     *   compareVersions(['1.10.2.1',  '1.0800.2']);     // -1
     *
     * @param  {Array<String>} versions versions to compare
     * @return {Number} comparison result
     */
    function compareVersions(versions) {
      // 1) get common precision for both versions, for example for "10.0" and "9" it should be 2
      var precision = Math.max(getVersionPrecision(versions[0]), getVersionPrecision(versions[1]));
      var chunks = map(versions, function (version) {
        var delta = precision - getVersionPrecision(version);

        // 2) "9" -> "9.0" (for precision = 2)
        version = version + new Array(delta + 1).join(".0");

        // 3) "9.0" -> ["000000000"", "000000009"]
        return map(version.split("."), function (chunk) {
          return new Array(20 - chunk.length).join("0") + chunk;
        }).reverse();
      });

      // iterate in reverse order by reversed chunks array
      while (--precision >= 0) {
        // 4) compare: "000000009" > "000000010" = false (but "9" > "10" = true)
        if (chunks[0][precision] > chunks[1][precision]) {
          return 1;
        } else if (chunks[0][precision] === chunks[1][precision]) {
          if (precision === 0) {
            // all version chunks are same
            return 0;
          }
        } else {
          return -1;
        }
      }
    }

    /**
     * Check if browser is unsupported
     *
     * @example
     *   bowser.isUnsupportedBrowser({
     *     msie: "10",
     *     firefox: "23",
     *     chrome: "29",
     *     safari: "5.1",
     *     opera: "16",
     *     phantom: "534"
     *   });
     *
     * @param  {Object}  minVersions map of minimal version to browser
     * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map
     * @param  {String}  [ua] user agent string
     * @return {Boolean}
     */
    function isUnsupportedBrowser(minVersions, strictMode, ua) {
      var _bowser = bowser;

      // make strictMode param optional with ua param usage
      if (typeof strictMode === 'string') {
        ua = strictMode;
        strictMode = void 0;
      }

      if (strictMode === void 0) {
        strictMode = false;
      }
      if (ua) {
        _bowser = detect(ua);
      }

      var version = "" + _bowser.version;
      for (var browser in minVersions) {
        if (minVersions.hasOwnProperty(browser)) {
          if (_bowser[browser]) {
            if (typeof minVersions[browser] !== 'string') {
              throw new Error('Browser version in the minVersion map should be a string: ' + browser + ': ' + String(minVersions));
            }

            // browser version and min supported version.
            return compareVersions([version, minVersions[browser]]) < 0;
          }
        }
      }

      return strictMode; // not found
    }

    /**
     * Check if browser is supported
     *
     * @param  {Object} minVersions map of minimal version to browser
     * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map
     * @param  {String}  [ua] user agent string
     * @return {Boolean}
     */
    function check(minVersions, strictMode, ua) {
      return !isUnsupportedBrowser(minVersions, strictMode, ua);
    }

    bowser.isUnsupportedBrowser = isUnsupportedBrowser;
    bowser.compareVersions = compareVersions;
    bowser.check = check;

    /*
     * Set our detect method to the main bowser object so we can
     * reuse it to test other user agents.
     * This is needed to implement future tests.
     */
    bowser._detect = detect;

    return bowser;
  });
});
$__System.registerDynamic('165', [], true, function ($__require, exports, module) {
    /* https://github.com/bevacqua/hash-sum */
    'use strict';

    var global = this || self,
        GLOBAL = global;
    function pad(hash, len) {
        while (hash.length < len) {
            hash = '0' + hash;
        }
        return hash;
    }

    function fold(hash, text) {
        var i;
        var chr;
        var len;
        if (text.length === 0) {
            return hash;
        }
        for (i = 0, len = text.length; i < len; i++) {
            chr = text.charCodeAt(i);
            hash = (hash << 5) - hash + chr;
            hash |= 0;
        }
        return hash < 0 ? hash * -2 : hash;
    }

    function foldObject(hash, o, seen) {
        return Object.keys(o).sort().reduce(foldKey, hash);
        function foldKey(hash, key) {
            return foldValue(hash, o[key], key, seen);
        }
    }

    function foldValue(input, value, key, seen) {
        var hash = fold(fold(fold(input, key), toString(value)), typeof value);
        if (value === null) {
            return fold(hash, 'null');
        }
        if (value === undefined) {
            return fold(hash, 'undefined');
        }
        if (typeof value === 'object') {
            if (seen.indexOf(value) !== -1) {
                return fold(hash, '[Circular]' + key);
            }
            seen.push(value);
            return foldObject(hash, value, seen);
        }
        return fold(hash, value.toString());
    }

    function toString(o) {
        return Object.prototype.toString.call(o);
    }

    function sum(o) {
        return pad(foldValue(0, o, '', []).toString(16), 8);
    }

    module.exports = sum;
});
$__System.registerDynamic('166', [], true, function ($__require, exports, module) {
	var global = this || self,
	    GLOBAL = global;
	;(function () {
		'use strict';

		/**
   * @preserve FastClick: polyfill to remove click delays on browsers with touch UIs.
   *
   * @codingstandard ftlabs-jsv2
   * @copyright The Financial Times Limited [All Rights Reserved]
   * @license MIT License (see LICENSE.txt)
   */

		/*jslint browser:true, node:true*/
		/*global define, Event, Node*/

		/**
   * Instantiate fast-clicking listeners on the specified layer.
   *
   * @constructor
   * @param {Element} layer The layer to listen on
   * @param {Object} [options={}] The options to override the defaults
   */

		function FastClick(layer, options) {
			var oldOnClick;

			options = options || {};

			/**
    * Whether a click is currently being tracked.
    *
    * @type boolean
    */
			this.trackingClick = false;

			/**
    * Timestamp for when click tracking started.
    *
    * @type number
    */
			this.trackingClickStart = 0;

			/**
    * The element being tracked for a click.
    *
    * @type EventTarget
    */
			this.targetElement = null;

			/**
    * X-coordinate of touch start event.
    *
    * @type number
    */
			this.touchStartX = 0;

			/**
    * Y-coordinate of touch start event.
    *
    * @type number
    */
			this.touchStartY = 0;

			/**
    * ID of the last touch, retrieved from Touch.identifier.
    *
    * @type number
    */
			this.lastTouchIdentifier = 0;

			/**
    * Touchmove boundary, beyond which a click will be cancelled.
    *
    * @type number
    */
			this.touchBoundary = options.touchBoundary || 10;

			/**
    * The FastClick layer.
    *
    * @type Element
    */
			this.layer = layer;

			/**
    * The minimum time between tap(touchstart and touchend) events
    *
    * @type number
    */
			this.tapDelay = options.tapDelay || 200;

			/**
    * The maximum time for a tap
    *
    * @type number
    */
			this.tapTimeout = options.tapTimeout || 700;

			if (FastClick.notNeeded(layer)) {
				return;
			}

			// Some old versions of Android don't have Function.prototype.bind
			function bind(method, context) {
				return function () {
					return method.apply(context, arguments);
				};
			}

			var methods = ['onMouse', 'onClick', 'onTouchStart', 'onTouchMove', 'onTouchEnd', 'onTouchCancel'];
			var context = this;
			for (var i = 0, l = methods.length; i < l; i++) {
				context[methods[i]] = bind(context[methods[i]], context);
			}

			// Set up event handlers as required
			if (deviceIsAndroid) {
				layer.addEventListener('mouseover', this.onMouse, true);
				layer.addEventListener('mousedown', this.onMouse, true);
				layer.addEventListener('mouseup', this.onMouse, true);
			}

			layer.addEventListener('click', this.onClick, true);
			layer.addEventListener('touchstart', this.onTouchStart, false);
			layer.addEventListener('touchmove', this.onTouchMove, false);
			layer.addEventListener('touchend', this.onTouchEnd, false);
			layer.addEventListener('touchcancel', this.onTouchCancel, false);

			// Hack is required for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
			// which is how FastClick normally stops click events bubbling to callbacks registered on the FastClick
			// layer when they are cancelled.
			if (!Event.prototype.stopImmediatePropagation) {
				layer.removeEventListener = function (type, callback, capture) {
					var rmv = Node.prototype.removeEventListener;
					if (type === 'click') {
						rmv.call(layer, type, callback.hijacked || callback, capture);
					} else {
						rmv.call(layer, type, callback, capture);
					}
				};

				layer.addEventListener = function (type, callback, capture) {
					var adv = Node.prototype.addEventListener;
					if (type === 'click') {
						adv.call(layer, type, callback.hijacked || (callback.hijacked = function (event) {
							if (!event.propagationStopped) {
								callback(event);
							}
						}), capture);
					} else {
						adv.call(layer, type, callback, capture);
					}
				};
			}

			// If a handler is already declared in the element's onclick attribute, it will be fired before
			// FastClick's onClick handler. Fix this by pulling out the user-defined handler function and
			// adding it as listener.
			if (typeof layer.onclick === 'function') {

				// Android browser on at least 3.2 requires a new reference to the function in layer.onclick
				// - the old one won't work if passed to addEventListener directly.
				oldOnClick = layer.onclick;
				layer.addEventListener('click', function (event) {
					oldOnClick(event);
				}, false);
				layer.onclick = null;
			}
		}

		/**
  * Windows Phone 8.1 fakes user agent string to look like Android and iPhone.
  *
  * @type boolean
  */
		var deviceIsWindowsPhone = navigator.userAgent.indexOf("Windows Phone") >= 0;

		/**
   * Android requires exceptions.
   *
   * @type boolean
   */
		var deviceIsAndroid = navigator.userAgent.indexOf('Android') > 0 && !deviceIsWindowsPhone;

		/**
   * iOS requires exceptions.
   *
   * @type boolean
   */
		var deviceIsIOS = /iP(ad|hone|od)/.test(navigator.userAgent) && !deviceIsWindowsPhone;

		/**
   * iOS 4 requires an exception for select elements.
   *
   * @type boolean
   */
		var deviceIsIOS4 = deviceIsIOS && /OS 4_\d(_\d)?/.test(navigator.userAgent);

		/**
   * iOS 6.0-7.* requires the target element to be manually derived
   *
   * @type boolean
   */
		var deviceIsIOSWithBadTarget = deviceIsIOS && /OS [6-7]_\d/.test(navigator.userAgent);

		/**
   * BlackBerry requires exceptions.
   *
   * @type boolean
   */
		var deviceIsBlackBerry10 = navigator.userAgent.indexOf('BB10') > 0;

		/**
   * Determine whether a given element requires a native click.
   *
   * @param {EventTarget|Element} target Target DOM element
   * @returns {boolean} Returns true if the element needs a native click
   */
		FastClick.prototype.needsClick = function (target) {
			switch (target.nodeName.toLowerCase()) {

				// Don't send a synthetic click to disabled inputs (issue #62)
				case 'button':
				case 'select':
				case 'textarea':
					if (target.disabled) {
						return true;
					}

					break;
				case 'input':

					// File inputs need real clicks on iOS 6 due to a browser bug (issue #68)
					if (deviceIsIOS && target.type === 'file' || target.disabled) {
						return true;
					}

					break;
				case 'label':
				case 'iframe': // iOS8 homescreen apps can prevent events bubbling into frames
				case 'video':
					return true;
			}

			return (/\bneedsclick\b/.test(target.className)
			);
		};

		/**
   * Determine whether a given element requires a call to focus to simulate click into element.
   *
   * @param {EventTarget|Element} target Target DOM element
   * @returns {boolean} Returns true if the element requires a call to focus to simulate native click.
   */
		FastClick.prototype.needsFocus = function (target) {
			switch (target.nodeName.toLowerCase()) {
				case 'textarea':
					return true;
				case 'select':
					return !deviceIsAndroid;
				case 'input':
					switch (target.type) {
						case 'button':
						case 'checkbox':
						case 'file':
						case 'image':
						case 'radio':
						case 'submit':
							return false;
					}

					// No point in attempting to focus disabled inputs
					return !target.disabled && !target.readOnly;
				default:
					return (/\bneedsfocus\b/.test(target.className)
					);
			}
		};

		/**
   * Send a click event to the specified element.
   *
   * @param {EventTarget|Element} targetElement
   * @param {Event} event
   */
		FastClick.prototype.sendClick = function (targetElement, event) {
			var clickEvent, touch;

			// On some Android devices activeElement needs to be blurred otherwise the synthetic click will have no effect (#24)
			if (document.activeElement && document.activeElement !== targetElement) {
				document.activeElement.blur();
			}

			touch = event.changedTouches[0];

			// Synthesise a click event, with an extra attribute so it can be tracked
			clickEvent = document.createEvent('MouseEvents');
			clickEvent.initMouseEvent(this.determineEventType(targetElement), true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);
			clickEvent.forwardedTouchEvent = true;
			targetElement.dispatchEvent(clickEvent);
		};

		FastClick.prototype.determineEventType = function (targetElement) {

			//Issue #159: Android Chrome Select Box does not open with a synthetic click event
			if (deviceIsAndroid && targetElement.tagName.toLowerCase() === 'select') {
				return 'mousedown';
			}

			return 'click';
		};

		/**
   * @param {EventTarget|Element} targetElement
   */
		FastClick.prototype.focus = function (targetElement) {
			var length;

			// Issue #160: on iOS 7, some input elements (e.g. date datetime month) throw a vague TypeError on setSelectionRange. These elements don't have an integer value for the selectionStart and selectionEnd properties, but unfortunately that can't be used for detection because accessing the properties also throws a TypeError. Just check the type instead. Filed as Apple bug #15122724.
			if (deviceIsIOS && targetElement.setSelectionRange && targetElement.type.indexOf('date') !== 0 && targetElement.type !== 'time' && targetElement.type !== 'month') {
				length = targetElement.value.length;
				targetElement.setSelectionRange(length, length);
			} else {
				targetElement.focus();
			}
		};

		/**
   * Check whether the given target element is a child of a scrollable layer and if so, set a flag on it.
   *
   * @param {EventTarget|Element} targetElement
   */
		FastClick.prototype.updateScrollParent = function (targetElement) {
			var scrollParent, parentElement;

			scrollParent = targetElement.fastClickScrollParent;

			// Attempt to discover whether the target element is contained within a scrollable layer. Re-check if the
			// target element was moved to another parent.
			if (!scrollParent || !scrollParent.contains(targetElement)) {
				parentElement = targetElement;
				do {
					if (parentElement.scrollHeight > parentElement.offsetHeight) {
						scrollParent = parentElement;
						targetElement.fastClickScrollParent = parentElement;
						break;
					}

					parentElement = parentElement.parentElement;
				} while (parentElement);
			}

			// Always update the scroll top tracker if possible.
			if (scrollParent) {
				scrollParent.fastClickLastScrollTop = scrollParent.scrollTop;
			}
		};

		/**
   * @param {EventTarget} targetElement
   * @returns {Element|EventTarget}
   */
		FastClick.prototype.getTargetElementFromEventTarget = function (eventTarget) {

			// On some older browsers (notably Safari on iOS 4.1 - see issue #56) the event target may be a text node.
			if (eventTarget.nodeType === Node.TEXT_NODE) {
				return eventTarget.parentNode;
			}

			return eventTarget;
		};

		/**
   * On touch start, record the position and scroll offset.
   *
   * @param {Event} event
   * @returns {boolean}
   */
		FastClick.prototype.onTouchStart = function (event) {
			var targetElement, touch, selection;

			// Ignore multiple touches, otherwise pinch-to-zoom is prevented if both fingers are on the FastClick element (issue #111).
			if (event.targetTouches.length > 1) {
				return true;
			}

			targetElement = this.getTargetElementFromEventTarget(event.target);
			touch = event.targetTouches[0];

			if (deviceIsIOS) {

				// Only trusted events will deselect text on iOS (issue #49)
				selection = window.getSelection();
				if (selection.rangeCount && !selection.isCollapsed) {
					return true;
				}

				if (!deviceIsIOS4) {

					// Weird things happen on iOS when an alert or confirm dialog is opened from a click event callback (issue #23):
					// when the user next taps anywhere else on the page, new touchstart and touchend events are dispatched
					// with the same identifier as the touch event that previously triggered the click that triggered the alert.
					// Sadly, there is an issue on iOS 4 that causes some normal touch events to have the same identifier as an
					// immediately preceeding touch event (issue #52), so this fix is unavailable on that platform.
					// Issue 120: touch.identifier is 0 when Chrome dev tools 'Emulate touch events' is set with an iOS device UA string,
					// which causes all touch events to be ignored. As this block only applies to iOS, and iOS identifiers are always long,
					// random integers, it's safe to to continue if the identifier is 0 here.
					if (touch.identifier && touch.identifier === this.lastTouchIdentifier) {
						event.preventDefault();
						return false;
					}

					this.lastTouchIdentifier = touch.identifier;

					// If the target element is a child of a scrollable layer (using -webkit-overflow-scrolling: touch) and:
					// 1) the user does a fling scroll on the scrollable layer
					// 2) the user stops the fling scroll with another tap
					// then the event.target of the last 'touchend' event will be the element that was under the user's finger
					// when the fling scroll was started, causing FastClick to send a click event to that layer - unless a check
					// is made to ensure that a parent layer was not scrolled before sending a synthetic click (issue #42).
					this.updateScrollParent(targetElement);
				}
			}

			this.trackingClick = true;
			this.trackingClickStart = event.timeStamp;
			this.targetElement = targetElement;

			this.touchStartX = touch.pageX;
			this.touchStartY = touch.pageY;

			// Prevent phantom clicks on fast double-tap (issue #36)
			if (event.timeStamp - this.lastClickTime < this.tapDelay) {
				event.preventDefault();
			}

			return true;
		};

		/**
   * Based on a touchmove event object, check whether the touch has moved past a boundary since it started.
   *
   * @param {Event} event
   * @returns {boolean}
   */
		FastClick.prototype.touchHasMoved = function (event) {
			var touch = event.changedTouches[0],
			    boundary = this.touchBoundary;

			if (Math.abs(touch.pageX - this.touchStartX) > boundary || Math.abs(touch.pageY - this.touchStartY) > boundary) {
				return true;
			}

			return false;
		};

		/**
   * Update the last position.
   *
   * @param {Event} event
   * @returns {boolean}
   */
		FastClick.prototype.onTouchMove = function (event) {
			if (!this.trackingClick) {
				return true;
			}

			// If the touch has moved, cancel the click tracking
			if (this.targetElement !== this.getTargetElementFromEventTarget(event.target) || this.touchHasMoved(event)) {
				this.trackingClick = false;
				this.targetElement = null;
			}

			return true;
		};

		/**
   * Attempt to find the labelled control for the given label element.
   *
   * @param {EventTarget|HTMLLabelElement} labelElement
   * @returns {Element|null}
   */
		FastClick.prototype.findControl = function (labelElement) {

			// Fast path for newer browsers supporting the HTML5 control attribute
			if (labelElement.control !== undefined) {
				return labelElement.control;
			}

			// All browsers under test that support touch events also support the HTML5 htmlFor attribute
			if (labelElement.htmlFor) {
				return document.getElementById(labelElement.htmlFor);
			}

			// If no for attribute exists, attempt to retrieve the first labellable descendant element
			// the list of which is defined here: http://www.w3.org/TR/html5/forms.html#category-label
			return labelElement.querySelector('button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea');
		};

		/**
   * On touch end, determine whether to send a click event at once.
   *
   * @param {Event} event
   * @returns {boolean}
   */
		FastClick.prototype.onTouchEnd = function (event) {
			var forElement,
			    trackingClickStart,
			    targetTagName,
			    scrollParent,
			    touch,
			    targetElement = this.targetElement;

			if (!this.trackingClick) {
				return true;
			}

			// Prevent phantom clicks on fast double-tap (issue #36)
			if (event.timeStamp - this.lastClickTime < this.tapDelay) {
				this.cancelNextClick = true;
				return true;
			}

			if (event.timeStamp - this.trackingClickStart > this.tapTimeout) {
				return true;
			}

			// Reset to prevent wrong click cancel on input (issue #156).
			this.cancelNextClick = false;

			this.lastClickTime = event.timeStamp;

			trackingClickStart = this.trackingClickStart;
			this.trackingClick = false;
			this.trackingClickStart = 0;

			// On some iOS devices, the targetElement supplied with the event is invalid if the layer
			// is performing a transition or scroll, and has to be re-detected manually. Note that
			// for this to function correctly, it must be called *after* the event target is checked!
			// See issue #57; also filed as rdar://13048589 .
			if (deviceIsIOSWithBadTarget) {
				touch = event.changedTouches[0];

				// In certain cases arguments of elementFromPoint can be negative, so prevent setting targetElement to null
				targetElement = document.elementFromPoint(touch.pageX - window.pageXOffset, touch.pageY - window.pageYOffset) || targetElement;
				targetElement.fastClickScrollParent = this.targetElement.fastClickScrollParent;
			}

			targetTagName = targetElement.tagName.toLowerCase();
			if (targetTagName === 'label') {
				forElement = this.findControl(targetElement);
				if (forElement) {
					this.focus(targetElement);
					if (deviceIsAndroid) {
						return false;
					}

					targetElement = forElement;
				}
			} else if (this.needsFocus(targetElement)) {

				// Case 1: If the touch started a while ago (best guess is 100ms based on tests for issue #36) then focus will be triggered anyway. Return early and unset the target element reference so that the subsequent click will be allowed through.
				// Case 2: Without this exception for input elements tapped when the document is contained in an iframe, then any inputted text won't be visible even though the value attribute is updated as the user types (issue #37).
				if (event.timeStamp - trackingClickStart > 100 || deviceIsIOS && window.top !== window && targetTagName === 'input') {
					this.targetElement = null;
					return false;
				}

				this.focus(targetElement);
				this.sendClick(targetElement, event);

				// Select elements need the event to go through on iOS 4, otherwise the selector menu won't open.
				// Also this breaks opening selects when VoiceOver is active on iOS6, iOS7 (and possibly others)
				if (!deviceIsIOS || targetTagName !== 'select') {
					this.targetElement = null;
					event.preventDefault();
				}

				return false;
			}

			if (deviceIsIOS && !deviceIsIOS4) {

				// Don't send a synthetic click event if the target element is contained within a parent layer that was scrolled
				// and this tap is being used to stop the scrolling (usually initiated by a fling - issue #42).
				scrollParent = targetElement.fastClickScrollParent;
				if (scrollParent && scrollParent.fastClickLastScrollTop !== scrollParent.scrollTop) {
					return true;
				}
			}

			// Prevent the actual click from going though - unless the target node is marked as requiring
			// real clicks or if it is in the whitelist in which case only non-programmatic clicks are permitted.
			if (!this.needsClick(targetElement)) {
				event.preventDefault();
				this.sendClick(targetElement, event);
			}

			return false;
		};

		/**
   * On touch cancel, stop tracking the click.
   *
   * @returns {void}
   */
		FastClick.prototype.onTouchCancel = function () {
			this.trackingClick = false;
			this.targetElement = null;
		};

		/**
   * Determine mouse events which should be permitted.
   *
   * @param {Event} event
   * @returns {boolean}
   */
		FastClick.prototype.onMouse = function (event) {

			// If a target element was never set (because a touch event was never fired) allow the event
			if (!this.targetElement) {
				return true;
			}

			if (event.forwardedTouchEvent) {
				return true;
			}

			// Programmatically generated events targeting a specific element should be permitted
			if (!event.cancelable) {
				return true;
			}

			// Derive and check the target element to see whether the mouse event needs to be permitted;
			// unless explicitly enabled, prevent non-touch click events from triggering actions,
			// to prevent ghost/doubleclicks.
			if (!this.needsClick(this.targetElement) || this.cancelNextClick) {

				// Prevent any user-added listeners declared on FastClick element from being fired.
				if (event.stopImmediatePropagation) {
					event.stopImmediatePropagation();
				} else {

					// Part of the hack for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
					event.propagationStopped = true;
				}

				// Cancel the event
				event.stopPropagation();
				event.preventDefault();

				return false;
			}

			// If the mouse event is permitted, return true for the action to go through.
			return true;
		};

		/**
   * On actual clicks, determine whether this is a touch-generated click, a click action occurring
   * naturally after a delay after a touch (which needs to be cancelled to avoid duplication), or
   * an actual click which should be permitted.
   *
   * @param {Event} event
   * @returns {boolean}
   */
		FastClick.prototype.onClick = function (event) {
			var permitted;

			// It's possible for another FastClick-like library delivered with third-party code to fire a click event before FastClick does (issue #44). In that case, set the click-tracking flag back to false and return early. This will cause onTouchEnd to return early.
			if (this.trackingClick) {
				this.targetElement = null;
				this.trackingClick = false;
				return true;
			}

			// Very odd behaviour on iOS (issue #18): if a submit element is present inside a form and the user hits enter in the iOS simulator or clicks the Go button on the pop-up OS keyboard the a kind of 'fake' click event will be triggered with the submit-type input element as the target.
			if (event.target.type === 'submit' && event.detail === 0) {
				return true;
			}

			permitted = this.onMouse(event);

			// Only unset targetElement if the click is not permitted. This will ensure that the check for !targetElement in onMouse fails and the browser's click doesn't go through.
			if (!permitted) {
				this.targetElement = null;
			}

			// If clicks are permitted, return true for the action to go through.
			return permitted;
		};

		/**
   * Remove all FastClick's event listeners.
   *
   * @returns {void}
   */
		FastClick.prototype.destroy = function () {
			var layer = this.layer;

			if (deviceIsAndroid) {
				layer.removeEventListener('mouseover', this.onMouse, true);
				layer.removeEventListener('mousedown', this.onMouse, true);
				layer.removeEventListener('mouseup', this.onMouse, true);
			}

			layer.removeEventListener('click', this.onClick, true);
			layer.removeEventListener('touchstart', this.onTouchStart, false);
			layer.removeEventListener('touchmove', this.onTouchMove, false);
			layer.removeEventListener('touchend', this.onTouchEnd, false);
			layer.removeEventListener('touchcancel', this.onTouchCancel, false);
		};

		/**
   * Check whether FastClick is needed.
   *
   * @param {Element} layer The layer to listen on
   */
		FastClick.notNeeded = function (layer) {
			var metaViewport;
			var chromeVersion;
			var blackberryVersion;
			var firefoxVersion;

			// Devices that don't support touch don't need FastClick
			if (typeof window.ontouchstart === 'undefined') {
				return true;
			}

			// Chrome version - zero for other browsers
			chromeVersion = +(/Chrome\/([0-9]+)/.exec(navigator.userAgent) || [, 0])[1];

			if (chromeVersion) {

				if (deviceIsAndroid) {
					metaViewport = document.querySelector('meta[name=viewport]');

					if (metaViewport) {
						// Chrome on Android with user-scalable="no" doesn't need FastClick (issue #89)
						if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
							return true;
						}
						// Chrome 32 and above with width=device-width or less don't need FastClick
						if (chromeVersion > 31 && document.documentElement.scrollWidth <= window.outerWidth) {
							return true;
						}
					}

					// Chrome desktop doesn't need FastClick (issue #15)
				} else {
					return true;
				}
			}

			if (deviceIsBlackBerry10) {
				blackberryVersion = navigator.userAgent.match(/Version\/([0-9]*)\.([0-9]*)/);

				// BlackBerry 10.3+ does not require Fastclick library.
				// https://github.com/ftlabs/fastclick/issues/251
				if (blackberryVersion[1] >= 10 && blackberryVersion[2] >= 3) {
					metaViewport = document.querySelector('meta[name=viewport]');

					if (metaViewport) {
						// user-scalable=no eliminates click delay.
						if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
							return true;
						}
						// width=device-width (or less than device-width) eliminates click delay.
						if (document.documentElement.scrollWidth <= window.outerWidth) {
							return true;
						}
					}
				}
			}

			// IE10 with -ms-touch-action: none or manipulation, which disables double-tap-to-zoom (issue #97)
			if (layer.style.msTouchAction === 'none' || layer.style.touchAction === 'manipulation') {
				return true;
			}

			// Firefox version - zero for other browsers
			firefoxVersion = +(/Firefox\/([0-9]+)/.exec(navigator.userAgent) || [, 0])[1];

			if (firefoxVersion >= 27) {
				// Firefox 27+ does not have tap delay if the content is not zoomable - https://bugzilla.mozilla.org/show_bug.cgi?id=922896

				metaViewport = document.querySelector('meta[name=viewport]');
				if (metaViewport && (metaViewport.content.indexOf('user-scalable=no') !== -1 || document.documentElement.scrollWidth <= window.outerWidth)) {
					return true;
				}
			}

			// IE11: prefixed -ms-touch-action is no longer supported and it's recomended to use non-prefixed version
			// http://msdn.microsoft.com/en-us/library/windows/apps/Hh767313.aspx
			if (layer.style.touchAction === 'none' || layer.style.touchAction === 'manipulation') {
				return true;
			}

			return false;
		};

		/**
   * Factory method for creating a FastClick object
   *
   * @param {Element} layer The layer to listen on
   * @param {Object} [options={}] The options to override the defaults
   */
		FastClick.attach = function (layer, options) {
			return new FastClick(layer, options);
		};

		if (typeof undefined === 'function' && typeof define.amd === 'object' && define.amd) {

			// AMD. Register as an anonymous module.
			define(function () {
				return FastClick;
			});
		} else if (typeof module !== 'undefined' && module.exports) {
			module.exports = FastClick.attach;
			module.exports.FastClick = FastClick;
		} else {
			window.FastClick = FastClick;
		}
	})();
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: mark@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */

$__System.registerDynamic('167', ['168', '169', '16a', '16b'], false, function ($__require, $__exports, $__module) {
    $__module.uri = $__module.id;
    return (function (require, exports, module) {
        var Modifier = require('168');
        var Transform = require('169');
        var Transitionable = require('16a');
        var TransitionableTransform = require('16b');

        /**
         *  A collection of visual changes to be
         *    applied to another renderable component, strongly coupled with the state that defines
         *    those changes. This collection includes a
         *    transform matrix, an opacity constant, a size, an origin specifier, and an alignment specifier.
         *    StateModifier objects can be added to any RenderNode or object
         *    capable of displaying renderables.  The StateModifier's children and descendants
         *    are transformed by the amounts specified in the modifier's properties.
         *
         * @class StateModifier
         * @constructor
         * @param {Object} [options] overrides of default options
         * @param {Transform} [options.transform] affine transformation matrix
         * @param {Number} [options.opacity]
         * @param {Array.Number} [options.origin] origin adjustment
         * @param {Array.Number} [options.align] align adjustment
         * @param {Array.Number} [options.size] size to apply to descendants
         * @param {Array.Number} [options.propportions] proportions to apply to descendants
         */
        function StateModifier(options) {
            this._transformState = new TransitionableTransform(Transform.identity);
            this._opacityState = new Transitionable(1);
            this._originState = new Transitionable([0, 0]);
            this._alignState = new Transitionable([0, 0]);
            this._sizeState = new Transitionable([0, 0]);
            this._proportionsState = new Transitionable([0, 0]);

            this._modifier = new Modifier({
                transform: this._transformState,
                opacity: this._opacityState,
                origin: null,
                align: null,
                size: null,
                proportions: null
            });

            this._hasOrigin = false;
            this._hasAlign = false;
            this._hasSize = false;
            this._hasProportions = false;

            if (options) {
                if (options.transform) this.setTransform(options.transform);
                if (options.opacity !== undefined) this.setOpacity(options.opacity);
                if (options.origin) this.setOrigin(options.origin);
                if (options.align) this.setAlign(options.align);
                if (options.size) this.setSize(options.size);
                if (options.proportions) this.setProportions(options.proportions);
            }
        }

        /**
         * Set the transform matrix of this modifier, either statically or
         *   through a provided Transitionable.
         *
         * @method setTransform
         *
         * @param {Transform} transform Transform to transition to.
         * @param {Transitionable} transition object of type {duration: number, curve:
         *    f[0,1] -> [0,1] or name}. If transition is omitted, change will be
         *    instantaneous.
         * @param {Function} [callback] callback to call after transition completes
         * @return {StateModifier} this
         */
        StateModifier.prototype.setTransform = function setTransform(transform, transition, callback) {
            this._transformState.set(transform, transition, callback);
            return this;
        };

        /**
         * Set the opacity of this modifier, either statically or
         *   through a provided Transitionable.
         *
         * @method setOpacity
         *
         * @param {Number} opacity Opacity value to transition to.
         * @param {Transitionable} transition object of type {duration: number, curve:
         *    f[0,1] -> [0,1] or name}. If transition is omitted, change will be
         *    instantaneous.
         * @param {Function} callback callback to call after transition completes
         * @return {StateModifier} this
         */
        StateModifier.prototype.setOpacity = function setOpacity(opacity, transition, callback) {
            this._opacityState.set(opacity, transition, callback);
            return this;
        };

        /**
         * Set the origin of this modifier, either statically or
         *   through a provided Transitionable.
         *
         * @method setOrigin
         *
         * @param {Array.Number} origin two element array with values between 0 and 1.
         * @param {Transitionable} transition object of type {duration: number, curve:
         *    f[0,1] -> [0,1] or name}. If transition is omitted, change will be
         *    instantaneous.
         * @param {Function} callback callback to call after transition completes
         * @return {StateModifier} this
         */
        StateModifier.prototype.setOrigin = function setOrigin(origin, transition, callback) {
            if (origin === null) {
                if (this._hasOrigin) {
                    this._modifier.originFrom(null);
                    this._hasOrigin = false;
                }
                return this;
            } else if (!this._hasOrigin) {
                this._hasOrigin = true;
                this._modifier.originFrom(this._originState);
            }
            this._originState.set(origin, transition, callback);
            return this;
        };

        /**
         * Set the alignment of this modifier, either statically or
         *   through a provided Transitionable.
         *
         * @method setAlign
         *
         * @param {Array.Number} align two element array with values between 0 and 1.
         * @param {Transitionable} transition object of type {duration: number, curve:
         *    f[0,1] -> [0,1] or name}. If transition is omitted, change will be
         *    instantaneous.
         * @param {Function} callback callback to call after transition completes
         * @return {StateModifier} this
         */
        StateModifier.prototype.setAlign = function setOrigin(align, transition, callback) {
            if (align === null) {
                if (this._hasAlign) {
                    this._modifier.alignFrom(null);
                    this._hasAlign = false;
                }
                return this;
            } else if (!this._hasAlign) {
                this._hasAlign = true;
                this._modifier.alignFrom(this._alignState);
            }
            this._alignState.set(align, transition, callback);
            return this;
        };

        /**
         * Set the size of this modifier, either statically or
         *   through a provided Transitionable.
         *
         * @method setSize
         *
         * @param {Array.Number} size two element array of [width, height]
         * @param {Transitionable} transition object of type {duration: number, curve:
         *    f[0,1] -> [0,1] or name}. If transition is omitted, change will be
         *    instantaneous.
         * @param {Function} callback callback to call after transition completes
         * @return {StateModifier} this
         */
        StateModifier.prototype.setSize = function setSize(size, transition, callback) {
            if (size === null) {
                if (this._hasSize) {
                    this._modifier.sizeFrom(null);
                    this._hasSize = false;
                }
                return this;
            } else if (!this._hasSize) {
                this._hasSize = true;
                this._modifier.sizeFrom(this._sizeState);
            }
            this._sizeState.set(size, transition, callback);
            return this;
        };

        /**
         * Set the proportions of this modifier, either statically or
         *   through a provided Transitionable.
         *
         * @method setProportions
         *
         * @param {Array.Number} proportions two element array with values between 0 and 1.
         * @param {Transitionable} transition Valid transitionable object
         * @param {Function} callback callback to call after transition completes
         * @return {StateModifier} this
         */
        StateModifier.prototype.setProportions = function setSize(proportions, transition, callback) {
            if (proportions === null) {
                if (this._hasProportions) {
                    this._modifier.proportionsFrom(null);
                    this._hasProportions = false;
                }
                return this;
            } else if (!this._hasProportions) {
                this._hasProportions = true;
                this._modifier.proportionsFrom(this._proportionsState);
            }
            this._proportionsState.set(proportions, transition, callback);
            return this;
        };

        /**
         * Stop the transition.
         *
         * @method halt
         */
        StateModifier.prototype.halt = function halt() {
            this._transformState.halt();
            this._opacityState.halt();
            this._originState.halt();
            this._alignState.halt();
            this._sizeState.halt();
            this._proportionsState.halt();
        };

        /**
         * Get the current state of the transform matrix component.
         *
         * @method getTransform
         * @return {Object} transform provider object
         */
        StateModifier.prototype.getTransform = function getTransform() {
            return this._transformState.get();
        };

        /**
         * Get the destination state of the transform component.
         *
         * @method getFinalTransform
         * @return {Transform} transform matrix
         */
        StateModifier.prototype.getFinalTransform = function getFinalTransform() {
            return this._transformState.getFinal();
        };

        /**
         * Get the current state of the opacity component.
         *
         * @method getOpacity
         * @return {Object} opacity provider object
         */
        StateModifier.prototype.getOpacity = function getOpacity() {
            return this._opacityState.get();
        };

        /**
         * Get the current state of the origin component.
         *
         * @method getOrigin
         * @return {Object} origin provider object
         */
        StateModifier.prototype.getOrigin = function getOrigin() {
            return this._hasOrigin ? this._originState.get() : null;
        };

        /**
         * Get the current state of the align component.
         *
         * @method getAlign
         * @return {Object} align provider object
         */
        StateModifier.prototype.getAlign = function getAlign() {
            return this._hasAlign ? this._alignState.get() : null;
        };

        /**
         * Get the current state of the size component.
         *
         * @method getSize
         * @return {Object} size provider object
         */
        StateModifier.prototype.getSize = function getSize() {
            return this._hasSize ? this._sizeState.get() : null;
        };

        /**
         * Get the current state of the propportions component.
         *
         * @method getProportions
         * @return {Object} size provider object
         */
        StateModifier.prototype.getProportions = function getProportions() {
            return this._hasProportions ? this._proportionsState.get() : null;
        };

        /**
         * Return render spec for this StateModifier, applying to the provided
         *    target component.  This is similar to render() for Surfaces.
         *
         * @private
         * @method modify
         *
         * @param {Object} target (already rendered) render spec to
         *    which to apply the transform.
         * @return {Object} render spec for this StateModifier, including the
         *    provided target
         */
        StateModifier.prototype.modify = function modify(target) {
            return this._modifier.modify(target);
        };

        module.exports = StateModifier;
    }).call($__exports, $__require, $__exports, $__module);
});
/**
 * This Source Code is licensed under the MIT license. If a copy of the
 * MIT-license was not distributed with this file, You can obtain one at:
 * http://opensource.org/licenses/mit-license.html.
 *
 * @author: Hein Rutjes (IjzerenHein)
 * @license MIT
 * @copyright Gloey Apps, 2015
 */

/**
 * Animating between famo.us views in awesome ways.
 *
 * @module
 */
$__System.registerDynamic('16c', ['16d', '16e', '169', '168', '167', '16f', '170', '171'], false, function ($__require, $__exports, $__module) {
    $__module.uri = $__module.id;
    return (function (require, exports, module) {

        // import dependencies
        var View = require('16d');
        var LayoutController = require('16e');
        var Transform = require('169');
        var Modifier = require('168');
        var StateModifier = require('167');
        var RenderNode = require('16f');
        var Timer = require('170');
        var Easing = require('171');

        /**
         * @class
         * @param {Object} [options] Configurable options.
         * @param {Object} [options.transition] Transition options (default: `{duration: 400, curve: Easing.inOutQuad}`).
         * @param {Function} [options.animation] Animation function (default: `AnimationController.Animation.Slide.Left`).
         * @param {Number} [options.zIndexOffset] Optional z-index difference between the hiding & showing renderable (default: 0).
         * @param {Number} [options.keepHiddenViewsInDOMCount] Keeps views in the DOM after they have been hidden (default: 0).
         * @param {Object} [options.show] Show specific options.
         * @param {Object} [options.show.transition] Show specific transition options.
         * @param {Function} [options.show.animation] Show specific animation function.
         * @param {Object} [options.hide] Hide specific options.
         * @param {Object} [options.hide.transition] Hide specific transition options.
         * @param {Function} [options.hide.animation] Hide specific animation function.
         * @param {Object} [options.transfer] Transfer options.
         * @param {Object} [options.transfer.transition] Transfer specific transition options.
         * @param {Number} [options.transfer.zIndex] Z-index the tranferables are moved on top while animating (default: 10).
         * @param {Bool} [options.transfer.fastResize] When enabled, scales the renderable i.s.o. resizing when doing the transfer animation (default: true).
         * @param {Array} [options.transfer.items] Ids (key/value) pairs (source-id/target-id) of the renderables that should be transferred.
         * @alias module:AnimationController
         */
        function AnimationController(options) {
            View.apply(this, arguments);

            this._size = [0, 0];
            _createLayout.call(this);

            if (options) {
                this.setOptions(options);
            }
        }
        AnimationController.prototype = Object.create(View.prototype);
        AnimationController.prototype.constructor = AnimationController;

        /**
         * Out of the box supported animations.
         */
        AnimationController.Animation = {
            Slide: {
                Left: function (show, size) {
                    return { transform: Transform.translate(show ? size[0] : -size[0], 0, 0) };
                },
                Right: function (show, size) {
                    return { transform: Transform.translate(show ? -size[0] : size[0], 0, 0) };
                },
                Up: function (show, size) {
                    return { transform: Transform.translate(0, show ? size[1] : -size[1], 0) };
                },
                Down: function (show, size) {
                    return { transform: Transform.translate(0, show ? -size[1] : size[1], 0) };
                }
            },
            Fade: function () /*show, size*/{
                return {
                    opacity: this && this.opacity !== undefined ? this.opacity : 0
                };
            },
            Zoom: function () /*show, size*/{
                var scale = this && this.scale !== undefined ? this.scale : 0.5;
                return {
                    transform: Transform.scale(scale, scale, 1)
                };
            },
            FadedRotateZoom: function (show /*, size*/) {
                var scale = show ? this && this.showScale !== undefined ? this.showScale : 0.9 : this && this.hideScale !== undefined ? this.hideScale : 1.1;
                return {
                    opacity: this && this.opacity !== undefined ? this.opacity : 0,
                    transform: Transform.thenScale(Transform.rotateZ(48 * Math.PI / scale), [scale, scale, 1]),
                    origin: [0.5, 0.5],
                    align: [0.5, 0.5]
                };
            },
            FadedZoom: function (show /*, size*/) {
                var scale = show ? this && this.showScale !== undefined ? this.showScale : 0.9 : this && this.hideScale !== undefined ? this.hideScale : 1.1;
                return {
                    opacity: this && this.opacity !== undefined ? this.opacity : 0,
                    transform: Transform.scale(scale, scale, 1)
                };
            }
            /*,
             Flip: {
             Left: function(show, size) {
             return {transform: Transform.rotate(0, show ? Math.PI : -Math.PI, 0)};
             },
             Right: function(show, size) {
             return {transform: Transform.rotate(0, show ? -Math.PI : Math.PI, 0)};
             },
             Up: function(show, size) {
             return {transform: Transform.rotate(show ? Math.PI : -Math.PI, 0, 0)};
             },
             Down: function(show, size) {
             return {transform: Transform.rotate(show ? -Math.PI : Math.PI, 0, 0)};
             }
             }*/
        };

        AnimationController.DEFAULT_OPTIONS = {
            transition: { duration: 400, curve: Easing.inOutQuad },
            animation: AnimationController.Animation.Fade,
            show: {
                // transition,
                // animation
            },
            hide: {
                // transition,
                // animation
            },
            transfer: {
                fastResize: true,
                zIndex: 10 // z-index offset the items are translated while transferring
                // transition,
                // items: {
                //   'image': 'image'
                //   'image': ['image', 'image2']
                // }
            },
            zIndexOffset: 0,
            keepHiddenViewsInDOMCount: 0
        };

        var ItemState = {
            NONE: 0,
            HIDE: 1,
            HIDING: 2,
            HIDDEN: 3,
            SHOW: 4,
            SHOWING: 5,
            VISIBLE: 6,
            QUEUED: 7
        };

        /**
         * Stacks the renderables on top of each other
         * with a z-translation of this.options.zIndexOffset.
         */
        function ViewStackLayout(context, options) {
            var set = {
                size: context.size,
                translate: [0, 0, 0]
            };
            this._size[0] = context.size[0];
            this._size[1] = context.size[1];
            var views = context.get('views');
            var transferables = context.get('transferables');
            var visibleCount = 0;
            for (var i = 0; i < views.length; i++) {
                var item = this._viewStack[i];
                switch (item.state) {
                    case ItemState.HIDDEN:
                        context.set(views[i], {
                            size: context.size,
                            translate: [context.size[0] * 2, context.size[1] * 2, 0]
                        });
                        break;

                    case ItemState.HIDE:
                    case ItemState.HIDING:
                    case ItemState.VISIBLE:
                    case ItemState.SHOW:
                    case ItemState.SHOWING:
                        if (visibleCount < 2) {
                            visibleCount++;

                            // Layout view
                            var view = views[i];
                            context.set(view, set);

                            // Layout any transferables
                            for (var j = 0; j < transferables.length; j++) {
                                for (var k = 0; k < item.transferables.length; k++) {
                                    if (transferables[j].renderNode === item.transferables[k].renderNode) {
                                        context.set(transferables[j], {
                                            translate: [0, 0, set.translate[2]],
                                            size: [context.size[0], context.size[1]]
                                        });
                                    }
                                }
                            }

                            // Increase z-index for next view
                            set.translate[2] += options.zIndexOffset;
                        }
                        break;
                }
            }
        }

        /**
         * Creates the view-stack layout.
         */
        function _createLayout() {
            this._renderables = {
                views: [],
                transferables: []
            };
            this._viewStack = [];
            this.layout = new LayoutController({
                layout: ViewStackLayout.bind(this),
                layoutOptions: this.options,
                dataSource: this._renderables
            });
            this.add(this.layout);
            this.layout.on('layoutend', _processAnimations.bind(this));
        }

        /**
         * Gets the spec from a spec.
         */
        function _getViewSpec(item, view, id, callback) {
            if (!item.view) {
                return;
            }
            var spec = view.getSpec(id);
            if (spec && !spec.trueSizeRequested) {
                callback(spec);
            } else {
                Timer.after(_getViewSpec.bind(this, item, view, id, callback), 1);
            }
        }

        /**
         * Gets the transferable delegate for the given id.
         */
        function _getTransferable(item, view, id) {
            // 1. If view supports getTransferable, use that
            if (view.getTransferable) {
                return view.getTransferable(id);
            }
            // 2. If view is derived from layoutcontroller, use that
            if (view.getSpec && view.get && view.replace) {
                if (view.get(id) !== undefined) {
                    return {
                        get: function () {
                            return view.get(id);
                        },
                        show: function (renderable) {
                            view.replace(id, renderable);
                        },
                        getSpec: _getViewSpec.bind(this, item, view, id)
                    };
                }
            }
            // 3. If view has an embedded layout, use that as fallback
            if (view.layout) {
                return _getTransferable.call(this, item, view.layout, id);
            }
        }

        /**
         * Begins visual transfer or renderables from the previous item
         * to the new item.
         */
        function _initTransferableAnimations(item, prevItem, callback) {
            var callbackCount = 0;
            function waitForAll() {
                callbackCount--;
                if (callbackCount === 0) {
                    callback();
                }
            }
            for (var sourceId in item.options.transfer.items) {
                if (_initTransferableAnimation.call(this, item, prevItem, sourceId, waitForAll)) {
                    callbackCount++;
                }
            }
            if (!callbackCount) {
                callback();
            }
        }
        function _initTransferableAnimation(item, prevItem, sourceId, callback) {
            var target = item.options.transfer.items[sourceId];
            var transferable = {};
            transferable.source = _getTransferable.call(this, prevItem, prevItem.view, sourceId);
            if (Array.isArray(target)) {
                for (var i = 0; i < target.length; i++) {
                    transferable.target = _getTransferable.call(this, item, item.view, target[i]);
                    if (transferable.target) {
                        break;
                    }
                }
            } else {
                transferable.target = _getTransferable.call(this, item, item.view, target);
            }
            if (transferable.source && transferable.target) {
                transferable.source.getSpec(function (sourceSpec) {

                    // Replace source & target renderables in the views
                    // source: dummy-node
                    // target: target-renderable with opacity: 0.
                    transferable.sourceSpec = sourceSpec;
                    transferable.originalSource = transferable.source.get();
                    transferable.source.show(new RenderNode(new Modifier(sourceSpec)));
                    transferable.originalTarget = transferable.target.get();
                    var targetNode = new RenderNode(new Modifier({ opacity: 0 }));
                    targetNode.add(transferable.originalTarget);
                    transferable.target.show(targetNode);

                    // Take ownership of the source renderable.
                    // This renderable will be layouted by the layout-function
                    var zIndexMod = new Modifier({
                        transform: Transform.translate(0, 0, item.options.transfer.zIndex)
                    });
                    transferable.mod = new StateModifier(sourceSpec);
                    transferable.renderNode = new RenderNode(zIndexMod);
                    transferable.renderNode.add(transferable.mod).add(transferable.originalSource);
                    item.transferables.push(transferable);
                    this._renderables.transferables.push(transferable.renderNode);
                    this.layout.reflowLayout();

                    // Wait for the target spec to have settled. This may take a couple render
                    // cycles if for instance, this involves a true-size renderable or the
                    // renderable is affected by other true-size renderables around itsself.
                    Timer.after(function () {
                        var callbackCalled;
                        transferable.target.getSpec(function (targetSpec, transition) {
                            transferable.targetSpec = targetSpec;
                            transferable.transition = transition;
                            if (!callbackCalled) {
                                callback();
                            }
                        }, true);
                    }, 1);
                }.bind(this), false);
                return true;
            } else {
                return false;
            }
        }
        function _startTransferableAnimations(item, callback) {
            for (var j = 0; j < item.transferables.length; j++) {
                var transferable = item.transferables[j];
                transferable.mod.halt();
                if (transferable.sourceSpec.opacity !== undefined || transferable.targetSpec.opacity !== undefined) {
                    transferable.mod.setOpacity(transferable.targetSpec.opacity === undefined ? 1 : transferable.targetSpec.opacity, transferable.transition || item.options.transfer.transition);
                }
                if (item.options.transfer.fastResize) {
                    if (transferable.sourceSpec.transform || transferable.targetSpec.transform || transferable.sourceSpec.size || transferable.targetSpec.size) {
                        var transform = transferable.targetSpec.transform || Transform.identity;
                        if (transferable.sourceSpec.size && transferable.targetSpec.size) {
                            transform = Transform.multiply(transform, Transform.scale(transferable.targetSpec.size[0] / transferable.sourceSpec.size[0], transferable.targetSpec.size[1] / transferable.sourceSpec.size[1], 1));
                        }
                        transferable.mod.setTransform(transform, transferable.transition || item.options.transfer.transition, callback);
                        callback = undefined;
                    }
                } else {
                    if (transferable.sourceSpec.transform || transferable.targetSpec.transform) {
                        transferable.mod.setTransform(transferable.targetSpec.transform || Transform.identity, transferable.transition || item.options.transfer.transition, callback);
                        callback = undefined;
                    }
                    if (transferable.sourceSpec.size || transferable.targetSpec.size) {
                        transferable.mod.setSize(transferable.targetSpec.size || transferable.sourceSpec.size, transferable.transition || item.options.transfer.transition, callback);
                        callback = undefined;
                    }
                }
            }
            if (callback) {
                callback();
            }
        }

        /**
         * Called whenever the view has been shown and the
         * transferable animations should be ended. This returns
         * the renderables to their original views.
         */
        function _endTransferableAnimations(item) {
            for (var j = 0; j < item.transferables.length; j++) {
                var transferable = item.transferables[j];
                for (var i = 0; i < this._renderables.transferables.length; i++) {
                    if (this._renderables.transferables[i] === transferable.renderNode) {
                        this._renderables.transferables.splice(i, 1);
                        break;
                    }
                }
                transferable.source.show(transferable.originalSource);
                transferable.target.show(transferable.originalTarget);
            }
            item.transferables = [];
            this.layout.reflowLayout();
        }

        /**
         * Starts a show or hide animation.
         */
        function _processAnimations(event) {
            var prevItem;
            for (var i = 0; i < this._viewStack.length; i++) {
                var item = this._viewStack[i];
                switch (item.state) {
                    case ItemState.HIDE:
                        item.state = ItemState.HIDING;
                        _initHideAnimation.call(this, item, prevItem, event.size);
                        _updateState.call(this);
                        break;
                    case ItemState.SHOW:
                        item.state = ItemState.SHOWING;
                        _initShowAnimation.call(this, item, prevItem, event.size);
                        _updateState.call(this);
                        break;
                }
                prevItem = item;
            }
        }

        /**
         * Starts the view animation.
         */
        function _initShowAnimation(item, prevItem, size) {
            var spec = item.options.show.animation ? item.options.show.animation.call(undefined, true, size) : {};
            item.startSpec = spec;
            item.endSpec = {
                opacity: 1,
                transform: Transform.identity
            };
            item.mod.halt();
            if (spec.transform) {
                item.mod.setTransform(spec.transform);
            }
            if (spec.opacity !== undefined) {
                item.mod.setOpacity(spec.opacity);
            }
            if (spec.align) {
                item.mod.setAlign(spec.align);
            }
            if (spec.origin) {
                item.mod.setOrigin(spec.origin);
            }
            var startShowAnimation = _startShowAnimation.bind(this, item, spec);
            var waitAndShow = item.wait ? function () {
                item.wait.then(startShowAnimation, startShowAnimation);
            } : startShowAnimation;
            if (prevItem) {
                _initTransferableAnimations.call(this, item, prevItem, waitAndShow);
            } else {
                waitAndShow();
            }
        }

        /**
         * Starts the show animation whenever init has completed.
         */
        function _startShowAnimation(item, spec) {
            if (!item.halted) {
                var callback = item.showCallback;
                if (spec.transform) {
                    item.mod.setTransform(Transform.identity, item.options.show.transition, callback);
                    callback = undefined;
                }
                if (spec.opacity !== undefined) {
                    item.mod.setOpacity(1, item.options.show.transition, callback);
                    callback = undefined;
                }
                _startTransferableAnimations.call(this, item, callback);
            }
        }

        /**
         * Helper function for interpolating between start/end state based on percentage.
         */
        function _interpolate(start, end, perc) {
            return start + (end - start) * perc;
        }

        /**
         * Halts a item at a given frame. The frame is provided as a percentage
         * of the whole transition.
         */
        function _haltItemAtFrame(item, perc) {
            item.mod.halt();
            item.halted = true;
            if (item.startSpec && perc !== undefined) {
                if (item.startSpec.opacity !== undefined && item.endSpec.opacity !== undefined) {
                    item.mod.setOpacity(_interpolate(item.startSpec.opacity, item.endSpec.opacity, perc));
                }
                if (item.startSpec.transform && item.endSpec.transform) {
                    var transform = [];
                    for (var i = 0; i < item.startSpec.transform.length; i++) {
                        transform.push(_interpolate(item.startSpec.transform[i], item.endSpec.transform[i], perc));
                    }
                    item.mod.setTransform(transform);
                }
            }
        }

        /**
         * Waits for the animation to start.
         */
        function _initHideAnimation(item, prevItem, size) {
            var startHideAnimation = _startHideAnimation.bind(this, item, prevItem, size);
            if (item.wait) {
                item.wait.then(startHideAnimation, startHideAnimation);
            } else {
                startHideAnimation();
            }
        }

        /**
         * Starts the hide animation.
         */
        function _startHideAnimation(item, prevItem, size) {
            var spec = item.options.hide.animation ? item.options.hide.animation.call(undefined, false, size) : {};
            item.endSpec = spec;
            item.startSpec = {
                opacity: 1,
                transform: Transform.identity
            };
            if (!item.halted) {
                item.mod.halt();
                var callback = item.hideCallback;
                if (spec.transform) {
                    item.mod.setTransform(spec.transform, item.options.hide.transition, callback);
                    callback = undefined;
                }
                if (spec.opacity !== undefined) {
                    item.mod.setOpacity(spec.opacity, item.options.hide.transition, callback);
                    callback = undefined;
                }
                if (callback) {
                    callback();
                }
            }
        }

        /**
         * Sets the options for an item.
         */
        function _setItemOptions(item, options, callback) {
            item.options = {
                show: {
                    transition: this.options.show.transition || this.options.transition,
                    animation: this.options.show.animation || this.options.animation
                },
                hide: {
                    transition: this.options.hide.transition || this.options.transition,
                    animation: this.options.hide.animation || this.options.animation
                },
                transfer: {
                    transition: this.options.transfer.transition || this.options.transition,
                    items: this.options.transfer.items || {},
                    zIndex: this.options.transfer.zIndex,
                    fastResize: this.options.transfer.fastResize
                }
            };
            if (options) {
                item.options.show.transition = (options.show ? options.show.transition : undefined) || options.transition || item.options.show.transition;
                if (options && options.show && options.show.animation !== undefined) {
                    item.options.show.animation = options.show.animation;
                } else if (options && options.animation !== undefined) {
                    item.options.show.animation = options.animation;
                }
                item.options.transfer.transition = (options.transfer ? options.transfer.transition : undefined) || options.transition || item.options.transfer.transition;
                item.options.transfer.items = (options.transfer ? options.transfer.items : undefined) || item.options.transfer.items;
                item.options.transfer.zIndex = options.transfer && options.transfer.zIndex !== undefined ? options.transfer.zIndex : item.options.transfer.zIndex;
                item.options.transfer.fastResize = options.transfer && options.transfer.fastResize !== undefined ? options.transfer.fastResize : item.options.transfer.fastResize;
            }
            item.showCallback = function () {
                item.showCallback = undefined;
                item.state = ItemState.VISIBLE;
                _updateState.call(this);
                _endTransferableAnimations.call(this, item);
                item.endSpec = undefined;
                item.startSpec = undefined;
                if (callback) {
                    callback();
                }
            }.bind(this);
        }

        /**
         * Updates the state.
         */
        function _updateState() {
            var prevItem;
            var invalidated = false;
            var hiddenViewCount = 0;
            var i = 0;
            while (i < this._viewStack.length) {
                if (this._viewStack[i].state === ItemState.HIDDEN) {
                    hiddenViewCount++;
                    for (var j = 0; j < this._viewStack.length; j++) {
                        if (this._viewStack[j].state !== ItemState.HIDDEN && this._viewStack[j].view === this._viewStack[i].view) {
                            this._viewStack[i].view = undefined;
                            this._renderables.views.splice(i, 1);
                            this._viewStack.splice(i, 1);
                            i--;
                            hiddenViewCount--;
                            break;
                        }
                    }
                }
                i++;
            }
            while (hiddenViewCount > this.options.keepHiddenViewsInDOMCount) {
                this._viewStack[0].view = undefined;
                this._renderables.views.splice(0, 1);
                this._viewStack.splice(0, 1);
                hiddenViewCount--;
            }
            for (i = hiddenViewCount; i < Math.min(this._viewStack.length - hiddenViewCount, 2) + hiddenViewCount; i++) {
                var item = this._viewStack[i];
                if (item.state === ItemState.QUEUED) {
                    if (!prevItem || prevItem.state === ItemState.VISIBLE || prevItem.state === ItemState.HIDING) {
                        if (prevItem && prevItem.state === ItemState.VISIBLE) {
                            prevItem.state = ItemState.HIDE;
                            prevItem.wait = item.wait;
                        }
                        item.state = ItemState.SHOW;
                        invalidated = true;
                    }
                    break;
                } else if (item.state === ItemState.VISIBLE && item.hide) {
                    item.state = ItemState.HIDE;
                }
                if (item.state === ItemState.SHOW || item.state === ItemState.HIDE) {
                    this.layout.reflowLayout();
                }
                prevItem = item;
            }
            if (invalidated) {
                _updateState.call(this);
                this.layout.reflowLayout();
            }
        }

        function _resume() {
            for (var i = 0; i < Math.min(this._viewStack.length, 2); i++) {
                var item = this._viewStack[i];
                if (item.halted) {
                    item.halted = false;
                    if (item.endSpec) {
                        var callback;
                        switch (item.state) {
                            case ItemState.HIDE:
                            case ItemState.HIDING:
                                callback = item.hideCallback;
                                break;
                            case ItemState.SHOW:
                            case ItemState.SHOWING:
                                callback = item.showCallback;
                                break;
                        }
                        item.mod.halt();
                        if (item.endSpec.transform) {
                            item.mod.setTransform(item.endSpec.transform, item.options.show.transition, callback);
                            callback = undefined;
                        }
                        if (item.endSpec.opacity !== undefined) {
                            item.mod.setOpacity(item.endSpec.opacity, item.options.show.transition, callback);
                        }
                        if (callback) {
                            callback();
                        }
                    }
                }
            }
        }

        /**
         * Shows a renderable using an animation and hides the old renderable.
         *
         * When multiple show operations are executed, they are queued and
         * shown in that sequence. Use `.halt` to cancel any pending show
         * operations from the queue.
         *
         * @param {Renderable} renderable View or surface to show
         * @param {Object} [options] Options.
         * @param {Object} [options.transition] Transition options for both show & hide.
         * @param {Function} [options.animation] Animation function for both show & hide.
         * @param {Promise} [options.wait] A promise to wait for before running the animation.
         * @param {Object} [options.show] Show specific options.
         * @param {Object} [options.show.transition] Show specific transition options.
         * @param {Function} [options.show.animation] Show specific animation function.
         * @param {Object} [options.hide] Hide specific options.
         * @param {Object} [options.hide.transition] Hide specific transition options.
         * @param {Function} [options.hide.animation] Hide specific animation function.
         * @param {Object} [options.transfer] Transfer options.
         * @param {Object} [options.transfer.transition] Transfer specific transition options.
         * @param {Number} [options.transfer.zIndex] Z-index the tranferables are moved on top while animating.
         * @param {Array} [options.transfer.items] Ids (key/value) pairs (source-id/target-id) of the renderables that should be transferred.
         * @param {Function} [callback] Function that is called on completion.
         * @return {AnimationController} this
         */
        AnimationController.prototype.show = function (renderable, options, callback) {
            _resume.call(this, renderable);
            if (!renderable) {
                return this.hide(options, callback);
            }
            var item = this._viewStack.length ? this._viewStack[this._viewStack.length - 1] : undefined;
            if (item && item.view === renderable && item.state !== ItemState.HIDDEN) {
                item.hide = false;
                if (item.state === ItemState.HIDE) {
                    item.state = ItemState.QUEUED;
                    _setItemOptions.call(this, item, options, callback);
                    _updateState.call(this);
                } else if (item.state === ItemState.HIDING) {
                    this.abort(callback);
                } else if (callback) {
                    callback();
                }
                return this;
            }
            if (item && item.state !== ItemState.HIDING && options) {
                item.options.hide.transition = (options.hide ? options.hide.transition : undefined) || options.transition || item.options.hide.transition;
                if (options && options.hide && options.hide.animation !== undefined) {
                    item.options.hide.animation = options.hide.animation;
                } else if (options && options.animation !== undefined) {
                    item.options.hide.animation = options.animation;
                }
            }
            item = {
                view: renderable,
                mod: new StateModifier(),
                state: ItemState.QUEUED,
                callback: callback,
                transferables: [], // renderables currently being transfered
                wait: options ? options.wait : undefined
            };
            item.node = new RenderNode(item.mod);
            item.node.add(renderable);
            _setItemOptions.call(this, item, options, callback);
            item.hideCallback = function () {
                item.hideCallback = undefined;
                item.state = ItemState.HIDDEN;
                _updateState.call(this);
                this.layout.reflowLayout();
            }.bind(this);
            this._renderables.views.push(item.node);
            this._viewStack.push(item);
            _updateState.call(this);
            return this;
        };

        /**
         * Hides the current view with an animation.
         *
         * @param {Object} [options] Hide options
         * @param {Object} [options.transition] Hide transition options.
         * @param {Function} [options.animation] Hide animation function.
         * @param {Function} [callback] Function that is called an completion.
         * @return {AnimationController} this
         */
        AnimationController.prototype.hide = function (options, callback) {
            _resume.call(this);
            var item = this._viewStack.length ? this._viewStack[this._viewStack.length - 1] : undefined;
            if (!item || item.state === ItemState.HIDING) {
                return this;
            }
            item.hide = true;
            if (options) {
                item.options.hide.transition = (options.hide ? options.hide.transition : undefined) || options.transition || item.options.hide.transition;
                if (options && options.hide && options.hide.animation !== undefined) {
                    item.options.hide.animation = options.hide.animation;
                } else if (options && options.animation !== undefined) {
                    item.options.hide.animation = options.animation;
                }
            }
            item.hideCallback = function () {
                item.hideCallback = undefined;
                item.state = ItemState.HIDDEN;
                _updateState.call(this);
                this.layout.reflowLayout();
                if (callback) {
                    callback();
                }
            }.bind(this);
            _updateState.call(this);
            return this;
        };

        /**
         * Clears the queue of any pending show animations.
         *
         * @param {Boolean} [stopAnimation] Freezes the current animation.
         * @param {Number} [framePerc] Frame at which to freeze the animation (in percentage).
         * @return {AnimationController} this
         */
        AnimationController.prototype.halt = function (stopAnimation, framePerc) {
            var item;
            for (var i = 0; i < this._viewStack.length; i++) {
                if (stopAnimation) {
                    item = this._viewStack[i];
                    switch (item.state) {
                        case ItemState.SHOW:
                        case ItemState.SHOWING:
                        case ItemState.HIDE:
                        case ItemState.HIDING:
                        case ItemState.VISIBLE:
                            _haltItemAtFrame(item, framePerc);
                            break;
                    }
                } else {
                    item = this._viewStack[this._viewStack.length - 1];
                    if (item.state === ItemState.QUEUED || item.state === ItemState.SHOW) {
                        this._renderables.views.splice(this._viewStack.length - 1, 1);
                        this._viewStack.splice(this._viewStack.length - 1, 1);
                        item.view = undefined;
                    } else {
                        break;
                    }
                }
            }
            return this;
        };

        /**
         * Aborts the currently active show or hide operation, effectively
         * reversing the animation.
         *
         * @param {Function} [callback] Function that is called on completion.
         * @return {AnimationController} this
         */
        AnimationController.prototype.abort = function (callback) {
            var item;
            if (this._viewStack.length >= 2 && this._viewStack[0].state === ItemState.HIDING && this._viewStack[1].state === ItemState.SHOWING) {
                var prevItem = this._viewStack[0];
                item = this._viewStack[1];
                var swapSpec;

                item.halted = true;
                swapSpec = item.endSpec;
                item.endSpec = item.startSpec;
                item.startSpec = swapSpec;
                item.state = ItemState.HIDING;
                item.hideCallback = function () {
                    item.hideCallback = undefined;
                    item.state = ItemState.HIDDEN;
                    _updateState.call(this);
                    this.layout.reflowLayout();
                }.bind(this);

                prevItem.halted = true;
                swapSpec = prevItem.endSpec;
                prevItem.endSpec = prevItem.startSpec;
                prevItem.startSpec = swapSpec;
                prevItem.state = ItemState.SHOWING;
                prevItem.showCallback = function () {
                    prevItem.showCallback = undefined;
                    prevItem.state = ItemState.VISIBLE;
                    _updateState.call(this);
                    _endTransferableAnimations.call(this, prevItem);
                    prevItem.endSpec = undefined;
                    prevItem.startSpec = undefined;
                    if (callback) {
                        callback();
                    }
                }.bind(this);

                _resume.call(this);
            } else if (this._viewStack.length === 1 && this._viewStack[0].state === ItemState.HIDING) {
                item = this._viewStack[0];
                item.halted = true;
                swapSpec = item.endSpec;
                item.endSpec = item.startSpec;
                item.startSpec = swapSpec;
                item.state = ItemState.SHOWING;
                item.showCallback = function () {
                    item.showCallback = undefined;
                    item.state = ItemState.VISIBLE;
                    _updateState.call(this);
                    _endTransferableAnimations.call(this, item);
                    item.endSpec = undefined;
                    item.startSpec = undefined;
                    if (callback) {
                        callback();
                    }
                }.bind(this);

                _resume.call(this);
            }
            return this;
        };

        /**
         * Gets the currently visible or being shown renderable.
         *
         * @return {Renderable} currently visible view/surface
         */
        AnimationController.prototype.get = function () {
            for (var i = 0; i < this._viewStack.length; i++) {
                var item = this._viewStack[i];
                if (item.state === ItemState.VISIBLE || item.state === ItemState.SHOW || item.state === ItemState.SHOWING) {
                    return item.view;
                }
            }
            return undefined;
        };

        /**
         * Gets the size of the view.
         *
         * @return {Array.Number} size
         */
        AnimationController.prototype.getSize = function () {
            return this._size || this.options.size;
        };

        module.exports = AnimationController;
    }).call($__exports, $__require, $__exports, $__module);
});
$__System.registerDynamic('172', [], false, function ($__require, $__exports, $__module) {
    var _retrieveGlobal = $__System.registry.get("@@global-helpers").prepareGlobal($__module.id, null, null);

    (function ($__global) {
        var currentLocation = $__global['currentLocation'],
            isWebsite = $__global['isWebsite'],
            styleElement = $__global['styleElement'],
            styleSheet = $__global['styleSheet'];
        /**
         * Created by tom on 08/07/16.
         */

        var currentLocation = window.location;
        var isWebsite = currentLocation.protocol.indexOf('http') !== -1 && currentLocation.host.indexOf('localhost') === -1;

        if (!isWebsite) {
            /* Source: https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/insertRule */
            var styleElement = document.createElement('style'),
                styleSheet;

            /* Append style element to head */
            document.head.appendChild(styleElement);

            /* Grab style sheet */
            styleSheet = styleElement.sheet;
            styleSheet.insertRule('*:not(input):not(textarea){-webkit-touch-callout: none; -webkit-user-select: none; -moz-user-select: none; -o-user-select: none; user-select: none;}', 0);
        }
        $__global['currentLocation'] = currentLocation;
        $__global['isWebsite'] = isWebsite;
        $__global['styleElement'] = styleElement;
        $__global['styleSheet'] = styleSheet;
    })(this);

    return _retrieveGlobal();
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: mark@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
// TODO fix func-style
/*eslint func-style: [0, "declaration"] */

$__System.registerDynamic('170', ['173'], false, function ($__require, $__exports, $__module) {
    $__module.uri = $__module.id;
    return (function (require, exports, module) {
        /**
         * An internal library to reproduce javascript time-based scheduling.
         *   Using standard javascript setTimeout methods can have a negative performance impact
         *   when combined with the Famous rendering process, so instead require Timer and call
         *   Timer.setTimeout, Timer.setInterval, etc.
         *
         * @class Timer
         * @constructor
         */
        var FamousEngine = require('173');

        var _event = 'prerender';

        var getTime = typeof window !== 'undefined' && window.performance && window.performance.now ? function () {
            return window.performance.now();
        } : function () {
            return Date.now();
        };

        /**
         * Add a function to be run on every prerender
         *
         * @method addTimerFunction
         *
         * @param {function} fn function to be run every prerender
         *
         * @return {function} function passed in as parameter
         */
        function addTimerFunction(fn) {
            FamousEngine.on(_event, fn);
            return fn;
        }

        /**
         * Wraps a function to be invoked after a certain amount of time.
         *  After a set duration has passed, it executes the function and
         *  removes it as a listener to 'prerender'.
         *
         * @method setTimeout
         *
         * @param {function} fn function to be run after a specified duration
         * @param {number} duration milliseconds from now to execute the function
         *
         * @return {function} function passed in as parameter
         */
        function setTimeout(fn, duration) {
            var t = getTime();
            var callback = function () {
                var t2 = getTime();
                if (t2 - t >= duration) {
                    fn.apply(this, arguments);
                    FamousEngine.removeListener(_event, callback);
                }
            };
            return addTimerFunction(callback);
        }

        /**
         * Wraps a function to be invoked after a certain amount of time.
         *  After a set duration has passed, it executes the function and
         *  resets the execution time.
         *
         * @method setInterval
         *
         * @param {function} fn function to be run after a specified duration
         * @param {number} duration interval to execute function in milliseconds
         *
         * @return {function} function passed in as parameter
         */
        function setInterval(fn, duration) {
            var t = getTime();
            var callback = function () {
                var t2 = getTime();
                if (t2 - t >= duration) {
                    fn.apply(this, arguments);
                    t = getTime();
                }
            };
            return addTimerFunction(callback);
        }

        /**
         * Wraps a function to be invoked after a certain amount of prerender ticks.
         *  Similar use to setTimeout but tied to the engine's run speed.
         *
         * @method after
         *
         * @param {function} fn function to be run after a specified amount of ticks
         * @param {number} numTicks number of prerender frames to wait
         *
         * @return {function} function passed in as parameter
         */
        function after(fn, numTicks) {
            if (numTicks === undefined) return undefined;
            var callback = function () {
                numTicks--;
                if (numTicks <= 0) {
                    //in case numTicks is fraction or negative
                    fn.apply(this, arguments);
                    clear(callback);
                }
            };
            return addTimerFunction(callback);
        }

        /**
         * Wraps a function to be continually invoked after a certain amount of prerender ticks.
         *  Similar use to setInterval but tied to the engine's run speed.
         *
         * @method every
         *
         * @param {function} fn function to be run after a specified amount of ticks
         * @param {number} numTicks number of prerender frames to wait
         *
         * @return {function} function passed in as parameter
         */
        function every(fn, numTicks) {
            numTicks = numTicks || 1;
            var initial = numTicks;
            var callback = function () {
                numTicks--;
                if (numTicks <= 0) {
                    //in case numTicks is fraction or negative
                    fn.apply(this, arguments);
                    numTicks = initial;
                }
            };
            return addTimerFunction(callback);
        }

        /**
         * Remove a function that gets called every prerender
         *
         * @method clear
         *
         * @param {function} fn event linstener
         */
        function clear(fn) {
            FamousEngine.removeListener(_event, fn);
        }

        /**
         * Executes a function after a certain amount of time. Makes sure
         *  the function is not run multiple times.
         *
         * @method debounce
         *
         * @param {function} func function to run after certain amount of time
         * @param {number} wait amount of time
         *
         * @return {function} function that is not able to debounce
         */
        function debounce(func, wait) {
            var timeout;
            var ctx;
            var timestamp;
            var result;
            var args;
            return function () {
                ctx = this;
                args = arguments;
                timestamp = getTime();

                var fn = function () {
                    var last = getTime - timestamp;

                    if (last < wait) {
                        timeout = setTimeout(fn, wait - last);
                    } else {
                        timeout = null;
                        result = func.apply(ctx, args);
                    }
                };

                clear(timeout);
                timeout = setTimeout(fn, wait);

                return result;
            };
        }

        module.exports = {
            setTimeout: setTimeout,
            setInterval: setInterval,
            debounce: debounce,
            after: after,
            every: every,
            clear: clear
        };
    }).call($__exports, $__require, $__exports, $__module);
});
$__System.registerDynamic("159", [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array ? array.length : 0;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  module.exports = arrayEach;
});
$__System.registerDynamic('174', ['13b', '175'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var copyObject = $__require('13b'),
      keys = $__require('175');

  /**
   * The base implementation of `_.assign` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */
  function baseAssign(object, source) {
    return object && copyObject(source, keys(source), object);
  }

  module.exports = baseAssign;
});
$__System.registerDynamic("176", [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /**
   * Creates a clone of  `buffer`.
   *
   * @private
   * @param {Buffer} buffer The buffer to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Buffer} Returns the cloned buffer.
   */
  function cloneBuffer(buffer, isDeep) {
    if (isDeep) {
      return buffer.slice();
    }
    var result = new buffer.constructor(buffer.length);
    buffer.copy(result);
    return result;
  }

  module.exports = cloneBuffer;
});
$__System.registerDynamic("154", [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /**
   * Copies the values of `source` to `array`.
   *
   * @private
   * @param {Array} source The array to copy values from.
   * @param {Array} [array=[]] The array to copy values to.
   * @returns {Array} Returns `array`.
   */
  function copyArray(source, array) {
    var index = -1,
        length = source.length;

    array || (array = Array(length));
    while (++index < length) {
      array[index] = source[index];
    }
    return array;
  }

  module.exports = copyArray;
});
$__System.registerDynamic('177', ['148'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var eq = $__require('148');

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * Assigns `value` to `key` of `object` if the existing value is not equivalent
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
      object[key] = value;
    }
  }

  module.exports = assignValue;
});
$__System.registerDynamic('13b', ['177'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var assignValue = $__require('177');

  /**
   * Copies properties of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy properties from.
   * @param {Array} props The property identifiers to copy.
   * @param {Object} [object={}] The object to copy properties to.
   * @param {Function} [customizer] The function to customize copied values.
   * @returns {Object} Returns `object`.
   */
  function copyObject(source, props, object, customizer) {
    object || (object = {});

    var index = -1,
        length = props.length;

    while (++index < length) {
      var key = props[index];

      var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

      assignValue(object, key, newValue === undefined ? source[key] : newValue);
    }
    return object;
  }

  module.exports = copyObject;
});
$__System.registerDynamic('178', ['13b', '179'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var copyObject = $__require('13b'),
      getSymbols = $__require('179');

  /**
   * Copies own symbol properties of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */
  function copySymbols(source, object) {
    return copyObject(source, getSymbols(source), object);
  }

  module.exports = copySymbols;
});
$__System.registerDynamic("17a", [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  module.exports = arrayPush;
});
$__System.registerDynamic('17b', ['17a', '142'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var arrayPush = $__require('17a'),
      isArray = $__require('142');

  /**
   * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
   * `keysFunc` and `symbolsFunc` to get the enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @param {Function} symbolsFunc The function to get the symbols of `object`.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
  }

  module.exports = baseGetAllKeys;
});
$__System.registerDynamic("17c", [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /**
   * This method returns a new empty array.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {Array} Returns the new empty array.
   * @example
   *
   * var arrays = _.times(2, _.stubArray);
   *
   * console.log(arrays);
   * // => [[], []]
   *
   * console.log(arrays[0] === arrays[1]);
   * // => false
   */
  function stubArray() {
    return [];
  }

  module.exports = stubArray;
});
$__System.registerDynamic('179', ['17d', '17c'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var overArg = $__require('17d'),
      stubArray = $__require('17c');

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeGetSymbols = Object.getOwnPropertySymbols;

  /**
   * Creates an array of the own enumerable symbol properties of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */
  var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;

  module.exports = getSymbols;
});
$__System.registerDynamic('17e', ['17b', '179', '175'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var baseGetAllKeys = $__require('17b'),
      getSymbols = $__require('179'),
      keys = $__require('175');

  /**
   * Creates an array of own enumerable property names and symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function getAllKeys(object) {
    return baseGetAllKeys(object, keys, getSymbols);
  }

  module.exports = getAllKeys;
});
$__System.registerDynamic('17f', [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * Initializes an array clone.
   *
   * @private
   * @param {Array} array The array to clone.
   * @returns {Array} Returns the initialized clone.
   */
  function initCloneArray(array) {
    var length = array.length,
        result = array.constructor(length);

    // Add properties assigned by `RegExp#exec`.
    if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
      result.index = array.index;
      result.input = array.input;
    }
    return result;
  }

  module.exports = initCloneArray;
});
$__System.registerDynamic('180', ['181'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var cloneArrayBuffer = $__require('181');

  /**
   * Creates a clone of `dataView`.
   *
   * @private
   * @param {Object} dataView The data view to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned data view.
   */
  function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }

  module.exports = cloneDataView;
});
$__System.registerDynamic("182", [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /**
   * Adds the key-value `pair` to `map`.
   *
   * @private
   * @param {Object} map The map to modify.
   * @param {Array} pair The key-value pair to add.
   * @returns {Object} Returns `map`.
   */
  function addMapEntry(map, pair) {
    // Don't return `map.set` because it's not chainable in IE 11.
    map.set(pair[0], pair[1]);
    return map;
  }

  module.exports = addMapEntry;
});
$__System.registerDynamic('183', ['182', '184', '185'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var addMapEntry = $__require('182'),
      arrayReduce = $__require('184'),
      mapToArray = $__require('185');

  /**
   * Creates a clone of `map`.
   *
   * @private
   * @param {Object} map The map to clone.
   * @param {Function} cloneFunc The function to clone values.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned map.
   */
  function cloneMap(map, isDeep, cloneFunc) {
    var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
    return arrayReduce(array, addMapEntry, new map.constructor());
  }

  module.exports = cloneMap;
});
$__System.registerDynamic("186", [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /**
   * Creates a clone of `regexp`.
   *
   * @private
   * @param {Object} regexp The regexp to clone.
   * @returns {Object} Returns the cloned regexp.
   */
  function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
  }

  module.exports = cloneRegExp;
});
$__System.registerDynamic("187", [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /**
   * Adds `value` to `set`.
   *
   * @private
   * @param {Object} set The set to modify.
   * @param {*} value The value to add.
   * @returns {Object} Returns `set`.
   */
  function addSetEntry(set, value) {
    // Don't return `set.add` because it's not chainable in IE 11.
    set.add(value);
    return set;
  }

  module.exports = addSetEntry;
});
$__System.registerDynamic("184", [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array ? array.length : 0;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  module.exports = arrayReduce;
});
$__System.registerDynamic('188', ['187', '184', '189'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var addSetEntry = $__require('187'),
      arrayReduce = $__require('184'),
      setToArray = $__require('189');

  /**
   * Creates a clone of `set`.
   *
   * @private
   * @param {Object} set The set to clone.
   * @param {Function} cloneFunc The function to clone values.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned set.
   */
  function cloneSet(set, isDeep, cloneFunc) {
    var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
    return arrayReduce(array, addSetEntry, new set.constructor());
  }

  module.exports = cloneSet;
});
$__System.registerDynamic('18a', ['18b'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var Symbol = $__require('18b');

  /** Used to convert symbols to primitives and strings. */
  var symbolProto = Symbol ? Symbol.prototype : undefined,
      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

  /**
   * Creates a clone of the `symbol` object.
   *
   * @private
   * @param {Object} symbol The symbol object to clone.
   * @returns {Object} Returns the cloned symbol object.
   */
  function cloneSymbol(symbol) {
    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
  }

  module.exports = cloneSymbol;
});
$__System.registerDynamic('181', ['18c'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var Uint8Array = $__require('18c');

  /**
   * Creates a clone of `arrayBuffer`.
   *
   * @private
   * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
   * @returns {ArrayBuffer} Returns the cloned array buffer.
   */
  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array(result).set(new Uint8Array(arrayBuffer));
    return result;
  }

  module.exports = cloneArrayBuffer;
});
$__System.registerDynamic('18d', ['181'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var cloneArrayBuffer = $__require('181');

  /**
   * Creates a clone of `typedArray`.
   *
   * @private
   * @param {Object} typedArray The typed array to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned typed array.
   */
  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }

  module.exports = cloneTypedArray;
});
$__System.registerDynamic('18e', ['181', '180', '183', '186', '188', '18a', '18d'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var cloneArrayBuffer = $__require('181'),
      cloneDataView = $__require('180'),
      cloneMap = $__require('183'),
      cloneRegExp = $__require('186'),
      cloneSet = $__require('188'),
      cloneSymbol = $__require('18a'),
      cloneTypedArray = $__require('18d');

  /** `Object#toString` result references. */
  var boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /**
   * Initializes an object clone based on its `toStringTag`.
   *
   * **Note:** This function only supports cloning values with tags of
   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
   *
   * @private
   * @param {Object} object The object to clone.
   * @param {string} tag The `toStringTag` of the object to clone.
   * @param {Function} cloneFunc The function to clone values.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the initialized clone.
   */
  function initCloneByTag(object, tag, cloneFunc, isDeep) {
    var Ctor = object.constructor;
    switch (tag) {
      case arrayBufferTag:
        return cloneArrayBuffer(object);

      case boolTag:
      case dateTag:
        return new Ctor(+object);

      case dataViewTag:
        return cloneDataView(object, isDeep);

      case float32Tag:case float64Tag:
      case int8Tag:case int16Tag:case int32Tag:
      case uint8Tag:case uint8ClampedTag:case uint16Tag:case uint32Tag:
        return cloneTypedArray(object, isDeep);

      case mapTag:
        return cloneMap(object, isDeep, cloneFunc);

      case numberTag:
      case stringTag:
        return new Ctor(object);

      case regexpTag:
        return cloneRegExp(object);

      case setTag:
        return cloneSet(object, isDeep, cloneFunc);

      case symbolTag:
        return cloneSymbol(object);
    }
  }

  module.exports = initCloneByTag;
});
$__System.registerDynamic('18f', ['14f'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var isObject = $__require('14f');

  /** Built-in value references. */
  var objectCreate = Object.create;

  /**
   * The base implementation of `_.create` without support for assigning
   * properties to the created object.
   *
   * @private
   * @param {Object} prototype The object to inherit from.
   * @returns {Object} Returns the new object.
   */
  function baseCreate(proto) {
    return isObject(proto) ? objectCreate(proto) : {};
  }

  module.exports = baseCreate;
});
$__System.registerDynamic('14a', ['17d'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var overArg = $__require('17d');

  /** Built-in value references. */
  var getPrototype = overArg(Object.getPrototypeOf, Object);

  module.exports = getPrototype;
});
$__System.registerDynamic('190', ['18f', '14a', '145'], true, function ($__require, exports, module) {
    var global = this || self,
        GLOBAL = global;
    var baseCreate = $__require('18f'),
        getPrototype = $__require('14a'),
        isPrototype = $__require('145');

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
        return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }

    module.exports = initCloneObject;
});
$__System.registerDynamic("191", [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /**
   * This method returns `false`.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {boolean} Returns `false`.
   * @example
   *
   * _.times(2, _.stubFalse);
   * // => [false, false]
   */
  function stubFalse() {
    return false;
  }

  module.exports = stubFalse;
});
$__System.registerDynamic('144', ['192', '191'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var root = $__require('192'),
      stubFalse = $__require('191');

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Built-in value references. */
  var Buffer = moduleExports ? root.Buffer : undefined;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

  /**
   * Checks if `value` is a buffer.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
   * @example
   *
   * _.isBuffer(new Buffer(2));
   * // => true
   *
   * _.isBuffer(new Uint8Array(2));
   * // => false
   */
  var isBuffer = nativeIsBuffer || stubFalse;

  module.exports = isBuffer;
});
$__System.registerDynamic('153', ['158', '159', '177', '174', '176', '154', '178', '17e', '140', '17f', '18e', '190', '142', '144', '14b', '14f', '175'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var Stack = $__require('158'),
      arrayEach = $__require('159'),
      assignValue = $__require('177'),
      baseAssign = $__require('174'),
      cloneBuffer = $__require('176'),
      copyArray = $__require('154'),
      copySymbols = $__require('178'),
      getAllKeys = $__require('17e'),
      getTag = $__require('140'),
      initCloneArray = $__require('17f'),
      initCloneByTag = $__require('18e'),
      initCloneObject = $__require('190'),
      isArray = $__require('142'),
      isBuffer = $__require('144'),
      isHostObject = $__require('14b'),
      isObject = $__require('14f'),
      keys = $__require('175');

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      weakMapTag = '[object WeakMap]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;

  /**
   * The base implementation of `_.clone` and `_.cloneDeep` which tracks
   * traversed objects.
   *
   * @private
   * @param {*} value The value to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @param {boolean} [isFull] Specify a clone including symbols.
   * @param {Function} [customizer] The function to customize cloning.
   * @param {string} [key] The key of `value`.
   * @param {Object} [object] The parent object of `value`.
   * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
   * @returns {*} Returns the cloned value.
   */
  function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
    var result;
    if (customizer) {
      result = object ? customizer(value, key, object, stack) : customizer(value);
    }
    if (result !== undefined) {
      return result;
    }
    if (!isObject(value)) {
      return value;
    }
    var isArr = isArray(value);
    if (isArr) {
      result = initCloneArray(value);
      if (!isDeep) {
        return copyArray(value, result);
      }
    } else {
      var tag = getTag(value),
          isFunc = tag == funcTag || tag == genTag;

      if (isBuffer(value)) {
        return cloneBuffer(value, isDeep);
      }
      if (tag == objectTag || tag == argsTag || isFunc && !object) {
        if (isHostObject(value)) {
          return object ? value : {};
        }
        result = initCloneObject(isFunc ? {} : value);
        if (!isDeep) {
          return copySymbols(value, baseAssign(result, value));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object ? value : {};
        }
        result = initCloneByTag(value, tag, baseClone, isDeep);
      }
    }
    // Check for circular references and return its corresponding clone.
    stack || (stack = new Stack());
    var stacked = stack.get(value);
    if (stacked) {
      return stacked;
    }
    stack.set(value, result);

    if (!isArr) {
      var props = isFull ? getAllKeys(value) : keys(value);
    }
    arrayEach(props || value, function (subValue, key) {
      if (props) {
        key = subValue;
        subValue = value[key];
      }
      // Recursively populate clone (susceptible to call stack limits).
      assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));
    });
    return result;
  }

  module.exports = baseClone;
});
$__System.registerDynamic('193', ['153'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var baseClone = $__require('153');

  /**
   * This method is like `_.clone` except that it recursively clones `value`.
   *
   * @static
   * @memberOf _
   * @since 1.0.0
   * @category Lang
   * @param {*} value The value to recursively clone.
   * @returns {*} Returns the deep cloned value.
   * @see _.clone
   * @example
   *
   * var objects = [{ 'a': 1 }, { 'b': 2 }];
   *
   * var deep = _.cloneDeep(objects);
   * console.log(deep[0] === objects[0]);
   * // => false
   */
  function cloneDeep(value) {
    return baseClone(value, true, true);
  }

  module.exports = cloneDeep;
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: mark@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */

$__System.registerDynamic('16d', ['194', '195', '16f', '196'], false, function ($__require, $__exports, $__module) {
  $__module.uri = $__module.id;
  return (function (require, exports, module) {
    var EventHandler = require('194');
    var OptionsManager = require('195');
    var RenderNode = require('16f');
    var Utility = require('196');

    /**
     * Useful for quickly creating elements within applications
     *   with large event systems.  Consists of a RenderNode paired with
     *   an input EventHandler and an output EventHandler.
     *   Meant to be extended by the developer.
     *
     * @class View
     * @uses EventHandler
     * @uses OptionsManager
     * @uses RenderNode
     * @constructor
     */
    function View(options) {
      this._node = new RenderNode();

      this._eventInput = new EventHandler();
      this._eventOutput = new EventHandler();
      EventHandler.setInputHandler(this, this._eventInput);
      EventHandler.setOutputHandler(this, this._eventOutput);

      this.options = Utility.clone(this.constructor.DEFAULT_OPTIONS || View.DEFAULT_OPTIONS);
      this._optionsManager = new OptionsManager(this.options);

      if (options) this.setOptions(options);
    }

    View.DEFAULT_OPTIONS = {}; // no defaults

    /**
     * Look up options value by key
     * @method getOptions
     *
     * @param {string} key key
     * @return {Object} associated object
     */
    View.prototype.getOptions = function getOptions(key) {
      return this._optionsManager.getOptions(key);
    };

    /*
     *  Set internal options.
     *  No defaults options are set in View.
     *
     *  @method setOptions
     *  @param {Object} options
     */
    View.prototype.setOptions = function setOptions(options) {
      this._optionsManager.patch(options);
    };

    /**
     * Add a child renderable to the view.
     *   Note: This is meant to be used by an inheriting class
     *   rather than from outside the prototype chain.
     *
     * @method add
     * @return {RenderNode}
     * @protected
     */
    View.prototype.add = function add() {
      return this._node.add.apply(this._node, arguments);
    };

    /**
     * Alias for add
     * @method _add
     */
    View.prototype._add = View.prototype.add;

    /**
     * Generate a render spec from the contents of this component.
     *
     * @private
     * @method render
     * @return {number} Render spec for this component
     */
    View.prototype.render = function render() {
      return this._node.render();
    };

    /**
     * Return size of contained element.
     *
     * @method getSize
     * @return {Array.Number} [width, height]
     */
    View.prototype.getSize = function getSize() {
      if (this._node && this._node.getSize) {
        return this._node.getSize.apply(this._node, arguments) || this.options.size;
      } else return this.options.size;
    };

    module.exports = View;
  }).call($__exports, $__require, $__exports, $__module);
});

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: mark@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */

$__System.registerDynamic('197', ['198'], false, function ($__require, $__exports, $__module) {
    $__module.uri = $__module.id;
    return (function (require, exports, module) {
        var Surface = require('198');

        /**
         * A surface containing image content.
         *   This extends the Surface class.
         *
         * @class ImageSurface
         *
         * @extends Surface
         * @constructor
         * @param {Object} [options] overrides of default options
         */
        function ImageSurface(options) {
            this._imageUrl = undefined;
            Surface.apply(this, arguments);
        }

        var urlCache = [];
        var countCache = [];
        var nodeCache = [];
        var cacheEnabled = true;

        ImageSurface.enableCache = function enableCache() {
            cacheEnabled = true;
        };

        ImageSurface.disableCache = function disableCache() {
            cacheEnabled = false;
        };

        ImageSurface.clearCache = function clearCache() {
            urlCache = [];
            countCache = [];
            nodeCache = [];
        };

        ImageSurface.getCache = function getCache() {
            return {
                urlCache: urlCache,
                countCache: countCache,
                nodeCache: nodeCache
            };
        };

        ImageSurface.prototype = Object.create(Surface.prototype);
        ImageSurface.prototype.constructor = ImageSurface;
        ImageSurface.prototype.elementType = 'img';
        ImageSurface.prototype.elementClass = 'famous-surface';

        /**
         * Set content URL.  This will cause a re-rendering.
         * @method setContent
         * @param {string} imageUrl
         */
        ImageSurface.prototype.setContent = function setContent(imageUrl) {
            var urlIndex = urlCache.indexOf(this._imageUrl);
            if (urlIndex !== -1) {
                if (countCache[urlIndex] === 1) {
                    urlCache.splice(urlIndex, 1);
                    countCache.splice(urlIndex, 1);
                    nodeCache.splice(urlIndex, 1);
                } else {
                    countCache[urlIndex]--;
                }
            }

            urlIndex = urlCache.indexOf(imageUrl);
            if (urlIndex === -1) {
                urlCache.push(imageUrl);
                countCache.push(1);
            } else {
                countCache[urlIndex]++;
            }

            this._imageUrl = imageUrl;
            this._contentDirty = true;
        };

        /**
         * Place the document element that this component manages into the document.
         *
         * @private
         * @method deploy
         * @param {Node} target document parent of this container
         */
        ImageSurface.prototype.deploy = function deploy(target) {
            var urlIndex = urlCache.indexOf(this._imageUrl);
            if (nodeCache[urlIndex] === undefined && cacheEnabled) {
                var img = new Image();
                img.src = this._imageUrl || '';
                nodeCache[urlIndex] = img;
            }

            target.src = this._imageUrl || '';
        };

        /**
         * Remove this component and contained content from the document
         *
         * @private
         * @method recall
         *
         * @param {Node} target node to which the component was deployed
         */
        ImageSurface.prototype.recall = function recall(target) {
            target.src = '';
        };

        module.exports = ImageSurface;
    }).call($__exports, $__require, $__exports, $__module);
});
$__System.registerDynamic('199', [], true, function ($__require, exports, module) {
  'use strict';

  var global = this || self,
      GLOBAL = global;
  var has = Object.prototype.hasOwnProperty;

  //
  // We store our EE objects in a plain object whose properties are event names.
  // If `Object.create(null)` is not supported we prefix the event names with a
  // `~` to make sure that the built-in object properties are not overridden or
  // used as an attack vector.
  // We also assume that `Object.create(null)` is available when the event name
  // is an ES6 Symbol.
  //
  var prefix = typeof Object.create !== 'function' ? '~' : false;

  /**
   * Representation of a single EventEmitter function.
   *
   * @param {Function} fn Event handler to be called.
   * @param {Mixed} context Context for function execution.
   * @param {Boolean} [once=false] Only emit once
   * @api private
   */
  function EE(fn, context, once) {
    this.fn = fn;
    this.context = context;
    this.once = once || false;
  }

  /**
   * Minimal EventEmitter interface that is molded against the Node.js
   * EventEmitter interface.
   *
   * @constructor
   * @api public
   */
  function EventEmitter() {} /* Nothing to set */

  /**
   * Hold the assigned EventEmitters by name.
   *
   * @type {Object}
   * @private
   */
  EventEmitter.prototype._events = undefined;

  /**
   * Return an array listing the events for which the emitter has registered
   * listeners.
   *
   * @returns {Array}
   * @api public
   */
  EventEmitter.prototype.eventNames = function eventNames() {
    var events = this._events,
        names = [],
        name;

    if (!events) return names;

    for (name in events) {
      if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
    }

    if (Object.getOwnPropertySymbols) {
      return names.concat(Object.getOwnPropertySymbols(events));
    }

    return names;
  };

  /**
   * Return a list of assigned event listeners.
   *
   * @param {String} event The events that should be listed.
   * @param {Boolean} exists We only need to know if there are listeners.
   * @returns {Array|Boolean}
   * @api public
   */
  EventEmitter.prototype.listeners = function listeners(event, exists) {
    var evt = prefix ? prefix + event : event,
        available = this._events && this._events[evt];

    if (exists) return !!available;
    if (!available) return [];
    if (available.fn) return [available.fn];

    for (var i = 0, l = available.length, ee = new Array(l); i < l; i++) {
      ee[i] = available[i].fn;
    }

    return ee;
  };

  /**
   * Emit an event to all registered event listeners.
   *
   * @param {String} event The name of the event.
   * @returns {Boolean} Indication if we've emitted an event.
   * @api public
   */
  EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
    var evt = prefix ? prefix + event : event;

    if (!this._events || !this._events[evt]) return false;

    var listeners = this._events[evt],
        len = arguments.length,
        args,
        i;

    if ('function' === typeof listeners.fn) {
      if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

      switch (len) {
        case 1:
          return listeners.fn.call(listeners.context), true;
        case 2:
          return listeners.fn.call(listeners.context, a1), true;
        case 3:
          return listeners.fn.call(listeners.context, a1, a2), true;
        case 4:
          return listeners.fn.call(listeners.context, a1, a2, a3), true;
        case 5:
          return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
        case 6:
          return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
      }

      for (i = 1, args = new Array(len - 1); i < len; i++) {
        args[i - 1] = arguments[i];
      }

      listeners.fn.apply(listeners.context, args);
    } else {
      var length = listeners.length,
          j;

      for (i = 0; i < length; i++) {
        if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

        switch (len) {
          case 1:
            listeners[i].fn.call(listeners[i].context);break;
          case 2:
            listeners[i].fn.call(listeners[i].context, a1);break;
          case 3:
            listeners[i].fn.call(listeners[i].context, a1, a2);break;
          default:
            if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
              args[j - 1] = arguments[j];
            }

            listeners[i].fn.apply(listeners[i].context, args);
        }
      }
    }

    return true;
  };

  /**
   * Register a new EventListener for the given event.
   *
   * @param {String} event Name of the event.
   * @param {Function} fn Callback function.
   * @param {Mixed} [context=this] The context of the function.
   * @api public
   */
  EventEmitter.prototype.on = function on(event, fn, context) {
    var listener = new EE(fn, context || this),
        evt = prefix ? prefix + event : event;

    if (!this._events) this._events = prefix ? {} : Object.create(null);
    if (!this._events[evt]) this._events[evt] = listener;else {
      if (!this._events[evt].fn) this._events[evt].push(listener);else this._events[evt] = [this._events[evt], listener];
    }

    return this;
  };

  /**
   * Add an EventListener that's only called once.
   *
   * @param {String} event Name of the event.
   * @param {Function} fn Callback function.
   * @param {Mixed} [context=this] The context of the function.
   * @api public
   */
  EventEmitter.prototype.once = function once(event, fn, context) {
    var listener = new EE(fn, context || this, true),
        evt = prefix ? prefix + event : event;

    if (!this._events) this._events = prefix ? {} : Object.create(null);
    if (!this._events[evt]) this._events[evt] = listener;else {
      if (!this._events[evt].fn) this._events[evt].push(listener);else this._events[evt] = [this._events[evt], listener];
    }

    return this;
  };

  /**
   * Remove event listeners.
   *
   * @param {String} event The event we want to remove.
   * @param {Function} fn The listener that we need to find.
   * @param {Mixed} context Only remove listeners matching this context.
   * @param {Boolean} once Only remove once listeners.
   * @api public
   */
  EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
    var evt = prefix ? prefix + event : event;

    if (!this._events || !this._events[evt]) return this;

    var listeners = this._events[evt],
        events = [];

    if (fn) {
      if (listeners.fn) {
        if (listeners.fn !== fn || once && !listeners.once || context && listeners.context !== context) {
          events.push(listeners);
        }
      } else {
        for (var i = 0, length = listeners.length; i < length; i++) {
          if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
            events.push(listeners[i]);
          }
        }
      }
    }

    //
    // Reset the array, or remove it completely if we have no more listeners.
    //
    if (events.length) {
      this._events[evt] = events.length === 1 ? events[0] : events;
    } else {
      delete this._events[evt];
    }

    return this;
  };

  /**
   * Remove all listeners or only the listeners for the specified event.
   *
   * @param {String} event The event want to remove all listeners for.
   * @api public
   */
  EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
    if (!this._events) return this;

    if (event) delete this._events[prefix ? prefix + event : event];else this._events = prefix ? {} : Object.create(null);

    return this;
  };

  //
  // Alias methods names because people roll like that.
  //
  EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
  EventEmitter.prototype.addListener = EventEmitter.prototype.on;

  //
  // This function doesn't apply anymore.
  //
  EventEmitter.prototype.setMaxListeners = function setMaxListeners() {
    return this;
  };

  //
  // Expose the prefix.
  //
  EventEmitter.prefixed = prefix;

  //
  // Expose the module.
  //
  if ('undefined' !== typeof module) {
    module.exports = EventEmitter;
  }
});
$__System.registerDynamic('19a', ['19b'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var baseIsEqual = $__require('19b');

  /**
   * Performs a deep comparison between two values to determine if they are
   * equivalent.
   *
   * **Note:** This method supports comparing arrays, array buffers, booleans,
   * date objects, error objects, maps, numbers, `Object` objects, regexes,
   * sets, strings, symbols, and typed arrays. `Object` objects are compared
   * by their own, not inherited, enumerable properties. Functions and DOM
   * nodes are **not** supported.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.isEqual(object, other);
   * // => true
   *
   * object === other;
   * // => false
   */
  function isEqual(value, other) {
    return baseIsEqual(value, other);
  }

  module.exports = isEqual;
});
$__System.registerDynamic("19c", [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while (fromRight ? index-- : ++index < length) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  module.exports = baseFindIndex;
});
$__System.registerDynamic('19d', ['158', '19b'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var Stack = $__require('158'),
      baseIsEqual = $__require('19b');

  /** Used to compose bitmasks for comparison styles. */
  var UNORDERED_COMPARE_FLAG = 1,
      PARTIAL_COMPARE_FLAG = 2;

  /**
   * The base implementation of `_.isMatch` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The object to inspect.
   * @param {Object} source The object of property values to match.
   * @param {Array} matchData The property names, values, and compare flags to match.
   * @param {Function} [customizer] The function to customize comparisons.
   * @returns {boolean} Returns `true` if `object` is a match, else `false`.
   */
  function baseIsMatch(object, source, matchData, customizer) {
    var index = matchData.length,
        length = index,
        noCustomizer = !customizer;

    if (object == null) {
      return !length;
    }
    object = Object(object);
    while (index--) {
      var data = matchData[index];
      if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
        return false;
      }
    }
    while (++index < length) {
      data = matchData[index];
      var key = data[0],
          objValue = object[key],
          srcValue = data[1];

      if (noCustomizer && data[2]) {
        if (objValue === undefined && !(key in object)) {
          return false;
        }
      } else {
        var stack = new Stack();
        if (customizer) {
          var result = customizer(objValue, srcValue, key, object, source, stack);
        }
        if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack) : result)) {
          return false;
        }
      }
    }
    return true;
  }

  module.exports = baseIsMatch;
});
$__System.registerDynamic('19e', ['19f', '175'], true, function ($__require, exports, module) {
    var global = this || self,
        GLOBAL = global;
    var isStrictComparable = $__require('19f'),
        keys = $__require('175');

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
        var result = keys(object),
            length = result.length;

        while (length--) {
            var key = result[length],
                value = object[key];

            result[length] = [key, value, isStrictComparable(value)];
        }
        return result;
    }

    module.exports = getMatchData;
});
$__System.registerDynamic('1a0', ['19d', '19e', '1a1'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var baseIsMatch = $__require('19d'),
      getMatchData = $__require('19e'),
      matchesStrictComparable = $__require('1a1');

  /**
   * The base implementation of `_.matches` which doesn't clone `source`.
   *
   * @private
   * @param {Object} source The object of property values to match.
   * @returns {Function} Returns the new spec function.
   */
  function baseMatches(source) {
    var matchData = getMatchData(source);
    if (matchData.length == 1 && matchData[0][2]) {
      return matchesStrictComparable(matchData[0][0], matchData[0][1]);
    }
    return function (object) {
      return object === source || baseIsMatch(object, source, matchData);
    };
  }

  module.exports = baseMatches;
});
$__System.registerDynamic('1a2', ['1a3'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var ListCache = $__require('1a3');

  /**
   * Removes all key-value entries from the stack.
   *
   * @private
   * @name clear
   * @memberOf Stack
   */
  function stackClear() {
    this.__data__ = new ListCache();
  }

  module.exports = stackClear;
});
$__System.registerDynamic('1a4', [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /**
   * Removes `key` and its value from the stack.
   *
   * @private
   * @name delete
   * @memberOf Stack
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function stackDelete(key) {
    return this.__data__['delete'](key);
  }

  module.exports = stackDelete;
});
$__System.registerDynamic("1a5", [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /**
   * Gets the stack value for `key`.
   *
   * @private
   * @name get
   * @memberOf Stack
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function stackGet(key) {
    return this.__data__.get(key);
  }

  module.exports = stackGet;
});
$__System.registerDynamic("1a6", [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /**
   * Checks if a stack value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Stack
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function stackHas(key) {
    return this.__data__.has(key);
  }

  module.exports = stackHas;
});
$__System.registerDynamic('1a7', ['1a3', '1a8', '1a9'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var ListCache = $__require('1a3'),
      Map = $__require('1a8'),
      MapCache = $__require('1a9');

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /**
   * Sets the stack `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Stack
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the stack cache instance.
   */
  function stackSet(key, value) {
    var cache = this.__data__;
    if (cache instanceof ListCache) {
      var pairs = cache.__data__;
      if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
        pairs.push([key, value]);
        return this;
      }
      cache = this.__data__ = new MapCache(pairs);
    }
    cache.set(key, value);
    return this;
  }

  module.exports = stackSet;
});
$__System.registerDynamic('158', ['1a3', '1a2', '1a4', '1a5', '1a6', '1a7'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var ListCache = $__require('1a3'),
      stackClear = $__require('1a2'),
      stackDelete = $__require('1a4'),
      stackGet = $__require('1a5'),
      stackHas = $__require('1a6'),
      stackSet = $__require('1a7');

  /**
   * Creates a stack cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Stack(entries) {
    this.__data__ = new ListCache(entries);
  }

  // Add methods to `Stack`.
  Stack.prototype.clear = stackClear;
  Stack.prototype['delete'] = stackDelete;
  Stack.prototype.get = stackGet;
  Stack.prototype.has = stackHas;
  Stack.prototype.set = stackSet;

  module.exports = Stack;
});
$__System.registerDynamic('18c', ['192'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var root = $__require('192');

  /** Built-in value references. */
  var Uint8Array = root.Uint8Array;

  module.exports = Uint8Array;
});
$__System.registerDynamic('1aa', [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /**
   * Adds `value` to the array cache.
   *
   * @private
   * @name add
   * @memberOf SetCache
   * @alias push
   * @param {*} value The value to cache.
   * @returns {Object} Returns the cache instance.
   */
  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED);
    return this;
  }

  module.exports = setCacheAdd;
});
$__System.registerDynamic("1ab", [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /**
   * Checks if `value` is in the array cache.
   *
   * @private
   * @name has
   * @memberOf SetCache
   * @param {*} value The value to search for.
   * @returns {number} Returns `true` if `value` is found, else `false`.
   */
  function setCacheHas(value) {
    return this.__data__.has(value);
  }

  module.exports = setCacheHas;
});
$__System.registerDynamic('1ac', ['1a9', '1aa', '1ab'], true, function ($__require, exports, module) {
    var global = this || self,
        GLOBAL = global;
    var MapCache = $__require('1a9'),
        setCacheAdd = $__require('1aa'),
        setCacheHas = $__require('1ab');

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
        var index = -1,
            length = values ? values.length : 0;

        this.__data__ = new MapCache();
        while (++index < length) {
            this.add(values[index]);
        }
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    module.exports = SetCache;
});
$__System.registerDynamic("1ad", [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array ? array.length : 0;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  module.exports = arraySome;
});
$__System.registerDynamic('1ae', ['1ac', '1ad'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var SetCache = $__require('1ac'),
      arraySome = $__require('1ad');

  /** Used to compose bitmasks for comparison styles. */
  var UNORDERED_COMPARE_FLAG = 1,
      PARTIAL_COMPARE_FLAG = 2;

  /**
   * A specialized version of `baseIsEqualDeep` for arrays with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Array} array The array to compare.
   * @param {Array} other The other array to compare.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Function} customizer The function to customize comparisons.
   * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
   *  for more details.
   * @param {Object} stack Tracks traversed `array` and `other` objects.
   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
   */
  function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
    var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
        arrLength = array.length,
        othLength = other.length;

    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }
    // Assume cyclic values are equal.
    var stacked = stack.get(array);
    if (stacked && stack.get(other)) {
      return stacked == other;
    }
    var index = -1,
        result = true,
        seen = bitmask & UNORDERED_COMPARE_FLAG ? new SetCache() : undefined;

    stack.set(array, other);
    stack.set(other, array);

    // Ignore non-index properties.
    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
      }
      if (compared !== undefined) {
        if (compared) {
          continue;
        }
        result = false;
        break;
      }
      // Recursively compare arrays (susceptible to call stack limits).
      if (seen) {
        if (!arraySome(other, function (othValue, othIndex) {
          if (!seen.has(othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
            return seen.add(othIndex);
          }
        })) {
          result = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
        result = false;
        break;
      }
    }
    stack['delete'](array);
    stack['delete'](other);
    return result;
  }

  module.exports = equalArrays;
});
$__System.registerDynamic("185", [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function (value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  module.exports = mapToArray;
});
$__System.registerDynamic("189", [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function (value) {
      result[++index] = value;
    });
    return result;
  }

  module.exports = setToArray;
});
$__System.registerDynamic('1af', ['18b', '18c', '148', '1ae', '185', '189'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var Symbol = $__require('18b'),
      Uint8Array = $__require('18c'),
      eq = $__require('148'),
      equalArrays = $__require('1ae'),
      mapToArray = $__require('185'),
      setToArray = $__require('189');

  /** Used to compose bitmasks for comparison styles. */
  var UNORDERED_COMPARE_FLAG = 1,
      PARTIAL_COMPARE_FLAG = 2;

  /** `Object#toString` result references. */
  var boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]';

  /** Used to convert symbols to primitives and strings. */
  var symbolProto = Symbol ? Symbol.prototype : undefined,
      symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

  /**
   * A specialized version of `baseIsEqualDeep` for comparing objects of
   * the same `toStringTag`.
   *
   * **Note:** This function only supports comparing values with tags of
   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {string} tag The `toStringTag` of the objects to compare.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Function} customizer The function to customize comparisons.
   * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
   *  for more details.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
    switch (tag) {
      case dataViewTag:
        if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
          return false;
        }
        object = object.buffer;
        other = other.buffer;

      case arrayBufferTag:
        if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
          return false;
        }
        return true;

      case boolTag:
      case dateTag:
      case numberTag:
        // Coerce booleans to `1` or `0` and dates to milliseconds.
        // Invalid dates are coerced to `NaN`.
        return eq(+object, +other);

      case errorTag:
        return object.name == other.name && object.message == other.message;

      case regexpTag:
      case stringTag:
        // Coerce regexes to strings and treat strings, primitives and objects,
        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
        // for more details.
        return object == other + '';

      case mapTag:
        var convert = mapToArray;

      case setTag:
        var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
        convert || (convert = setToArray);

        if (object.size != other.size && !isPartial) {
          return false;
        }
        // Assume cyclic values are equal.
        var stacked = stack.get(object);
        if (stacked) {
          return stacked == other;
        }
        bitmask |= UNORDERED_COMPARE_FLAG;

        // Recursively compare objects (susceptible to call stack limits).
        stack.set(object, other);
        var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
        stack['delete'](object);
        return result;

      case symbolTag:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }
    }
    return false;
  }

  module.exports = equalByTag;
});
$__System.registerDynamic("1b0", [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  module.exports = baseTimes;
});
$__System.registerDynamic('150', ['1b0', '141', '142', '15d'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var baseTimes = $__require('1b0'),
      isArguments = $__require('141'),
      isArray = $__require('142'),
      isIndex = $__require('15d');

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * Creates an array of the enumerable property names of the array-like `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @param {boolean} inherited Specify returning inherited property names.
   * @returns {Array} Returns the array of property names.
   */
  function arrayLikeKeys(value, inherited) {
    // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
    // Safari 9 makes `arguments.length` enumerable in strict mode.
    var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];

    var length = result.length,
        skipIndexes = !!length;

    for (var key in value) {
      if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
        result.push(key);
      }
    }
    return result;
  }

  module.exports = arrayLikeKeys;
});
$__System.registerDynamic('145', [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /**
   * Checks if `value` is likely a prototype object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
   */
  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;

    return value === proto;
  }

  module.exports = isPrototype;
});
$__System.registerDynamic("17d", [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function (arg) {
      return func(transform(arg));
    };
  }

  module.exports = overArg;
});
$__System.registerDynamic('146', ['17d'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var overArg = $__require('17d');

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeKeys = overArg(Object.keys, Object);

  module.exports = nativeKeys;
});
$__System.registerDynamic('1b1', ['145', '146'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var isPrototype = $__require('145'),
      nativeKeys = $__require('146');

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeys(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }
    return result;
  }

  module.exports = baseKeys;
});
$__System.registerDynamic('175', ['150', '1b1', '143'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var arrayLikeKeys = $__require('150'),
      baseKeys = $__require('1b1'),
      isArrayLike = $__require('143');

  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */
  function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }

  module.exports = keys;
});
$__System.registerDynamic('1b2', ['175'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var keys = $__require('175');

  /** Used to compose bitmasks for comparison styles. */
  var PARTIAL_COMPARE_FLAG = 2;

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * A specialized version of `baseIsEqualDeep` for objects with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Function} customizer The function to customize comparisons.
   * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
   *  for more details.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
    var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
        objProps = keys(object),
        objLength = objProps.length,
        othProps = keys(other),
        othLength = othProps.length;

    if (objLength != othLength && !isPartial) {
      return false;
    }
    var index = objLength;
    while (index--) {
      var key = objProps[index];
      if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
        return false;
      }
    }
    // Assume cyclic values are equal.
    var stacked = stack.get(object);
    if (stacked && stack.get(other)) {
      return stacked == other;
    }
    var result = true;
    stack.set(object, other);
    stack.set(other, object);

    var skipCtor = isPartial;
    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
          othValue = other[key];

      if (customizer) {
        var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
      }
      // Recursively compare objects (susceptible to call stack limits).
      if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack) : compared)) {
        result = false;
        break;
      }
      skipCtor || (skipCtor = key == 'constructor');
    }
    if (result && !skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor;

      // Non `Object` object instances with different constructors are not equal.
      if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        result = false;
      }
    }
    stack['delete'](object);
    stack['delete'](other);
    return result;
  }

  module.exports = equalObjects;
});
$__System.registerDynamic('1b3', ['1b4', '192'], true, function ($__require, exports, module) {
    var global = this || self,
        GLOBAL = global;
    var getNative = $__require('1b4'),
        root = $__require('192');

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(root, 'DataView');

    module.exports = DataView;
});
$__System.registerDynamic('1b5', ['1b4', '192'], true, function ($__require, exports, module) {
    var global = this || self,
        GLOBAL = global;
    var getNative = $__require('1b4'),
        root = $__require('192');

    /* Built-in method references that are verified to be native. */
    var Promise = getNative(root, 'Promise');

    module.exports = Promise;
});
$__System.registerDynamic('1b6', ['1b4', '192'], true, function ($__require, exports, module) {
    var global = this || self,
        GLOBAL = global;
    var getNative = $__require('1b4'),
        root = $__require('192');

    /* Built-in method references that are verified to be native. */
    var Set = getNative(root, 'Set');

    module.exports = Set;
});
$__System.registerDynamic('1b7', ['1b4', '192'], true, function ($__require, exports, module) {
    var global = this || self,
        GLOBAL = global;
    var getNative = $__require('1b4'),
        root = $__require('192');

    /* Built-in method references that are verified to be native. */
    var WeakMap = getNative(root, 'WeakMap');

    module.exports = WeakMap;
});
$__System.registerDynamic("1b8", [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objectToString = objectProto.toString;

  /**
   * The base implementation of `getTag`.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  function baseGetTag(value) {
    return objectToString.call(value);
  }

  module.exports = baseGetTag;
});
$__System.registerDynamic('140', ['1b3', '1a8', '1b5', '1b6', '1b7', '1b8', '1b9'], true, function ($__require, exports, module) {
    var global = this || self,
        GLOBAL = global;
    var DataView = $__require('1b3'),
        Map = $__require('1a8'),
        Promise = $__require('1b5'),
        Set = $__require('1b6'),
        WeakMap = $__require('1b7'),
        baseGetTag = $__require('1b8'),
        toSource = $__require('1b9');

    /** `Object#toString` result references. */
    var mapTag = '[object Map]',
        objectTag = '[object Object]',
        promiseTag = '[object Promise]',
        setTag = '[object Set]',
        weakMapTag = '[object WeakMap]';

    var dataViewTag = '[object DataView]';

    /** Used for built-in method references. */
    var objectProto = Object.prototype;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objectToString = objectProto.toString;

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11,
    // for data views in Edge < 14, and promises in Node.js.
    if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
        getTag = function (value) {
            var result = objectToString.call(value),
                Ctor = result == objectTag ? value.constructor : undefined,
                ctorString = Ctor ? toSource(Ctor) : undefined;

            if (ctorString) {
                switch (ctorString) {
                    case dataViewCtorString:
                        return dataViewTag;
                    case mapCtorString:
                        return mapTag;
                    case promiseCtorString:
                        return promiseTag;
                    case setCtorString:
                        return setTag;
                    case weakMapCtorString:
                        return weakMapTag;
                }
            }
            return result;
        };
    }

    module.exports = getTag;
});
$__System.registerDynamic('1ba', ['1bb', '14c'], true, function ($__require, exports, module) {
    var global = this || self,
        GLOBAL = global;
    var isLength = $__require('1bb'),
        isObjectLike = $__require('14c');

    /** `Object#toString` result references. */
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        objectTag = '[object Object]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        weakMapTag = '[object WeakMap]';

    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';

    /** Used to identify `toStringTag` values of typed arrays. */
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

    /** Used for built-in method references. */
    var objectProto = Object.prototype;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objectToString = objectProto.toString;

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
    }

    module.exports = baseIsTypedArray;
});
$__System.registerDynamic("1bc", [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function (value) {
      return func(value);
    };
  }

  module.exports = baseUnary;
});
$__System.registerDynamic('1bd', ['1be'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var freeGlobal = $__require('1be');

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = function () {
    try {
      return freeProcess && freeProcess.binding('util');
    } catch (e) {}
  }();

  module.exports = nodeUtil;
});
$__System.registerDynamic('157', ['1ba', '1bc', '1bd'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var baseIsTypedArray = $__require('1ba'),
      baseUnary = $__require('1bc'),
      nodeUtil = $__require('1bd');

  /* Node.js helper references. */
  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /**
   * Checks if `value` is classified as a typed array.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   * @example
   *
   * _.isTypedArray(new Uint8Array);
   * // => true
   *
   * _.isTypedArray([]);
   * // => false
   */
  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

  module.exports = isTypedArray;
});
$__System.registerDynamic('1bf', ['158', '1ae', '1af', '1b2', '140', '142', '14b', '157'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var Stack = $__require('158'),
      equalArrays = $__require('1ae'),
      equalByTag = $__require('1af'),
      equalObjects = $__require('1b2'),
      getTag = $__require('140'),
      isArray = $__require('142'),
      isHostObject = $__require('14b'),
      isTypedArray = $__require('157');

  /** Used to compose bitmasks for comparison styles. */
  var PARTIAL_COMPARE_FLAG = 2;

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      objectTag = '[object Object]';

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * A specialized version of `baseIsEqual` for arrays and objects which performs
   * deep comparisons and tracks traversed objects enabling objects with circular
   * references to be compared.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Function} [customizer] The function to customize comparisons.
   * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
   *  for more details.
   * @param {Object} [stack] Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
    var objIsArr = isArray(object),
        othIsArr = isArray(other),
        objTag = arrayTag,
        othTag = arrayTag;

    if (!objIsArr) {
      objTag = getTag(object);
      objTag = objTag == argsTag ? objectTag : objTag;
    }
    if (!othIsArr) {
      othTag = getTag(other);
      othTag = othTag == argsTag ? objectTag : othTag;
    }
    var objIsObj = objTag == objectTag && !isHostObject(object),
        othIsObj = othTag == objectTag && !isHostObject(other),
        isSameTag = objTag == othTag;

    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack());
      return objIsArr || isTypedArray(object) ? equalArrays(object, other, equalFunc, customizer, bitmask, stack) : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
    }
    if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
      var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
            othUnwrapped = othIsWrapped ? other.value() : other;

        stack || (stack = new Stack());
        return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
      }
    }
    if (!isSameTag) {
      return false;
    }
    stack || (stack = new Stack());
    return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
  }

  module.exports = baseIsEqualDeep;
});
$__System.registerDynamic('19b', ['1bf', '14f', '14c'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var baseIsEqualDeep = $__require('1bf'),
      isObject = $__require('14f'),
      isObjectLike = $__require('14c');

  /**
   * The base implementation of `_.isEqual` which supports partial comparisons
   * and tracks traversed objects.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @param {Function} [customizer] The function to customize comparisons.
   * @param {boolean} [bitmask] The bitmask of comparison flags.
   *  The bitmask may be composed of the following flags:
   *     1 - Unordered comparison
   *     2 - Partial comparison
   * @param {Object} [stack] Tracks traversed `value` and `other` objects.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   */
  function baseIsEqual(value, other, customizer, bitmask, stack) {
    if (value === other) {
      return true;
    }
    if (value == null || other == null || !isObject(value) && !isObjectLike(other)) {
      return value !== value && other !== other;
    }
    return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
  }

  module.exports = baseIsEqual;
});
$__System.registerDynamic('1c0', ['1c1'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var baseGet = $__require('1c1');

  /**
   * Gets the value at `path` of `object`. If the resolved value is
   * `undefined`, the `defaultValue` is returned in its place.
   *
   * @static
   * @memberOf _
   * @since 3.7.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @param {*} [defaultValue] The value returned for `undefined` resolved values.
   * @returns {*} Returns the resolved value.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }] };
   *
   * _.get(object, 'a[0].b.c');
   * // => 3
   *
   * _.get(object, ['a', '0', 'b', 'c']);
   * // => 3
   *
   * _.get(object, 'a.b.c', 'default');
   * // => 'default'
   */
  function get(object, path, defaultValue) {
    var result = object == null ? undefined : baseGet(object, path);
    return result === undefined ? defaultValue : result;
  }

  module.exports = get;
});
$__System.registerDynamic("1c2", [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /**
   * The base implementation of `_.hasIn` without support for deep paths.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {Array|string} key The key to check.
   * @returns {boolean} Returns `true` if `key` exists, else `false`.
   */
  function baseHasIn(object, key) {
    return object != null && key in Object(object);
  }

  module.exports = baseHasIn;
});
$__System.registerDynamic('143', ['156', '1bb'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var isFunction = $__require('156'),
      isLength = $__require('1bb');

  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */
  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }

  module.exports = isArrayLike;
});
$__System.registerDynamic('155', ['143', '14c'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var isArrayLike = $__require('143'),
      isObjectLike = $__require('14c');

  /**
   * This method is like `_.isArrayLike` except that it also checks if `value`
   * is an object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array-like object,
   *  else `false`.
   * @example
   *
   * _.isArrayLikeObject([1, 2, 3]);
   * // => true
   *
   * _.isArrayLikeObject(document.body.children);
   * // => true
   *
   * _.isArrayLikeObject('abc');
   * // => false
   *
   * _.isArrayLikeObject(_.noop);
   * // => false
   */
  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }

  module.exports = isArrayLikeObject;
});
$__System.registerDynamic('141', ['155'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var isArrayLikeObject = $__require('155');

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]';

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objectToString = objectProto.toString;

  /** Built-in value references. */
  var propertyIsEnumerable = objectProto.propertyIsEnumerable;

  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   *  else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */
  function isArguments(value) {
    // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
    return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
  }

  module.exports = isArguments;
});
$__System.registerDynamic('15d', [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER = 9007199254740991;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex(value, length) {
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
  }

  module.exports = isIndex;
});
$__System.registerDynamic('1bb', [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER = 9007199254740991;

  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This method is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */
  function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  module.exports = isLength;
});
$__System.registerDynamic('1c3', ['1c4', '141', '142', '15d', '1c5', '1bb', '1c6'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var castPath = $__require('1c4'),
      isArguments = $__require('141'),
      isArray = $__require('142'),
      isIndex = $__require('15d'),
      isKey = $__require('1c5'),
      isLength = $__require('1bb'),
      toKey = $__require('1c6');

  /**
   * Checks if `path` exists on `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @param {Function} hasFunc The function to check properties.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   */
  function hasPath(object, path, hasFunc) {
    path = isKey(path, object) ? [path] : castPath(path);

    var result,
        index = -1,
        length = path.length;

    while (++index < length) {
      var key = toKey(path[index]);
      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }
      object = object[key];
    }
    if (result) {
      return result;
    }
    var length = object ? object.length : 0;
    return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
  }

  module.exports = hasPath;
});
$__System.registerDynamic('1c7', ['1c2', '1c3'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var baseHasIn = $__require('1c2'),
      hasPath = $__require('1c3');

  /**
   * Checks if `path` is a direct or inherited property of `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   * @example
   *
   * var object = _.create({ 'a': _.create({ 'b': 2 }) });
   *
   * _.hasIn(object, 'a');
   * // => true
   *
   * _.hasIn(object, 'a.b');
   * // => true
   *
   * _.hasIn(object, ['a', 'b']);
   * // => true
   *
   * _.hasIn(object, 'b');
   * // => false
   */
  function hasIn(object, path) {
    return object != null && hasPath(object, path, baseHasIn);
  }

  module.exports = hasIn;
});
$__System.registerDynamic('19f', ['14f'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var isObject = $__require('14f');

  /**
   * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` if suitable for strict
   *  equality comparisons, else `false`.
   */
  function isStrictComparable(value) {
    return value === value && !isObject(value);
  }

  module.exports = isStrictComparable;
});
$__System.registerDynamic("1a1", [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /**
   * A specialized version of `matchesProperty` for source values suitable
   * for strict equality comparisons, i.e. `===`.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @param {*} srcValue The value to match.
   * @returns {Function} Returns the new spec function.
   */
  function matchesStrictComparable(key, srcValue) {
    return function (object) {
      if (object == null) {
        return false;
      }
      return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
    };
  }

  module.exports = matchesStrictComparable;
});
$__System.registerDynamic('1c8', ['19b', '1c0', '1c7', '1c5', '19f', '1a1', '1c6'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var baseIsEqual = $__require('19b'),
      get = $__require('1c0'),
      hasIn = $__require('1c7'),
      isKey = $__require('1c5'),
      isStrictComparable = $__require('19f'),
      matchesStrictComparable = $__require('1a1'),
      toKey = $__require('1c6');

  /** Used to compose bitmasks for comparison styles. */
  var UNORDERED_COMPARE_FLAG = 1,
      PARTIAL_COMPARE_FLAG = 2;

  /**
   * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
   *
   * @private
   * @param {string} path The path of the property to get.
   * @param {*} srcValue The value to match.
   * @returns {Function} Returns the new spec function.
   */
  function baseMatchesProperty(path, srcValue) {
    if (isKey(path) && isStrictComparable(srcValue)) {
      return matchesStrictComparable(toKey(path), srcValue);
    }
    return function (object) {
      var objValue = get(object, path);
      return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
    };
  }

  module.exports = baseMatchesProperty;
});
$__System.registerDynamic("1c9", [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /**
   * This method returns the first argument it receives.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {*} value Any value.
   * @returns {*} Returns `value`.
   * @example
   *
   * var object = { 'a': 1 };
   *
   * console.log(_.identity(object) === object);
   * // => true
   */
  function identity(value) {
    return value;
  }

  module.exports = identity;
});
$__System.registerDynamic("1ca", [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function (object) {
      return object == null ? undefined : object[key];
    };
  }

  module.exports = baseProperty;
});
$__System.registerDynamic('1cb', ['1cc'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var nativeCreate = $__require('1cc');

  /**
   * Removes all key-value entries from the hash.
   *
   * @private
   * @name clear
   * @memberOf Hash
   */
  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
  }

  module.exports = hashClear;
});
$__System.registerDynamic("1cd", [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /**
   * Removes `key` and its value from the hash.
   *
   * @private
   * @name delete
   * @memberOf Hash
   * @param {Object} hash The hash to modify.
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function hashDelete(key) {
    return this.has(key) && delete this.__data__[key];
  }

  module.exports = hashDelete;
});
$__System.registerDynamic('1ce', ['1cc'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var nativeCreate = $__require('1cc');

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * Gets the hash value for `key`.
   *
   * @private
   * @name get
   * @memberOf Hash
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }
    return hasOwnProperty.call(data, key) ? data[key] : undefined;
  }

  module.exports = hashGet;
});
$__System.registerDynamic('1cf', ['1cc'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var nativeCreate = $__require('1cc');

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
   * Checks if a hash value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Hash
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
  }

  module.exports = hashHas;
});
$__System.registerDynamic('1cc', ['1b4'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var getNative = $__require('1b4');

  /* Built-in method references that are verified to be native. */
  var nativeCreate = getNative(Object, 'create');

  module.exports = nativeCreate;
});
$__System.registerDynamic('1d0', ['1cc'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var nativeCreate = $__require('1cc');

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /**
   * Sets the hash `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Hash
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the hash instance.
   */
  function hashSet(key, value) {
    var data = this.__data__;
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
    return this;
  }

  module.exports = hashSet;
});
$__System.registerDynamic('1d1', ['1cb', '1cd', '1ce', '1cf', '1d0'], true, function ($__require, exports, module) {
    var global = this || self,
        GLOBAL = global;
    var hashClear = $__require('1cb'),
        hashDelete = $__require('1cd'),
        hashGet = $__require('1ce'),
        hashHas = $__require('1cf'),
        hashSet = $__require('1d0');

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
        var index = -1,
            length = entries ? entries.length : 0;

        this.clear();
        while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
        }
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    module.exports = Hash;
});
$__System.registerDynamic("1d2", [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /**
   * Removes all key-value entries from the list cache.
   *
   * @private
   * @name clear
   * @memberOf ListCache
   */
  function listCacheClear() {
    this.__data__ = [];
  }

  module.exports = listCacheClear;
});
$__System.registerDynamic('1d3', ['1d4'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var assocIndexOf = $__require('1d4');

  /** Used for built-in method references. */
  var arrayProto = Array.prototype;

  /** Built-in value references. */
  var splice = arrayProto.splice;

  /**
   * Removes `key` and its value from the list cache.
   *
   * @private
   * @name delete
   * @memberOf ListCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function listCacheDelete(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    return true;
  }

  module.exports = listCacheDelete;
});
$__System.registerDynamic('1d5', ['1d4'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var assocIndexOf = $__require('1d4');

  /**
   * Gets the list cache value for `key`.
   *
   * @private
   * @name get
   * @memberOf ListCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function listCacheGet(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    return index < 0 ? undefined : data[index][1];
  }

  module.exports = listCacheGet;
});
$__System.registerDynamic('1d6', ['1d4'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var assocIndexOf = $__require('1d4');

  /**
   * Checks if a list cache value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf ListCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }

  module.exports = listCacheHas;
});
$__System.registerDynamic("148", [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /**
   * Performs a
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * comparison between two values to determine if they are equivalent.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.eq(object, object);
   * // => true
   *
   * _.eq(object, other);
   * // => false
   *
   * _.eq('a', 'a');
   * // => true
   *
   * _.eq('a', Object('a'));
   * // => false
   *
   * _.eq(NaN, NaN);
   * // => true
   */
  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }

  module.exports = eq;
});
$__System.registerDynamic('1d4', ['148'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var eq = $__require('148');

  /**
   * Gets the index at which the `key` is found in `array` of key-value pairs.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} key The key to search for.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function assocIndexOf(array, key) {
    var length = array.length;
    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }

  module.exports = assocIndexOf;
});
$__System.registerDynamic('1d7', ['1d4'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var assocIndexOf = $__require('1d4');

  /**
   * Sets the list cache `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf ListCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the list cache instance.
   */
  function listCacheSet(key, value) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }

  module.exports = listCacheSet;
});
$__System.registerDynamic('1a3', ['1d2', '1d3', '1d5', '1d6', '1d7'], true, function ($__require, exports, module) {
    var global = this || self,
        GLOBAL = global;
    var listCacheClear = $__require('1d2'),
        listCacheDelete = $__require('1d3'),
        listCacheGet = $__require('1d5'),
        listCacheHas = $__require('1d6'),
        listCacheSet = $__require('1d7');

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
        var index = -1,
            length = entries ? entries.length : 0;

        this.clear();
        while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
        }
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    module.exports = ListCache;
});
$__System.registerDynamic('156', ['14f'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var isObject = $__require('14f');

  /** `Object#toString` result references. */
  var funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]';

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objectToString = objectProto.toString;

  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */
  function isFunction(value) {
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 8-9 which returns 'object' for typed array and other constructors.
    var tag = isObject(value) ? objectToString.call(value) : '';
    return tag == funcTag || tag == genTag;
  }

  module.exports = isFunction;
});
$__System.registerDynamic('14b', [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /**
   * Checks if `value` is a host object in IE < 9.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
   */
  function isHostObject(value) {
    // Many host objects are `Object` objects that can coerce to strings
    // despite having improperly defined `toString` methods.
    var result = false;
    if (value != null && typeof value.toString != 'function') {
      try {
        result = !!(value + '');
      } catch (e) {}
    }
    return result;
  }

  module.exports = isHostObject;
});
$__System.registerDynamic('1d8', ['192'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var root = $__require('192');

  /** Used to detect overreaching core-js shims. */
  var coreJsData = root['__core-js_shared__'];

  module.exports = coreJsData;
});
$__System.registerDynamic('1d9', ['1d8'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var coreJsData = $__require('1d8');

  /** Used to detect methods masquerading as native. */
  var maskSrcKey = function () {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
  }();

  /**
   * Checks if `func` has its source masked.
   *
   * @private
   * @param {Function} func The function to check.
   * @returns {boolean} Returns `true` if `func` is masked, else `false`.
   */
  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }

  module.exports = isMasked;
});
$__System.registerDynamic('1b9', [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /** Used for built-in method references. */
  var funcProto = Function.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString = funcProto.toString;

  /**
   * Converts `func` to its source code.
   *
   * @private
   * @param {Function} func The function to process.
   * @returns {string} Returns the source code.
   */
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {}
      try {
        return func + '';
      } catch (e) {}
    }
    return '';
  }

  module.exports = toSource;
});
$__System.registerDynamic('1da', ['156', '14b', '1d9', '14f', '1b9'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var isFunction = $__require('156'),
      isHostObject = $__require('14b'),
      isMasked = $__require('1d9'),
      isObject = $__require('14f'),
      toSource = $__require('1b9');

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used for built-in method references. */
  var funcProto = Function.prototype,
      objectProto = Object.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString = funcProto.toString;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /** Used to detect if a method is native. */
  var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

  /**
   * The base implementation of `_.isNative` without bad shim checks.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a native function,
   *  else `false`.
   */
  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }
    var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }

  module.exports = baseIsNative;
});
$__System.registerDynamic("1db", [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  module.exports = getValue;
});
$__System.registerDynamic('1b4', ['1da', '1db'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var baseIsNative = $__require('1da'),
      getValue = $__require('1db');

  /**
   * Gets the native function at `key` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the method to get.
   * @returns {*} Returns the function if it's native, else `undefined`.
   */
  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
  }

  module.exports = getNative;
});
$__System.registerDynamic('1a8', ['1b4', '192'], true, function ($__require, exports, module) {
    var global = this || self,
        GLOBAL = global;
    var getNative = $__require('1b4'),
        root = $__require('192');

    /* Built-in method references that are verified to be native. */
    var Map = getNative(root, 'Map');

    module.exports = Map;
});
$__System.registerDynamic('1dc', ['1d1', '1a3', '1a8'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var Hash = $__require('1d1'),
      ListCache = $__require('1a3'),
      Map = $__require('1a8');

  /**
   * Removes all key-value entries from the map.
   *
   * @private
   * @name clear
   * @memberOf MapCache
   */
  function mapCacheClear() {
    this.__data__ = {
      'hash': new Hash(),
      'map': new (Map || ListCache)(),
      'string': new Hash()
    };
  }

  module.exports = mapCacheClear;
});
$__System.registerDynamic('1dd', ['1de'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var getMapData = $__require('1de');

  /**
   * Removes `key` and its value from the map.
   *
   * @private
   * @name delete
   * @memberOf MapCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function mapCacheDelete(key) {
    return getMapData(this, key)['delete'](key);
  }

  module.exports = mapCacheDelete;
});
$__System.registerDynamic('1df', ['1de'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var getMapData = $__require('1de');

  /**
   * Gets the map value for `key`.
   *
   * @private
   * @name get
   * @memberOf MapCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }

  module.exports = mapCacheGet;
});
$__System.registerDynamic('1e0', ['1de'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var getMapData = $__require('1de');

  /**
   * Checks if a map value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf MapCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }

  module.exports = mapCacheHas;
});
$__System.registerDynamic('1e1', [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /**
   * Checks if `value` is suitable for use as unique object key.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
   */
  function isKeyable(value) {
    var type = typeof value;
    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
  }

  module.exports = isKeyable;
});
$__System.registerDynamic('1de', ['1e1'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var isKeyable = $__require('1e1');

  /**
   * Gets the data for `map`.
   *
   * @private
   * @param {Object} map The map to query.
   * @param {string} key The reference key.
   * @returns {*} Returns the map data.
   */
  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
  }

  module.exports = getMapData;
});
$__System.registerDynamic('1e2', ['1de'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var getMapData = $__require('1de');

  /**
   * Sets the map `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf MapCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the map cache instance.
   */
  function mapCacheSet(key, value) {
    getMapData(this, key).set(key, value);
    return this;
  }

  module.exports = mapCacheSet;
});
$__System.registerDynamic('1a9', ['1dc', '1dd', '1df', '1e0', '1e2'], true, function ($__require, exports, module) {
    var global = this || self,
        GLOBAL = global;
    var mapCacheClear = $__require('1dc'),
        mapCacheDelete = $__require('1dd'),
        mapCacheGet = $__require('1df'),
        mapCacheHas = $__require('1e0'),
        mapCacheSet = $__require('1e2');

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
        var index = -1,
            length = entries ? entries.length : 0;

        this.clear();
        while (++index < length) {
            var entry = entries[index];
            this.set(entry[0], entry[1]);
        }
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    module.exports = MapCache;
});
$__System.registerDynamic('1e3', ['1a9'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var MapCache = $__require('1a9');

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /**
   * Creates a function that memoizes the result of `func`. If `resolver` is
   * provided, it determines the cache key for storing the result based on the
   * arguments provided to the memoized function. By default, the first argument
   * provided to the memoized function is used as the map cache key. The `func`
   * is invoked with the `this` binding of the memoized function.
   *
   * **Note:** The cache is exposed as the `cache` property on the memoized
   * function. Its creation may be customized by replacing the `_.memoize.Cache`
   * constructor with one whose instances implement the
   * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
   * method interface of `delete`, `get`, `has`, and `set`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to have its output memoized.
   * @param {Function} [resolver] The function to resolve the cache key.
   * @returns {Function} Returns the new memoized function.
   * @example
   *
   * var object = { 'a': 1, 'b': 2 };
   * var other = { 'c': 3, 'd': 4 };
   *
   * var values = _.memoize(_.values);
   * values(object);
   * // => [1, 2]
   *
   * values(other);
   * // => [3, 4]
   *
   * object.a = 2;
   * values(object);
   * // => [1, 2]
   *
   * // Modify the result cache.
   * values.cache.set(object, ['a', 'b']);
   * values(object);
   * // => ['a', 'b']
   *
   * // Replace `_.memoize.Cache`.
   * _.memoize.Cache = WeakMap;
   */
  function memoize(func, resolver) {
    if (typeof func != 'function' || resolver && typeof resolver != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    var memoized = function () {
      var args = arguments,
          key = resolver ? resolver.apply(this, args) : args[0],
          cache = memoized.cache;

      if (cache.has(key)) {
        return cache.get(key);
      }
      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result);
      return result;
    };
    memoized.cache = new (memoize.Cache || MapCache)();
    return memoized;
  }

  // Assign cache to `_.memoize`.
  memoize.Cache = MapCache;

  module.exports = memoize;
});
$__System.registerDynamic('1be', [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  module.exports = freeGlobal;
});
$__System.registerDynamic('192', ['1be'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var freeGlobal = $__require('1be');

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  module.exports = root;
});
$__System.registerDynamic('18b', ['192'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var root = $__require('192');

  /** Built-in value references. */
  var Symbol = root.Symbol;

  module.exports = Symbol;
});
$__System.registerDynamic('1e4', ['18b', '1e5'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var Symbol = $__require('18b'),
      isSymbol = $__require('1e5');

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0;

  /** Used to convert symbols to primitives and strings. */
  var symbolProto = Symbol ? Symbol.prototype : undefined,
      symbolToString = symbolProto ? symbolProto.toString : undefined;

  /**
   * The base implementation of `_.toString` which doesn't convert nullish
   * values to empty strings.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
  function baseToString(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == 'string') {
      return value;
    }
    if (isSymbol(value)) {
      return symbolToString ? symbolToString.call(value) : '';
    }
    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
  }

  module.exports = baseToString;
});
$__System.registerDynamic('1e6', ['1e4'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var baseToString = $__require('1e4');

  /**
   * Converts `value` to a string. An empty string is returned for `null`
   * and `undefined` values. The sign of `-0` is preserved.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   * @example
   *
   * _.toString(null);
   * // => ''
   *
   * _.toString(-0);
   * // => '-0'
   *
   * _.toString([1, 2, 3]);
   * // => '1,2,3'
   */
  function toString(value) {
    return value == null ? '' : baseToString(value);
  }

  module.exports = toString;
});
$__System.registerDynamic('1e7', ['1e3', '1e6'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var memoize = $__require('1e3'),
      toString = $__require('1e6');

  /** Used to match property names within property paths. */
  var reLeadingDot = /^\./,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Converts `string` to a property path array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the property path array.
   */
  var stringToPath = memoize(function (string) {
    string = toString(string);

    var result = [];
    if (reLeadingDot.test(string)) {
      result.push('');
    }
    string.replace(rePropName, function (match, number, quote, string) {
      result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);
    });
    return result;
  });

  module.exports = stringToPath;
});
$__System.registerDynamic('1c4', ['142', '1e7'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var isArray = $__require('142'),
      stringToPath = $__require('1e7');

  /**
   * Casts `value` to a path array if it's not one.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {Array} Returns the cast property path array.
   */
  function castPath(value) {
    return isArray(value) ? value : stringToPath(value);
  }

  module.exports = castPath;
});
$__System.registerDynamic('1c1', ['1c4', '1c5', '1c6'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var castPath = $__require('1c4'),
      isKey = $__require('1c5'),
      toKey = $__require('1c6');

  /**
   * The base implementation of `_.get` without support for default values.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @returns {*} Returns the resolved value.
   */
  function baseGet(object, path) {
    path = isKey(path, object) ? [path] : castPath(path);

    var index = 0,
        length = path.length;

    while (object != null && index < length) {
      object = object[toKey(path[index++])];
    }
    return index && index == length ? object : undefined;
  }

  module.exports = baseGet;
});
$__System.registerDynamic('1e8', ['1c1'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var baseGet = $__require('1c1');

  /**
   * A specialized version of `baseProperty` which supports deep paths.
   *
   * @private
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyDeep(path) {
    return function (object) {
      return baseGet(object, path);
    };
  }

  module.exports = basePropertyDeep;
});
$__System.registerDynamic("142", [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  var isArray = Array.isArray;

  module.exports = isArray;
});
$__System.registerDynamic('1c5', ['142', '1e5'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var isArray = $__require('142'),
      isSymbol = $__require('1e5');

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/;

  /**
   * Checks if `value` is a property name and not a property path.
   *
   * @private
   * @param {*} value The value to check.
   * @param {Object} [object] The object to query keys on.
   * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
   */
  function isKey(value, object) {
    if (isArray(value)) {
      return false;
    }
    var type = typeof value;
    if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
      return true;
    }
    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
  }

  module.exports = isKey;
});
$__System.registerDynamic('1c6', ['1e5'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var isSymbol = $__require('1e5');

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0;

  /**
   * Converts `value` to a string key if it's not a string or symbol.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {string|symbol} Returns the key.
   */
  function toKey(value) {
    if (typeof value == 'string' || isSymbol(value)) {
      return value;
    }
    var result = value + '';
    return result == '0' && 1 / value == -INFINITY ? '-0' : result;
  }

  module.exports = toKey;
});
$__System.registerDynamic('1e9', ['1ca', '1e8', '1c5', '1c6'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var baseProperty = $__require('1ca'),
      basePropertyDeep = $__require('1e8'),
      isKey = $__require('1c5'),
      toKey = $__require('1c6');

  /**
   * Creates a function that returns the value at `path` of a given object.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new accessor function.
   * @example
   *
   * var objects = [
   *   { 'a': { 'b': 2 } },
   *   { 'a': { 'b': 1 } }
   * ];
   *
   * _.map(objects, _.property('a.b'));
   * // => [2, 1]
   *
   * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
   * // => [1, 2]
   */
  function property(path) {
    return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
  }

  module.exports = property;
});
$__System.registerDynamic('1ea', ['1a0', '1c8', '1c9', '142', '1e9'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var baseMatches = $__require('1a0'),
      baseMatchesProperty = $__require('1c8'),
      identity = $__require('1c9'),
      isArray = $__require('142'),
      property = $__require('1e9');

  /**
   * The base implementation of `_.iteratee`.
   *
   * @private
   * @param {*} [value=_.identity] The value to convert to an iteratee.
   * @returns {Function} Returns the iteratee.
   */
  function baseIteratee(value) {
    // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
    // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
    if (typeof value == 'function') {
      return value;
    }
    if (value == null) {
      return identity;
    }
    if (typeof value == 'object') {
      return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
    }
    return property(value);
  }

  module.exports = baseIteratee;
});
$__System.registerDynamic('14f', [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }

  module.exports = isObject;
});
$__System.registerDynamic('14c', [], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  module.exports = isObjectLike;
});
$__System.registerDynamic('1e5', ['14c'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var isObjectLike = $__require('14c');

  /** `Object#toString` result references. */
  var symbolTag = '[object Symbol]';

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objectToString = objectProto.toString;

  /**
   * Checks if `value` is classified as a `Symbol` primitive or object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
   * @example
   *
   * _.isSymbol(Symbol.iterator);
   * // => true
   *
   * _.isSymbol('abc');
   * // => false
   */
  function isSymbol(value) {
    return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;
  }

  module.exports = isSymbol;
});
$__System.registerDynamic('1eb', ['14f', '1e5'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var isObject = $__require('14f'),
      isSymbol = $__require('1e5');

  /** Used as references for various `Number` constants. */
  var NAN = 0 / 0;

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Built-in method references without a dependency on `root`. */
  var freeParseInt = parseInt;

  /**
   * Converts `value` to a number.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to process.
   * @returns {number} Returns the number.
   * @example
   *
   * _.toNumber(3.2);
   * // => 3.2
   *
   * _.toNumber(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toNumber(Infinity);
   * // => Infinity
   *
   * _.toNumber('3.2');
   * // => 3.2
   */
  function toNumber(value) {
    if (typeof value == 'number') {
      return value;
    }
    if (isSymbol(value)) {
      return NAN;
    }
    if (isObject(value)) {
      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
      value = isObject(other) ? other + '' : other;
    }
    if (typeof value != 'string') {
      return value === 0 ? value : +value;
    }
    value = value.replace(reTrim, '');
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
  }

  module.exports = toNumber;
});
$__System.registerDynamic('1ec', ['1eb'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var toNumber = $__require('1eb');

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_INTEGER = 1.7976931348623157e+308;

  /**
   * Converts `value` to a finite number.
   *
   * @static
   * @memberOf _
   * @since 4.12.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted number.
   * @example
   *
   * _.toFinite(3.2);
   * // => 3.2
   *
   * _.toFinite(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toFinite(Infinity);
   * // => 1.7976931348623157e+308
   *
   * _.toFinite('3.2');
   * // => 3.2
   */
  function toFinite(value) {
    if (!value) {
      return value === 0 ? value : 0;
    }
    value = toNumber(value);
    if (value === INFINITY || value === -INFINITY) {
      var sign = value < 0 ? -1 : 1;
      return sign * MAX_INTEGER;
    }
    return value === value ? value : 0;
  }

  module.exports = toFinite;
});
$__System.registerDynamic('1ed', ['1ec'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var toFinite = $__require('1ec');

  /**
   * Converts `value` to an integer.
   *
   * **Note:** This method is loosely based on
   * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted integer.
   * @example
   *
   * _.toInteger(3.2);
   * // => 3
   *
   * _.toInteger(Number.MIN_VALUE);
   * // => 0
   *
   * _.toInteger(Infinity);
   * // => 1.7976931348623157e+308
   *
   * _.toInteger('3.2');
   * // => 3
   */
  function toInteger(value) {
    var result = toFinite(value),
        remainder = result % 1;

    return result === result ? remainder ? result - remainder : result : 0;
  }

  module.exports = toInteger;
});
$__System.registerDynamic('1ee', ['19c', '1ea', '1ed'], true, function ($__require, exports, module) {
  var global = this || self,
      GLOBAL = global;
  var baseFindIndex = $__require('19c'),
      baseIteratee = $__require('1ea'),
      toInteger = $__require('1ed');

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax = Math.max;

  /**
   * This method is like `_.find` except that it returns the index of the first
   * element `predicate` returns truthy for instead of the element itself.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {Function} [predicate=_.identity]
   *  The function invoked per iteration.
   * @param {number} [fromIndex=0] The index to search from.
   * @returns {number} Returns the index of the found element, else `-1`.
   * @example
   *
   * var users = [
   *   { 'user': 'barney',  'active': false },
   *   { 'user': 'fred',    'active': false },
   *   { 'user': 'pebbles', 'active': true }
   * ];
   *
   * _.findIndex(users, function(o) { return o.user == 'barney'; });
   * // => 0
   *
   * // The `_.matches` iteratee shorthand.
   * _.findIndex(users, { 'user': 'fred', 'active': false });
   * // => 1
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.findIndex(users, ['active', false]);
   * // => 0
   *
   * // The `_.property` iteratee shorthand.
   * _.findIndex(users, 'active');
   * // => 2
   */
  function findIndex(array, predicate, fromIndex) {
    var length = array ? array.length : 0;
    if (!length) {
      return -1;
    }
    var index = fromIndex == null ? 0 : toInteger(fromIndex);
    if (index < 0) {
      index = nativeMax(length + index, 0);
    }
    return baseFindIndex(array, baseIteratee(predicate, 3), index);
  }

  module.exports = findIndex;
});
$__System.registerDynamic('1ef', [], true, function ($__require, exports, module) {
  /*jshint browserify: true, es3: true */
  'use strict';

  var global = this || self,
      GLOBAL = global;
  var _defineProperty = function () {
    try {
      Object.defineProperty({}, 'x', {});
      return function (obj, name, value) {
        Object.defineProperty(obj, name, {
          configurable: false,
          enumerable: false,
          writable: false,
          value: value
        });
      };
    } catch (e) {
      return function (obj, name, value) {
        obj[name] = value;
      };
    }
  }();

  module.exports = OrderedHashMap;
  function OrderedHashMap() {
    this._values = {};
    this._keys = {};
    this._order = [];
    this._id = Date.now() + '$' + String(Math.random()).slice(2);
    this._nextId = 0;
  }
  OrderedHashMap.from = function (arr, keyProp) {
    var Ctor = this;
    var m = new Ctor();
    for (var i = 0; i < arr.length; i++) {
      var value = arr[i];
      var key = keyProp ? typeof keyProp === 'function' ? keyProp(value, i, arr) : value[keyProp] : i;
      var hash = m._hash(key);
      m._order.push(hash);
      m._keys[hash] = key;
      m._values[hash] = value;
    }
    return m;
  };
  OrderedHashMap.fromTuples = function (arr) {
    var Ctor = this;
    var m = new Ctor();
    for (var i = 0; i < arr.length; i++) {
      var item = arr[i];
      var key = item[0];
      var hash = m._hash(key);
      m._order.push(hash);
      m._keys[hash] = item[0];
      m._values[hash] = item[1];
    }
    return m;
  };
  OrderedHashMap.prototype._hash = function (key) {
    var t = typeof key;
    if (key === null || key === undefined || t === 'boolean' || t === 'number') return '%' + key;
    if (t === 'string') return '"' + key;
    if (t !== 'object' && t !== 'function') return '?' + key;
    if (key instanceof Date) return '@' + Number(key);
    if (key instanceof RegExp) return '!' + key;
    var h = '__hash$' + this._id;
    if (key[h] === undefined) {
      _defineProperty(key, h, this._nextId);
      this._nextId += 1;
    }
    return '#' + key[h];
  };
  OrderedHashMap.prototype.count = function () {
    return this._order.length;
  };
  OrderedHashMap.prototype.keyAt = function (i) {
    if (i < 0 || i > this._order.length) return undefined;
    return this._keys[this._order[i]];
  };
  OrderedHashMap.prototype.indexOf = function (key) {
    var hash = this._hash(key);
    return this._order.indexOf(hash);
  };
  OrderedHashMap.prototype.insert = function (index, key, value) {
    var hash = this._hash(key);
    var i = this._order.indexOf(hash);
    if (i !== -1) this._order.splice(i, 1);
    if (index >= this._order.length) this._order.push(hash);else if (index < 0) this._order.unshift(hash);else this._order.splice(index, 0, hash);
    this._keys[hash] = key;
    this._values[hash] = value;
  };
  OrderedHashMap.prototype.set = function (key, value) {
    var hash = this._hash(key);
    var i = this._order.indexOf(hash);
    if (i === -1) this._order.push(hash);
    this._keys[hash] = key;
    this._values[hash] = value;
  };
  OrderedHashMap.prototype.get = function (key) {
    var hash = this._hash(key);
    return this._values[hash];
  };
  OrderedHashMap.prototype.remove = function (key) {
    var hash = this._hash(key);
    var i = this._order.indexOf(hash);
    if (i === -1) return false;
    this._order.splice(i, 1);
    delete this._keys[hash];
    delete this._values[hash];
    return true;
  };
  OrderedHashMap.prototype.unshift = function (key, value) {
    var hash = this._hash(key);
    var i = this._order.indexOf(hash);
    if (i !== -1) this._order.splice(i, 1);
    this._order.unshift(hash);
    this._keys[hash] = key;
    this._values[hash] = value;
  };
  OrderedHashMap.prototype.shift = function () {
    if (!this._order.length) return undefined;
    var hash = this._order.shift();
    var key = this._keys[hash];
    var value = this._values[hash];
    delete this._keys[hash];
    delete this._values[hash];
    return [key, value];
  };
  OrderedHashMap.prototype.push = function (key, value) {
    var hash = this._hash(key);
    var i = this._order.indexOf(hash);
    if (i !== -1) this._order.splice(i, 1);
    this._order.push(hash);
    this._keys[hash] = key;
    this._values[hash] = value;
  };
  OrderedHashMap.prototype.pop = function () {
    if (!this._order.length) return undefined;
    var hash = this._order.pop();
    var key = this._keys[hash];
    var value = this._values[hash];
    delete this._keys[hash];
    delete this._values[hash];
    return [key, value];
  };
  OrderedHashMap.prototype.items = function () {
    var arr = [];
    for (var i = 0; i < this._order.length; i++) {
      var hash = this._order[i];
      arr.push([this._keys[hash], this._values[hash]]);
    }
    return arr;
  };
  OrderedHashMap.prototype.values = function () {
    var arr = [];
    for (var i = 0; i < this._order.length; i++) {
      var hash = this._order[i];
      arr.push(this._values[hash]);
    }
    return arr;
  };
  OrderedHashMap.prototype.keys = function () {
    var arr = [];
    for (var i = 0; i < this._order.length; i++) {
      var hash = this._order[i];
      arr.push(this._keys[hash]);
    }
    return arr;
  };
  OrderedHashMap.prototype.forEach = function (fn) {
    for (var i = 0; i < this._order.length; i++) {
      var hash = this._order[i];
      fn(this._values[hash], this._keys[hash], this);
    }
  };
  OrderedHashMap.prototype.map = function (fn) {
    var arr = [];
    for (var i = 0; i < this._order.length; i++) {
      var hash = this._order[i];
      arr.push(fn(this._values[hash], this._keys[hash], this));
    }
    return arr;
  };
  OrderedHashMap.prototype.filter = function (fn) {
    var m = new OrderedHashMap();
    for (var i = 0; i < this._order.length; i++) {
      var hash = this._order[i];
      var key = this._keys[hash];
      var value = this._values[hash];
      if (!fn(value, key, this)) continue;
      m._order.push(hash);
      m._keys[hash] = key;
      m._values[hash] = value;
    }
    return m;
  };
  OrderedHashMap.prototype.reduce = function (fn, initial) {
    var i = 0;
    var accu = initial;
    if (accu === undefined) {
      if (!this._order.length) throw new TypeError('Must provide an initial value for empty maps');
      accu = this._values[this._order[0]];
      i = 1;
    }
    for (; i < this._order.length; i++) {
      var hash = this._order[i];
      accu = fn(accu, this._values[hash], this._keys[hash], this);
    }
    return accu;
  };
  OrderedHashMap.prototype.reduceRight = function (fn, initial) {
    var i = this._order.length;
    var accu = initial;
    if (accu === undefined) {
      if (!this._order.length) throw new TypeError('Must provide an initial value for empty maps');
      accu = this._values[this._order[i - 1]];
      i -= 1;
    }
    for (var i = this._order.length; i > 0; i--) {
      var hash = this._order[i - 1];
      accu = fn(accu, this._values[hash], this._keys[hash], this);
    }
    return accu;
  };
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: mark@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */

$__System.registerDynamic("1f0", [], false, function ($__require, $__exports, $__module) {
  $__module.uri = $__module.id;
  return (function (require, exports, module) {
    /**
     * A few static methods.
     *
     * @class Utilities
     * @static
     */
    var Utilities = {};

    /**
     * Constrain input to range.
     *
     * @method clamp
     * @param {Number} value input
     * @param {Array.Number} range [min, max]
     * @static
     */
    Utilities.clamp = function clamp(value, range) {
      return Math.max(Math.min(value, range[1]), range[0]);
    };

    /**
     * Euclidean length of numerical array.
     *
     * @method length
     * @param {Array.Number} array array of numbers
     * @static
     */
    Utilities.length = function length(array) {
      var distanceSquared = 0;
      for (var i = 0; i < array.length; i++) {
        distanceSquared += array[i] * array[i];
      }
      return Math.sqrt(distanceSquared);
    };

    module.exports = Utilities;
  }).call($__exports, $__require, $__exports, $__module);
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: david@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */

$__System.registerDynamic('1f1', ['169', '16a', '194', '1f0', '1f2', '1f3', '1f4'], false, function ($__require, $__exports, $__module) {
  $__module.uri = $__module.id;
  return (function (require, exports, module) {
    var Transform = require('169');
    var Transitionable = require('16a');
    var EventHandler = require('194');
    var Utilities = require('1f0');

    var GenericSync = require('1f2');
    var MouseSync = require('1f3');
    var TouchSync = require('1f4');
    GenericSync.register({ 'mouse': MouseSync, 'touch': TouchSync });

    /**
     * Makes added render nodes responsive to drag beahvior.
     *   Emits events 'start', 'update', 'end'.
     * @class Draggable
     * @constructor
     * @param {Object} [options] options configuration object.
     * @param {Number} [options.snapX] grid width for snapping during drag
     * @param {Number} [options.snapY] grid height for snapping during drag
     * @param {Array.Number} [options.xRange] maxmimum [negative, positive] x displacement from start of drag
     * @param {Array.Number} [options.yRange] maxmimum [negative, positive] y displacement from start of drag
     * @param {Boolean} [options.outsideTouches] When set to false, touch events outside xRange and yRange are ignored. Defaults to true
     * @param {Number} [options.scale] one pixel of input motion translates to this many pixels of output drag motion
     * @param {Number} [options.projection] User should set to Draggable._direction.x or
     *    Draggable._direction.y to constrain to one axis.
     *
     */
    function Draggable(options) {
      this.options = Object.create(Draggable.DEFAULT_OPTIONS);
      this.sync = new GenericSync('ontouchstart' in document.documentElement ? ['touch'] : ['mouse', 'touch'], { scale: this.options.scale });
      if (options) this.setOptions(options);

      this._positionState = new Transitionable([0, 0]);
      this._differential = [0, 0];
      this._lastTouchOffset = [0, 0];

      this._active = true;
      this.eventOutput = new EventHandler();
      EventHandler.setInputHandler(this, this.sync);
      EventHandler.setOutputHandler(this, this.eventOutput);

      _bindEvents.call(this);
    }

    //binary representation of directions for bitwise operations
    var _direction = {
      x: 0x01, //001
      y: 0x02 //010
    };

    Draggable.DIRECTION_X = _direction.x;
    Draggable.DIRECTION_Y = _direction.y;

    var _clamp = Utilities.clamp;

    Draggable.DEFAULT_OPTIONS = {
      projection: _direction.x | _direction.y,
      scale: 1,
      xRange: null,
      yRange: null,
      snapX: 0,
      snapY: 0,
      outsideTouches: true,
      transition: { duration: 0 }
    };

    function _mapDifferential(differential) {
      var opts = this.options;
      var projection = opts.projection;
      var snapX = opts.snapX;
      var snapY = opts.snapY;
      var rangeX = opts.xRange;
      var rangeY = opts.yRange;
      var outsideTouches = opts.outsideTouches;
      var lastOffset = this._lastTouchOffset;

      //axes
      var tx = projection & _direction.x ? differential[0] : 0;
      var ty = projection & _direction.y ? differential[1] : 0;

      //snapping
      if (snapX > 0) tx -= tx % snapX;
      if (snapY > 0) ty -= ty % snapY;

      //ignore touches that happen outside of the xRange and yRange areas
      var newPositionX = lastOffset[0] + tx;
      if (rangeX && !outsideTouches && (newPositionX > rangeX[1] || newPositionX < rangeX[0])) {
        var overX = newPositionX - rangeX[1];
        var underX = newPositionX - rangeX[0];
        tx = _clamp(tx, [tx - underX, tx - overX]);
      }
      var newPositionY = lastOffset[0] + ty;
      if (rangeY && !outsideTouches && (newPositionY > rangeY[1] || newPositionY < rangeY[0])) {
        var overY = newPositionY - rangeY[1];
        var underY = newPositionY - rangeY[0];
        tx = _clamp(ty, [ty - underY, ty - overY]);
      }

      lastOffset[0] += tx;
      lastOffset[1] += ty;

      return [tx, ty];
    }

    function _handleStart() {
      if (!this._active) return;
      if (this._positionState.isActive()) this._positionState.halt();
      this._lastTouchOffset = [this.getPosition()[0], this.getPosition()[1]];
      this.eventOutput.emit('start', { position: this.getPosition() });
    }

    function _handleMove(event) {
      if (!this._active) return;

      var options = this.options;
      this._differential = event.position;
      var newDifferential = _mapDifferential.call(this, this._differential);

      //buffer the differential if snapping is set
      this._differential[0] -= newDifferential[0];
      this._differential[1] -= newDifferential[1];

      var pos = this.getPosition();

      //modify position, retain reference
      pos[0] += newDifferential[0];
      pos[1] += newDifferential[1];

      //handle bounding box
      if (options.xRange) {
        var xRange = [options.xRange[0] + 0.5 * options.snapX, options.xRange[1] - 0.5 * options.snapX];
        pos[0] = _clamp(pos[0], xRange);
      }

      if (options.yRange) {
        var yRange = [options.yRange[0] + 0.5 * options.snapY, options.yRange[1] - 0.5 * options.snapY];
        pos[1] = _clamp(pos[1], yRange);
      }

      this.eventOutput.emit('update', { position: pos });
    }

    function _handleEnd() {
      if (!this._active) return;
      this.eventOutput.emit('end', { position: this.getPosition() });
    }

    function _bindEvents() {
      this.sync.on('start', _handleStart.bind(this));
      this.sync.on('update', _handleMove.bind(this));
      this.sync.on('end', _handleEnd.bind(this));
    }

    /**
     * Set internal options, overriding any default options
     *
     * @method setOptions
     *
     * @param {Object} [options] overrides of default options.  See constructor.
     */
    Draggable.prototype.setOptions = function setOptions(options) {
      var currentOptions = this.options;
      if (options.projection !== undefined) {
        var proj = options.projection;
        this.options.projection = 0;
        ['x', 'y'].forEach(function (val) {
          if (proj.indexOf(val) !== -1) currentOptions.projection |= _direction[val];
        });
      }
      if (options.scale !== undefined) {
        currentOptions.scale = options.scale;
        this.sync.setOptions({
          scale: options.scale
        });
      }
      if (options.xRange !== undefined) currentOptions.xRange = options.xRange;
      if (options.yRange !== undefined) currentOptions.yRange = options.yRange;
      if (options.snapX !== undefined) currentOptions.snapX = options.snapX;
      if (options.snapY !== undefined) currentOptions.snapY = options.snapY;
    };

    /**
     * Get current delta in position from where this draggable started.
     *
     * @method getPosition
     *
     * @return {array<number>} [x, y] position delta from start.
     */
    Draggable.prototype.getPosition = function getPosition() {
      return this._positionState.get();
    };

    /**
     * Transition the element to the desired relative position via provided transition.
     *  For example, calling this with [0,0] will not change the position.
     *  Callback will be executed on completion.
     *
     * @method setRelativePosition
     *
     * @param {array<number>} position end state to which we interpolate
     * @param {transition} transition transition object specifying how object moves to new position
     * @param {function} callback zero-argument function to call on observed completion
     */
    Draggable.prototype.setRelativePosition = function setRelativePosition(position, transition, callback) {
      var currPos = this.getPosition();
      var relativePosition = [currPos[0] + position[0], currPos[1] + position[1]];
      this.setPosition(relativePosition, transition, callback);
    };

    /**
     * Transition the element to the desired absolute position via provided transition.
     *  Callback will be executed on completion.
     *
     * @method setPosition
     *
     * @param {array<number>} position end state to which we interpolate
     * @param {transition} transition transition object specifying how object moves to new position
     * @param {function} callback zero-argument function to call on observed completion
     */
    Draggable.prototype.setPosition = function setPosition(position, transition, callback) {
      if (this._positionState.isActive()) this._positionState.halt();
      this._positionState.set(position, transition, callback);
    };

    /**
     * Set this draggable to respond to user input.
     *
     * @method activate
     *
     */
    Draggable.prototype.activate = function activate() {
      this._active = true;
    };

    /**
     * Set this draggable to ignore user input.
     *
     * @method deactivate
     *
     */
    Draggable.prototype.deactivate = function deactivate() {
      this._active = false;
    };

    /**
     * Switch the input response stage between active and inactive.
     *
     * @method toggle
     *
     */
    Draggable.prototype.toggle = function toggle() {
      this._active = !this._active;
    };

    /**
     * Return render spec for this Modifier, applying to the provided
     *    target component.  This is similar to render() for Surfaces.
     *
     * @private
     * @method modify
     *
     * @param {Object} target (already rendered) render spec to
     *    which to apply the transform.
     * @return {Object} render spec for this Modifier, including the
     *    provided target
     */
    Draggable.prototype.modify = function modify(target) {
      var pos = this.getPosition();
      return {
        transform: Transform.translate(pos[0], pos[1]),
        target: target
      };
    };

    module.exports = Draggable;
  }).call($__exports, $__require, $__exports, $__module);
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: mark@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
$__System.registerDynamic('1f2', ['194'], false, function ($__require, $__exports, $__module) {
    $__module.uri = $__module.id;
    return (function (require, exports, module) {

        var EventHandler = require('194');

        /**
         * Combines multiple types of sync classes (e.g. mouse, touch,
         *  scrolling) into one standardized interface for inclusion in widgets.
         *
         *  Sync classes are first registered with a key, and then can be accessed
         *  globally by key.
         *
         *  Emits 'start', 'update' and 'end' events as a union of the sync class
         *  providers.
         *
         * @class GenericSync
         * @constructor
         * @param syncs {Object|Array} object with fields {sync key : sync options}
         *    or an array of registered sync keys
         * @param [options] {Object|Array} options object to set on all syncs
         */
        function GenericSync(syncs, options) {
            this._eventInput = new EventHandler();
            this._eventOutput = new EventHandler();

            EventHandler.setInputHandler(this, this._eventInput);
            EventHandler.setOutputHandler(this, this._eventOutput);

            this._syncs = {};
            if (syncs) this.addSync(syncs);
            if (options) this.setOptions(options);
        }

        GenericSync.DIRECTION_X = 0;
        GenericSync.DIRECTION_Y = 1;
        GenericSync.DIRECTION_Z = 2;

        // Global registry of sync classes. Append only.
        var registry = {};

        /**
         * Register a global sync class with an identifying key
         *
         * @static
         * @method register
         *
         * @param syncObject {Object} an object of {sync key : sync options} fields
         */
        GenericSync.register = function register(syncObject) {
            for (var key in syncObject) {
                if (registry[key]) {
                    // skip redundant registration
                    if (registry[key] !== syncObject[key]) // only if same registered class
                        throw new Error('Conflicting sync classes for key: ' + key);
                } else registry[key] = syncObject[key];
            }
        };

        /**
         * Helper to set options on all sync instances
         *
         * @method setOptions
         * @param options {Object} options object
         */
        GenericSync.prototype.setOptions = function (options) {
            for (var key in this._syncs) {
                this._syncs[key].setOptions(options);
            }
        };

        /**
         * Pipe events to a sync class
         *
         * @method pipeSync
         * @param key {String} identifier for sync class
         */
        GenericSync.prototype.pipeSync = function pipeToSync(key) {
            var sync = this._syncs[key];
            this._eventInput.pipe(sync);
            sync.pipe(this._eventOutput);
        };

        /**
         * Unpipe events from a sync class
         *
         * @method unpipeSync
         * @param key {String} identifier for sync class
         */
        GenericSync.prototype.unpipeSync = function unpipeFromSync(key) {
            var sync = this._syncs[key];
            this._eventInput.unpipe(sync);
            sync.unpipe(this._eventOutput);
        };

        function _addSingleSync(key, options) {
            if (!registry[key]) return;
            this._syncs[key] = new registry[key](options);
            this.pipeSync(key);
        }

        /**
         * Add a sync class to from the registered classes
         *
         * @method addSync
         * @param syncs {Object|Array.String} an array of registered sync keys
         *    or an object with fields {sync key : sync options}
         */
        GenericSync.prototype.addSync = function addSync(syncs) {
            if (syncs instanceof Array) for (var i = 0; i < syncs.length; i++) _addSingleSync.call(this, syncs[i]);else if (syncs instanceof Object) for (var key in syncs) _addSingleSync.call(this, key, syncs[key]);
        };

        module.exports = GenericSync;
    }).call($__exports, $__require, $__exports, $__module);
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: mark@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
$__System.registerDynamic('1f3', ['194', '195'], false, function ($__require, $__exports, $__module) {
    $__module.uri = $__module.id;
    return (function (require, exports, module) {
        var EventHandler = require('194');
        var OptionsManager = require('195');

        /**
         * Handles piped in mouse drag events. Outputs an object with the position delta from last frame, position from start,
         * current velocity averaged out over the velocitySampleLength (set via options), clientX, clientY, offsetX, and offsetY.
         *
         * Emits 'start', 'update' and 'end' events. Designed to be used either as a standalone MouseSync, or as part of a
         * GenericSync.
         *
         * @class MouseSync
         * @constructor
         *
         * @example
         *   var Surface = require('../core/Surface');
         *   var MouseSync = require('../inputs/MouseSync');
         *
         *   var surface = new Surface({ size: [100, 100] });
         *   var mouseSync = new MouseSync();
         *   surface.pipe(mouseSync);
         *
         *   mouseSync.on('start', function (e) { // react to start });
         *   mouseSync.on('update', function (e) { // react to update });
         *   mouseSync.on('end', function (e) { // react to end });
         *
         * @param [options] {Object}                An object of the following configurable options.
         * @param [options.clickThreshold] {Number} Absolute distance from click origin that will still trigger a click.
         * @param [options.direction] {Number}      Read from a particular axis. Valid options are: undefined, 0 or 1. 0 corresponds to x, and 1 to y. Default is undefined, which allows both x and y.
         * @param [options.rails] {Boolean}         Read from axis with the greatest differential.
         * @param [options.velocitySampleLength] {Number}  Number of previous frames to check velocity against.
         * @param [options.propogate] {Boolean}     Add a listener to document on mouseleave. This allows drag events to continue across the entire page.
         */
        function MouseSync(options) {
            this.options = Object.create(MouseSync.DEFAULT_OPTIONS);
            this._optionsManager = new OptionsManager(this.options);

            if (options) this.setOptions(options);

            this._eventInput = new EventHandler();
            this._eventOutput = new EventHandler();

            EventHandler.setInputHandler(this, this._eventInput);
            EventHandler.setOutputHandler(this, this._eventOutput);

            this._eventInput.on('mousedown', _handleStart.bind(this));
            this._eventInput.on('mousemove', _handleMove.bind(this));
            this._eventInput.on('mouseup', _handleEnd.bind(this));

            if (this.options.propogate) this._eventInput.on('mouseleave', _handleLeave.bind(this));else this._eventInput.on('mouseleave', _handleEnd.bind(this));

            if (this.options.clickThreshold) {
                window.addEventListener('click', function (event) {
                    if (Math.sqrt(Math.pow(this._displacement[0], 2) + Math.pow(this._displacement[1], 2)) > this.options.clickThreshold) {
                        event.stopPropagation();
                    }
                }.bind(this), true);
            }

            this._payload = {
                delta: null,
                position: null,
                velocity: null,
                clientX: 0,
                clientY: 0,
                offsetX: 0,
                offsetY: 0
            };

            this._positionHistory = [];
            this._position = null; // to be deprecated
            this._prevCoord = undefined;
            this._prevTime = undefined;
            this._down = false;
            this._moved = false;
            this._displacement = [0, 0];
            this._documentActive = false;
        }

        MouseSync.DEFAULT_OPTIONS = {
            clickThreshold: undefined,
            direction: undefined,
            rails: false,
            scale: 1,
            propogate: true, // events piped to document on mouseleave
            velocitySampleLength: 10,
            preventDefault: true
        };

        MouseSync.DIRECTION_X = 0;
        MouseSync.DIRECTION_Y = 1;

        var MINIMUM_TICK_TIME = 8;

        /**
         *  Triggered by mousedown.
         *
         *  @method _handleStart
         *  @private
         */
        function _handleStart(event) {
            var delta;
            var velocity;
            if (this.options.preventDefault) event.preventDefault(); // prevent drag

            var x = event.clientX;
            var y = event.clientY;

            this._prevCoord = [x, y];
            this._prevTime = Date.now();
            this._down = true;
            this._move = false;

            if (this.options.direction !== undefined) {
                this._position = 0;
                delta = 0;
                velocity = 0;
            } else {
                this._position = [0, 0];
                delta = [0, 0];
                velocity = [0, 0];
            }

            if (this.options.clickThreshold) {
                this._displacement = [0, 0];
            }

            var payload = this._payload;
            payload.delta = delta;
            payload.position = this._position;
            payload.velocity = velocity;
            payload.clientX = x;
            payload.clientY = y;
            payload.offsetX = event.offsetX;
            payload.offsetY = event.offsetY;

            this._positionHistory.push({
                position: payload.position.slice ? payload.position.slice(0) : payload.position,
                time: this._prevTime
            });

            this._eventOutput.emit('start', payload);
            this._documentActive = false;
        }

        /**
         *  Triggered by mousemove.
         *
         *  @method _handleMove
         *  @private
         */
        function _handleMove(event) {
            if (!this._prevCoord) return;

            var prevCoord = this._prevCoord;
            var prevTime = this._prevTime;

            var x = event.clientX;
            var y = event.clientY;

            var currTime = Date.now();

            var diffX = x - prevCoord[0];
            var diffY = y - prevCoord[1];

            if (this.options.rails) {
                if (Math.abs(diffX) > Math.abs(diffY)) diffY = 0;else diffX = 0;
            }

            var diffTime = Math.max(currTime - this._positionHistory[0].time, MINIMUM_TICK_TIME); // minimum tick time

            var scale = this.options.scale;
            var nextVel;
            var nextDelta;

            if (this.options.direction === MouseSync.DIRECTION_X) {
                nextDelta = scale * diffX;
                this._position += nextDelta;
                nextVel = scale * (this._position - this._positionHistory[0].position) / diffTime;
            } else if (this.options.direction === MouseSync.DIRECTION_Y) {
                nextDelta = scale * diffY;
                this._position += nextDelta;
                nextVel = scale * (this._position - this._positionHistory[0].position) / diffTime;
            } else {
                nextDelta = [scale * diffX, scale * diffY];
                nextVel = [scale * (this._position[0] - this._positionHistory[0].position[0]) / diffTime, scale * (this._position[1] - this._positionHistory[0].position[1]) / diffTime];
                this._position[0] += nextDelta[0];
                this._position[1] += nextDelta[1];
            }

            if (this.options.clickThreshold !== false) {
                this._displacement[0] += diffX;
                this._displacement[1] += diffY;
            }

            var payload = this._payload;
            payload.delta = nextDelta;
            payload.position = this._position;
            payload.velocity = nextVel;
            payload.clientX = x;
            payload.clientY = y;
            payload.offsetX = event.offsetX;
            payload.offsetY = event.offsetY;

            if (this._positionHistory.length === this.options.velocitySampleLength) {
                this._positionHistory.shift();
            }

            this._positionHistory.push({
                position: payload.position.slice ? payload.position.slice(0) : payload.position,
                time: currTime
            });

            this._eventOutput.emit('update', payload);

            this._prevCoord = [x, y];
            this._prevTime = currTime;
            this._move = true;
        }

        /**
         *  Triggered by mouseup on the element or document body if propagation is enabled, or
         *  mouseleave if propagation is off.
         *
         *  @method _handleEnd
         *  @private
         */
        function _handleEnd(event) {
            if (!this._down) return;

            this._eventOutput.emit('end', this._payload);
            this._prevCoord = undefined;
            this._prevTime = undefined;
            this._down = false;
            this._move = false;
            this._positionHistory = [];
        }

        /**
         *  Switches the mousemove listener to the document body, if propagation is enabled.
         *  @method _handleLeave
         *  @private
         */
        function _handleLeave(event) {
            if (!this._down || !this._move) return;

            if (!this._documentActive) {
                var boundMove = _handleMove.bind(this);
                var boundEnd = function (event) {
                    _handleEnd.call(this, event);
                    document.removeEventListener('mousemove', boundMove);
                    document.removeEventListener('mouseup', boundEnd);
                }.bind(this, event);
                document.addEventListener('mousemove', boundMove);
                document.addEventListener('mouseup', boundEnd);
                this._documentActive = true;
            }
        }

        /**
         * Return entire options dictionary, including defaults.
         *
         * @method getOptions
         * @return {Object} configuration options
         */
        MouseSync.prototype.getOptions = function getOptions() {
            return this.options;
        };

        /**
         * Set internal options, overriding any default options
         *
         * @method setOptions
         *
         * @param [options] {Object}             default options overrides
         * @param [options.direction] {Number}   read from a particular axis
         * @param [options.rails] {Boolean}      read from axis with greatest differential
         * @param [options.propogate] {Boolean}  add listened to document on mouseleave
         */
        MouseSync.prototype.setOptions = function setOptions(options) {
            return this._optionsManager.setOptions(options);
        };

        module.exports = MouseSync;
    }).call($__exports, $__require, $__exports, $__module);
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: mark@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
$__System.registerDynamic('1f5', ['194'], false, function ($__require, $__exports, $__module) {
    $__module.uri = $__module.id;
    return (function (require, exports, module) {
        var EventHandler = require('194');

        var _now = Date.now;

        function _timestampTouch(touch, event, history) {
            return {
                x: touch.clientX,
                y: touch.clientY,
                identifier: touch.identifier,
                origin: event.origin,
                timestamp: _now(),
                count: event.touches.length,
                history: history
            };
        }

        function _handleStart(event) {
            if (event.touches.length > this.touchLimit) return;
            this.isTouched = true;

            for (var i = 0; i < event.changedTouches.length; i++) {
                var touch = event.changedTouches[i];
                var data = _timestampTouch(touch, event, null);
                this.eventOutput.emit('trackstart', data);
                if (!this.selective && !this.touchHistory[touch.identifier]) this.track(data);
            }
        }

        function _handleMove(event) {
            if (event.touches.length > this.touchLimit) return;

            for (var i = 0; i < event.changedTouches.length; i++) {
                var touch = event.changedTouches[i];
                var history = this.touchHistory[touch.identifier];
                if (history) {
                    var data = _timestampTouch(touch, event, history);
                    this.touchHistory[touch.identifier].push(data);
                    this.eventOutput.emit('trackmove', data);
                }
            }
        }

        function _handleEnd(event) {
            if (!this.isTouched) return;

            for (var i = 0; i < event.changedTouches.length; i++) {
                var touch = event.changedTouches[i];
                var history = this.touchHistory[touch.identifier];
                if (history) {
                    var data = _timestampTouch(touch, event, history);
                    this.eventOutput.emit('trackend', data);
                    delete this.touchHistory[touch.identifier];
                }
            }

            this.isTouched = false;
        }

        function _handleUnpipe() {
            for (var i in this.touchHistory) {
                var history = this.touchHistory[i];
                this.eventOutput.emit('trackend', {
                    touch: history[history.length - 1].touch,
                    timestamp: Date.now(),
                    count: 0,
                    history: history
                });
                delete this.touchHistory[i];
            }
        }

        /**
         * Helper to TouchSync – tracks piped in touch events, organizes touch
         *   events by ID, and emits track events back to TouchSync.
         *   Emits 'trackstart', 'trackmove', and 'trackend' events upstream.
         *
         * @class TouchTracker
         * @constructor
         * @param {Object} options default options overrides
         * @param [options.selective] {Boolean} selective if false, saves state for each touch
         * @param [options.touchLimit] {Number} touchLimit upper bound for emitting events based on number of touches
         */
        function TouchTracker(options) {
            this.selective = options.selective;
            this.touchLimit = options.touchLimit || 1;

            this.touchHistory = {};

            this.eventInput = new EventHandler();
            this.eventOutput = new EventHandler();

            EventHandler.setInputHandler(this, this.eventInput);
            EventHandler.setOutputHandler(this, this.eventOutput);

            this.eventInput.on('touchstart', _handleStart.bind(this));
            this.eventInput.on('touchmove', _handleMove.bind(this));
            this.eventInput.on('touchend', _handleEnd.bind(this));
            this.eventInput.on('touchcancel', _handleEnd.bind(this));
            this.eventInput.on('unpipe', _handleUnpipe.bind(this));

            this.isTouched = false;
        }

        /**
         * Record touch data, if selective is false.
         * @private
         * @method track
         * @param {Object} data touch data
         */
        TouchTracker.prototype.track = function track(data) {
            this.touchHistory[data.identifier] = [data];
        };

        module.exports = TouchTracker;
    }).call($__exports, $__require, $__exports, $__module);
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: mark@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
$__System.registerDynamic('1f4', ['1f5', '194', '195'], false, function ($__require, $__exports, $__module) {
    $__module.uri = $__module.id;
    return (function (require, exports, module) {
        var TouchTracker = require('1f5');
        var EventHandler = require('194');
        var OptionsManager = require('195');

        /**
         * Handles piped in touch events. Emits 'start', 'update', and 'events'
         *   events with delta, position, velocity, acceleration, clientX, clientY, count, and touch id.
         *   Useful for dealing with inputs on touch devices. Designed to be used either as standalone, or
         *   included in a GenericSync.
         *
         * @class TouchSync
         * @constructor
         *
         * @example
         *   var Surface = require('../core/Surface');
         *   var TouchSync = require('../inputs/TouchSync');
         *
         *   var surface = new Surface({ size: [100, 100] });
         *   var touchSync = new TouchSync();
         *   surface.pipe(touchSync);
         *
         *   touchSync.on('start', function (e) { // react to start });
         *   touchSync.on('update', function (e) { // react to update });
         *   touchSync.on('end', function (e) { // react to end });*
         *
         * @param [options] {Object}             default options overrides
         * @param [options.direction] {Number}   read from a particular axis
         * @param [options.rails] {Boolean}      read from axis with greatest differential
         * @param [options.velocitySampleLength] {Number}  Number of previous frames to check velocity against.
         * @param [options.scale] {Number}       constant factor to scale velocity output
         * @param [options.touchLimit] {Number}  touchLimit upper bound for emitting events based on number of touches
         */
        function TouchSync(options) {
            this.options = Object.create(TouchSync.DEFAULT_OPTIONS);
            this._optionsManager = new OptionsManager(this.options);
            if (options) this.setOptions(options);

            this._eventOutput = new EventHandler();
            this._touchTracker = new TouchTracker({
                touchLimit: this.options.touchLimit
            });

            EventHandler.setOutputHandler(this, this._eventOutput);
            EventHandler.setInputHandler(this, this._touchTracker);

            this._touchTracker.on('trackstart', _handleStart.bind(this));
            this._touchTracker.on('trackmove', _handleMove.bind(this));
            this._touchTracker.on('trackend', _handleEnd.bind(this));

            this._payload = {
                delta: null,
                position: null,
                velocity: null,
                clientX: undefined,
                clientY: undefined,
                count: 0,
                touch: undefined
            };

            this._position = null; // to be deprecated
        }

        TouchSync.DEFAULT_OPTIONS = {
            direction: undefined,
            rails: false,
            touchLimit: 1,
            velocitySampleLength: 10,
            scale: 1
        };

        TouchSync.DIRECTION_X = 0;
        TouchSync.DIRECTION_Y = 1;

        var MINIMUM_TICK_TIME = 8;

        /**
         *  Triggered by trackstart.
         *  @method _handleStart
         *  @private
         */
        function _handleStart(data) {
            var velocity;
            var delta;
            if (this.options.direction !== undefined) {
                this._position = 0;
                velocity = 0;
                delta = 0;
            } else {
                this._position = [0, 0];
                velocity = [0, 0];
                delta = [0, 0];
            }

            var payload = this._payload;
            payload.delta = delta;
            payload.position = this._position;
            payload.velocity = velocity;
            payload.clientX = data.x;
            payload.clientY = data.y;
            payload.count = data.count;
            payload.touch = data.identifier;

            this._eventOutput.emit('start', payload);
        }

        /**
         *  Triggered by trackmove.
         *  @method _handleMove
         *  @private
         */
        function _handleMove(data) {
            var history = data.history;

            var currHistory = history[history.length - 1];
            var prevHistory = history[history.length - 2];

            var distantHistory = history[history.length - this.options.velocitySampleLength] ? history[history.length - this.options.velocitySampleLength] : history[history.length - 2];

            var distantTime = distantHistory.timestamp;
            var currTime = currHistory.timestamp;

            var diffX = currHistory.x - prevHistory.x;
            var diffY = currHistory.y - prevHistory.y;

            var velDiffX = currHistory.x - distantHistory.x;
            var velDiffY = currHistory.y - distantHistory.y;

            if (this.options.rails) {
                if (Math.abs(diffX) > Math.abs(diffY)) diffY = 0;else diffX = 0;

                if (Math.abs(velDiffX) > Math.abs(velDiffY)) velDiffY = 0;else velDiffX = 0;
            }

            var diffTime = Math.max(currTime - distantTime, MINIMUM_TICK_TIME);

            var velX = velDiffX / diffTime;
            var velY = velDiffY / diffTime;

            var scale = this.options.scale;
            var nextVel;
            var nextDelta;

            if (this.options.direction === TouchSync.DIRECTION_X) {
                nextDelta = scale * diffX;
                nextVel = scale * velX;
                this._position += nextDelta;
            } else if (this.options.direction === TouchSync.DIRECTION_Y) {
                nextDelta = scale * diffY;
                nextVel = scale * velY;
                this._position += nextDelta;
            } else {
                nextDelta = [scale * diffX, scale * diffY];
                nextVel = [scale * velX, scale * velY];
                this._position[0] += nextDelta[0];
                this._position[1] += nextDelta[1];
            }

            var payload = this._payload;
            payload.delta = nextDelta;
            payload.velocity = nextVel;
            payload.position = this._position;
            payload.clientX = data.x;
            payload.clientY = data.y;
            payload.count = data.count;
            payload.touch = data.identifier;

            this._eventOutput.emit('update', payload);
        }

        /**
         *  Triggered by trackend.
         *  @method _handleEnd
         *  @private
         */
        function _handleEnd(data) {
            this._payload.count = data.count;
            this._eventOutput.emit('end', this._payload);
        }

        /**
         * Set internal options, overriding any default options
         *
         * @method setOptions
         *
         * @param [options] {Object}             default options overrides
         * @param [options.direction] {Number}   read from a particular axis
         * @param [options.rails] {Boolean}      read from axis with greatest differential
         * @param [options.scale] {Number}       constant factor to scale velocity output
         */
        TouchSync.prototype.setOptions = function setOptions(options) {
            return this._optionsManager.setOptions(options);
        };

        /**
         * Return entire options dictionary, including defaults.
         *
         * @method getOptions
         * @return {Object} configuration options
         */
        TouchSync.prototype.getOptions = function getOptions() {
            return this.options;
        };

        module.exports = TouchSync;
    }).call($__exports, $__require, $__exports, $__module);
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: david@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */

$__System.registerDynamic('16b', ['16a', '169', '196'], false, function ($__require, $__exports, $__module) {
    $__module.uri = $__module.id;
    return (function (require, exports, module) {
        var Transitionable = require('16a');
        var Transform = require('169');
        var Utility = require('196');

        /**
         * A class for transitioning the state of a Transform by transitioning
         * its translate, scale, skew and rotate components independently.
         *
         * @class TransitionableTransform
         * @constructor
         *
         * @param [transform=Transform.identity] {Transform} The initial transform state
         */
        function TransitionableTransform(transform) {
            this._final = Transform.identity.slice();

            this._finalTranslate = [0, 0, 0];
            this._finalRotate = [0, 0, 0];
            this._finalSkew = [0, 0, 0];
            this._finalScale = [1, 1, 1];

            this.translate = new Transitionable(this._finalTranslate);
            this.rotate = new Transitionable(this._finalRotate);
            this.skew = new Transitionable(this._finalSkew);
            this.scale = new Transitionable(this._finalScale);

            if (transform) this.set(transform);
        }

        function _build() {
            return Transform.build({
                translate: this.translate.get(),
                rotate: this.rotate.get(),
                skew: this.skew.get(),
                scale: this.scale.get()
            });
        }

        function _buildFinal() {
            return Transform.build({
                translate: this._finalTranslate,
                rotate: this._finalRotate,
                skew: this._finalSkew,
                scale: this._finalScale
            });
        }

        /**
         * An optimized way of setting only the translation component of a Transform
         *
         * @method setTranslate
         * @chainable
         *
         * @param translate {Array}     New translation state
         * @param [transition] {Object} Transition definition
         * @param [callback] {Function} Callback
         * @return {TransitionableTransform}
         */
        TransitionableTransform.prototype.setTranslate = function setTranslate(translate, transition, callback) {
            this._finalTranslate = translate;
            this._final = _buildFinal.call(this);
            this.translate.set(translate, transition, callback);
            return this;
        };

        /**
         * An optimized way of setting only the scale component of a Transform
         *
         * @method setScale
         * @chainable
         *
         * @param scale {Array}         New scale state
         * @param [transition] {Object} Transition definition
         * @param [callback] {Function} Callback
         * @return {TransitionableTransform}
         */
        TransitionableTransform.prototype.setScale = function setScale(scale, transition, callback) {
            this._finalScale = scale;
            this._final = _buildFinal.call(this);
            this.scale.set(scale, transition, callback);
            return this;
        };

        /**
         * An optimized way of setting only the rotational component of a Transform
         *
         * @method setRotate
         * @chainable
         *
         * @param eulerAngles {Array}   Euler angles for new rotation state
         * @param [transition] {Object} Transition definition
         * @param [callback] {Function} Callback
         * @return {TransitionableTransform}
         */
        TransitionableTransform.prototype.setRotate = function setRotate(eulerAngles, transition, callback) {
            this._finalRotate = eulerAngles;
            this._final = _buildFinal.call(this);
            this.rotate.set(eulerAngles, transition, callback);
            return this;
        };

        /**
         * An optimized way of setting only the skew component of a Transform
         *
         * @method setSkew
         * @chainable
         *
         * @param skewAngles {Array}    New skew state
         * @param [transition] {Object} Transition definition
         * @param [callback] {Function} Callback
         * @return {TransitionableTransform}
         */
        TransitionableTransform.prototype.setSkew = function setSkew(skewAngles, transition, callback) {
            this._finalSkew = skewAngles;
            this._final = _buildFinal.call(this);
            this.skew.set(skewAngles, transition, callback);
            return this;
        };

        /**
         * Setter for a TransitionableTransform with optional parameters to transition
         * between Transforms
         *
         * @method set
         * @chainable
         *
         * @param transform {Array}     New transform state
         * @param [transition] {Object} Transition definition
         * @param [callback] {Function} Callback
         * @return {TransitionableTransform}
         */
        TransitionableTransform.prototype.set = function set(transform, transition, callback) {
            var components = Transform.interpret(transform);

            this._finalTranslate = components.translate;
            this._finalRotate = components.rotate;
            this._finalSkew = components.skew;
            this._finalScale = components.scale;
            this._final = transform;

            var _callback = callback ? Utility.after(4, callback) : null;
            this.translate.set(components.translate, transition, _callback);
            this.rotate.set(components.rotate, transition, _callback);
            this.skew.set(components.skew, transition, _callback);
            this.scale.set(components.scale, transition, _callback);
            return this;
        };

        /**
         * Sets the default transition to use for transitioning betwen Transform states
         *
         * @method setDefaultTransition
         *
         * @param transition {Object} Transition definition
         */
        TransitionableTransform.prototype.setDefaultTransition = function setDefaultTransition(transition) {
            this.translate.setDefault(transition);
            this.rotate.setDefault(transition);
            this.skew.setDefault(transition);
            this.scale.setDefault(transition);
        };

        /**
         * Getter. Returns the current state of the Transform
         *
         * @method get
         *
         * @return {Transform}
         */
        TransitionableTransform.prototype.get = function get() {
            if (this.isActive()) {
                return _build.call(this);
            } else return this._final;
        };

        /**
         * Get the destination state of the Transform
         *
         * @method getFinal
         *
         * @return Transform {Transform}
         */
        TransitionableTransform.prototype.getFinal = function getFinal() {
            return this._final;
        };

        /**
         * Determine if the TransitionalTransform is currently transitioning
         *
         * @method isActive
         *
         * @return {Boolean}
         */
        TransitionableTransform.prototype.isActive = function isActive() {
            return this.translate.isActive() || this.rotate.isActive() || this.scale.isActive() || this.skew.isActive();
        };

        /**
         * Halts the transition
         *
         * @method halt
         */
        TransitionableTransform.prototype.halt = function halt() {
            this.translate.halt();
            this.rotate.halt();
            this.skew.halt();
            this.scale.halt();

            this._final = this.get();
            this._finalTranslate = this.translate.get();
            this._finalRotate = this.rotate.get();
            this._finalSkew = this.skew.get();
            this._finalScale = this.scale.get();

            return this;
        };

        module.exports = TransitionableTransform;
    }).call($__exports, $__require, $__exports, $__module);
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: mark@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */

$__System.registerDynamic('168', ['169', '16a', '16b'], false, function ($__require, $__exports, $__module) {
    $__module.uri = $__module.id;
    return (function (require, exports, module) {
        var Transform = require('169');

        /* TODO: remove these dependencies when deprecation complete */
        var Transitionable = require('16a');
        var TransitionableTransform = require('16b');

        /**
         *
         *  A collection of visual changes to be
         *    applied to another renderable component. This collection includes a
         *    transform matrix, an opacity constant, a size, an origin specifier.
         *    Modifier objects can be added to any RenderNode or object
         *    capable of displaying renderables.  The Modifier's children and descendants
         *    are transformed by the amounts specified in the Modifier's properties.
         *
         * @class Modifier
         * @constructor
         * @param {Object} [options] overrides of default options
         * @param {Transform} [options.transform] affine transformation matrix
         * @param {Number} [options.opacity]
         * @param {Array.Number} [options.origin] origin adjustment
         * @param {Array.Number} [options.size] size to apply to descendants
         */
        function Modifier(options) {
            this._transformGetter = null;
            this._opacityGetter = null;
            this._originGetter = null;
            this._alignGetter = null;
            this._sizeGetter = null;
            this._proportionGetter = null;

            /* TODO: remove this when deprecation complete */
            this._legacyStates = {};

            this._output = {
                transform: Transform.identity,
                opacity: 1,
                origin: null,
                align: null,
                size: null,
                proportions: null,
                target: null
            };

            if (options) {
                if (options.transform) this.transformFrom(options.transform);
                if (options.opacity !== undefined) this.opacityFrom(options.opacity);
                if (options.origin) this.originFrom(options.origin);
                if (options.align) this.alignFrom(options.align);
                if (options.size) this.sizeFrom(options.size);
                if (options.proportions) this.proportionsFrom(options.proportions);
            }
        }

        /**
         * Function, object, or static transform matrix which provides the transform.
         *   This is evaluated on every tick of the engine.
         *
         * @method transformFrom
         *
         * @param {Object} transform transform provider object
         * @return {Modifier} this
         */
        Modifier.prototype.transformFrom = function transformFrom(transform) {
            if (transform instanceof Function) this._transformGetter = transform;else if (transform instanceof Object && transform.get) this._transformGetter = transform.get.bind(transform);else {
                this._transformGetter = null;
                this._output.transform = transform;
            }
            return this;
        };

        /**
         * Set function, object, or number to provide opacity, in range [0,1].
         *
         * @method opacityFrom
         *
         * @param {Object} opacity provider object
         * @return {Modifier} this
         */
        Modifier.prototype.opacityFrom = function opacityFrom(opacity) {
            if (opacity instanceof Function) this._opacityGetter = opacity;else if (opacity instanceof Object && opacity.get) this._opacityGetter = opacity.get.bind(opacity);else {
                this._opacityGetter = null;
                this._output.opacity = opacity;
            }
            return this;
        };

        /**
         * Set function, object, or numerical array to provide origin, as [x,y],
         *   where x and y are in the range [0,1].
         *
         * @method originFrom
         *
         * @param {Object} origin provider object
         * @return {Modifier} this
         */
        Modifier.prototype.originFrom = function originFrom(origin) {
            if (origin instanceof Function) this._originGetter = origin;else if (origin instanceof Object && origin.get) this._originGetter = origin.get.bind(origin);else {
                this._originGetter = null;
                this._output.origin = origin;
            }
            return this;
        };

        /**
         * Set function, object, or numerical array to provide align, as [x,y],
         *   where x and y are in the range [0,1].
         *
         * @method alignFrom
         *
         * @param {Object} align provider object
         * @return {Modifier} this
         */
        Modifier.prototype.alignFrom = function alignFrom(align) {
            if (align instanceof Function) this._alignGetter = align;else if (align instanceof Object && align.get) this._alignGetter = align.get.bind(align);else {
                this._alignGetter = null;
                this._output.align = align;
            }
            return this;
        };

        /**
         * Set function, object, or numerical array to provide size, as [width, height].
         *
         * @method sizeFrom
         *
         * @param {Object} size provider object
         * @return {Modifier} this
         */
        Modifier.prototype.sizeFrom = function sizeFrom(size) {
            if (size instanceof Function) this._sizeGetter = size;else if (size instanceof Object && size.get) this._sizeGetter = size.get.bind(size);else {
                this._sizeGetter = null;
                this._output.size = size;
            }
            return this;
        };

        /**
         * Set function, object, or numerical array to provide proportions, as [percent of width, percent of height].
         *
         * @method proportionsFrom
         *
         * @param {Object} proportions provider object
         * @return {Modifier} this
         */
        Modifier.prototype.proportionsFrom = function proportionsFrom(proportions) {
            if (proportions instanceof Function) this._proportionGetter = proportions;else if (proportions instanceof Object && proportions.get) this._proportionGetter = proportions.get.bind(proportions);else {
                this._proportionGetter = null;
                this._output.proportions = proportions;
            }
            return this;
        };

        /**
        * Deprecated: Prefer transformFrom with static Transform, or use a TransitionableTransform.
        * @deprecated
        * @method setTransform
        *
        * @param {Transform} transform Transform to transition to
        * @param {Transitionable} transition Valid transitionable object
        * @param {Function} callback callback to call after transition completes
        * @return {Modifier} this
        */
        Modifier.prototype.setTransform = function setTransform(transform, transition, callback) {
            if (transition || this._legacyStates.transform) {
                if (!this._legacyStates.transform) {
                    this._legacyStates.transform = new TransitionableTransform(this._output.transform);
                }
                if (!this._transformGetter) this.transformFrom(this._legacyStates.transform);

                this._legacyStates.transform.set(transform, transition, callback);
                return this;
            } else return this.transformFrom(transform);
        };

        /**
         * Deprecated: Prefer opacityFrom with static opacity array, or use a Transitionable with that opacity.
         * @deprecated
         * @method setOpacity
         *
         * @param {Number} opacity Opacity value to transition to.
         * @param {Transitionable} transition Valid transitionable object
         * @param {Function} callback callback to call after transition completes
         * @return {Modifier} this
         */
        Modifier.prototype.setOpacity = function setOpacity(opacity, transition, callback) {
            if (transition || this._legacyStates.opacity) {
                if (!this._legacyStates.opacity) {
                    this._legacyStates.opacity = new Transitionable(this._output.opacity);
                }
                if (!this._opacityGetter) this.opacityFrom(this._legacyStates.opacity);

                return this._legacyStates.opacity.set(opacity, transition, callback);
            } else return this.opacityFrom(opacity);
        };

        /**
         * Deprecated: Prefer originFrom with static origin array, or use a Transitionable with that origin.
         * @deprecated
         * @method setOrigin
         *
         * @param {Array.Number} origin two element array with values between 0 and 1.
         * @param {Transitionable} transition Valid transitionable object
         * @param {Function} callback callback to call after transition completes
         * @return {Modifier} this
         */
        Modifier.prototype.setOrigin = function setOrigin(origin, transition, callback) {
            /* TODO: remove this if statement when deprecation complete */
            if (transition || this._legacyStates.origin) {

                if (!this._legacyStates.origin) {
                    this._legacyStates.origin = new Transitionable(this._output.origin || [0, 0]);
                }
                if (!this._originGetter) this.originFrom(this._legacyStates.origin);

                this._legacyStates.origin.set(origin, transition, callback);
                return this;
            } else return this.originFrom(origin);
        };

        /**
         * Deprecated: Prefer alignFrom with static align array, or use a Transitionable with that align.
         * @deprecated
         * @method setAlign
         *
         * @param {Array.Number} align two element array with values between 0 and 1.
         * @param {Transitionable} transition Valid transitionable object
         * @param {Function} callback callback to call after transition completes
         * @return {Modifier} this
         */
        Modifier.prototype.setAlign = function setAlign(align, transition, callback) {
            /* TODO: remove this if statement when deprecation complete */
            if (transition || this._legacyStates.align) {

                if (!this._legacyStates.align) {
                    this._legacyStates.align = new Transitionable(this._output.align || [0, 0]);
                }
                if (!this._alignGetter) this.alignFrom(this._legacyStates.align);

                this._legacyStates.align.set(align, transition, callback);
                return this;
            } else return this.alignFrom(align);
        };

        /**
         * Deprecated: Prefer sizeFrom with static origin array, or use a Transitionable with that size.
         * @deprecated
         * @method setSize
         * @param {Array.Number} size two element array of [width, height]
         * @param {Transitionable} transition Valid transitionable object
         * @param {Function} callback callback to call after transition completes
         * @return {Modifier} this
         */
        Modifier.prototype.setSize = function setSize(size, transition, callback) {
            if (size && (transition || this._legacyStates.size)) {
                if (!this._legacyStates.size) {
                    this._legacyStates.size = new Transitionable(this._output.size || [0, 0]);
                }
                if (!this._sizeGetter) this.sizeFrom(this._legacyStates.size);

                this._legacyStates.size.set(size, transition, callback);
                return this;
            } else return this.sizeFrom(size);
        };

        /**
         * Deprecated: Prefer proportionsFrom with static origin array, or use a Transitionable with those proportions.
         * @deprecated
         * @method setProportions
         * @param {Array.Number} proportions two element array of [percent of width, percent of height]
         * @param {Transitionable} transition Valid transitionable object
         * @param {Function} callback callback to call after transition completes
         * @return {Modifier} this
         */
        Modifier.prototype.setProportions = function setProportions(proportions, transition, callback) {
            if (proportions && (transition || this._legacyStates.proportions)) {
                if (!this._legacyStates.proportions) {
                    this._legacyStates.proportions = new Transitionable(this._output.proportions || [0, 0]);
                }
                if (!this._proportionGetter) this.proportionsFrom(this._legacyStates.proportions);

                this._legacyStates.proportions.set(proportions, transition, callback);
                return this;
            } else return this.proportionsFrom(proportions);
        };

        /**
         * Deprecated: Prefer to stop transform in your provider object.
         * @deprecated
         * @method halt
         */
        Modifier.prototype.halt = function halt() {
            if (this._legacyStates.transform) this._legacyStates.transform.halt();
            if (this._legacyStates.opacity) this._legacyStates.opacity.halt();
            if (this._legacyStates.origin) this._legacyStates.origin.halt();
            if (this._legacyStates.align) this._legacyStates.align.halt();
            if (this._legacyStates.size) this._legacyStates.size.halt();
            if (this._legacyStates.proportions) this._legacyStates.proportions.halt();
            this._transformGetter = null;
            this._opacityGetter = null;
            this._originGetter = null;
            this._alignGetter = null;
            this._sizeGetter = null;
            this._proportionGetter = null;
        };

        /**
         * Deprecated: Prefer to use your provided transform or output of your transform provider.
         * @deprecated
         * @method getTransform
         * @return {Object} transform provider object
         */
        Modifier.prototype.getTransform = function getTransform() {
            return this._transformGetter();
        };

        /**
         * Deprecated: Prefer to determine the end state of your transform from your transform provider
         * @deprecated
         * @method getFinalTransform
         * @return {Transform} transform matrix
         */
        Modifier.prototype.getFinalTransform = function getFinalTransform() {
            return this._legacyStates.transform ? this._legacyStates.transform.getFinal() : this._output.transform;
        };

        /**
         * Deprecated: Prefer to use your provided opacity or output of your opacity provider.
         * @deprecated
         * @method getOpacity
         * @return {Object} opacity provider object
         */
        Modifier.prototype.getOpacity = function getOpacity() {
            return this._opacityGetter();
        };

        /**
         * Deprecated: Prefer to use your provided origin or output of your origin provider.
         * @deprecated
         * @method getOrigin
         * @return {Object} origin provider object
         */
        Modifier.prototype.getOrigin = function getOrigin() {
            return this._originGetter();
        };

        /**
         * Deprecated: Prefer to use your provided align or output of your align provider.
         * @deprecated
         * @method getAlign
         * @return {Object} align provider object
         */
        Modifier.prototype.getAlign = function getAlign() {
            return this._alignGetter();
        };

        /**
         * Deprecated: Prefer to use your provided size or output of your size provider.
         * @deprecated
         * @method getSize
         * @return {Object} size provider object
         */
        Modifier.prototype.getSize = function getSize() {
            return this._sizeGetter ? this._sizeGetter() : this._output.size;
        };

        /**
         * Deprecated: Prefer to use your provided proportions or output of your proportions provider.
         * @deprecated
         * @method getProportions
         * @return {Object} proportions provider object
         */
        Modifier.prototype.getProportions = function getProportions() {
            return this._proportionGetter ? this._proportionGetter() : this._output.proportions;
        };

        // call providers on tick to receive render spec elements to apply
        function _update() {
            if (this._transformGetter) this._output.transform = this._transformGetter();
            if (this._opacityGetter) this._output.opacity = this._opacityGetter();
            if (this._originGetter) this._output.origin = this._originGetter();
            if (this._alignGetter) this._output.align = this._alignGetter();
            if (this._sizeGetter) this._output.size = this._sizeGetter();
            if (this._proportionGetter) this._output.proportions = this._proportionGetter();
        }

        /**
         * Return render spec for this Modifier, applying to the provided
         *    target component.  This is similar to render() for Surfaces.
         *
         * @private
         * @method modify
         *
         * @param {Object} target (already rendered) render spec to
         *    which to apply the transform.
         * @return {Object} render spec for this Modifier, including the
         *    provided target
         */
        Modifier.prototype.modify = function modify(target) {
            _update.call(this);
            this._output.target = target;
            return this._output;
        };

        module.exports = Modifier;
    }).call($__exports, $__require, $__exports, $__module);
});
/**
 * Created by lundfall on 10/4/16.
 */
$__System.registerDynamic('1f6', ['1f7'], false, function ($__require, $__exports, $__module) {
  $__module.uri = $__module.id;
  return (function (require, exports, module) {
    var Group = require('1f7');

    /**
     * A Context designed to contain surfaces and set properties
     *   to be applied to all of them at once with native scrolling.
     *   This is primarily used for specific performance improvements in the rendering {{.
       *   Private.
       *
     * @private
     * @class NativeScorllGroup
     * @extends Group
     * @constructor
     * @param {Object} [options] Surface options array (see Surface})
     */
    function NativeScrollGroup(options) {
      Group.call(this, options);
    }

    NativeScrollGroup.prototype = Object.create(Group.prototype);

    NativeScrollGroup.prototype.commit = function commit(context) {
      this._surfaceSize = context.size;
      this.on('deploy', function () {
        if (this._cachedScrollOffset) {
          this.setScrollOffset();
        }
      }.bind(this));
      Group.prototype.commit.apply(this, arguments);
    };

    /**
     * Sets the scroll offset
     * @param offset. Defaults to the old scroll offset that was set when there wasn't any element.
     */

    NativeScrollGroup.prototype.setScrollOffset = function setScrollOffset(offset) {
      var element = this._element;
      if (element) {
        element.scrollTop = offset || this._cachedScrollOffset;
        this._cachedScrollOffset = undefined;
      } else {
        /* Save to cache and set on deploy instead */
        this._cachedScrollOffset = offset;
      }
    };

    /**
     * Hack to force an element redraw that fixes certain bug for elements getting stuck on their current scrollOffset
     */
    NativeScrollGroup.prototype.forceScrollOffsetInvalidation = function forceScrollOffsetInvalidation() {
      var element = this._element;
      if (element) {
        var disp = element.style.display;
        element.style.display = 'none';
        var trick = element.offsetHeight;
        element.style.display = disp;
      }
    };

    NativeScrollGroup.prototype.getScrollOffset = function getScrollOffset() {
      var element = this._element;
      if (element) {
        return element.scrollTop;
      }
      return 0;
    };

    NativeScrollGroup.prototype.getMaxScrollOffset = function getScrollOffset() {
      var element = this._element;
      if (element) {
        return element.scrollHeight - this._surfaceSize[1];
      }
      return 0;
    };

    NativeScrollGroup.prototype.scrollToBottom = function getScrollOffset() {
      var element = this._element;
      if (element) {
        this.setScrollOffset(element.scrollHeight);
      }
      return 0;
    }; /**/

    NativeScrollGroup.prototype.elementClass = 'famous-native-scroller';
    module.exports = NativeScrollGroup;
  }).call($__exports, $__require, $__exports, $__module);
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: mark@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */

$__System.registerDynamic('1f8', [], false, function ($__require, $__exports, $__module) {
    $__module.uri = $__module.id;
    return (function (require, exports, module) {

        /**
         * Helper object used to iterate through items sequentially. Used in
         *   views that deal with layout.  A ViewSequence object conceptually points
         *   to a node in a linked list.
         *
         * @class ViewSequence
         *
         * @constructor
         * @param {Object|Array} options Options object, or content array.
         * @param {Number} [options.index] starting index.
         * @param {Number} [options.array] Array of elements to populate the ViewSequence
         * @param {Object} [options._] Optional backing store (internal
         * @param {Boolean} [options.loop] Whether to wrap when accessing elements just past the end
         *   (or beginning) of the sequence.
         */
        function ViewSequence(options) {
            if (!options) options = [];
            if (options instanceof Array) options = { array: options };

            this._ = null;
            this.index = options.index || 0;

            if (options.array) this._ = new this.constructor.Backing(options.array);else if (options._) this._ = options._;

            if (this.index === this._.firstIndex) this._.firstNode = this;
            if (this.index === this._.firstIndex + this._.array.length - 1) this._.lastNode = this;

            if (options.loop !== undefined) this._.loop = options.loop;

            if (options.trackSize !== undefined) this._.trackSize = options.trackSize;

            this._previousNode = null;
            this._nextNode = null;
        }

        // constructor for internal storage
        ViewSequence.Backing = function Backing(array) {
            this.array = array;
            this.firstIndex = 0;
            this.loop = false;
            this.firstNode = null;
            this.lastNode = null;
            this.cumulativeSizes = [[0, 0]];
            this.sizeDirty = true;
            this.trackSize = false;
        };

        // Get value "i" slots away from the first index.
        ViewSequence.Backing.prototype.getValue = function getValue(i) {
            var _i = i - this.firstIndex;
            if (_i < 0 || _i >= this.array.length) return null;
            return this.array[_i];
        };

        // Set value "i" slots away from the first index.
        ViewSequence.Backing.prototype.setValue = function setValue(i, value) {
            this.array[i - this.firstIndex] = value;
        };

        // Get sequence size from backing up to index
        // TODO: remove from viewSequence with proper abstraction
        ViewSequence.Backing.prototype.getSize = function getSize(index) {
            return this.cumulativeSizes[index];
        };

        // Calculates cumulative size
        // TODO: remove from viewSequence with proper abstraction
        ViewSequence.Backing.prototype.calculateSize = function calculateSize(index) {
            index = index || this.array.length;
            var size = [0, 0];
            for (var i = 0; i < index; i++) {
                var nodeSize = this.array[i].getSize();
                if (!nodeSize) return undefined;
                if (size[0] !== undefined) {
                    if (nodeSize[0] === undefined) size[0] = undefined;else size[0] += nodeSize[0];
                }
                if (size[1] !== undefined) {
                    if (nodeSize[1] === undefined) size[1] = undefined;else size[1] += nodeSize[1];
                }
                this.cumulativeSizes[i + 1] = size.slice();
            }
            this.sizeDirty = false;
            return size;
        };

        // After splicing into the backing store, restore the indexes of each node correctly.
        ViewSequence.Backing.prototype.reindex = function reindex(start, removeCount, insertCount) {
            if (!this.array[0]) return;

            var i = 0;
            var index = this.firstIndex;
            var indexShiftAmount = insertCount - removeCount;
            var node = this.firstNode;

            // find node to begin
            while (index < start - 1) {
                node = node.getNext();
                index++;
            }
            // skip removed nodes
            var spliceStartNode = node;
            for (i = 0; i < removeCount; i++) {
                node = node.getNext();
                if (node) node._previousNode = spliceStartNode;
            }
            var spliceResumeNode = node ? node.getNext() : null;
            // generate nodes for inserted items
            spliceStartNode._nextNode = null;
            node = spliceStartNode;
            for (i = 0; i < insertCount; i++) node = node.getNext();
            index += insertCount;
            // resume the chain
            if (node !== spliceResumeNode) {
                node._nextNode = spliceResumeNode;
                if (spliceResumeNode) spliceResumeNode._previousNode = node;
            }
            if (spliceResumeNode) {
                node = spliceResumeNode;
                index++;
                while (node && index < this.array.length + this.firstIndex) {
                    if (node._nextNode) node.index += indexShiftAmount;else node.index = index;
                    node = node.getNext();
                    index++;
                }
            }
            if (this.trackSize) this.sizeDirty = true;
        };

        /**
         * Return ViewSequence node previous to this node in the list, respecting looping if applied.
         *
         * @method getPrevious
         * @return {ViewSequence} previous node.
         */
        ViewSequence.prototype.getPrevious = function getPrevious() {
            var len = this._.array.length;
            if (!len) {
                this._previousNode = null;
            } else if (this.index === this._.firstIndex) {
                if (this._.loop) {
                    this._previousNode = this._.lastNode || new this.constructor({ _: this._, index: this._.firstIndex + len - 1 });
                    this._previousNode._nextNode = this;
                } else {
                    this._previousNode = null;
                }
            } else if (!this._previousNode) {
                this._previousNode = new this.constructor({ _: this._, index: this.index - 1 });
                this._previousNode._nextNode = this;
            }
            return this._previousNode;
        };

        /**
         * Return ViewSequence node next after this node in the list, respecting looping if applied.
         *
         * @method getNext
         * @return {ViewSequence} previous node.
         */
        ViewSequence.prototype.getNext = function getNext() {
            var len = this._.array.length;
            if (!len) {
                this._nextNode = null;
            } else if (this.index === this._.firstIndex + len - 1) {
                if (this._.loop) {
                    this._nextNode = this._.firstNode || new this.constructor({ _: this._, index: this._.firstIndex });
                    this._nextNode._previousNode = this;
                } else {
                    this._nextNode = null;
                }
            } else if (!this._nextNode) {
                this._nextNode = new this.constructor({ _: this._, index: this.index + 1 });
                this._nextNode._previousNode = this;
            }
            return this._nextNode;
        };

        /**
         * Return index of the provided item in the backing array
         *
         * @method indexOf
         * @return {Number} index or -1 if not found
         */
        ViewSequence.prototype.indexOf = function indexOf(item) {
            return this._.array.indexOf(item);
        };

        /**
         * Return index of this ViewSequence node.
         *
         * @method getIndex
         * @return {Number} index
         */
        ViewSequence.prototype.getIndex = function getIndex() {
            return this.index;
        };

        /**
         * Return printable version of this ViewSequence node.
         *
         * @method toString
         * @return {string} this index as a string
         */
        ViewSequence.prototype.toString = function toString() {
            return '' + this.index;
        };

        /**
         * Add one or more objects to the beginning of the sequence.
         *
         * @method unshift
         * @param {...Object} value arguments array of objects
         */
        ViewSequence.prototype.unshift = function unshift(value) {
            this._.array.unshift.apply(this._.array, arguments);
            this._.firstIndex -= arguments.length;
            if (this._.trackSize) this._.sizeDirty = true;
        };

        /**
         * Add one or more objects to the end of the sequence.
         *
         * @method push
         * @param {...Object} value arguments array of objects
         */
        ViewSequence.prototype.push = function push(value) {
            this._.array.push.apply(this._.array, arguments);
            if (this._.trackSize) this._.sizeDirty = true;
        };

        /**
         * Remove objects from the sequence
         *
         * @method splice
         * @param {Number} index starting index for removal
         * @param {Number} howMany how many elements to remove
         * @param {...Object} value arguments array of objects
         */
        ViewSequence.prototype.splice = function splice(index, howMany) {
            var values = Array.prototype.slice.call(arguments, 2);
            this._.array.splice.apply(this._.array, [index - this._.firstIndex, howMany].concat(values));
            this._.reindex(index, howMany, values.length);
        };

        /**
         * Exchange this element's sequence position with another's.
         *
         * @method swap
         * @param {ViewSequence} other element to swap with.
         */
        ViewSequence.prototype.swap = function swap(other) {
            var otherValue = other.get();
            var myValue = this.get();
            this._.setValue(this.index, otherValue);
            this._.setValue(other.index, myValue);

            var myPrevious = this._previousNode;
            var myNext = this._nextNode;
            var myIndex = this.index;
            var otherPrevious = other._previousNode;
            var otherNext = other._nextNode;
            var otherIndex = other.index;

            this.index = otherIndex;
            this._previousNode = otherPrevious === this ? other : otherPrevious;
            if (this._previousNode) this._previousNode._nextNode = this;
            this._nextNode = otherNext === this ? other : otherNext;
            if (this._nextNode) this._nextNode._previousNode = this;

            other.index = myIndex;
            other._previousNode = myPrevious === other ? this : myPrevious;
            if (other._previousNode) other._previousNode._nextNode = other;
            other._nextNode = myNext === other ? this : myNext;
            if (other._nextNode) other._nextNode._previousNode = other;

            if (this.index === this._.firstIndex) this._.firstNode = this;else if (this.index === this._.firstIndex + this._.array.length - 1) this._.lastNode = this;
            if (other.index === this._.firstIndex) this._.firstNode = other;else if (other.index === this._.firstIndex + this._.array.length - 1) this._.lastNode = other;
            if (this._.trackSize) this._.sizeDirty = true;
        };

        /**
          * Return value of this ViewSequence node.
          *
          * @method get
          * @return {Object} value of thiss
          */
        ViewSequence.prototype.get = function get() {
            return this._.getValue(this.index);
        };

        /**
          * Call getSize() on the contained View.
          *
          * @method getSize
          * @return {Array.Number} [width, height]
          */
        ViewSequence.prototype.getSize = function getSize() {
            var target = this.get();
            return target ? target.getSize() : null;
        };

        /**
         * Generate a render spec from the contents of this component.
         * Specifically, this will render the value at the current index.
         * @private
         * @method render
         * @return {number} Render spec for this component
         */
        ViewSequence.prototype.render = function render() {
            if (this._.trackSize && this._.sizeDirty) this._.calculateSize();
            var target = this.get();
            return target ? target.render.apply(target, arguments) : null;
        };

        module.exports = ViewSequence;
    }).call($__exports, $__require, $__exports, $__module);
});
/**
 * This Source Code is licensed under the MIT license. If a copy of the
 * MIT-license was not distributed with this file, You can obtain one at:
 * http://opensource.org/licenses/mit-license.html.
 *
 * @author: Hein Rutjes (IjzerenHein)
 * @license MIT
 * @copyright Gloey Apps, 2014 - 2015
 */

/**
 * LayoutDockHelper helps positioning nodes using docking principles.
 *
 * **Example:**
 *
 * ```javascript
 * var LayoutDockHelper = require('famous-flex/helpers/LayoutDockHelper');
 *
 * function HeaderFooterLayout(context, options) {
 *   var dock = new LayoutDockHelper(context);
 *   dock.top('header', options.headerSize);
 *   dock.bottom('footer', options.footerSize);
 *   dock.fill('content');
 * };
 * ```
 *
 * You can also use layout-literals to create layouts using docking semantics:
 *
 * ```javascript
 * var layoutController = new LayoutController({
 *   layout: {dock: [
 *     ['top', 'header', 40],
 *     ['bottom', 'footer', 40, 1], // z-index +1
 *     ['fill', 'content']
 *   ]},
 *   dataSource: {
 *     header: new Surface({content: 'header'}),
 *     footer: new Surface({content: 'footer'}),
 *     content: new Surface({content: 'content'}),
 *   }
 * });
 * ```
 *
 * @module
 */
$__System.registerDynamic('1f9', ['1fa'], false, function ($__require, $__exports, $__module) {
    $__module.uri = $__module.id;
    return (function (require, exports, module) {

        // import dependencies
        var LayoutUtility = require('1fa');

        /**
         * @class
         * @param {LayoutContext} context layout-context
         * @param {Object} [options] additional options
         * @param {Object} [options.margins] margins to start out with (default: 0px)
         * @param {Number} [options.translateZ] z-index to use when translating objects (default: 0)
         * @alias module:LayoutDockHelper
         */
        function LayoutDockHelper(context, options) {
            var size = context.size;
            this._size = size;
            this._context = context;
            this._options = options;
            this._data = {
                z: options && options.translateZ ? options.translateZ : 0
            };
            if (options && options.margins) {
                var margins = LayoutUtility.normalizeMargins(options.margins);
                this._data.left = margins[3];
                this._data.top = margins[0];
                this._data.right = size[0] - margins[1];
                this._data.bottom = size[1] - margins[2];
            } else {
                this._data.left = 0;
                this._data.top = 0;
                this._data.right = size[0];
                this._data.bottom = size[1];
            }
        }

        /**
         * Parses the layout-rules based on a JSON data object.
         * The object should be an array with the following syntax:
         * `[[rule, node, value, z], [rule, node, value, z], ...]`
         *
         * **Example:**
         *
         * ```JSON
         * [
         *   ['top', 'header', 50],
         *   ['bottom', 'footer', 50, 10], // z-index: 10
         *   ['margins', [10, 5]], // marginate remaining space: 10px top/bottom, 5px left/right
         *   ['fill', 'content']
         * ]
         * ```
         *
         * @param {Object} data JSON object
         */
        LayoutDockHelper.prototype.parse = function (data) {
            for (var i = 0; i < data.length; i++) {
                var rule = data[i];
                var value = rule.length >= 3 ? rule[2] : undefined;
                if (rule[0] === 'top') {
                    this.top(rule[1], value, rule.length >= 4 ? rule[3] : undefined);
                } else if (rule[0] === 'left') {
                    this.left(rule[1], value, rule.length >= 4 ? rule[3] : undefined);
                } else if (rule[0] === 'right') {
                    this.right(rule[1], value, rule.length >= 4 ? rule[3] : undefined);
                } else if (rule[0] === 'bottom') {
                    this.bottom(rule[1], value, rule.length >= 4 ? rule[3] : undefined);
                } else if (rule[0] === 'fill') {
                    this.fill(rule[1], rule.length >= 3 ? rule[2] : undefined);
                } else if (rule[0] === 'margins') {
                    this.margins(rule[1]);
                }
            }
        };

        /**
         * Dock the node to the top.
         *
         * @param {LayoutNode|String} [node] layout-node to dock, when omitted the `height` argument argument is used for padding
         * @param {Number} [height] height of the layout-node, when omitted the height of the node is used
         * @param {Number} [z] z-index to use for the node
         * @return {LayoutDockHelper} this
         */
        LayoutDockHelper.prototype.top = function (node, height, z) {
            if (height instanceof Array) {
                height = height[1];
            }
            if (height === undefined) {
                var size = this._context.resolveSize(node, [this._data.right - this._data.left, this._data.bottom - this._data.top]);
                height = size[1];
            }
            this._context.set(node, {
                size: [this._data.right - this._data.left, height],
                origin: [0, 0],
                align: [0, 0],
                translate: [this._data.left, this._data.top, z === undefined ? this._data.z : z]
            });
            this._data.top += height;
            return this;
        };

        /**
         * Dock the node to the left
         *
         * @param {LayoutNode|String} [node] layout-node to dock, when omitted the `width` argument argument is used for padding
         * @param {Number} [width] width of the layout-node, when omitted the width of the node is used
         * @param {Number} [z] z-index to use for the node
         * @return {LayoutDockHelper} this
         */
        LayoutDockHelper.prototype.left = function (node, width, z) {
            if (width instanceof Array) {
                width = width[0];
            }
            if (width === undefined) {
                var size = this._context.resolveSize(node, [this._data.right - this._data.left, this._data.bottom - this._data.top]);
                width = size[0];
            }
            this._context.set(node, {
                size: [width, this._data.bottom - this._data.top],
                origin: [0, 0],
                align: [0, 0],
                translate: [this._data.left, this._data.top, z === undefined ? this._data.z : z]
            });
            this._data.left += width;
            return this;
        };

        /**
         * Dock the node to the bottom
         *
         * @param {LayoutNode|String} [node] layout-node to dock, when omitted the `height` argument argument is used for padding
         * @param {Number} [height] height of the layout-node, when omitted the height of the node is used
         * @param {Number} [z] z-index to use for the node
         * @return {LayoutDockHelper} this
         */
        LayoutDockHelper.prototype.bottom = function (node, height, z) {
            if (height instanceof Array) {
                height = height[1];
            }
            if (height === undefined) {
                var size = this._context.resolveSize(node, [this._data.right - this._data.left, this._data.bottom - this._data.top]);
                height = size[1];
            }
            this._context.set(node, {
                size: [this._data.right - this._data.left, height],
                origin: [0, 1],
                align: [0, 1],
                translate: [this._data.left, -(this._size[1] - this._data.bottom), z === undefined ? this._data.z : z]
            });
            this._data.bottom -= height;
            return this;
        };

        /**
         * Dock the node to the right.
         *
         * @param {LayoutNode|String} [node] layout-node to dock, when omitted the `width` argument argument is used for padding
         * @param {Number} [width] width of the layout-node, when omitted the width of the node is used
         * @param {Number} [z] z-index to use for the node
         * @return {LayoutDockHelper} this
         */
        LayoutDockHelper.prototype.right = function (node, width, z) {
            if (width instanceof Array) {
                width = width[0];
            }
            if (node) {
                if (width === undefined) {
                    var size = this._context.resolveSize(node, [this._data.right - this._data.left, this._data.bottom - this._data.top]);
                    width = size[0];
                }
                this._context.set(node, {
                    size: [width, this._data.bottom - this._data.top],
                    origin: [1, 0],
                    align: [1, 0],
                    translate: [-(this._size[0] - this._data.right), this._data.top, z === undefined ? this._data.z : z]
                });
            }
            if (width) {
                this._data.right -= width;
            }
            return this;
        };

        /**
         * Fills the node to the remaining content.
         *
         * @param {LayoutNode|String} node layout-node to dock
         * @param {Number} [z] z-index to use for the node
         * @return {LayoutDockHelper} this
         */
        LayoutDockHelper.prototype.fill = function (node, z) {
            this._context.set(node, {
                size: [this._data.right - this._data.left, this._data.bottom - this._data.top],
                translate: [this._data.left, this._data.top, z === undefined ? this._data.z : z]
            });
            return this;
        };

        /**
         * Applies indent margins to the remaining content.
         *
         * @param {Number|Array} margins margins shorthand (e.g. '5', [10, 10], [5, 10, 5, 10])
         * @return {LayoutDockHelper} this
         */
        LayoutDockHelper.prototype.margins = function (margins) {
            margins = LayoutUtility.normalizeMargins(margins);
            this._data.left += margins[3];
            this._data.top += margins[0];
            this._data.right -= margins[1];
            this._data.bottom -= margins[2];
            return this;
        };

        /**
         * Gets the current left/right/top/bottom/z bounds used by the dock-helper.
         *
         * @return {Object} `{left: x, right: x, top: x, bottom: x, z: x}`
         */
        LayoutDockHelper.prototype.get = function () {
            return this._data;
        };

        // Register the helper
        LayoutUtility.registerHelper('dock', LayoutDockHelper);

        module.exports = LayoutDockHelper;
    }).call($__exports, $__require, $__exports, $__module);
});
/**
 * This Source Code is licensed under the MIT license. If a copy of the
 * MIT-license was not distributed with this file, You can obtain one at:
 * http://opensource.org/licenses/mit-license.html.
 *
 * @author: Hein Rutjes (IjzerenHein)
 * @license MIT
 * @copyright Gloey Apps, 2014 - 2015
 */

/*global console*/
/*eslint no-console: 0*/

/**
 * LayoutController lays out renderables according to a layout-
 * function and a data-source.
 *
 * Events:
 *
 * |event      |description|
 * |-----------|-----------|
 * |layoutstart|Emitted before the layout function is executed.|
 * |layoutend  |Emitted after the layout function has been executed.|
 * |reflow     |Emitted after one or more renderables have been changed.|
 *
 * @module
 */
$__System.registerDynamic('16e', ['1f6', '196', '1fb', '1f8', '1fc', '195', '194', '1fa', '1fd', '1fe', '1ff', '169', '1f9'], false, function ($__require, $__exports, $__module) {
    $__module.uri = $__module.id;
    return (function (require, exports, module) {

        // import dependencies
        var NativeScrollGroup = require('1f6');
        var Utility = require('196');
        var Entity = require('1fb');
        var ViewSequence = require('1f8');
        var LinkedListViewSequence = require('1fc');
        var OptionsManager = require('195');
        var EventHandler = require('194');
        var LayoutUtility = require('1fa');
        var LayoutNodeManager = require('1fd');
        var LayoutNode = require('1fe');
        var FlowLayoutNode = require('1ff');
        var Transform = require('169');
        require('1f9');

        /**
         * @class
         * @param {Object} options Options.
         * @param {Function|Object} [options.layout] Layout function or layout-literal.
         * @param {Object} [options.layoutOptions] Options to pass in to the layout-function.
         * @param {Array|LinkedListViewSequence|Object} [options.dataSource] Array, LinkedListViewSequence or Object with key/value pairs.
         * @param {Utility.Direction} [options.direction] Direction to layout into (e.g. Utility.Direction.Y) (when omitted the default direction of the layout is used)
         * @param {Bool} [options.flow] Enables flow animations when the layout changes (default: `false`).
         * @param {Object} [options.flowOptions] Options used by nodes when reflowing.
         * @param {Bool} [options.flowOptions.reflowOnResize] Smoothly reflows renderables on resize (only used when flow = true) (default: `true`).
         * @param {Object} [options.flowOptions.spring] Spring options used by nodes when reflowing (default: `{dampingRatio: 0.8, period: 300}`).
         * @param {Object} [options.flowOptions.properties] Properties which should be enabled or disabled for flowing.
         * @param {Spec} [options.flowOptions.insertSpec] Size, transform, opacity... to use when inserting new renderables into the scene (default: `{}`).
         * @param {Spec} [options.flowOptions.removeSpec] Size, transform, opacity... to use when removing renderables from the scene (default: undefined).
         * @param {Bool} [options.alwaysLayout] When set to true, always calls the layout function on every render-cycle (default: `false`).
         * @param {Bool} [options.autoPipeEvents] When set to true, automatically calls .pipe on all renderables when inserted (default: `false`).
         * @param {Object} [options.preallocateNodes] Optimisation option to improve initial scrolling/animation performance by pre-allocating nodes, e.g.: `{count: 50, spec: {size:[0, 0], transform: Transform.identity}}`.
         * @alias module:LayoutController
         */
        function LayoutController(options, nodeManager) {

            // Commit
            this.id = Entity.register(this);
            this._isDirty = true;
            this._contextSizeCache = [0, 0];
            this._commitOutput = {};
            this._dirtyRenderables = [];

            // Create an object to we can capture the famo.us cleanup call on
            // LayoutController.
            this._cleanupRegistration = {
                commit: function () {
                    return undefined;
                },
                cleanup: function (context) {
                    this.cleanup(context);
                }.bind(this)
            };
            this._cleanupRegistration.target = Entity.register(this._cleanupRegistration);
            this._cleanupRegistration.render = function () {
                return this.target;
            }.bind(this._cleanupRegistration);

            // Setup input event handler
            this._eventInput = new EventHandler();
            EventHandler.setInputHandler(this, this._eventInput);

            // Setup event handlers
            this._eventOutput = new EventHandler();
            EventHandler.setOutputHandler(this, this._eventOutput);

            if (options.nativeScroll) {
                // Create groupt for faster rendering
                this.group = new NativeScrollGroup();
                this.group.add({ render: this._innerRender.bind(this) });
            }

            // Layout
            this._layout = {
                //function: undefined,
                //literal: undefined,
                //capabilities: undefined,
                options: Object.create({})
            };
            //this._direction = undefined;
            this._layout.optionsManager = new OptionsManager(this._layout.options);
            this._layout.optionsManager.on('change', function () {
                this._isDirty = true;
            }.bind(this));

            // Create options
            this.options = Object.create(LayoutController.DEFAULT_OPTIONS);
            this._optionsManager = new OptionsManager(this.options);

            // Create node manager that manages (Flow)LayoutNode instances
            if (nodeManager) {
                this._nodes = nodeManager;
            }
            //TODO: Make some solution that does flow not just on the view but on the renderables
            else if (options && options.flow) {
                    this._nodes = new LayoutNodeManager(FlowLayoutNode, _initFlowLayoutNode.bind(this), options.partialFlow);
                } else {
                    this._nodes = new LayoutNodeManager(LayoutNode, null, false);
                }

            // Set options
            this.setDirection(undefined);
            if (options) {
                this.setOptions(options);
            }
        }

        LayoutController.DEFAULT_OPTIONS = {
            flow: false,
            partialFlow: false,
            flowOptions: {
                reflowOnResize: true,
                properties: {
                    opacity: true,
                    align: true,
                    origin: true,
                    size: true,
                    translate: true,
                    skew: true,
                    rotate: true,
                    scale: true
                },
                spring: {
                    dampingRatio: 0.8,
                    period: 300
                }
                /*insertSpec: {
                 opacity: undefined,
                 size: undefined,
                 transform: undefined,
                 origin: undefined,
                 align: undefined
                 },
                 removeSpec: {
                 opacity: undefined,
                 size: undefined,
                 transform: undefined,
                 origin: undefined,
                 align: undefined
                 }*/
            }
        };

        /**
         * Called whenever a layout-node is created/re-used. Initializes
         * the node with the `insertSpec` if it has been defined.
         */
        function _initFlowLayoutNode(node, spec) {
            if (!spec && this.options.flowOptions.insertSpec) {
                node.setSpec(this.options.flowOptions.insertSpec);
            }
        }

        /**
         * Patches the LayoutController instance's options with the passed-in ones.
         *
         * @param {Options} options An object of configurable options for the LayoutController instance.
         * @param {Function|Object} [options.layout] Layout function or layout-literal.
         * @param {Object} [options.layoutOptions] Options to pass in to the layout-function.
         * @param {Array|LinkedListViewSequence|Object} [options.dataSource] Array, LinkedListViewSequence or Object with key/value pairs.
         * @param {Utility.Direction} [options.direction] Direction to layout into (e.g. Utility.Direction.Y) (when omitted the default direction of the layout is used)
         * @param {Object} [options.flowOptions] Options used by nodes when reflowing.
         * @param {Bool} [options.flowOptions.reflowOnResize] Smoothly reflows renderables on resize (only used when flow = true) (default: `true`).
         * @param {Object} [options.flowOptions.spring] Spring options used by nodes when reflowing (default: `{dampingRatio: 0.8, period: 300}`).
         * @param {Object} [options.flowOptions.properties] Properties which should be enabled or disabled for flowing.
         * @param {Spec} [options.flowOptions.insertSpec] Size, transform, opacity... to use when inserting new renderables into the scene (default: `{}`).
         * @param {Spec} [options.flowOptions.removeSpec] Size, transform, opacity... to use when removing renderables from the scene (default: `{}`).
         * @param {Bool} [options.alwaysLayout] When set to true, always calls the layout function on every render-cycle (default: `false`).
         * @return {LayoutController} this
         */
        LayoutController.prototype.setOptions = function (options) {
            if (options.alignment !== undefined && options.alignment !== this.options.alignment) {
                this._isDirty = true;
            }
            this._optionsManager.setOptions(options);
            if (options.nodeSpring) {
                console.warn('nodeSpring options have been moved inside `flowOptions`. Use `flowOptions.spring` instead.');
                this._optionsManager.setOptions({
                    flowOptions: {
                        spring: options.nodeSpring
                    }
                });
                this._nodes.setNodeOptions(this.options.flowOptions);
            }
            if (options.reflowOnResize !== undefined) {
                console.warn('reflowOnResize options have been moved inside `flowOptions`. Use `flowOptions.reflowOnResize` instead.');
                this._optionsManager.setOptions({
                    flowOptions: {
                        reflowOnResize: options.reflowOnResize
                    }
                });
                this._nodes.setNodeOptions(this.options.flowOptions);
            }
            if (options.insertSpec) {
                console.warn('insertSpec options have been moved inside `flowOptions`. Use `flowOptions.insertSpec` instead.');
                this._optionsManager.setOptions({
                    flowOptions: {
                        insertSpec: options.insertSpec
                    }
                });
                this._nodes.setNodeOptions(this.options.flowOptions);
            }
            if (options.removeSpec) {
                console.warn('removeSpec options have been moved inside `flowOptions`. Use `flowOptions.removeSpec` instead.');
                this._optionsManager.setOptions({
                    flowOptions: {
                        removeSpec: options.removeSpec
                    }
                });
                this._nodes.setNodeOptions(this.options.flowOptions);
            }
            if (options.dataSource) {
                this.setDataSource(options.dataSource);
            }
            if (options.layout) {
                this.setLayout(options.layout, options.layoutOptions);
            } else if (options.layoutOptions) {
                this.setLayoutOptions(options.layoutOptions);
            }
            if (options.direction !== undefined) {
                this.setDirection(options.direction);
            }
            if (options.flowOptions && this.options.flow) {
                this._nodes.setNodeOptions(this.options.flowOptions);
            }
            if (options.preallocateNodes) {
                this._nodes.preallocateNodes(options.preallocateNodes.count || 0, options.preallocateNodes.spec);
            }
            return this;
        };

        /**
         * Helper function to enumerate all the renderables in the datasource
         */
        function _forEachRenderable(callback) {
            if (this._nodesById) {
                for (var key in this._nodesById) {
                    callback(this._nodesById[key]);
                }
            } else {
                var sequence = this._viewSequence.getHead();
                while (sequence) {
                    var renderable = sequence.get();
                    if (renderable) {
                        callback(renderable);
                    }
                    sequence = sequence.getNext();
                }
            }
        }

        /**
         * Sets the collection of renderables which are layed out according to
         * the layout-function.
         *
         * The data-source can be either an Array, LinkedListViewSequence or Object
         * with key/value pairs.
         *
         * @param {Array|Object|LinkedListViewSequence} dataSource Array, LinkedListViewSequence or Object.
         * @return {LayoutController} this
         */
        LayoutController.prototype.setDataSource = function (dataSource) {
            this._dataSource = dataSource;
            this._nodesById = undefined;
            if (dataSource instanceof ViewSequence) {
                console.warn('The stock famo.us ViewSequence is no longer supported as it is too buggy');
                console.warn('It has been automatically converted to the safe LinkedListViewSequence.');
                console.warn('Please refactor your code by using LinkedListViewSequence.');
                this._dataSource = new LinkedListViewSequence(dataSource._.array);
                this._viewSequence = this._dataSource;
            } else if (dataSource instanceof Array) {
                this._viewSequence = new LinkedListViewSequence(dataSource);
                this._dataSource = this._viewSequence;
            } else if (dataSource instanceof LinkedListViewSequence) {
                this._viewSequence = dataSource;
            } else if (dataSource.getNext) {
                this._viewSequence = dataSource;
            } else if (dataSource instanceof Object) {
                this._nodesById = dataSource;
            }
            if (this.options.autoPipeEvents) {
                if (this._dataSource.pipe) {
                    this._dataSource.pipe(this);
                    this._dataSource.pipe(this._eventOutput);
                } else {
                    _forEachRenderable.call(this, function (renderable) {
                        if (renderable && renderable.pipe) {
                            renderable.pipe(this);
                            renderable.pipe(this._eventOutput);
                        }
                    }.bind(this));
                }
            }
            this._isDirty = true;
            return this;
        };

        /**
         * Get the data-source.
         *
         * @return {Array|LinkedListViewSequence|Object} data-source
         */
        LayoutController.prototype.getDataSource = function () {
            return this._dataSource;
        };

        /**
         * Set the new layout.
         *
         * @param {Function|Object} layout Layout function or layout-literal
         * @param {Object} [options] Options to pass in to the layout-function
         * @return {LayoutController} this
         */
        LayoutController.prototype.setLayout = function (layout, options) {

            // Set new layout funtion
            if (layout instanceof Function) {
                this._layout._function = layout;
                this._layout.capabilities = layout.Capabilities;
                this._layout.literal = undefined;

                // If the layout is an object, treat it as a layout-literal
            } else if (layout instanceof Object) {
                this._layout.literal = layout;
                this._layout.capabilities = undefined; // todo - derive from literal somehow?
                var helperName = Object.keys(layout)[0];
                var Helper = LayoutUtility.getRegisteredHelper(helperName);
                this._layout._function = Helper ? function (context, options2) {
                    var helper = new Helper(context, options2);
                    helper.parse(layout[helperName]);
                } : undefined;
            } else {
                this._layout._function = undefined;
                this._layout.capabilities = undefined;
                this._layout.literal = undefined;
            }

            // Update options
            if (options) {
                this.setLayoutOptions(options);
            }

            // Update direction
            this.setDirection(this._configuredDirection);
            this._isDirty = true;
            return this;
        };

        /**
         * Get the current layout.
         *
         * @return {Function|Object} Layout function or layout literal
         */
        LayoutController.prototype.getLayout = function () {
            return this._layout.literal || this._layout._function;
        };

        /**
         * Set the options for the current layout. Use this function after
         * `setLayout` to update one or more options for the layout-function.
         *
         * @param {Object} [options] Options to pass in to the layout-function
         * @return {LayoutController} this
         */
        LayoutController.prototype.setLayoutOptions = function (options) {
            this._layout.optionsManager.setOptions(options);
            return this;
        };

        /**
         * Get the current layout options.
         *
         * @return {Object} Layout options
         */
        LayoutController.prototype.getLayoutOptions = function () {
            return this._layout.options;
        };

        /**
         * Calculates the actual in-use direction based on the given direction
         * and supported capabilities of the layout-function.
         */
        function _getActualDirection(direction) {

            // When the direction is configured in the capabilities, look it up there
            if (this._layout.capabilities && this._layout.capabilities.direction) {

                // Multiple directions are supported
                if (Array.isArray(this._layout.capabilities.direction)) {
                    for (var i = 0; i < this._layout.capabilities.direction.length; i++) {
                        if (this._layout.capabilities.direction[i] === direction) {
                            return direction;
                        }
                    }
                    return this._layout.capabilities.direction[0];
                }

                // Only one direction is supported, we must use that
                else {
                        return this._layout.capabilities.direction;
                    }
            }

            // Use Y-direction as a fallback
            return direction === undefined ? Utility.Direction.Y : direction;
        }

        /**
         * Set the direction of the layout. When no direction is set, the default
         * direction of the layout function is used.
         *
         * @param {Utility.Direction} direction Direction (e.g. Utility.Direction.X)
         * @return {LayoutController} this
         */
        LayoutController.prototype.setDirection = function (direction) {
            this._configuredDirection = direction;
            var newDirection = _getActualDirection.call(this, direction);
            if (newDirection !== this._direction) {
                this._direction = newDirection;
                this._isDirty = true;
            }
        };

        /**
         * Get the direction (e.g. Utility.Direction.Y). By default, this function
         * returns the direction that was configured by setting `setDirection`. When
         * the direction has not been set, `undefined` is returned.
         *
         * When no direction has been set, the first direction is used that is specified
         * in the capabilities of the layout-function. To obtain the actual in-use direction,
         * use `getDirection(true)`. This method returns the actual in-use direction and
         * never returns undefined.
         *
         * @param {Boolean} [actual] Set to true to obtain the actual in-use direction
         * @return {Utility.Direction} Direction or undefined
         */
        LayoutController.prototype.getDirection = function (actual) {
            return actual ? this._direction : this._configuredDirection;
        };

        /**
         * Get the spec (size, transform, etc..) for the given renderable or
         * Id.
         *
         * @param {Renderable|String} node Renderabe or Id to look for
         * @param {Bool} [normalize] When set to `true` normalizes the origin/align into the transform translation (default: `false`).
         * @param {Bool} [endState] When set to `true` returns the flowing end-state spec rather than the current spec.
         * @return {Spec} spec or undefined
         */
        LayoutController.prototype.getSpec = function (node, normalize, endState) {
            if (!node) {
                return undefined;
            }
            if (node instanceof String || typeof node === 'string') {
                if (!this._nodesById) {
                    return undefined;
                }
                node = this._nodesById[node];
                if (!node) {
                    return undefined;
                }

                // If the result was an array, return that instead
                if (node instanceof Array) {
                    return node;
                }
            }
            if (this._specs) {
                for (var i = 0; i < this._specs.length; i++) {
                    var spec = this._specs[i];
                    if (spec.renderNode === node) {
                        if (endState && spec.endState) {
                            spec = spec.endState;
                        }
                        // normalize align & origin into transform
                        if (normalize && spec.transform && spec.size && (spec.align || spec.origin)) {
                            var transform = spec.transform;
                            if (spec.align && (spec.align[0] || spec.align[1])) {
                                transform = Transform.thenMove(transform, [spec.align[0] * this._contextSizeCache[0], spec.align[1] * this._contextSizeCache[1], 0]);
                            }
                            if (spec.origin && (spec.origin[0] || spec.origin[1])) {
                                transform = Transform.moveThen([-spec.origin[0] * spec.size[0], -spec.origin[1] * spec.size[1], 0], transform);
                            }
                            return {
                                opacity: spec.opacity,
                                size: spec.size,
                                transform: transform
                            };
                        }
                        return spec;
                    }
                }
            }
            return undefined;
        };

        /**
         * Forces a reflow of the layout the next render cycle.
         *
         * @return {LayoutController} this
         */
        LayoutController.prototype.reflowLayout = function () {
            this._isDirty = true;
            return this;
        };

        /**
         * Resets the current flow state, so that all renderables
         * are immediately displayed in their end-state.
         *
         * @return {LayoutController} this
         */
        LayoutController.prototype.resetFlowState = function () {
            if (this.options.flow) {
                this._resetFlowState = true;
            }
            return this;
        };

        /**
         * Inserts a renderable into the data-source.
         *
         * The optional argument `insertSpec` is only used `flow` mode is enabled.
         * When specified, the renderable is inserted using an animation starting with
         * size, origin, opacity, transform, etc... as specified in `insertSpec'.
         *
         * @param {Number|String} indexOrId Index (0 = before first, -1 at end), within dataSource array or id (String)
         * @param {Object} renderable Renderable to add to the data-source
         * @param {Spec} [insertSpec] Size, transform, etc.. to start with when inserting
         * @return {LayoutController} this
         */
        LayoutController.prototype.insert = function (indexOrId, renderable, insertSpec) {
            insertSpec = insertSpec || this.options.flowOptions.insertSpec;

            // Add the renderable in case of an id (String)
            if (indexOrId instanceof String || typeof indexOrId === 'string') {

                // Create data-source if neccesary
                if (this._dataSource === undefined) {
                    this._dataSource = {};
                    this._nodesById = this._dataSource;
                }

                // Insert renderable
                if (this._nodesById[indexOrId] === renderable) {
                    return this;
                }
                this._nodesById[indexOrId] = renderable;
            }

            // Add the renderable using an index
            else {

                    // Create own data-source if neccesary
                    if (this._dataSource === undefined) {
                        this._dataSource = new LinkedListViewSequence();
                        this._viewSequence = this._dataSource;
                    }

                    // Insert data
                    this._viewSequence.insert(indexOrId, renderable);
                }

            // When a custom insert-spec was specified, store that in the layout-node
            if (insertSpec) {
                var newNode = this._nodes.createNode(renderable, insertSpec);
                newNode.executeInsertSpec();
                this._nodes.insertNode(newNode);
            }

            // Auto pipe events
            if (this.options.autoPipeEvents && renderable && renderable.pipe) {
                renderable.pipe(this);
                renderable.pipe(this._eventOutput);
            }

            // Force a reflow
            this._isDirty = true;

            this._dirtyRenderables.push(renderable);

            return this;
        };

        /**
         * Adds a renderable to the end of a sequential data-source.
         *
         * The optional argument `insertSpec` is only used `flow` mode is enabled.
         * When specified, the renderable is inserted using an animation starting with
         * size, origin, opacity, transform, etc... as specified in `insertSpec'.
         *
         * @param {Object} renderable Renderable to add to the data-source
         * @param {Spec} [insertSpec] Size, transform, etc.. to start with when inserting
         * @return {LayoutController} this
         */
        LayoutController.prototype.push = function (renderable, insertSpec) {
            return this.insert(-1, renderable, insertSpec);
        };

        /**
         * Helper function for finding the view-sequence node at the given position.
         */
        function _getViewSequenceAtIndex(index, startViewSequence) {
            if (this._viewSequence.getAtIndex) {
                return this._viewSequence.getAtIndex(index, startViewSequence);
            }
            var viewSequence = startViewSequence || this._viewSequence;
            var i = viewSequence ? viewSequence.getIndex() : index;
            if (index > i) {
                while (viewSequence) {
                    viewSequence = viewSequence.getNext();
                    if (!viewSequence) {
                        return undefined;
                    }
                    i = viewSequence.getIndex();
                    if (i === index) {
                        return viewSequence;
                    } else if (index < i) {
                        return undefined;
                    }
                }
            } else if (index < i) {
                while (viewSequence) {
                    viewSequence = viewSequence.getPrevious();
                    if (!viewSequence) {
                        return undefined;
                    }
                    i = viewSequence.getIndex();
                    if (i === index) {
                        return viewSequence;
                    } else if (index > i) {
                        return undefined;
                    }
                }
            }
            return viewSequence;
        }

        /**
         * Get the renderable at the given index or Id.
         *
         * @param {Number|String} indexOrId Index within dataSource array or id (String)
         * @return {Renderable} renderable or `undefined`
         */
        LayoutController.prototype.get = function (indexOrId) {
            if (this._nodesById || indexOrId instanceof String || typeof indexOrId === 'string') {
                return this._nodesById ? this._nodesById[indexOrId] : undefined;
            }
            var viewSequence = _getViewSequenceAtIndex.call(this, indexOrId);
            return viewSequence ? viewSequence.get() : undefined;
        };

        /**
         * Swaps two renderables at the given positions.
         *
         * This method is only supported for dataSources of type Array or LinkedListViewSequence.
         *
         * @param {Number} index Index of the renderable to swap
         * @param {Number} index2 Index of the renderable to swap with
         * @return {LayoutController} this
         */
        LayoutController.prototype.swap = function (index, index2) {
            this._viewSequence.swap(index, index2);
            this._isDirty = true;
            return this;
        };

        /**
         * Replaces a renderable at the given index or id.
         *
         * @param {Number|String} indexOrId Index within dataSource array or id (String)
         * @param {Renderable} renderable renderable to replace with
         * @param {Bool} [noAnimation] When set to `true`, replaces the renderable without any flowing animation.
         * @return {Renderable} old renderable that has been replaced
         */
        LayoutController.prototype.replace = function (indexOrId, renderable, noAnimation, sequence) {
            var oldRenderable;
            if (this._nodesById || indexOrId instanceof String || typeof indexOrId === 'string') {
                oldRenderable = this._nodesById[indexOrId];
                if (oldRenderable !== renderable) {
                    if (noAnimation && oldRenderable) {
                        var node = this._nodes.getNodeByRenderNode(oldRenderable);
                        if (node) {
                            node.setRenderNode(renderable);
                        }
                    }
                    this._nodesById[indexOrId] = renderable;
                    this._isDirty = true;
                }
                return oldRenderable;
            }
            if (!sequence) {
                sequence = this._viewSequence.findByIndex(indexOrId);
            }
            if (!sequence) {
                throw 'Invalid index (' + indexOrId + ') specified to .replace';
            }
            oldRenderable = sequence.get();
            sequence.set(renderable);
            if (oldRenderable !== renderable) {
                if (noAnimation && oldRenderable) {
                    var node = this._nodes.getNodeByRenderNode(oldRenderable);
                    if (node) {
                        node.setRenderNode(renderable);
                    }
                } else {
                    this._isDirty = true;
                }
            }
            return oldRenderable;
        };

        /**
         * Moves a renderable to a new index.
         *
         * This method is only supported for dataSources of type Array or LinkedListViewSequence.
         *
         * @param {Number} index Index of the renderable to move.
         * @param {Number} newIndex New index of the renderable.
         * @return {LayoutController} this
         */
        LayoutController.prototype.move = function (index, newIndex) {
            var sequence = this._viewSequence.findByIndex(index);
            if (!sequence) {
                throw 'Invalid index (' + index + ') specified to .move';
            }
            this._viewSequence = this._viewSequence.remove(sequence);
            this._viewSequence.insert(newIndex, sequence.get());
            this._isDirty = true;
            return this;
        };

        /**
         * Removes a renderable from the data-source.
         *
         * The optional argument `removeSpec` is only used `flow` mode is enabled.
         * When specified, the renderable is removed using an animation ending at
         * the size, origin, opacity, transform, etc... as specified in `removeSpec'.
         *
         * @param {Number|String|Renderable} indexOrId Index, id (String) or renderable to remove.
         * @param {Spec} [removeSpec] Size, transform, etc.. to end with when removing
         * @return {Renderable} renderable that has been removed
         */
        LayoutController.prototype.remove = function (indexOrId, removeSpec) {
            var renderNode;

            // Remove the renderable in case of an id (String)
            if (this._nodesById || indexOrId instanceof String || typeof indexOrId === 'string') {

                // Find and remove renderable from data-source
                if (indexOrId instanceof String || typeof indexOrId === 'string') {
                    renderNode = this._nodesById[indexOrId];
                    if (renderNode) {
                        delete this._nodesById[indexOrId];
                    }
                } else {
                    for (var key in this._nodesById) {
                        if (this._nodesById[key] === indexOrId) {
                            delete this._nodesById[key];
                            renderNode = indexOrId;
                            break;
                        }
                    }
                }
            } else {

                // Remove the renderable
                var sequence;
                if (indexOrId instanceof Number || typeof indexOrId === 'number') {
                    sequence = this._viewSequence.findByIndex(indexOrId);
                } else {
                    sequence = this._viewSequence.findByValue(indexOrId);
                }
                if (sequence) {
                    renderNode = sequence.get();
                    this._viewSequence = this._viewSequence.remove(sequence);
                }
            }

            // When a custom remove-spec was specified, store that in the layout-node
            if (renderNode && removeSpec) {
                var node = this._nodes.getNodeByRenderNode(renderNode);
                if (node) {
                    node.remove(removeSpec || this.options.flowOptions.removeSpec);
                }
            }

            // Force a reflow
            if (renderNode) {
                this._isDirty = true;
            }

            return renderNode;
        };

        /**
         * Removes all renderables from the data-source.
         *
         * The optional argument `removeSpec` is only used when `flow` mode is enabled.
         * When specified, the renderables are removed using an animation ending at
         * the size, origin, opacity, transform, etc... as specified in `removeSpec'.
         *
         * @param {Spec} [removeSpec] Size, transform, etc.. to end with when removing
         * @return {LayoutController} this
         */
        LayoutController.prototype.removeAll = function (removeSpec) {
            if (this._nodesById) {
                var dirty = false;
                for (var key in this._nodesById) {
                    delete this._nodesById[key];
                    dirty = true;
                }
                if (dirty) {
                    this._isDirty = true;
                }
            } else if (this._viewSequence) {
                this._viewSequence = this._viewSequence.clear();
            }
            if (removeSpec) {
                var node = this._nodes.getStartEnumNode();
                while (node) {
                    node.remove(removeSpec || this.options.flowOptions.removeSpec);
                    node = node._next;
                }
            }
            return this;
        };

        /**
         * Return size of contained element or `undefined` when size is not defined.
         *
         * @return {Array.Number} [width, height]
         */
        LayoutController.prototype.getSize = function () {
            return this._size || this.options.size;
        };

        /**
         * Generate a render spec from the contents of this component.
         *
         * @private
         * @method render
         * @return {Object} Render spec for this component
         */
        LayoutController.prototype.render = function render() {
            return this.id;
        };

        /**
         * Apply changes from this component to the corresponding document element.
         * This includes changes to classes, styles, size, content, opacity, origin,
         * and matrix transforms.
         *
         * @private
         * @method commit
         * @param {Context} context commit context
         */
        LayoutController.prototype.commit = function commit(context) {
            var transform = context.transform;
            var origin = context.origin;
            var size = context.size;
            var opacity = context.opacity;

            // Reset the flow-state when requested
            if (this._resetFlowState) {
                this._resetFlowState = false;
                this._isDirty = true;
                this._nodes.removeAll();
            }

            this._isDisplaying = true;

            // When the size or layout function has changed, reflow the layout
            if (size[0] !== this._contextSizeCache[0] || size[1] !== this._contextSizeCache[1] || this._isDirty || this._nodes._trueSizeRequested || this.options.alwaysLayout) {

                // Emit start event
                var eventData = {
                    target: this,
                    oldSize: this._contextSizeCache,
                    size: size,
                    dirty: this._isDirty,
                    trueSizeRequested: this._nodes._trueSizeRequested
                };
                this._eventOutput.emit('layoutstart', eventData);

                // When the layout has changed, and we are not just scrolling,
                // disable the locked state of the layout-nodes so that they
                // can freely transition between the old and new state.
                if (this.options.flow) {
                    var lock = false;
                    if (!this.options.flowOptions.reflowOnResize) {
                        if (!this._isDirty && (size[0] !== this._contextSizeCache[0] || size[1] !== this._contextSizeCache[1])) {
                            lock = undefined;
                        } else {
                            lock = true;
                        }
                    }
                    if (lock !== undefined) {
                        var node = this._nodes.getStartEnumNode();
                        while (node) {
                            if (node.releaseLock) {
                                node.releaseLock(lock);
                            }
                            node = node._next;
                        }
                    }
                }

                // Update state
                this._contextSizeCache[0] = size[0];
                this._contextSizeCache[1] = size[1];
                this._isDirty = false;

                // Prepare for layout
                var scrollEnd;
                if (this.options.size && this.options.size[this._direction] === true) {
                    scrollEnd = 1000000; // calculate scroll-length
                }
                var layoutContext = this._nodes.prepareForLayout(this._viewSequence, // first node to layout
                this._nodesById, { // so we can do fast id lookups
                    size: size,
                    direction: this._direction,
                    scrollEnd: scrollEnd
                });

                // Layout objects
                if (this._layout._function) {
                    this._layout._function(layoutContext, // context which the layout-function can use
                    this._layout.options // additional layout-options
                    );
                }

                // Mark non-invalidated nodes for removal
                this._nodes.removeNonInvalidatedNodes(this.options.flowOptions.removeSpec);

                // Cleanup any nodes in case of a VirtualViewSequence
                this._nodes.removeVirtualViewSequenceNodes();

                // Calculate scroll-length and use that as the true-size (height)
                if (scrollEnd) {
                    scrollEnd = 0;
                    node = this._nodes.getStartEnumNode();
                    while (node) {
                        if (node._invalidated && node.scrollLength) {
                            scrollEnd += node.scrollLength;
                        }
                        node = node._next;
                    }
                    this._size = this._size || [0, 0];
                    this._size[0] = this.options.size[0];
                    this._size[1] = this.options.size[1];
                    this._size[this._direction] = scrollEnd;
                }

                // Update output and optionally emit event
                var result = this._nodes.buildSpecAndDestroyUnrenderedNodes();
                this._specs = result.specs;
                this._commitOutput.target = result.specs;
                this._eventOutput.emit('layoutend', eventData);
                this._eventOutput.emit('reflow', {
                    target: this
                });
                this._lastResultUntouched = false;
            } else if (this.options.flow && !this._lastResultUntouched) {
                // Update output and optionally emit event
                result = this._nodes.buildSpecAndDestroyUnrenderedNodes();
                this._specs = result.specs;
                this._commitOutput.target = result.specs;
                if (result.modified) {
                    this._eventOutput.emit('reflow', {
                        target: this
                    });
                }
                this._lastResultUntouched = !result.modified;
            }

            // Render child-nodes every commit
            var target = this._commitOutput.target;
            for (var i = 0, j = target.length; i < j; i++) {
                if (target[i].renderNode) {
                    target[i].target = target[i].renderNode.render();
                }
            }

            // Add our cleanup-registration id also to the list, so that the
            // cleanup function is called by famo.us when the LayoutController is
            // removed from the render-tree.
            if (!target.length || target[target.length - 1] !== this._cleanupRegistration) {
                target.push(this._cleanupRegistration);
            }

            // Translate dependent on origin
            if (origin && (origin[0] !== 0 || origin[1] !== 0)) {
                transform = Transform.moveThen([-size[0] * origin[0], -size[1] * origin[1], 0], transform);
            }
            if (this.globalTransform) {
                transform = Transform.multiply(transform, this.globalTransform);
            }

            this._commitOutput.size = size;
            this._commitOutput.opacity = opacity;
            this._commitOutput.transform = transform;

            if (this.options.nativeScroll) {
                // Return the spec
                return {
                    transform: transform,
                    size: size,
                    opacity: opacity,
                    target: this.group.render()
                };
            }

            return this._commitOutput;
        };

        LayoutController.prototype._innerRender = function () {
            return this._commitOutput.target;
        };

        /**
        * Called whenever the layout-controller is removed from the render-tree.
        *
        * @private
        * @param {Context} context cleanup context
        */
        LayoutController.prototype.cleanup = function (context) {
            if (this.options.flow) {
                this._resetFlowState = true;
            }
            this._isDisplaying = false;
        };

        /**
         * Determine whether the item currently is being rendered by Famous
         * @returns {boolean} True if being rendered
         */
        LayoutController.prototype.isDisplaying = function () {
            return this._isDisplaying;
        };

        /**
         * Subscribes to the given event type exactly once; it automatically unsubscribes after the first time it is triggered.
         * @param {String} event One of the following Event Types: 'value', 'child_changed', 'child_moved', 'child_removed'.
         * @param {Function} handler Function that is called when the given event type is emitted.
         * @param {Object} context Optional: context of 'this' inside the handler function when it is called.
         */
        LayoutController.prototype.once = function (event, handler, context) {
            return this.on(event, function onceWrapper() {
                handler.apply(context, arguments);
                this.removeListener(event, onceWrapper);
            }, this);
        };

        module.exports = LayoutController;
    }).call($__exports, $__require, $__exports, $__module);
});
/**
 * This Source Code is licensed under the MIT license. If a copy of the
 * MIT-license was not distributed with this file, You can obtain one at:
 * http://opensource.org/licenses/mit-license.html.
 *
 * @author: Hein Rutjes (IjzerenHein)
 * @license MIT
 * @copyright Gloey Apps, 2014
 */

/**
 * LayoutContext is the interface for a layout-function to access
 * renderables in the data-source and set their size, position, tranformation, etc...
 *
 * The `next`, `prev` and `get` functions return an opaque object which represents
 * the renderable that is to be layed out. To access the actual renderable, use the
 * `.renderNode` property of this opaque object.
 *
 * @module
 */
$__System.registerDynamic("200", [], false, function ($__require, $__exports, $__module) {
  $__module.uri = $__module.id;
  return (function (require, exports, module) {

    /**
     * @class
     * @alias module:LayoutContext
     */
    function LayoutContext(methods) {
      for (var n in methods) {
        this[n] = methods[n];
      }
    }

    /**
     * {Property} Size in which to layout the renderables.
     */
    LayoutContext.prototype.size = undefined;

    /**
     * {Property} Direction in which to layout the renderables (0 = X, 1 = Y).
     */
    LayoutContext.prototype.direction = undefined;

    /**
     * {Property} {Number} Scrolling offset at which to start laying out next/prev renderables.
     */
    LayoutContext.prototype.scrollOffset = undefined;

    /**
     * {Property} {Number} Top/left boundary to which to layout renderables (default: 0).
     */
    LayoutContext.prototype.scrollStart = undefined;

    /**
     * {Property} {Number} Bottom/right boundary to which to continue laying out renderables.
     */
    LayoutContext.prototype.scrollEnd = undefined;

    /**
     * Get the context-node for the next renderable in the data-source. When
     * the end of the data-source is reached, `undefined` is returned.
     * Use this function to enumerate the contents of a data-source that is
     * either an Array or a ViewSequence.
     *
     * **Example:**
     *
     * ```javascript
     * function MyLayoutFunction(context, options) {
     *   var height = 0;
     *   var node = context.next(); // get first next node
     *   while (node) {
     *     context.set(node, {
     *       size: [context.size[0], 100],
     *       translate: [0, height, 0]
     *     });
     *     height += 100;
     *     node = context.next(); // get next node
     *   }
     * }
     * ```
     *
     * @return {Object} context-node or undefined
     */
    LayoutContext.prototype.next = function () {
      // dummy implementation, override in constructor
    };

    /**
     * Get the context-node for the previous renderable in the data-source. When
     * the start of the data-source is reached, `undefined` is returned.
     * Use this function to enumerate the contents of a data-source that is
     * either an Array or a ViewSequence.
     *
     * **Example:**
     *
     * ```javascript
     * function MyLayoutFunction(context, options) {
     *   var height = 0;
     *   var node = context.prev(); // get first previous
     *   while (node) {
     *     height -= 100;
     *     context.set(node, {
     *       size: [context.size[0], 100],
     *       translate: [0, height, 0]
     *     });
     *     node = context.prev(); // get prev node
     *   }
     * }
     * ```
     *
     * @return {Object} context-node or undefined
     */
    LayoutContext.prototype.prev = function () {
      // dummy implementation, override in constructor
    };

    /**
     * Get the context-node for a renderable with a specific id. This function
     * should be used to access data-sources which are key-value collections.
     * When a data-source is an Array or a ViewSequence, use `next()`.
     * In many cases it is not neccesary to use `get()`, instead you can pass
     * the id of the renderable straight to the `set` function.
     *
     * **Example:**
     *
     * ```javascript
     * var layoutController = new LayoutController({
     *   layout: function (context, options) {
     *     var size = context.size;
     *     var left = context.get('left');
     *     context.set(left, { size: [100, size[1]] });
     *
     *     var right = context.get('right');
     *     context.set(right, {
     *       size: [100, size[1]],
     *       translate: [size[1] - 100, 0, 0]
     *     });
     *
     *     var middle = context.get('middle');
     *     context.set(middle, {
     *       size: [size[0] - 200, size[1]],
     *       translate: [100, 0, 0]
     *     });
     *   },
     *   dataSource: {
     *     left: new Surface({content: 'left'}),
     *     right: new Surface({content: 'right'}),
     *     middle: new Surface({content: 'middle'})
     *   }
     * });
     * ```
     *
     * **Arrays:**
     *
     * A value at a specific id in the datasource can also be an array. To access the
     * context-nodes in the array use `get()` to get the array and the elements in the
     * array:
     *
     * ```javascript
     * var layoutController = new LayoutController({
     *   layout: function (context, options) {
     *     var size = context.size;
     *     var left = 0;
     *
     *     // Position title
     *     context.set('title', { size: [100, size[1]] });
     *     left += 100;
     *
     *     // Position left-items (array)
     *     var leftItems = context.get('leftItems');
     *     for (var i = 0; i < leftItems.length; i++) {
     *       var leftItem = context.get(leftItems[i]);
     *       context.set(leftItem, {
     *         size: [100, size[1]],
     *         translate: [left, 0, 0]
     *       });
     *       left += 100;
     *     }
     *   },
     *   dataSource: {
     *     title: new Surface({content: 'title'}),
     *     leftItems: [
     *       new Surface({content: 'item1'}),
     *       new Surface({content: 'item2'})
     *     ]
     *   }
     * });
     * ```
     *
     * @param {Object|String} node context-node or node-id
     * @return {Object} context-node or undefined
     */
    LayoutContext.prototype.get = function (node) {
      // dummy implementation, override in constructor
    };

    /**
     * Set the size, origin, align, translation, scale, rotate, skew & opacity for a context-node.
     *
     * **Overview of all supported properties:**
     *
     * ```javascript
     * function MyLayoutFunction(context, options) {
     *   context.set('mynode', {
     *     size: [100, 20],
     *     origin: [0.5, 0.5],
     *     align: [0.5, 0.5],
     *     translate: [50, 10, 0],
     *     scale: [1, 1, 1],
     *     skew: [0, 0, 0],
     *     rotate: [Math.PI, 0, 0],
     *     opacity: 1
     *   })
     * }
     * ```
     *
     * @param {Object|String} node context-node or node-id
     * @param {Object} set properties: size, origin, align, translate, scale, rotate, skew & opacity
     */
    LayoutContext.prototype.set = function (node, set) {
      // dummy implementation, override in constructor
    };

    /**
     * Resolve the size of a context-node by accessing the `getSize` function
     * of the renderable.
     *
     * **Example:**
     *
     * ```javascript
     * var layoutController = new LayoutController({
     *   layout: function (context, options) {
     *     var centerSize = context.resolveSize('center');
     *     context.set('center', {origin: [0.5, 0.5]});
     *     context.set('centerRight', {
     *       origin: [0.5, 0.5],
     *       translate: [centerSize[0] / 2, 0, 0]
     *     });
     *   },
     *   dataSource: {
     *     center: new Surface({content: 'center'}),
     *     centerRight: new Surface({content: 'centerRight'}),
     *   }
     * });
     * ```
     *
     * **When the size of the renderable is calculated by the DOM (`true` size)**
     *
     * When the layout-function performs its layout for the first time, it is
     * possible that the renderable has not yet been rendered and its size
     * is unknown. In this case, the LayoutController will cause a second
     * reflow of the layout the next render-cycle, ensuring that the renderables
     * are layed out as expected.
     *
     * @param {Object|String} node context-node, node-id or array-element
     * @return {Size} size of the node
     */
    LayoutContext.prototype.resolveSize = function (node) {
      // dummy implementation, override in constructor
    };

    module.exports = LayoutContext;
  }).call($__exports, $__require, $__exports, $__module);
});
$__System.registerDynamic('201', [], true, function ($__require, exports, module) {
	'use strict';

	var global = this || self,
	    GLOBAL = global;
	module.exports = function () {
		var map, iterator, result;
		if (typeof Map !== 'function') return false;
		try {
			// WebKit doesn't support arguments and crashes
			map = new Map([['raz', 'one'], ['dwa', 'two'], ['trzy', 'three']]);
		} catch (e) {
			return false;
		}
		if (String(map) !== '[object Map]') return false;
		if (map.size !== 3) return false;
		if (typeof map.clear !== 'function') return false;
		if (typeof map.delete !== 'function') return false;
		if (typeof map.entries !== 'function') return false;
		if (typeof map.forEach !== 'function') return false;
		if (typeof map.get !== 'function') return false;
		if (typeof map.has !== 'function') return false;
		if (typeof map.keys !== 'function') return false;
		if (typeof map.set !== 'function') return false;
		if (typeof map.values !== 'function') return false;

		iterator = map.entries();
		result = iterator.next();
		if (result.done !== false) return false;
		if (!result.value) return false;
		if (result.value[0] !== 'raz') return false;
		if (result.value[1] !== 'one') return false;

		return true;
	};
});
$__System.registerDynamic('202', ['e'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('e');
	var global = this || self,
	    GLOBAL = global;
	module.exports = function () {
		var sign = Math.sign;
		if (typeof sign !== 'function') return false;
		return sign(10) === 1 && sign(-20) === -1;
	};
});
$__System.registerDynamic('203', ['e'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('e');
	var global = this || self,
	    GLOBAL = global;
	module.exports = function (value) {
		value = Number(value);
		if (isNaN(value) || value === 0) return value;
		return value > 0 ? 1 : -1;
	};
});
$__System.registerDynamic('204', ['202', '203', 'e'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('e');
	var global = this || self,
	    GLOBAL = global;
	module.exports = $__require('202')() ? Math.sign : $__require('203');
});
$__System.registerDynamic('205', ['204', 'e'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('e');
	var global = this || self,
	    GLOBAL = global;
	var sign = $__require('204'),
	    abs = Math.abs,
	    floor = Math.floor;

	module.exports = function (value) {
		if (isNaN(value)) return 0;
		value = Number(value);
		if (value === 0 || !isFinite(value)) return value;
		return sign(value) * floor(abs(value));
	};
});
$__System.registerDynamic('206', ['205', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var toInteger = $__require('205'),
      max = Math.max;

  module.exports = function (value) {
    return max(0, toInteger(value));
  };
});
$__System.registerDynamic('207', ['206', '208', 'e'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('e');
	var global = this || self,
	    GLOBAL = global;
	var toPosInt = $__require('206'),
	    value = $__require('208'),
	    indexOf = Array.prototype.indexOf,
	    hasOwnProperty = Object.prototype.hasOwnProperty,
	    abs = Math.abs,
	    floor = Math.floor;

	module.exports = function (searchElement /*, fromIndex*/) {
		var i, l, fromIndex, val;
		if (searchElement === searchElement) {
			//jslint: ignore
			return indexOf.apply(this, arguments);
		}

		l = toPosInt(value(this).length);
		fromIndex = arguments[1];
		if (isNaN(fromIndex)) fromIndex = 0;else if (fromIndex >= 0) fromIndex = floor(fromIndex);else fromIndex = toPosInt(this.length) - floor(abs(fromIndex));

		for (i = fromIndex; i < l; ++i) {
			if (hasOwnProperty.call(this, i)) {
				val = this[i];
				if (val !== val) return i; //jslint: ignore
			}
		}
		return -1;
	};
});
$__System.registerDynamic('209', ['20a', '20b'], true, function ($__require, exports, module) {
	'use strict';

	var global = this || self,
	    GLOBAL = global;
	var d = $__require('20a'),
	    callable = $__require('20b'),
	    apply = Function.prototype.apply,
	    call = Function.prototype.call,
	    create = Object.create,
	    defineProperty = Object.defineProperty,
	    defineProperties = Object.defineProperties,
	    hasOwnProperty = Object.prototype.hasOwnProperty,
	    descriptor = { configurable: true, enumerable: false, writable: true },
	    on,
	    once,
	    off,
	    emit,
	    methods,
	    descriptors,
	    base;

	on = function (type, listener) {
		var data;

		callable(listener);

		if (!hasOwnProperty.call(this, '__ee__')) {
			data = descriptor.value = create(null);
			defineProperty(this, '__ee__', descriptor);
			descriptor.value = null;
		} else {
			data = this.__ee__;
		}
		if (!data[type]) data[type] = listener;else if (typeof data[type] === 'object') data[type].push(listener);else data[type] = [data[type], listener];

		return this;
	};

	once = function (type, listener) {
		var once, self;

		callable(listener);
		self = this;
		on.call(this, type, once = function () {
			off.call(self, type, once);
			apply.call(listener, this, arguments);
		});

		once.__eeOnceListener__ = listener;
		return this;
	};

	off = function (type, listener) {
		var data, listeners, candidate, i;

		callable(listener);

		if (!hasOwnProperty.call(this, '__ee__')) return this;
		data = this.__ee__;
		if (!data[type]) return this;
		listeners = data[type];

		if (typeof listeners === 'object') {
			for (i = 0; candidate = listeners[i]; ++i) {
				if (candidate === listener || candidate.__eeOnceListener__ === listener) {
					if (listeners.length === 2) data[type] = listeners[i ? 0 : 1];else listeners.splice(i, 1);
				}
			}
		} else {
			if (listeners === listener || listeners.__eeOnceListener__ === listener) {
				delete data[type];
			}
		}

		return this;
	};

	emit = function (type) {
		var i, l, listener, listeners, args;

		if (!hasOwnProperty.call(this, '__ee__')) return;
		listeners = this.__ee__[type];
		if (!listeners) return;

		if (typeof listeners === 'object') {
			l = arguments.length;
			args = new Array(l - 1);
			for (i = 1; i < l; ++i) args[i - 1] = arguments[i];

			listeners = listeners.slice();
			for (i = 0; listener = listeners[i]; ++i) {
				apply.call(listener, this, args);
			}
		} else {
			switch (arguments.length) {
				case 1:
					call.call(listeners, this);
					break;
				case 2:
					call.call(listeners, this, arguments[1]);
					break;
				case 3:
					call.call(listeners, this, arguments[1], arguments[2]);
					break;
				default:
					l = arguments.length;
					args = new Array(l - 1);
					for (i = 1; i < l; ++i) {
						args[i - 1] = arguments[i];
					}
					apply.call(listeners, this, args);
			}
		}
	};

	methods = {
		on: on,
		once: once,
		off: off,
		emit: emit
	};

	descriptors = {
		on: d(on),
		once: d(once),
		off: d(off),
		emit: d(emit)
	};

	base = defineProperties({}, descriptors);

	module.exports = exports = function (o) {
		return o == null ? create(base) : defineProperties(Object(o), descriptors);
	};
	exports.methods = methods;
});
$__System.registerDynamic('20c', ['20e', '20f', '20a', '20d'], true, function ($__require, exports, module) {
	'use strict';

	var global = this || self,
	    GLOBAL = global;
	var setPrototypeOf = $__require('20e'),
	    contains = $__require('20f'),
	    d = $__require('20a'),
	    Iterator = $__require('20d'),
	    defineProperty = Object.defineProperty,
	    ArrayIterator;

	ArrayIterator = module.exports = function (arr, kind) {
		if (!(this instanceof ArrayIterator)) return new ArrayIterator(arr, kind);
		Iterator.call(this, arr);
		if (!kind) kind = 'value';else if (contains.call(kind, 'key+value')) kind = 'key+value';else if (contains.call(kind, 'key')) kind = 'key';else kind = 'value';
		defineProperty(this, '__kind__', d('', kind));
	};
	if (setPrototypeOf) setPrototypeOf(ArrayIterator, Iterator);

	ArrayIterator.prototype = Object.create(Iterator.prototype, {
		constructor: d(ArrayIterator),
		_resolve: d(function (i) {
			if (this.__kind__ === 'value') return this.__list__[i];
			if (this.__kind__ === 'key+value') return [i, this.__list__[i]];
			return i;
		}),
		toString: d(function () {
			return '[object Array Iterator]';
		})
	});
});
$__System.registerDynamic('210', ['20e', '20a', '20d'], true, function ($__require, exports, module) {
	// Thanks @mathiasbynens
	// http://mathiasbynens.be/notes/javascript-unicode#iterating-over-symbols

	'use strict';

	var global = this || self,
	    GLOBAL = global;
	var setPrototypeOf = $__require('20e'),
	    d = $__require('20a'),
	    Iterator = $__require('20d'),
	    defineProperty = Object.defineProperty,
	    StringIterator;

	StringIterator = module.exports = function (str) {
		if (!(this instanceof StringIterator)) return new StringIterator(str);
		str = String(str);
		Iterator.call(this, str);
		defineProperty(this, '__length__', d('', str.length));
	};
	if (setPrototypeOf) setPrototypeOf(StringIterator, Iterator);

	StringIterator.prototype = Object.create(Iterator.prototype, {
		constructor: d(StringIterator),
		_next: d(function () {
			if (!this.__list__) return;
			if (this.__nextIndex__ < this.__length__) return this.__nextIndex__++;
			this._unBind();
		}),
		_resolve: d(function (i) {
			var char = this.__list__[i],
			    code;
			if (this.__nextIndex__ === this.__length__) return char;
			code = char.charCodeAt(0);
			if (code >= 0xD800 && code <= 0xDBFF) return char + this.__list__[this.__nextIndex__++];
			return char;
		}),
		toString: d(function () {
			return '[object String Iterator]';
		})
	});
});
$__System.registerDynamic('211', ['e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  var toString = Object.prototype.toString,
      id = toString.call(function () {
    return arguments;
  }());

  module.exports = function (x) {
    return toString.call(x) === id;
  };
});
$__System.registerDynamic('212', ['e'], true, function ($__require, exports, module) {
		'use strict';

		var process = $__require('e');
		var global = this || self,
		    GLOBAL = global;
		var toString = Object.prototype.toString,
		    id = toString.call('');

		module.exports = function (x) {
				return typeof x === 'string' || x && typeof x === 'object' && (x instanceof String || toString.call(x) === id) || false;
		};
});
$__System.registerDynamic('213', ['211', '212', '214'], true, function ($__require, exports, module) {
	'use strict';

	var global = this || self,
	    GLOBAL = global;
	var isArguments = $__require('211'),
	    isString = $__require('212'),
	    iteratorSymbol = $__require('214').iterator,
	    isArray = Array.isArray;

	module.exports = function (value) {
		if (value == null) return false;
		if (isArray(value)) return true;
		if (isString(value)) return true;
		if (isArguments(value)) return true;
		return typeof value[iteratorSymbol] === 'function';
	};
});
$__System.registerDynamic('215', ['213'], true, function ($__require, exports, module) {
	'use strict';

	var global = this || self,
	    GLOBAL = global;
	var isIterable = $__require('213');

	module.exports = function (value) {
		if (!isIterable(value)) throw new TypeError(value + " is not iterable");
		return value;
	};
});
$__System.registerDynamic('216', ['211', '212', '20c', '210', '215', '214'], true, function ($__require, exports, module) {
  'use strict';

  var global = this || self,
      GLOBAL = global;
  var isArguments = $__require('211'),
      isString = $__require('212'),
      ArrayIterator = $__require('20c'),
      StringIterator = $__require('210'),
      iterable = $__require('215'),
      iteratorSymbol = $__require('214').iterator;

  module.exports = function (obj) {
    if (typeof iterable(obj)[iteratorSymbol] === 'function') return obj[iteratorSymbol]();
    if (isArguments(obj)) return new ArrayIterator(obj);
    if (isString(obj)) return new StringIterator(obj);
    return new ArrayIterator(obj);
  };
});
$__System.registerDynamic('217', ['211', '20b', '212', '216'], true, function ($__require, exports, module) {
	'use strict';

	var global = this || self,
	    GLOBAL = global;
	var isArguments = $__require('211'),
	    callable = $__require('20b'),
	    isString = $__require('212'),
	    get = $__require('216'),
	    isArray = Array.isArray,
	    call = Function.prototype.call,
	    some = Array.prototype.some;

	module.exports = function (iterable, cb /*, thisArg*/) {
		var mode,
		    thisArg = arguments[2],
		    result,
		    doBreak,
		    broken,
		    i,
		    l,
		    char,
		    code;
		if (isArray(iterable) || isArguments(iterable)) mode = 'array';else if (isString(iterable)) mode = 'string';else iterable = get(iterable);

		callable(cb);
		doBreak = function () {
			broken = true;
		};
		if (mode === 'array') {
			some.call(iterable, function (value) {
				call.call(cb, thisArg, value, doBreak);
				if (broken) return true;
			});
			return;
		}
		if (mode === 'string') {
			l = iterable.length;
			for (i = 0; i < l; ++i) {
				char = iterable[i];
				if (i + 1 < l) {
					code = char.charCodeAt(0);
					if (code >= 0xD800 && code <= 0xDBFF) char += iterable[++i];
				}
				call.call(cb, thisArg, char, doBreak);
				if (broken) break;
			}
			return;
		}
		result = iterable.next();

		while (!result.done) {
			call.call(cb, thisArg, result.value, doBreak);
			if (broken) return;
			result = iterable.next();
		}
	};
});
$__System.registerDynamic('218', ['e'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('e');
	var global = this || self,
	    GLOBAL = global;
	var map = { function: true, object: true };

	module.exports = function (x) {
		return x != null && map[typeof x] || false;
	};
});
$__System.registerDynamic('219', ['e'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('e');
	var global = this || self,
	    GLOBAL = global;
	var create = Object.create,
	    getPrototypeOf = Object.getPrototypeOf,
	    x = {};

	module.exports = function () /*customCreate*/{
		var setPrototypeOf = Object.setPrototypeOf,
		    customCreate = arguments[0] || create;
		if (typeof setPrototypeOf !== 'function') return false;
		return getPrototypeOf(setPrototypeOf(customCreate(null), x)) === x;
	};
});
$__System.registerDynamic('21a', ['219', '21b', 'e'], true, function ($__require, exports, module) {
	// Workaround for http://code.google.com/p/v8/issues/detail?id=2804

	'use strict';

	var process = $__require('e');
	var global = this || self,
	    GLOBAL = global;
	var create = Object.create,
	    shim;

	if (!$__require('219')()) {
		shim = $__require('21b');
	}

	module.exports = function () {
		var nullObject, props, desc;
		if (!shim) return create;
		if (shim.level !== 1) return create;

		nullObject = {};
		props = {};
		desc = { configurable: false, enumerable: false, writable: true,
			value: undefined };
		Object.getOwnPropertyNames(Object.prototype).forEach(function (name) {
			if (name === '__proto__') {
				props[name] = { configurable: true, enumerable: false, writable: true,
					value: undefined };
				return;
			}
			props[name] = desc;
		});
		Object.defineProperties(nullObject, props);

		Object.defineProperty(shim, 'nullPolyfill', { configurable: false,
			enumerable: false, writable: false, value: nullObject });

		return function (prototype, props) {
			return create(prototype === null ? nullObject : prototype, props);
		};
	}();
});
$__System.registerDynamic('21b', ['218', '208', '21a', 'e'], true, function ($__require, exports, module) {
	// Big thanks to @WebReflection for sorting this out
	// https://gist.github.com/WebReflection/5593554

	'use strict';

	var process = $__require('e');
	var global = this || self,
	    GLOBAL = global;
	var isObject = $__require('218'),
	    value = $__require('208'),
	    isPrototypeOf = Object.prototype.isPrototypeOf,
	    defineProperty = Object.defineProperty,
	    nullDesc = { configurable: true, enumerable: false, writable: true,
		value: undefined },
	    validate;

	validate = function (obj, prototype) {
		value(obj);
		if (prototype === null || isObject(prototype)) return obj;
		throw new TypeError('Prototype must be null or an object');
	};

	module.exports = function (status) {
		var fn, set;
		if (!status) return null;
		if (status.level === 2) {
			if (status.set) {
				set = status.set;
				fn = function (obj, prototype) {
					set.call(validate(obj, prototype), prototype);
					return obj;
				};
			} else {
				fn = function (obj, prototype) {
					validate(obj, prototype).__proto__ = prototype;
					return obj;
				};
			}
		} else {
			fn = function self(obj, prototype) {
				var isNullBase;
				validate(obj, prototype);
				isNullBase = isPrototypeOf.call(self.nullPolyfill, obj);
				if (isNullBase) delete self.nullPolyfill.__proto__;
				if (prototype === null) prototype = self.nullPolyfill;
				obj.__proto__ = prototype;
				if (isNullBase) defineProperty(self.nullPolyfill, '__proto__', nullDesc);
				return obj;
			};
		}
		return Object.defineProperty(fn, 'level', { configurable: false,
			enumerable: false, writable: false, value: status.level });
	}(function () {
		var x = Object.create(null),
		    y = {},
		    set,
		    desc = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__');

		if (desc) {
			try {
				set = desc.set; // Opera crashes at this point
				set.call(x, y);
			} catch (ignore) {}
			if (Object.getPrototypeOf(x) === y) return { set: set, level: 2 };
		}

		x.__proto__ = y;
		if (Object.getPrototypeOf(x) === y) return { level: 2 };

		x = {};
		x.__proto__ = y;
		if (Object.getPrototypeOf(x) === y) return { level: 1 };

		return false;
	}());

	$__require('21a');
});
$__System.registerDynamic('20e', ['219', '21b', 'e'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('e');
	var global = this || self,
	    GLOBAL = global;
	module.exports = $__require('219')() ? Object.setPrototypeOf : $__require('21b');
});
$__System.registerDynamic('21c', ['208', 'e'], true, function ($__require, exports, module) {
	// Inspired by Google Closure:
	// http://closure-library.googlecode.com/svn/docs/
	// closure_goog_array_array.js.html#goog.array.clear

	'use strict';

	var process = $__require('e');
	var global = this || self,
	    GLOBAL = global;
	var value = $__require('208');

	module.exports = function () {
		value(this).length = 0;
		return this;
	};
});
$__System.registerDynamic('21d', ['21e', '208', 'e'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('e');
	var global = this || self,
	    GLOBAL = global;
	var assign = $__require('21e'),
	    value = $__require('208');

	module.exports = function (obj) {
		var copy = Object(value(obj));
		if (copy !== obj) return copy;
		return assign({}, obj);
	};
});
$__System.registerDynamic('21f', ['20b', '208', 'e'], true, function ($__require, exports, module) {
	// Internal method, used by iteration functions.
	// Calls a function for each key-value pair found in object
	// Optionally takes compareFn to iterate object in specific order

	'use strict';

	var process = $__require('e');
	var global = this || self,
	    GLOBAL = global;
	var callable = $__require('20b'),
	    value = $__require('208'),
	    bind = Function.prototype.bind,
	    call = Function.prototype.call,
	    keys = Object.keys,
	    propertyIsEnumerable = Object.prototype.propertyIsEnumerable;

	module.exports = function (method, defVal) {
		return function (obj, cb /*, thisArg, compareFn*/) {
			var list,
			    thisArg = arguments[2],
			    compareFn = arguments[3];
			obj = Object(value(obj));
			callable(cb);

			list = keys(obj);
			if (compareFn) {
				list.sort(typeof compareFn === 'function' ? bind.call(compareFn, obj) : undefined);
			}
			if (typeof method !== 'function') method = list[method];
			return call.call(method, list, function (key, index) {
				if (!propertyIsEnumerable.call(obj, key)) return defVal;
				return call.call(cb, thisArg, obj[key], key, obj, index);
			});
		};
	};
});
$__System.registerDynamic('220', ['21f', 'e'], true, function ($__require, exports, module) {
  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  module.exports = $__require('21f')('forEach');
});
$__System.registerDynamic('221', ['20b', '220', 'e'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('e');
	var global = this || self,
	    GLOBAL = global;
	var callable = $__require('20b'),
	    forEach = $__require('220'),
	    call = Function.prototype.call;

	module.exports = function (obj, cb /*, thisArg*/) {
		var o = {},
		    thisArg = arguments[2];
		callable(cb);
		forEach(obj, function (value, key, obj, index) {
			o[key] = call.call(cb, thisArg, value, key, obj, index);
		});
		return o;
	};
});
$__System.registerDynamic('20b', ['e'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('e');
	var global = this || self,
	    GLOBAL = global;
	module.exports = function (fn) {
		if (typeof fn !== 'function') throw new TypeError(fn + " is not a function");
		return fn;
	};
});
$__System.registerDynamic('222', ['21d', '221', '20b', '208'], true, function ($__require, exports, module) {
	'use strict';

	var global = this || self,
	    GLOBAL = global;
	var copy = $__require('21d'),
	    map = $__require('221'),
	    callable = $__require('20b'),
	    validValue = $__require('208'),
	    bind = Function.prototype.bind,
	    defineProperty = Object.defineProperty,
	    hasOwnProperty = Object.prototype.hasOwnProperty,
	    define;

	define = function (name, desc, bindTo) {
		var value = validValue(desc) && callable(desc.value),
		    dgs;
		dgs = copy(desc);
		delete dgs.writable;
		delete dgs.value;
		dgs.get = function () {
			if (hasOwnProperty.call(this, name)) return value;
			desc.value = bind.call(value, bindTo == null ? this : this[bindTo]);
			defineProperty(this, name, desc);
			return this[name];
		};
		return dgs;
	};

	module.exports = function (props /*, bindTo*/) {
		var bindTo = arguments[1];
		return map(props, function (desc, name) {
			return define(name, desc, bindTo);
		});
	};
});
$__System.registerDynamic('20d', ['21c', '21e', '20b', '208', '20a', '222', '214'], true, function ($__require, exports, module) {
	'use strict';

	var global = this || self,
	    GLOBAL = global;
	var clear = $__require('21c'),
	    assign = $__require('21e'),
	    callable = $__require('20b'),
	    value = $__require('208'),
	    d = $__require('20a'),
	    autoBind = $__require('222'),
	    Symbol = $__require('214'),
	    defineProperty = Object.defineProperty,
	    defineProperties = Object.defineProperties,
	    Iterator;

	module.exports = Iterator = function (list, context) {
		if (!(this instanceof Iterator)) return new Iterator(list, context);
		defineProperties(this, {
			__list__: d('w', value(list)),
			__context__: d('w', context),
			__nextIndex__: d('w', 0)
		});
		if (!context) return;
		callable(context.on);
		context.on('_add', this._onAdd);
		context.on('_delete', this._onDelete);
		context.on('_clear', this._onClear);
	};

	defineProperties(Iterator.prototype, assign({
		constructor: d(Iterator),
		_next: d(function () {
			var i;
			if (!this.__list__) return;
			if (this.__redo__) {
				i = this.__redo__.shift();
				if (i !== undefined) return i;
			}
			if (this.__nextIndex__ < this.__list__.length) return this.__nextIndex__++;
			this._unBind();
		}),
		next: d(function () {
			return this._createResult(this._next());
		}),
		_createResult: d(function (i) {
			if (i === undefined) return { done: true, value: undefined };
			return { done: false, value: this._resolve(i) };
		}),
		_resolve: d(function (i) {
			return this.__list__[i];
		}),
		_unBind: d(function () {
			this.__list__ = null;
			delete this.__redo__;
			if (!this.__context__) return;
			this.__context__.off('_add', this._onAdd);
			this.__context__.off('_delete', this._onDelete);
			this.__context__.off('_clear', this._onClear);
			this.__context__ = null;
		}),
		toString: d(function () {
			return '[object Iterator]';
		})
	}, autoBind({
		_onAdd: d(function (index) {
			if (index >= this.__nextIndex__) return;
			++this.__nextIndex__;
			if (!this.__redo__) {
				defineProperty(this, '__redo__', d('c', [index]));
				return;
			}
			this.__redo__.forEach(function (redo, i) {
				if (redo >= index) this.__redo__[i] = ++redo;
			}, this);
			this.__redo__.push(index);
		}),
		_onDelete: d(function (index) {
			var i;
			if (index >= this.__nextIndex__) return;
			--this.__nextIndex__;
			if (!this.__redo__) return;
			i = this.__redo__.indexOf(index);
			if (i !== -1) this.__redo__.splice(i, 1);
			this.__redo__.forEach(function (redo, i) {
				if (redo > index) this.__redo__[i] = --redo;
			}, this);
		}),
		_onClear: d(function () {
			if (this.__redo__) clear.call(this.__redo__);
			this.__nextIndex__ = 0;
		})
	})));

	defineProperty(Iterator.prototype, Symbol.iterator, d(function () {
		return this;
	}));
	defineProperty(Iterator.prototype, Symbol.toStringTag, d('', 'Iterator'));
});
$__System.registerDynamic('223', [], true, function ($__require, exports, module) {
	'use strict';

	var global = this || self,
	    GLOBAL = global;
	var validTypes = { object: true, symbol: true };

	module.exports = function () {
		var symbol;
		if (typeof Symbol !== 'function') return false;
		symbol = Symbol('test symbol');
		try {
			String(symbol);
		} catch (e) {
			return false;
		}

		// Return 'true' also for polyfills
		if (!validTypes[typeof Symbol.iterator]) return false;
		if (!validTypes[typeof Symbol.toPrimitive]) return false;
		if (!validTypes[typeof Symbol.toStringTag]) return false;

		return true;
	};
});
$__System.registerDynamic('224', ['e'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('e');
	var global = this || self,
	    GLOBAL = global;
	module.exports = function () {
		var assign = Object.assign,
		    obj;
		if (typeof assign !== 'function') return false;
		obj = { foo: 'raz' };
		assign(obj, { bar: 'dwa' }, { trzy: 'trzy' });
		return obj.foo + obj.bar + obj.trzy === 'razdwatrzy';
	};
});
$__System.registerDynamic('225', ['e'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('e');
	var global = this || self,
	    GLOBAL = global;
	module.exports = function () {
		try {
			Object.keys('primitive');
			return true;
		} catch (e) {
			return false;
		}
	};
});
$__System.registerDynamic('226', ['e'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('e');
	var global = this || self,
	    GLOBAL = global;
	var keys = Object.keys;

	module.exports = function (object) {
		return keys(object == null ? object : Object(object));
	};
});
$__System.registerDynamic('227', ['225', '226', 'e'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('e');
	var global = this || self,
	    GLOBAL = global;
	module.exports = $__require('225')() ? Object.keys : $__require('226');
});
$__System.registerDynamic("208", ["e"], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require("e");
	var global = this || self,
	    GLOBAL = global;
	module.exports = function (value) {
		if (value == null) throw new TypeError("Cannot use null or undefined");
		return value;
	};
});
$__System.registerDynamic('228', ['227', '208', 'e'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('e');
	var global = this || self,
	    GLOBAL = global;
	var keys = $__require('227'),
	    value = $__require('208'),
	    max = Math.max;

	module.exports = function (dest, src /*, …srcn*/) {
		var error,
		    i,
		    l = max(arguments.length, 2),
		    assign;
		dest = Object(value(dest));
		assign = function (key) {
			try {
				dest[key] = src[key];
			} catch (e) {
				if (!error) error = e;
			}
		};
		for (i = 1; i < l; ++i) {
			src = arguments[i];
			keys(src).forEach(assign);
		}
		if (error !== undefined) throw error;
		return dest;
	};
});
$__System.registerDynamic('21e', ['224', '228', 'e'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('e');
	var global = this || self,
	    GLOBAL = global;
	module.exports = $__require('224')() ? Object.assign : $__require('228');
});
$__System.registerDynamic('229', ['e'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('e');
	var global = this || self,
	    GLOBAL = global;
	var forEach = Array.prototype.forEach,
	    create = Object.create;

	var process = function (src, obj) {
		var key;
		for (key in src) obj[key] = src[key];
	};

	module.exports = function (options /*, …options*/) {
		var result = create(null);
		forEach.call(arguments, function (options) {
			if (options == null) return;
			process(Object(options), result);
		});
		return result;
	};
});
$__System.registerDynamic('22a', ['e'], true, function ($__require, exports, module) {
  // Deprecated

  'use strict';

  var process = $__require('e');
  var global = this || self,
      GLOBAL = global;
  module.exports = function (obj) {
    return typeof obj === 'function';
  };
});
$__System.registerDynamic('22b', ['e'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('e');
	var global = this || self,
	    GLOBAL = global;
	var str = 'razdwatrzy';

	module.exports = function () {
		if (typeof str.contains !== 'function') return false;
		return str.contains('dwa') === true && str.contains('foo') === false;
	};
});
$__System.registerDynamic('22c', ['e'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('e');
	var global = this || self,
	    GLOBAL = global;
	var indexOf = String.prototype.indexOf;

	module.exports = function (searchString /*, position*/) {
		return indexOf.call(this, searchString, arguments[1]) > -1;
	};
});
$__System.registerDynamic('20f', ['22b', '22c', 'e'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('e');
	var global = this || self,
	    GLOBAL = global;
	module.exports = $__require('22b')() ? String.prototype.contains : $__require('22c');
});
$__System.registerDynamic('20a', ['21e', '229', '22a', '20f'], true, function ($__require, exports, module) {
	'use strict';

	var global = this || self,
	    GLOBAL = global;
	var assign = $__require('21e'),
	    normalizeOpts = $__require('229'),
	    isCallable = $__require('22a'),
	    contains = $__require('20f'),
	    d;

	d = module.exports = function (dscr, value /*, options*/) {
		var c, e, w, options, desc;
		if (arguments.length < 2 || typeof dscr !== 'string') {
			options = value;
			value = dscr;
			dscr = null;
		} else {
			options = arguments[2];
		}
		if (dscr == null) {
			c = w = true;
			e = false;
		} else {
			c = contains.call(dscr, 'c');
			e = contains.call(dscr, 'e');
			w = contains.call(dscr, 'w');
		}

		desc = { value: value, configurable: c, enumerable: e, writable: w };
		return !options ? desc : assign(normalizeOpts(options), desc);
	};

	d.gs = function (dscr, get, set /*, options*/) {
		var c, e, options, desc;
		if (typeof dscr !== 'string') {
			options = set;
			set = get;
			get = dscr;
			dscr = null;
		} else {
			options = arguments[3];
		}
		if (get == null) {
			get = undefined;
		} else if (!isCallable(get)) {
			options = get;
			get = set = undefined;
		} else if (set == null) {
			set = undefined;
		} else if (!isCallable(set)) {
			options = set;
			set = undefined;
		}
		if (dscr == null) {
			c = true;
			e = false;
		} else {
			c = contains.call(dscr, 'c');
			e = contains.call(dscr, 'e');
		}

		desc = { get: get, set: set, configurable: c, enumerable: e };
		return !options ? desc : assign(normalizeOpts(options), desc);
	};
});
$__System.registerDynamic('22d', [], true, function ($__require, exports, module) {
	'use strict';

	var global = this || self,
	    GLOBAL = global;
	module.exports = function (x) {
		if (!x) return false;
		if (typeof x === 'symbol') return true;
		if (!x.constructor) return false;
		if (x.constructor.name !== 'Symbol') return false;
		return x[x.constructor.toStringTag] === 'Symbol';
	};
});
$__System.registerDynamic('22e', ['22d'], true, function ($__require, exports, module) {
	'use strict';

	var global = this || self,
	    GLOBAL = global;
	var isSymbol = $__require('22d');

	module.exports = function (value) {
		if (!isSymbol(value)) throw new TypeError(value + " is not a symbol");
		return value;
	};
});
$__System.registerDynamic('22f', ['20a', '22e'], true, function ($__require, exports, module) {
	// ES2015 Symbol polyfill for environments that do not support it (or partially support it)

	'use strict';

	var global = this || self,
	    GLOBAL = global;
	var d = $__require('20a'),
	    validateSymbol = $__require('22e'),
	    create = Object.create,
	    defineProperties = Object.defineProperties,
	    defineProperty = Object.defineProperty,
	    objPrototype = Object.prototype,
	    NativeSymbol,
	    SymbolPolyfill,
	    HiddenSymbol,
	    globalSymbols = create(null),
	    isNativeSafe;

	if (typeof Symbol === 'function') {
		NativeSymbol = Symbol;
		try {
			String(NativeSymbol());
			isNativeSafe = true;
		} catch (ignore) {}
	}

	var generateName = function () {
		var created = create(null);
		return function (desc) {
			var postfix = 0,
			    name,
			    ie11BugWorkaround;
			while (created[desc + (postfix || '')]) ++postfix;
			desc += postfix || '';
			created[desc] = true;
			name = '@@' + desc;
			defineProperty(objPrototype, name, d.gs(null, function (value) {
				// For IE11 issue see:
				// https://connect.microsoft.com/IE/feedbackdetail/view/1928508/
				//    ie11-broken-getters-on-dom-objects
				// https://github.com/medikoo/es6-symbol/issues/12
				if (ie11BugWorkaround) return;
				ie11BugWorkaround = true;
				defineProperty(this, name, d(value));
				ie11BugWorkaround = false;
			}));
			return name;
		};
	}();

	// Internal constructor (not one exposed) for creating Symbol instances.
	// This one is used to ensure that `someSymbol instanceof Symbol` always return false
	HiddenSymbol = function Symbol(description) {
		if (this instanceof HiddenSymbol) throw new TypeError('TypeError: Symbol is not a constructor');
		return SymbolPolyfill(description);
	};

	// Exposed `Symbol` constructor
	// (returns instances of HiddenSymbol)
	module.exports = SymbolPolyfill = function Symbol(description) {
		var symbol;
		if (this instanceof Symbol) throw new TypeError('TypeError: Symbol is not a constructor');
		if (isNativeSafe) return NativeSymbol(description);
		symbol = create(HiddenSymbol.prototype);
		description = description === undefined ? '' : String(description);
		return defineProperties(symbol, {
			__description__: d('', description),
			__name__: d('', generateName(description))
		});
	};
	defineProperties(SymbolPolyfill, {
		for: d(function (key) {
			if (globalSymbols[key]) return globalSymbols[key];
			return globalSymbols[key] = SymbolPolyfill(String(key));
		}),
		keyFor: d(function (s) {
			var key;
			validateSymbol(s);
			for (key in globalSymbols) if (globalSymbols[key] === s) return key;
		}),

		// If there's native implementation of given symbol, let's fallback to it
		// to ensure proper interoperability with other native functions e.g. Array.from
		hasInstance: d('', NativeSymbol && NativeSymbol.hasInstance || SymbolPolyfill('hasInstance')),
		isConcatSpreadable: d('', NativeSymbol && NativeSymbol.isConcatSpreadable || SymbolPolyfill('isConcatSpreadable')),
		iterator: d('', NativeSymbol && NativeSymbol.iterator || SymbolPolyfill('iterator')),
		match: d('', NativeSymbol && NativeSymbol.match || SymbolPolyfill('match')),
		replace: d('', NativeSymbol && NativeSymbol.replace || SymbolPolyfill('replace')),
		search: d('', NativeSymbol && NativeSymbol.search || SymbolPolyfill('search')),
		species: d('', NativeSymbol && NativeSymbol.species || SymbolPolyfill('species')),
		split: d('', NativeSymbol && NativeSymbol.split || SymbolPolyfill('split')),
		toPrimitive: d('', NativeSymbol && NativeSymbol.toPrimitive || SymbolPolyfill('toPrimitive')),
		toStringTag: d('', NativeSymbol && NativeSymbol.toStringTag || SymbolPolyfill('toStringTag')),
		unscopables: d('', NativeSymbol && NativeSymbol.unscopables || SymbolPolyfill('unscopables'))
	});

	// Internal tweaks for real symbol producer
	defineProperties(HiddenSymbol.prototype, {
		constructor: d(SymbolPolyfill),
		toString: d('', function () {
			return this.__name__;
		})
	});

	// Proper implementation of methods exposed on Symbol.prototype
	// They won't be accessible on produced symbol instances as they derive from HiddenSymbol.prototype
	defineProperties(SymbolPolyfill.prototype, {
		toString: d(function () {
			return 'Symbol (' + validateSymbol(this).__description__ + ')';
		}),
		valueOf: d(function () {
			return validateSymbol(this);
		})
	});
	defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toPrimitive, d('', function () {
		var symbol = validateSymbol(this);
		if (typeof symbol === 'symbol') return symbol;
		return symbol.toString();
	}));
	defineProperty(SymbolPolyfill.prototype, SymbolPolyfill.toStringTag, d('c', 'Symbol'));

	// Proper implementaton of toPrimitive and toStringTag for returned symbol instances
	defineProperty(HiddenSymbol.prototype, SymbolPolyfill.toStringTag, d('c', SymbolPolyfill.prototype[SymbolPolyfill.toStringTag]));

	// Note: It's important to define `toPrimitive` as last one, as some implementations
	// implement `toPrimitive` natively without implementing `toStringTag` (or other specified symbols)
	// And that may invoke error in definition flow:
	// See: https://github.com/medikoo/es6-symbol/issues/13#issuecomment-164146149
	defineProperty(HiddenSymbol.prototype, SymbolPolyfill.toPrimitive, d('c', SymbolPolyfill.prototype[SymbolPolyfill.toPrimitive]));
});
$__System.registerDynamic('214', ['223', '22f'], true, function ($__require, exports, module) {
  'use strict';

  var global = this || self,
      GLOBAL = global;
  module.exports = $__require('223')() ? Symbol : $__require('22f');
});
$__System.registerDynamic("@system-env", [], true, function() {
  return {
    "default": true
  };
});

$__System.registerDynamic('e', ['@system-env'], true, function ($__require, exports, module) {
    var global = this || self,
        GLOBAL = global;
    // From https://github.com/defunctzombie/node-process/blob/master/browser.js
    // shim for using process in browser

    var productionEnv = $__require('@system-env').production;

    var process = module.exports = {};
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;

    function cleanUpNextTick() {
        draining = false;
        if (currentQueue.length) {
            queue = currentQueue.concat(queue);
        } else {
            queueIndex = -1;
        }
        if (queue.length) {
            drainQueue();
        }
    }

    function drainQueue() {
        if (draining) {
            return;
        }
        var timeout = setTimeout(cleanUpNextTick);
        draining = true;

        var len = queue.length;
        while (len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
                if (currentQueue) {
                    currentQueue[queueIndex].run();
                }
            }
            queueIndex = -1;
            len = queue.length;
        }
        currentQueue = null;
        draining = false;
        clearTimeout(timeout);
    }

    process.nextTick = function (fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i];
            }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
            setTimeout(drainQueue, 0);
        }
    };

    // v8 likes predictible objects
    function Item(fun, array) {
        this.fun = fun;
        this.array = array;
    }
    Item.prototype.run = function () {
        this.fun.apply(null, this.array);
    };
    process.title = 'browser';
    process.browser = true;
    process.env = {
        NODE_ENV: productionEnv ? 'production' : 'development'
    };
    process.argv = [];
    process.version = ''; // empty string to avoid regexp issues
    process.versions = {};

    function noop() {}

    process.on = noop;
    process.addListener = noop;
    process.once = noop;
    process.off = noop;
    process.removeListener = noop;
    process.removeAllListeners = noop;
    process.emit = noop;

    process.binding = function (name) {
        throw new Error('process.binding is not supported');
    };

    process.cwd = function () {
        return '/';
    };
    process.chdir = function (dir) {
        throw new Error('process.chdir is not supported');
    };
    process.umask = function () {
        return 0;
    };
});
$__System.registerDynamic('230', ['e'], true, function ($__require, exports, module) {
	'use strict';

	var process = $__require('e');
	var global = this || self,
	    GLOBAL = global;
	var forEach = Array.prototype.forEach,
	    create = Object.create;

	module.exports = function (arg /*, …args*/) {
		var set = create(null);
		forEach.call(arguments, function (name) {
			set[name] = true;
		});
		return set;
	};
});
$__System.registerDynamic('231', ['230'], true, function ($__require, exports, module) {
	'use strict';

	var global = this || self,
	    GLOBAL = global;
	module.exports = $__require('230')('key', 'value', 'key+value');
});
$__System.registerDynamic('232', ['20e', '20a', '20d', '214', '231'], true, function ($__require, exports, module) {
	'use strict';

	var global = this || self,
	    GLOBAL = global;
	var setPrototypeOf = $__require('20e'),
	    d = $__require('20a'),
	    Iterator = $__require('20d'),
	    toStringTagSymbol = $__require('214').toStringTag,
	    kinds = $__require('231'),
	    defineProperties = Object.defineProperties,
	    unBind = Iterator.prototype._unBind,
	    MapIterator;

	MapIterator = module.exports = function (map, kind) {
		if (!(this instanceof MapIterator)) return new MapIterator(map, kind);
		Iterator.call(this, map.__mapKeysData__, map);
		if (!kind || !kinds[kind]) kind = 'key+value';
		defineProperties(this, {
			__kind__: d('', kind),
			__values__: d('w', map.__mapValuesData__)
		});
	};
	if (setPrototypeOf) setPrototypeOf(MapIterator, Iterator);

	MapIterator.prototype = Object.create(Iterator.prototype, {
		constructor: d(MapIterator),
		_resolve: d(function (i) {
			if (this.__kind__ === 'value') return this.__values__[i];
			if (this.__kind__ === 'key') return this.__list__[i];
			return [this.__list__[i], this.__values__[i]];
		}),
		_unBind: d(function () {
			this.__values__ = null;
			unBind.call(this);
		}),
		toString: d(function () {
			return '[object Map Iterator]';
		})
	});
	Object.defineProperty(MapIterator.prototype, toStringTagSymbol, d('c', 'Map Iterator'));
});
$__System.registerDynamic('233', [], true, function ($__require, exports, module) {
	// Exports true if environment provides native `Map` implementation,
	// whatever that is.

	'use strict';

	var global = this || self,
	    GLOBAL = global;
	module.exports = function () {
		if (typeof Map === 'undefined') return false;
		return Object.prototype.toString.call(new Map()) === '[object Map]';
	}();
});
$__System.registerDynamic('234', ['21c', '207', '20e', '20b', '208', '20a', '209', '214', '215', '217', '232', '233'], true, function ($__require, exports, module) {
	'use strict';

	var global = this || self,
	    GLOBAL = global;
	var clear = $__require('21c'),
	    eIndexOf = $__require('207'),
	    setPrototypeOf = $__require('20e'),
	    callable = $__require('20b'),
	    validValue = $__require('208'),
	    d = $__require('20a'),
	    ee = $__require('209'),
	    Symbol = $__require('214'),
	    iterator = $__require('215'),
	    forOf = $__require('217'),
	    Iterator = $__require('232'),
	    isNative = $__require('233'),
	    call = Function.prototype.call,
	    defineProperties = Object.defineProperties,
	    getPrototypeOf = Object.getPrototypeOf,
	    MapPoly;

	module.exports = MapPoly = function () /*iterable*/{
		var iterable = arguments[0],
		    keys,
		    values,
		    self;
		if (!(this instanceof MapPoly)) throw new TypeError('Constructor requires \'new\'');
		if (isNative && setPrototypeOf && Map !== MapPoly) {
			self = setPrototypeOf(new Map(), getPrototypeOf(this));
		} else {
			self = this;
		}
		if (iterable != null) iterator(iterable);
		defineProperties(self, {
			__mapKeysData__: d('c', keys = []),
			__mapValuesData__: d('c', values = [])
		});
		if (!iterable) return self;
		forOf(iterable, function (value) {
			var key = validValue(value)[0];
			value = value[1];
			if (eIndexOf.call(keys, key) !== -1) return;
			keys.push(key);
			values.push(value);
		}, self);
		return self;
	};

	if (isNative) {
		if (setPrototypeOf) setPrototypeOf(MapPoly, Map);
		MapPoly.prototype = Object.create(Map.prototype, {
			constructor: d(MapPoly)
		});
	}

	ee(defineProperties(MapPoly.prototype, {
		clear: d(function () {
			if (!this.__mapKeysData__.length) return;
			clear.call(this.__mapKeysData__);
			clear.call(this.__mapValuesData__);
			this.emit('_clear');
		}),
		delete: d(function (key) {
			var index = eIndexOf.call(this.__mapKeysData__, key);
			if (index === -1) return false;
			this.__mapKeysData__.splice(index, 1);
			this.__mapValuesData__.splice(index, 1);
			this.emit('_delete', index, key);
			return true;
		}),
		entries: d(function () {
			return new Iterator(this, 'key+value');
		}),
		forEach: d(function (cb /*, thisArg*/) {
			var thisArg = arguments[1],
			    iterator,
			    result;
			callable(cb);
			iterator = this.entries();
			result = iterator._next();
			while (result !== undefined) {
				call.call(cb, thisArg, this.__mapValuesData__[result], this.__mapKeysData__[result], this);
				result = iterator._next();
			}
		}),
		get: d(function (key) {
			var index = eIndexOf.call(this.__mapKeysData__, key);
			if (index === -1) return;
			return this.__mapValuesData__[index];
		}),
		has: d(function (key) {
			return eIndexOf.call(this.__mapKeysData__, key) !== -1;
		}),
		keys: d(function () {
			return new Iterator(this, 'key');
		}),
		set: d(function (key, value) {
			var index = eIndexOf.call(this.__mapKeysData__, key),
			    emit;
			if (index === -1) {
				index = this.__mapKeysData__.push(key) - 1;
				emit = true;
			}
			this.__mapValuesData__[index] = value;
			if (emit) this.emit('_add', index, key);
			return this;
		}),
		size: d.gs(function () {
			return this.__mapKeysData__.length;
		}),
		values: d(function () {
			return new Iterator(this, 'value');
		}),
		toString: d(function () {
			return '[object Map]';
		})
	}));
	Object.defineProperty(MapPoly.prototype, Symbol.iterator, d(function () {
		return this.entries();
	}));
	Object.defineProperty(MapPoly.prototype, Symbol.toStringTag, d('c', 'Map'));
});
$__System.registerDynamic('235', ['201', '234'], true, function ($__require, exports, module) {
  'use strict';

  var global = this || self,
      GLOBAL = global;
  module.exports = $__require('201')() ? Map : $__require('234');
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: david@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */

$__System.registerDynamic("171", [], false, function ($__require, $__exports, $__module) {
    $__module.uri = $__module.id;
    return (function (require, exports, module) {

        /**
         * A library of curves which map an animation explicitly as a function of time.
         *
         * @class Easing
         */
        var Easing = {

            /**
             * @property inQuad
             * @static
             */
            inQuad: function (t) {
                return t * t;
            },

            /**
             * @property outQuad
             * @static
             */
            outQuad: function (t) {
                return -(t -= 1) * t + 1;
            },

            /**
             * @property inOutQuad
             * @static
             */
            inOutQuad: function (t) {
                if ((t /= .5) < 1) return .5 * t * t;
                return -.5 * (--t * (t - 2) - 1);
            },

            /**
             * @property inCubic
             * @static
             */
            inCubic: function (t) {
                return t * t * t;
            },

            /**
             * @property outCubic
             * @static
             */
            outCubic: function (t) {
                return --t * t * t + 1;
            },

            /**
             * @property inOutCubic
             * @static
             */
            inOutCubic: function (t) {
                if ((t /= .5) < 1) return .5 * t * t * t;
                return .5 * ((t -= 2) * t * t + 2);
            },

            /**
             * @property inQuart
             * @static
             */
            inQuart: function (t) {
                return t * t * t * t;
            },

            /**
             * @property outQuart
             * @static
             */
            outQuart: function (t) {
                return -(--t * t * t * t - 1);
            },

            /**
             * @property inOutQuart
             * @static
             */
            inOutQuart: function (t) {
                if ((t /= .5) < 1) return .5 * t * t * t * t;
                return -.5 * ((t -= 2) * t * t * t - 2);
            },

            /**
             * @property inQuint
             * @static
             */
            inQuint: function (t) {
                return t * t * t * t * t;
            },

            /**
             * @property outQuint
             * @static
             */
            outQuint: function (t) {
                return --t * t * t * t * t + 1;
            },

            /**
             * @property inOutQuint
             * @static
             */
            inOutQuint: function (t) {
                if ((t /= .5) < 1) return .5 * t * t * t * t * t;
                return .5 * ((t -= 2) * t * t * t * t + 2);
            },

            /**
             * @property inSine
             * @static
             */
            inSine: function (t) {
                return -1.0 * Math.cos(t * (Math.PI / 2)) + 1.0;
            },

            /**
             * @property outSine
             * @static
             */
            outSine: function (t) {
                return Math.sin(t * (Math.PI / 2));
            },

            /**
             * @property inOutSine
             * @static
             */
            inOutSine: function (t) {
                return -.5 * (Math.cos(Math.PI * t) - 1);
            },

            /**
             * @property inExpo
             * @static
             */
            inExpo: function (t) {
                return t === 0 ? 0.0 : Math.pow(2, 10 * (t - 1));
            },

            /**
             * @property outExpo
             * @static
             */
            outExpo: function (t) {
                return t === 1.0 ? 1.0 : -Math.pow(2, -10 * t) + 1;
            },

            /**
             * @property inOutExpo
             * @static
             */
            inOutExpo: function (t) {
                if (t === 0) return 0.0;
                if (t === 1.0) return 1.0;
                if ((t /= .5) < 1) return .5 * Math.pow(2, 10 * (t - 1));
                return .5 * (-Math.pow(2, -10 * --t) + 2);
            },

            /**
             * @property inCirc
             * @static
             */
            inCirc: function (t) {
                return -(Math.sqrt(1 - t * t) - 1);
            },

            /**
             * @property outCirc
             * @static
             */
            outCirc: function (t) {
                return Math.sqrt(1 - --t * t);
            },

            /**
             * @property inOutCirc
             * @static
             */
            inOutCirc: function (t) {
                if ((t /= .5) < 1) return -.5 * (Math.sqrt(1 - t * t) - 1);
                return .5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
            },

            /**
             * @property inElastic
             * @static
             */
            inElastic: function (t) {
                var s = 1.70158;var p = 0;var a = 1.0;
                if (t === 0) return 0.0;if (t === 1) return 1.0;if (!p) p = .3;
                s = p / (2 * Math.PI) * Math.asin(1.0 / a);
                return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
            },

            /**
             * @property outElastic
             * @static
             */
            outElastic: function (t) {
                var s = 1.70158;var p = 0;var a = 1.0;
                if (t === 0) return 0.0;if (t === 1) return 1.0;if (!p) p = .3;
                s = p / (2 * Math.PI) * Math.asin(1.0 / a);
                return a * Math.pow(2, -10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) + 1.0;
            },

            /**
             * @property inOutElastic
             * @static
             */
            inOutElastic: function (t) {
                var s = 1.70158;var p = 0;var a = 1.0;
                if (t === 0) return 0.0;if ((t /= .5) === 2) return 1.0;if (!p) p = .3 * 1.5;
                s = p / (2 * Math.PI) * Math.asin(1.0 / a);
                if (t < 1) return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
                return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p) * .5 + 1.0;
            },

            /**
             * @property inBack
             * @static
             */
            inBack: function (t, s) {
                if (s === undefined) s = 1.70158;
                return t * t * ((s + 1) * t - s);
            },

            /**
             * @property outBack
             * @static
             */
            outBack: function (t, s) {
                if (s === undefined) s = 1.70158;
                return --t * t * ((s + 1) * t + s) + 1;
            },

            /**
             * @property inOutBack
             * @static
             */
            inOutBack: function (t, s) {
                if (s === undefined) s = 1.70158;
                if ((t /= .5) < 1) return .5 * (t * t * (((s *= 1.525) + 1) * t - s));
                return .5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);
            },

            /**
             * @property inBounce
             * @static
             */
            inBounce: function (t) {
                return 1.0 - Easing.outBounce(1.0 - t);
            },

            /**
             * @property outBounce
             * @static
             */
            outBounce: function (t) {
                if (t < 1 / 2.75) {
                    return 7.5625 * t * t;
                } else if (t < 2 / 2.75) {
                    return 7.5625 * (t -= 1.5 / 2.75) * t + .75;
                } else if (t < 2.5 / 2.75) {
                    return 7.5625 * (t -= 2.25 / 2.75) * t + .9375;
                } else {
                    return 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
                }
            },

            /**
             * @property inOutBounce
             * @static
             */
            inOutBounce: function (t) {
                if (t < .5) return Easing.inBounce(t * 2) * .5;
                return Easing.outBounce(t * 2 - 1.0) * .5 + .5;
            }
        };

        module.exports = Easing;
    }).call($__exports, $__require, $__exports, $__module);
});
/**
 * This Source Code is licensed under the MIT license. If a copy of the
 * MIT-license was not distributed with this file, You can obtain one at:
 * http://opensource.org/licenses/mit-license.html.
 *
 * @author: Hein Rutjes (IjzerenHein)
 * @license MIT
 * @copyright Gloey Apps, 2014 - 2015
 */

/**
 * Internal LayoutNode class used by `LayoutNodeManager`.
 *
 * @module
 */
$__System.registerDynamic('1ff', ['195', '169', '236', '237', '238', '239', '1fe', '16a', '171'], false, function ($__require, $__exports, $__module) {
    $__module.uri = $__module.id;
    return (function (require, exports, module) {

        // import dependencies
        var OptionsManager = require('195');
        var Transform = require('169');
        var Vector = require('236');
        var Particle = require('237');
        var Spring = require('238');
        var PhysicsEngine = require('239');
        var LayoutNode = require('1fe');
        var Transitionable = require('16a');
        var Easing = require('171');

        /**
         * @class
         * @extends LayoutNode
         * @param {Object} renderNode Render-node which this layout-node represents
         * @param {Spec} spec Initial state
         * @param {Object} physicsEngines physics-engines to use
         * @alias module:FlowLayoutNode
         */
        function FlowLayoutNode(renderNode, spec) {

            LayoutNode.apply(this, arguments);

            /* Recreating the objects because constructor can be called twice */

            if (!this.options) {
                this.options = Object.create(this.constructor.DEFAULT_OPTIONS);
                this._optionsManager = new OptionsManager(this.options);
            }

            if (!this._pe) {
                this._pe = new PhysicsEngine();
                this._pe.on('end', function () {
                    if (!this._shouldDoSingleTween) {
                        this._completeFlowCallback({ reason: 'flowEnd' });
                    }
                }.bind(this));
                this._pe.sleep();
            }

            if (!this._properties) {
                this._properties = {};
            } else {
                for (var propName in this._properties) {
                    this._properties[propName].init = false;
                }
            }

            if (!this._lockTransitionable) {
                this._lockTransitionable = new Transitionable(1);
            } else {
                this._lockTransitionable.halt();
                this._lockTransitionable.reset(1);
            }
            this._specModified = true;

            if (spec) {
                this.setInsertSpec(spec);
            }
            this._initial = true;
            this._spec.endState = {};

            /* Assume non-existance by default */
            this._exists = false;
        }
        FlowLayoutNode.prototype = Object.create(LayoutNode.prototype);
        FlowLayoutNode.prototype.constructor = FlowLayoutNode;

        FlowLayoutNode.DEFAULT_OPTIONS = {
            spring: {
                dampingRatio: 0.8,
                period: 300
            },
            properties: {
                opacity: true,
                align: true,
                origin: true,
                size: true,
                translate: true,
                skew: true,
                rotate: true,
                scale: true
            },
            particleRounding: 0.001
        };

        /**
         * Defaults
         */
        var DEFAULT = {
            opacity: 1,
            opacity2D: [1, 0],
            size: [0, 0],
            origin: [0, 0],
            align: [0, 0],
            scale: [1, 1, 1],
            translate: [0, 0, 0],
            rotate: [0, 0, 0],
            skew: [0, 0, 0]
        };
        /**
         * Sets the configuration options
         */
        FlowLayoutNode.prototype.setOptions = function (options) {
            this._optionsManager.setOptions(options);
            var wasSleeping = this._pe.isSleeping();
            for (var propName in this._properties) {
                var prop = this._properties[propName];
                if (options.spring && prop.force) {
                    prop.force.setOptions(this.options.spring);
                }
                if (options.properties && options.properties[propName] !== undefined) {
                    if (this.options.properties[propName].length) {
                        prop.enabled = this.options.properties[propName];
                    } else {
                        prop.enabled = [this.options.properties[propName], this.options.properties[propName], this.options.properties[propName]];
                    }
                }
            }
            if (wasSleeping) {
                this._pe.sleep();
            }
            return this;
        };

        /**
         * Set the properties from a spec.
         */
        FlowLayoutNode.prototype.setInsertSpec = function (spec) {
            this._latentInsertSpec = spec;
        };

        /**
         * Set the properties from a spec.
         */
        FlowLayoutNode.prototype.executeInsertSpec = function () {
            this._insertSpec = this._latentInsertSpec;
        };

        /**
         * Reset the end-state. This function is called on all layout-nodes prior to
         * calling the layout-function. So that the layout-function starts with a clean slate.
         */
        FlowLayoutNode.prototype.reset = function () {
            if (this._invalidated) {
                for (var propName in this._properties) {
                    this._properties[propName].invalidated = false;
                }
                this._invalidated = false;
            }
            this.trueSizeRequested = false;
            this.usesTrueSize = false;
        };

        /**
         * Markes the node for removal.
         */
        FlowLayoutNode.prototype.remove = function (removeSpec) {

            // Transition to the remove-spec state
            this._removing = true;
            if (removeSpec) {
                this.setInsertSpec(removeSpec);
            } else {
                this._pe.sleep();
                this._specModified = false;
            }

            // Mark for removal
            this._invalidated = false;
        };

        /**
         * Temporarily releases the flowing-lock that is applied to the node.
         * E.g., when changing position, resizing, the lock should be released so that
         * the renderables can smoothly transition to their new positions.
         */
        FlowLayoutNode.prototype.releaseLock = function (enable, options, callback) {
            if (!this._singleTween) {
                if (!options) {
                    options = {
                        duration: this.options.spring.period || 1000
                    };
                }
                this._releaseLock = { enable: enable, options: options, callback: callback };
            }
        };

        /**
         * Helper function for getting the property value.
         */
        function _getRoundedValue3D(prop, def, precision, lockValue) {
            if (!prop || !prop.init) {
                return def;
            }
            return [prop.enabled[0] ? Math.round((prop.curState.x + (prop.endState.x - prop.curState.x) * lockValue) / precision) * precision : prop.endState.x, prop.enabled[1] ? Math.round((prop.curState.y + (prop.endState.y - prop.curState.y) * lockValue) / precision) * precision : prop.endState.y, prop.enabled[2] ? Math.round((prop.curState.z + (prop.endState.z - prop.curState.z) * lockValue) / precision) * precision : prop.endState.z];
        }

        /**
         * Creates the render-spec
         */
        FlowLayoutNode.prototype.getSpec = function () {

            if (this._releaseLock) {
                var enable = this._releaseLock.enable;
                var options = this._releaseLock.options;
                var callback = this._releaseLock.callback;
                this._lockTransitionable.halt();
                this._lockTransitionable.reset(0);
                if (enable) {
                    this._lockTransitionable.set(1, options, callback);
                }
                this._releaseLock = undefined;
            }

            if (this._insertSpec) {
                var insertSpec = this._insertSpec;
                this._insertSpec = undefined;
                var oldExists = this._exists;
                var oldRemoving = this._removing;
                var oldInvalidated = this._invalidated;
                this.set(insertSpec);
                this._exists = oldExists;
                this._removing = oldRemoving;
                this._invalidated = oldInvalidated;
            }

            if (!this._exists) {
                this._spec.removed = true;
                return this._spec;
            }

            // When the end state was reached, return the previous spec
            var endStateReached = this._pe.isSleeping() && !this._singleTween;
            if (!this._specModified && endStateReached) {
                this._spec.removed = !this._invalidated;
                return this._spec;
            }
            this._initial = false;
            this._specModified = !endStateReached;
            this._spec.removed = false;

            // Step physics engine when not sleeping
            if (!endStateReached && !this._singleTween) {
                this._pe.step();
            }

            // Build fresh spec
            var spec = this._spec;
            var precision = this.options.particleRounding;
            var lockValue = this._lockTransitionable.get();

            // opacity
            var prop = this._properties.opacity;
            if (prop && prop.init) {
                // spec.opacity = prop.enabled[0] ? (Math.round(Math.max(0, Math.min(1, prop.curState.x)) / precision) * precision) : prop.endState.x;
                spec.opacity = prop.enabled[0] ? Math.max(0, Math.min(1, Math.round((prop.curState.x + (prop.endState.x - prop.curState.x) * lockValue) / precision) * precision)) : prop.endState.x;
                spec.endState.opacity = prop.endState.x;
            } else {
                spec.opacity = undefined;
                spec.endState.opacity = undefined;
            }

            // size
            prop = this._properties.size;
            if (prop && prop.init) {
                spec.size = spec.size || [0, 0];
                spec.size[0] = prop.enabled[0] ? Math.round((prop.curState.x + (prop.endState.x - prop.curState.x) * lockValue) / 0.1) * 0.1 : prop.endState.x;
                spec.size[1] = prop.enabled[1] ? Math.round((prop.curState.y + (prop.endState.y - prop.curState.y) * lockValue) / 0.1) * 0.1 : prop.endState.y;
                spec.endState.size = spec.endState.size || [0, 0];
                spec.endState.size[0] = prop.endState.x;
                spec.endState.size[1] = prop.endState.y;
            } else {
                spec.size = undefined;
                spec.endState.size = undefined;
            }

            // align
            prop = this._properties.align;
            if (prop && prop.init) {
                spec.align = spec.align || [0, 0];
                spec.align[0] = prop.enabled[0] ? Math.round((prop.curState.x + (prop.endState.x - prop.curState.x) * lockValue) / 0.0001) * 0.0001 : prop.endState.x;
                spec.align[1] = prop.enabled[1] ? Math.round((prop.curState.y + (prop.endState.y - prop.curState.y) * lockValue) / 0.0001) * 0.0001 : prop.endState.y;
                spec.endState.align = spec.endState.align || [0, 0];
                spec.endState.align[0] = prop.endState.x;
                spec.endState.align[1] = prop.endState.y;
            } else {
                spec.align = undefined;
                spec.endState.align = undefined;
            }

            // origin
            prop = this._properties.origin;
            if (prop && prop.init) {
                spec.origin = spec.origin || [0, 0];
                spec.origin[0] = prop.enabled[0] ? Math.round((prop.curState.x + (prop.endState.x - prop.curState.x) * lockValue) / 0.0001) * 0.0001 : prop.endState.x;
                spec.origin[1] = prop.enabled[1] ? Math.round((prop.curState.y + (prop.endState.y - prop.curState.y) * lockValue) / 0.0001) * 0.0001 : prop.endState.y;
                spec.endState.origin = spec.endState.origin || [0, 0];
                spec.endState.origin[0] = prop.endState.x;
                spec.endState.origin[1] = prop.endState.y;
            } else {
                spec.origin = undefined;
                spec.endState.origin = undefined;
            }

            // translate
            var translate = this._properties.translate;
            var translateX;
            var translateY;
            var translateZ;
            if (translate && translate.init) {
                translateX = translate.enabled[0] ? Math.round((translate.curState.x + (translate.endState.x - translate.curState.x) * lockValue) / precision) * precision : translate.endState.x;
                translateY = translate.enabled[1] ? Math.round((translate.curState.y + (translate.endState.y - translate.curState.y) * lockValue) / precision) * precision : translate.endState.y;
                translateZ = translate.enabled[2] ? Math.round((translate.curState.z + (translate.endState.z - translate.curState.z) * lockValue) / precision) * precision : translate.endState.z;
            } else {
                translateX = 0;
                translateY = 0;
                translateZ = 0;
            }

            // scale, skew, scale
            var scale = this._properties.scale;
            var skew = this._properties.skew;
            var rotate = this._properties.rotate;
            if (scale || skew || rotate) {
                spec.transform = Transform.build({
                    translate: [translateX, translateY, translateZ],
                    skew: _getRoundedValue3D.call(this, skew, DEFAULT.skew, this.options.particleRounding, lockValue),
                    scale: _getRoundedValue3D.call(this, scale, DEFAULT.scale, this.options.particleRounding, lockValue),
                    rotate: _getRoundedValue3D.call(this, rotate, DEFAULT.rotate, this.options.particleRounding, lockValue)
                });
                spec.endState.transform = Transform.build({
                    translate: translate ? [translate.endState.x, translate.endState.y, translate.endState.z] : DEFAULT.translate,
                    scale: scale ? [scale.endState.x, scale.endState.y, scale.endState.z] : DEFAULT.scale,
                    skew: skew ? [skew.endState.x, skew.endState.y, skew.endState.z] : DEFAULT.skew,
                    rotate: rotate ? [rotate.endState.x, rotate.endState.y, rotate.endState.z] : DEFAULT.rotate
                });
            } else if (translate) {
                if (!spec.transform) {
                    spec.transform = Transform.translate(translateX, translateY, translateZ);
                } else {
                    spec.transform[12] = translateX;
                    spec.transform[13] = translateY;
                    spec.transform[14] = translateZ;
                }
                if (!spec.endState.transform) {
                    spec.endState.transform = Transform.translate(translate.endState.x, translate.endState.y, translate.endState.z);
                } else {
                    spec.endState.transform[12] = translate.endState.x;
                    spec.endState.transform[13] = translate.endState.y;
                    spec.endState.transform[14] = translate.endState.z;
                }
            } else {
                spec.transform = undefined;
                spec.endState.transform = undefined;
            }
            return this._spec;
        };

        /**
         * Helper function to set the property of a node (e.g. opacity, translate, etc..)
         */
        function _setPropertyValue(prop, propName, endState, defaultValue, transition) {
            //TODO: See if we can remove this
            var immediate = false;
            // Get property
            prop = prop || this._properties[propName];

            // Update the property
            if (prop && prop.init) {
                prop.invalidated = true;
                var value = defaultValue;
                if (endState !== undefined) {
                    value = endState;
                } else if (this._removing) {
                    value = prop.particle.getPosition();
                }
                // set new end state (the quick way)
                var newPropsAreDifferent = !_approxEqual3d(value, prop.endState);

                // If we reached an end state and we shouldn't go to another state
                if (this._pe.isSleeping() && !this._singleTween && newPropsAreDifferent && !this._disableSingleTween && transition) {
                    _assignVectorFromArray(prop.endState, value);
                    this._shouldDoSingleTween = true;
                } else {
                    if (immediate) {
                        // set current state (the quick way)
                        prop.curState.x = prop.endState.x;
                        prop.curState.y = prop.endState.y;
                        prop.curState.z = prop.endState.z;
                        // reset velocity (the quick way)
                        prop.velocity.x = 0;
                        prop.velocity.y = 0;
                        prop.velocity.z = 0;
                    } else if (newPropsAreDifferent) {
                        this._shouldDoSingleTween = false;
                        if (this._singleTween) {
                            if (!this._disableSingleTween) {
                                this._disableSingleTween = {};
                            }
                            this._disableSingleTween[propName] = true;
                            this.interruptPropertyTween(propName);
                        }
                        _assignVectorFromArray(prop.endState, value);

                        this._pe.wake();
                    }
                }
            } else {
                /* Only do single tween if there's a transition specified */
                this._shouldDoSingleTween = !!transition;
                // Create property if neccesary
                var wasSleeping = this._pe.isSleeping();
                if (!prop) {
                    prop = {
                        particle: new Particle({
                            position: this._initial || immediate ? endState : defaultValue
                        }),
                        endState: new Vector(endState)
                    };

                    prop.curState = prop.particle.position;

                    prop.velocity = prop.particle.velocity;
                    prop.force = new Spring(this.options.spring);
                    prop.force.setOptions({
                        anchor: prop.endState
                    });
                    this._pe.addBody(prop.particle);
                    prop.forceId = this._pe.attach(prop.force, prop.particle);
                    this._properties[propName] = prop;
                } else {
                    prop.particle.setPosition(this._initial || immediate ? endState : defaultValue);
                    prop.endState.set(endState);
                }
                if (!this._initial && !immediate) {
                    if (wasSleeping && transition && !this._singleTween) {
                        this._shouldDoSingleTween = true;
                        this._pe.sleep();
                    } else {
                        this._pe.wake();
                    }
                } else if (wasSleeping) {
                    this._pe.sleep(); // nothing has changed, put back to sleep
                }
                if (this.options.properties[propName] && this.options.properties[propName].length) {
                    prop.enabled = this.options.properties[propName];
                } else {
                    prop.enabled = [this.options.properties[propName], this.options.properties[propName], this.options.properties[propName]];
                }
                prop.init = true;
                prop.invalidated = true;
            }
        }

        /**
         * Get value if not equals.
         */
        function _getIfNE2D(a1, a2) {
            return a1[0] === a2[0] && a1[1] === a2[1] ? undefined : a1;
        }

        function _getIfNE3D(a1, a2) {
            return a1[0] === a2[0] && a1[1] === a2[1] && a1[2] === a2[2] ? undefined : a1;
        }

        function _approxEqual3d(array, vector) {
            return ['x', 'y', 'z'].every(function (dimension, index) {
                return array.length <= index || array[index] === true || Math.abs(array[index] - vector[dimension]) < 0.01;
            });
        }
        function _assignVectorFromArray(vector, array) {
            vector.x = array[0] === true ? vector.x : array[0];
            vector.y = array.length > 1 ? array[1] === true ? vector.y : array[1] : 0;
            vector.z = array.length > 2 ? array[2] : 0;
        }

        /**
         * context.set(..)
         */
        FlowLayoutNode.prototype.set = function (set, defaultSize) {
            /* If an insert spec is specified, we assume removed (non-existing) by default */
            this._exists = true;

            if (defaultSize) {
                this._removing = false;
            }
            this._invalidated = true;
            this.scrollLength = set.scrollLength;
            this._specModified = true;

            // opacity
            var prop = this._properties.opacity;
            var value = set.opacity !== undefined ? set.opacity : 1;
            if (this._insertSpec && this._insertSpec.opacity !== undefined) {
                _setPropertyValue.call(this, prop, 'opacity', [this._insertSpec.opacity * value, 0], DEFAULT.opacity2D, set.transition);
            }
            _setPropertyValue.call(this, prop, 'opacity', [value, 0], DEFAULT.opacity2D, set.transition);

            // set align
            prop = this._properties.align;
            value = set.align ? _getIfNE2D(set.align, DEFAULT.align) : undefined;
            if (this._insertSpec && this._insertSpec.align) {
                var initial = this._insertSpec.align;
                _setPropertyValue.call(this, prop, 'align', initial, DEFAULT.align, set.transition);
            }
            if (value || prop && prop.init) {
                _setPropertyValue.call(this, prop, 'align', value, DEFAULT.align, set.transition);
            }

            // set orgin
            prop = this._properties.origin;
            value = set.origin ? _getIfNE2D(set.origin, DEFAULT.origin) : undefined;
            if (this._insertSpec && this._insertSpec.origin) {
                var initial = this._insertSpec.origin;
                _setPropertyValue.call(this, prop, 'origin', initial, DEFAULT.origin, set.transition);
            }
            if (value || prop && prop.init) {
                _setPropertyValue.call(this, prop, 'origin', value, DEFAULT.origin, set.transition);
            }

            // set size
            if (this._insertSpec && this._insertSpec.size) {
                var initial = this._insertSpec.size;
                _setPropertyValue.call(this, prop, 'size', initial, defaultSize, set.transition);
            }
            prop = this._properties.size;
            value = set.size || defaultSize;
            if (value || prop && prop.init) {
                _setPropertyValue.call(this, prop, 'size', value, defaultSize, set.transition);
            }

            // set translate
            prop = this._properties.translate;
            value = set.translate;
            if (value || prop && prop.init) {
                if (this._insertSpec && this._insertSpec.translate) {
                    var initial = this._insertSpec.translate;
                    _setPropertyValue.call(this, prop, 'translate', [0, 1, 2].map(function (index) {
                        return initial[index] + value[index];
                    }), DEFAULT.translate, undefined, true);
                }
                _setPropertyValue.call(this, prop, 'translate', value, DEFAULT.translate, set.transition);
            }

            // set scale
            prop = this._properties.scale;
            value = set.scale ? _getIfNE3D(set.scale, DEFAULT.scale) : undefined;
            if (this._insertSpec && this._insertSpec.scale) {
                var initial = this._insertSpec.scale;
                _setPropertyValue.call(this, prop, 'scale', initial, DEFAULT.scale, set.transition);
            }
            if (value !== undefined || prop && prop.init) {
                _setPropertyValue.call(this, prop, 'scale', value, DEFAULT.scale, set.transition);
            }

            // set rotate
            prop = this._properties.rotate;
            value = set.rotate ? _getIfNE3D(set.rotate, DEFAULT.rotate) : undefined;
            if (this._insertSpec && this._insertSpec.rotate) {
                var initial = this._insertSpec.rotate;
                _setPropertyValue.call(this, prop, 'rotate', initial, DEFAULT.rotate, set.transition);
            }

            if (value !== undefined || prop && prop.init) {
                _setPropertyValue.call(this, prop, 'rotate', value, DEFAULT.rotate, set.transition);
            }

            // set skew
            prop = this._properties.skew;
            value = set.skew ? _getIfNE3D(set.skew, DEFAULT.skew) : undefined;
            if (this._insertSpec && this._insertSpec.skew) {
                var initial = this._insertSpec.skew;
                _setPropertyValue.call(this, prop, 'skew', initial, DEFAULT.skew, set.transition);
            }
            if (value !== undefined || prop && prop.init) {
                _setPropertyValue.call(this, prop, 'skew', value, DEFAULT.skew, set.transition);
            }

            if (set.callback) {
                if (this._currentCallback && this._currentCallback !== set.callback) {
                    /* Interrupt */
                    this._currentCallback({ reason: 'flowInterrupted' });
                }
                this._currentCallback = set.callback;
            }

            if (this._shouldDoSingleTween) {
                var givenTransformation = typeof set.transition === 'function' ? set : set.transition;
                /* Reset variable */
                this._shouldDoSingleTween = false;
                this._singleTweenProperties = givenTransformation || { curve: function linear(x) {
                        return x;
                    }, duration: 1000 };
                this.releaseLock(true, this._singleTweenProperties, function () {
                    if (this._singleTween) {
                        this._singleTween = false;
                        for (var propName in this._properties) {
                            var prop = this._properties[propName];
                            if (prop && prop.init) {
                                prop.curState.x = prop.endState.x;
                                prop.curState.y = prop.endState.y;
                                prop.curState.z = prop.endState.z;
                            }
                        }
                        this._completeFlowCallback({ reason: 'flowEnd' });
                    }
                }.bind(this));
                this._singleTween = true;
            } else if (this._disableSingleTween) {
                /* This will have FlowLayoutNode.set() called again the next render tick, at which point _shouldDoSingleTween will have been set to true again. */
                this._singleTween = false;
                for (var otherPropName in this._properties) {
                    if (!(otherPropName in this._disableSingleTween)) {
                        this.interruptPropertyTween(otherPropName);
                    }
                }
                this._disableSingleTween = false;

                this.releaseLock();
            } else if (this._pe.isSleeping() && !this._singleTween) {
                /* The props of the renderable have not changed, yet it was reflown. No tweening will be performed. */
                this._completeFlowCallback({ reason: 'flowSkipped' });
            }

            this._insertSpec = undefined;
        };

        FlowLayoutNode.prototype.interruptPropertyTween = function (propertyName) {
            var lockVar = this._lockTransitionable.get();
            //Complex code for calculating the velocity of the current ongoing animation
            var velocity = this._lockTransitionable.velocity;
            var curve = this._singleTweenProperties.curve || function linear(x) {
                return x;
            };
            var duration = this._singleTweenProperties.duration;
            var epsilon = 1e-7;
            var curveDelta = (curve(lockVar) - curve(lockVar - epsilon)) / epsilon;
            var adjustedProp = this._properties[propertyName];
            ['x', 'y', 'z'].forEach(function (dimension) {
                var distanceToTravel = adjustedProp.endState[dimension] - adjustedProp.curState[dimension];
                var distanceTraveled = distanceToTravel * lockVar;
                if (!duration) {
                    adjustedProp.curState[dimension] = adjustedProp.endState[dimension];
                } else {
                    adjustedProp.velocity[dimension] = -1 * curveDelta * (adjustedProp.curState[dimension] - adjustedProp.endState[dimension]) / duration;
                    adjustedProp.curState[dimension] = adjustedProp.curState[dimension] + distanceTraveled || 0;
                }
            });
        };

        FlowLayoutNode.prototype._completeFlowCallback = function (options) {
            if (this._currentCallback) {
                this._currentCallback(options);
                delete this._currentCallback;
            }
        };

        module.exports = FlowLayoutNode;
    }).call($__exports, $__require, $__exports, $__module);
});
/**
 * This Source Code is licensed under the MIT license. If a copy of the
 * MIT-license was not distributed with this file, You can obtain one at:
 * http://opensource.org/licenses/mit-license.html.
 *
 * @author: Hein Rutjes (IjzerenHein)
 * @license MIT
 * @copyright Gloey Apps, 2014
 */

/**
 * Internal LayoutNode class used by `LayoutController`.
 *
 * @module
 */
$__System.registerDynamic('1fe', ['169', '1fa'], false, function ($__require, $__exports, $__module) {
    $__module.uri = $__module.id;
    return (function (require, exports, module) {

        // import dependencies
        var Transform = require('169');
        var LayoutUtility = require('1fa');

        /**
         * @class
         * @param {Object} renderNode Render-node which this layout-node represents
         * @alias module:LayoutNode
         */
        function LayoutNode(renderNode, spec) {
            this.renderNode = renderNode;
            this._spec = spec ? LayoutUtility.cloneSpec(spec) : {};
            this._spec.renderNode = renderNode; // also store in spec
            this._specModified = true;
            this._invalidated = false;
            this._removing = false;
            //this.scrollLength = undefined;
            //this.trueSizeRequested = false;
        }

        /**
         * Called to update the underlying render-node
         */
        LayoutNode.prototype.setRenderNode = function (renderNode) {
            this.renderNode = renderNode;
            this._spec.renderNode = renderNode;
        };

        /**
         * Called to update the options for the node
         */
        LayoutNode.prototype.setOptions = function (options) {
            // override to implement
        };

        /**
         * Called when the node is destroyed
         */
        LayoutNode.prototype.destroy = function () {
            this.renderNode = undefined;
            this._spec.renderNode = undefined;
            this._viewSequence = undefined;
        };

        /**
         * Reset the end-state. This function is called on all layout-nodes prior to
         * calling the layout-function. So that the layout-function starts with a clean slate.
         */
        LayoutNode.prototype.reset = function () {
            this._invalidated = false;
            this.trueSizeRequested = false;
        };

        /**
         * Set the spec of the node
         *
         * @param {Object} spec
         */
        LayoutNode.prototype.setSpec = function (spec) {
            this._specModified = true;
            if (spec.align) {
                if (!spec.align) {
                    this._spec.align = [0, 0];
                }
                this._spec.align[0] = spec.align[0];
                this._spec.align[1] = spec.align[1];
            } else {
                this._spec.align = undefined;
            }
            if (spec.origin) {
                if (!spec.origin) {
                    this._spec.origin = [0, 0];
                }
                this._spec.origin[0] = spec.origin[0];
                this._spec.origin[1] = spec.origin[1];
            } else {
                this._spec.origin = undefined;
            }
            if (spec.size) {
                if (!spec.size) {
                    this._spec.size = [0, 0];
                }
                this._spec.size[0] = spec.size[0];
                this._spec.size[1] = spec.size[1];
            } else {
                this._spec.size = undefined;
            }
            if (spec.transform) {
                if (!spec.transform) {
                    this._spec.transform = spec.transform.slice(0);
                } else {
                    for (var i = 0; i < 16; i++) {
                        this._spec.transform[i] = spec.transform[i];
                    }
                }
            } else {
                this._spec.transform = undefined;
            }
            this._spec.opacity = spec.opacity;
        };

        /**
         * Set the content of the node
         *
         * @param {Object} set
         */
        LayoutNode.prototype.set = function (set, size) {
            this._invalidated = true;
            this._specModified = true;
            this._removing = false;
            var spec = this._spec;
            spec.opacity = set.opacity;
            if (set.size) {
                if (!spec.size) {
                    spec.size = [0, 0];
                }
                spec.size[0] = set.size[0];
                spec.size[1] = set.size[1];
            } else {
                spec.size = undefined;
            }
            if (set.origin) {
                if (!spec.origin) {
                    spec.origin = [0, 0];
                }
                spec.origin[0] = set.origin[0];
                spec.origin[1] = set.origin[1];
            } else {
                spec.origin = undefined;
            }
            if (set.align) {
                if (!spec.align) {
                    spec.align = [0, 0];
                }
                spec.align[0] = set.align[0];
                spec.align[1] = set.align[1];
            } else {
                spec.align = undefined;
            }

            if (set.skew || set.rotate || set.scale) {
                this._spec.transform = Transform.build({
                    translate: set.translate || [0, 0, 0],
                    skew: set.skew || [0, 0, 0],
                    scale: set.scale || [1, 1, 1],
                    rotate: set.rotate || [0, 0, 0]
                });
            } else if (set.translate) {
                this._spec.transform = Transform.translate(set.translate[0], set.translate[1], set.translate[2]);
            } else {
                this._spec.transform = undefined;
            }
            this.scrollLength = set.scrollLength;
        };

        /**
         * Creates the render-spec
         */
        LayoutNode.prototype.getSpec = function () {
            this._specModified = false;
            this._spec.removed = !this._invalidated;
            return this._spec;
        };

        /**
         * Marks the node for removal
         */
        LayoutNode.prototype.remove = function (removeSpec) {
            this._removing = true;
        };

        module.exports = LayoutNode;
    }).call($__exports, $__require, $__exports, $__module);
});
/**
 * This Source Code is licensed under the MIT license. If a copy of the
 * MIT-license was not distributed with this file, You can obtain one at:
 * http://opensource.org/licenses/mit-license.html.
 *
 * @author: Hein Rutjes (IjzerenHein)
 * @license MIT
 * @copyright Gloey Apps, 2014/2015
 */

/**
 * LayoutNodeManager is a private class used internally by LayoutController, ScrollController
 * and ScrollView. It manages the layout-nodes that are rendered and exposes the layout-context
 * which is passed along to the layout-function.
 *
 * LayoutNodeManager keeps track of every rendered node through an ordered double-linked
 * list. The first time the layout-function is called, the linked list is created.
 * After that, the linked list is updated to reflect the output of the layout-function.
 * When the layout is unchanged, then the linked-list exactly matches the order of the
 * accessed nodes in the layout-function, and no layout-nodes need to be created or
 * re-ordered.
 *
 * @module
 */

$__System.registerDynamic('1fd', ['200', '235', '1fa', '198', '16f', '1ff', '1fe'], false, function ($__require, $__exports, $__module) {
    $__module.uri = $__module.id;
    return (function (require, exports, module) {

        // import dependencies
        var LayoutContext = require('200');
        var Map = require('235');
        var LayoutUtility = require('1fa');
        var Surface = require('198');
        var RenderNode = require('16f');
        var FlowLayoutNode = require('1ff');
        var LayoutNode = require('1fe');

        var MAX_POOL_SIZE = 100;

        /**
         * @class
         * @param {LayoutNode} LayoutNode Layout-nodes to create
         * @param {Function} initLayoutNodeFn function to use when initializing new nodes
         * @param {Boolean} partialFlow Sets
         * @alias module:LayoutNodeManager
         */
        function LayoutNodeManager(LayoutNode, initLayoutNodeFn, partialFlow) {
            this.LayoutNode = LayoutNode;
            this._partialFlow = partialFlow || false;
            this._initLayoutNodeFn = initLayoutNodeFn;
            this._layoutCount = 0;
            this._context = new LayoutContext({
                next: _contextNext.bind(this),
                prev: _contextPrev.bind(this),
                get: _contextGet.bind(this),
                set: _contextSet.bind(this),
                resolveSize: _contextResolveSize.bind(this),
                size: [0, 0]
                //,cycle: 0
            });
            this._contextState = {
                // enumation state for the context
                //nextSequence: undefined,
                //prevSequence: undefined,
                //next: undefined
                //prev: undefined
                //start: undefined
            };
            this._pool = {
                layoutNodes: {
                    size: 0
                    //first: undefined
                },
                resolveSize: [0, 0]
            };
            //this._first = undefined; // first item in the linked list
            //this._nodesById = undefined;
            //this._trueSizeRequested = false;
        }

        /**
         * Prepares the manager for a new layout iteration, after which it returns the
         * context which can be used by the layout-function.
         *
         * @param {ViewSequence} viewSequence first node to layout
         * @param {Object} [nodesById] dictionary to use when looking up nodes by id
         * @return {LayoutContext} context which can be passed to the layout-function
         */
        LayoutNodeManager.prototype.prepareForLayout = function (viewSequence, nodesById, contextData) {

            // Reset all nodes
            var node = this._first;
            while (node) {
                node.reset();
                node = node._next;
            }
            this._nodeIdInCurrentBuild = new Map();

            // Prepare data
            var context = this._context;
            this._layoutCount++;
            this._nodesById = nodesById;
            this._trueSizeRequested = false;
            this._reevalTrueSize = contextData.reevalTrueSize || !context.size || context.size[0] !== contextData.size[0] || context.size[1] !== contextData.size[1];

            // Prepare context for enumation
            var contextState = this._contextState;
            contextState.startSequence = viewSequence;
            contextState.nextSequence = viewSequence;
            contextState.prevSequence = viewSequence;
            contextState.start = undefined;
            contextState.nextGetIndex = 0;
            contextState.prevGetIndex = 0;
            contextState.nextSetIndex = 0;
            contextState.prevSetIndex = 0;
            contextState.addCount = 0;
            contextState.removeCount = 0;
            contextState.lastRenderNode = undefined;

            // Prepare content
            context.size[0] = contextData.size[0];
            context.size[1] = contextData.size[1];
            context.direction = contextData.direction;
            context.reverse = contextData.reverse;
            context.alignment = contextData.reverse ? 1 : 0;
            context.scrollOffset = contextData.scrollOffset || 0;
            context.scrollStart = contextData.scrollStart || 0;
            context.scrollEnd = contextData.scrollEnd || context.size[context.direction];
            //context.cycle++;
            return context;
        };

        /**
         * When the layout-function no longer lays-out the node, then it is not longer
         * being invalidated. In this case the destination is set to the removeSpec
         * after which the node is animated towards the remove-spec.
         *
         * @param {Spec} [removeSpec] spec towards which the no longer layed-out nodes are animated
         */
        LayoutNodeManager.prototype.removeNonInvalidatedNodes = function (removeSpec) {
            var node = this._first;
            while (node) {

                // If a node existed, but it is no longer being layed out,
                // then set it to the '_removing' state.
                if (!node._invalidated && !node._removing) {
                    node.remove(removeSpec);
                }

                // Move to next node
                node = node._next;
            }
        };

        /**
         * Cleans up any unaccessed virtual nodes that have been created by a VirtualViewSequence.
         */
        LayoutNodeManager.prototype.removeVirtualViewSequenceNodes = function () {
            if (this._contextState.startSequence && this._contextState.startSequence.cleanup) {
                this._contextState.startSequence.cleanup();
            }
        };

        /**
         * Builds the render-spec and destroy any layout-nodes that no longer
         * return a render-spec.
         *
         * @return {Array.Spec} array of Specs
         */
        LayoutNodeManager.prototype.buildSpecAndDestroyUnrenderedNodes = function (translate) {
            var specs = [];
            var result = {
                specs: specs,
                modified: false
            };
            var node = this._first;
            while (node) {
                var modified = node._specModified;
                var spec = node.getSpec();
                if (spec.removed) {

                    // Destroy node
                    var destroyNode = node;
                    node = node._next;
                    _destroyNode.call(this, destroyNode);

                    // Mark as modified
                    result.modified = true;
                } else {

                    // Update stats
                    if (modified) {
                        if (spec.transform && translate) {
                            spec.transform[12] += translate[0];
                            spec.transform[13] += translate[1];
                            spec.transform[14] += translate[2];
                            spec.transform[12] = Math.round(spec.transform[12] * 100000) / 100000;
                            spec.transform[13] = Math.round(spec.transform[13] * 100000) / 100000;
                            if (spec.endState) {
                                spec.endState.transform[12] += translate[0];
                                spec.endState.transform[13] += translate[1];
                                spec.endState.transform[14] += translate[2];
                                spec.endState.transform[12] = Math.round(spec.endState.transform[12] * 100000) / 100000;
                                spec.endState.transform[13] = Math.round(spec.endState.transform[13] * 100000) / 100000;
                            }
                        }
                        result.modified = true;
                    }

                    // Set meta data
                    spec.usesTrueSize = node.usesTrueSize;
                    spec.trueSizeRequested = node.trueSizeRequested;

                    // Add node to result output
                    specs.push(spec);
                    node = node._next;
                }
            }
            this._contextState.addCount = 0;
            this._contextState.removeCount = 0;
            return result;
        };

        /**
         * Get the layout-node by its renderable.
         *
         * @param {Object} renderable renderable
         * @return {LayoutNode} layout-node or undefined
         */
        LayoutNodeManager.prototype.getNodeByRenderNode = function (renderable) {
            var node = this._first;
            while (node) {
                if (node.renderNode === renderable) {
                    return node;
                }
                node = node._next;
            }
            return undefined;
        };

        /**
         * Inserts a layout-node into the linked-list.
         *
         * @param {LayoutNode} node layout-node to insert
         */
        LayoutNodeManager.prototype.insertNode = function (node) {
            node._next = this._first;
            if (this._first) {
                this._first._prev = node;
            }
            this._first = node;
        };

        /**
         * Sets the options for all nodes.
         *
         * @param {Object} options node options
         */
        LayoutNodeManager.prototype.setNodeOptions = function (options) {
            this._nodeOptions = options;
            var node = this._first;
            while (node) {
                node.setOptions(options);
                node = node._next;
            }
            node = this._pool.layoutNodes.first;
            while (node) {
                node.setOptions(options);
                node = node._next;
            }
        };

        /**
         * Pre-allocate layout-nodes ahead of using them.
         *
         * @param {Number} count number of nodes to pre-allocate with the given spec
         * @param {Spec} [spec] render-spec (defined the node properties which to pre-allocate)
         */
        LayoutNodeManager.prototype.preallocateNodes = function (count, spec) {
            var nodes = [];
            for (var i = 0; i < count; i++) {
                nodes.push(this.createNode(undefined, spec));
            }
            for (i = 0; i < count; i++) {
                _destroyNode.call(this, nodes[i]);
            }
        };

        /**
         * Creates a layout-node
         *
         * @param {Object} renderNode render-node for whom to create a layout-node for
         * @return {LayoutNode} layout-node
         */
        LayoutNodeManager.prototype.createNode = function (renderNode, spec) {
            var node;
            var layoutNodeClass = this.getLayoutNodeClassForRenderNode(renderNode);
            if (this._pool.layoutNodes.first) {
                node = this._pool.layoutNodes.first;
                this._pool.layoutNodes.first = node._next;
                this._pool.layoutNodes.size--;
                if (this._partialFlow) {
                    node = new layoutNodeClass(renderNode, spec);
                } else {
                    node.constructor.apply(node, arguments);
                }
            } else {
                node = new layoutNodeClass(renderNode, spec);

                if (this._nodeOptions) {
                    node.setOptions(this._nodeOptions);
                }
            }
            node._prev = undefined;
            node._next = undefined;
            node._viewSequence = undefined;
            node._layoutCount = 0;
            if (this._initLayoutNodeFn) {
                this._initLayoutNodeFn.call(this, node, spec);
            }
            return node;
        };

        LayoutNodeManager.prototype.getLayoutNodeClassForRenderNode = function (renderNode) {
            if (this._partialFlow) {
                if (renderNode.isFlowy) {
                    return FlowLayoutNode;
                } else {
                    return LayoutNode;
                }
            }
            return this.LayoutNode;
        };
        /**
         * Removes all nodes.
         */
        LayoutNodeManager.prototype.removeAll = function () {
            var node = this._first;
            while (node) {
                var next = node._next;
                _destroyNode.call(this, node);
                node = next;
            }
            this._first = undefined;
        };

        /**
         * Destroys a layout-node
         */
        function _destroyNode(node) {

            // Remove node from linked-list
            if (node._next) {
                node._next._prev = node._prev;
            }
            if (node._prev) {
                node._prev._next = node._next;
            } else {
                this._first = node._next;
            }

            // Destroy the node
            node.destroy();

            // Add node to pool
            if (this._pool.layoutNodes.size < MAX_POOL_SIZE) {
                this._pool.layoutNodes.size++;
                node._prev = undefined;
                node._next = this._pool.layoutNodes.first;
                this._pool.layoutNodes.first = node;
            }
        }

        LayoutNodeManager.prototype.isNodeInCurrentBuild = function (node) {
            return !!this._nodeIdInCurrentBuild.get(node);
        };
        /**
         * Gets start layout-node for enumeration.
         *
         * @param {Bool} [next] undefined = all, true = all next, false = all previous
         * @return {LayoutNode} layout-node or undefined
         */
        LayoutNodeManager.prototype.getStartEnumNode = function (next) {
            if (next === undefined) {
                return this._first;
            } else if (next === true) {
                return this._contextState.start && this._contextState.startPrev ? this._contextState.start._next : this._contextState.start;
            } else if (next === false) {
                return this._contextState.start && !this._contextState.startPrev ? this._contextState.start._prev : this._contextState.start;
            }
        };

        /**
         * Checks the integrity of the linked-list.
         */
        /*function _checkIntegrity() {
            var node = this._first;
            var count = 0;
            var prevNode;
            while (node) {
                if (!node._prev && (node !== this._first)) {
                    throw 'No prev but not first';
                }
                if (node._prev !== prevNode) {
                    throw 'Bork';
                }
                prevNode = node;
                node = node._next;
                count++;
            }
        }
         function _checkContextStateIntegrity() {
            var node = this._contextState.start;
            while (node) {
                if (node === this._contextState.next) {
                    break;
                }
                if (!node._invalidated) {
                    throw 'WTF';
                }
                node = node._next;
            }
            node = this._contextState.start;
            while (node) {
                if (node === this._contextState.prev) {
                    break;
                }
                if (!node._invalidated) {
                    throw 'WTF';
                }
                node = node._prev;
            }
        }*/

        /**
         * Creates or gets a layout node.
         */
        function _contextGetCreateAndOrderNodes(renderNode, prev) {

            // The first time this function is called, the current
            // prev/next position is obtained.
            var node;
            var state = this._contextState;
            if (!state.start) {
                node = this._first;
                while (node) {
                    if (node.renderNode === renderNode) {
                        break;
                    }
                    node = node._next;
                }
                if (!node) {
                    node = this.createNode(renderNode);
                    node._next = this._first;
                    if (this._first) {
                        this._first._prev = node;
                    }
                    this._first = node;
                }
                state.start = node;
                state.startPrev = prev;
                state.prev = node;
                state.next = node;
                return node;
            }

            // Check whether node already exist at the correct position
            // in the linked-list. If so, return that node immediately
            // and advance the prev/next pointer for the next/prev
            // lookup operation.
            if (prev) {
                if (state.prev._prev && state.prev._prev.renderNode === renderNode) {
                    state.prev = state.prev._prev;
                    return state.prev;
                }
            } else {
                if (state.next._next && state.next._next.renderNode === renderNode) {
                    state.next = state.next._next;
                    return state.next;
                }
            }

            // Lookup the node anywhere in the list..
            node = this._first;
            while (node) {
                if (node.renderNode === renderNode) {
                    break;
                }
                node = node._next;
            }

            // Create new node if neccessary
            if (!node) {
                node = this.createNode(renderNode);
            }

            // Node existed, remove from linked-list
            else {
                    if (node._next) {
                        node._next._prev = node._prev;
                    }
                    if (node._prev) {
                        node._prev._next = node._next;
                    } else {
                        this._first = node._next;
                    }
                    node._next = undefined;
                    node._prev = undefined;
                }

            // Insert node into the linked list
            if (prev) {
                if (state.prev._prev) {
                    node._prev = state.prev._prev;
                    state.prev._prev._next = node;
                } else {
                    this._first = node;
                }
                state.prev._prev = node;
                node._next = state.prev;
                state.prev = node;
            } else {
                if (state.next._next) {
                    node._next = state.next._next;
                    state.next._next._prev = node;
                }
                state.next._next = node;
                node._prev = state.next;
                state.next = node;
            }

            return node;
        }

        /**
         * Get the next render-node
         */
        function _contextNext() {

            // Get the next node from the sequence
            if (!this._contextState.nextSequence) {
                return undefined;
            }
            if (this._context.reverse) {
                this._contextState.nextSequence = this._contextState.nextSequence.getNext();
                if (!this._contextState.nextSequence) {
                    return undefined;
                }
            }
            var renderNode = this._contextState.nextSequence.get();
            if (!renderNode) {
                this._contextState.nextSequence = undefined;
                return undefined;
            }
            var nextSequence = this._contextState.nextSequence;
            if (!this._context.reverse) {
                this._contextState.nextSequence = this._contextState.nextSequence.getNext();
            }
            if (this._contextState.lastRenderNode === renderNode) {
                throw 'ViewSequence is corrupted, should never contain the same renderNode twice, index: ' + nextSequence.getIndex();
            }
            this._contextState.lastRenderNode = renderNode;
            return {
                renderNode: renderNode,
                viewSequence: nextSequence,
                next: true,
                index: ++this._contextState.nextGetIndex
            };
        }

        /**
         * Get the previous render-node
         */
        function _contextPrev() {

            // Get the previous node from the sequence
            if (!this._contextState.prevSequence) {
                return undefined;
            }
            if (!this._context.reverse) {
                this._contextState.prevSequence = this._contextState.prevSequence.getPrevious();
                if (!this._contextState.prevSequence) {
                    return undefined;
                }
            }
            var renderNode = this._contextState.prevSequence.get();
            if (!renderNode) {
                this._contextState.prevSequence = undefined;
                return undefined;
            }
            var prevSequence = this._contextState.prevSequence;
            if (this._context.reverse) {
                this._contextState.prevSequence = this._contextState.prevSequence.getPrevious();
            }
            if (this._contextState.lastRenderNode === renderNode) {
                throw 'ViewSequence is corrupted, should never contain the same renderNode twice, index: ' + prevSequence.getIndex();
            }
            this._contextState.lastRenderNode = renderNode;
            return {
                renderNode: renderNode,
                viewSequence: prevSequence,
                prev: true,
                index: --this._contextState.prevGetIndex
            };
        }

        /**
         * Resolve id into a context-node.
         */
        function _contextGet(contextNodeOrId) {
            if (this._nodesById && (contextNodeOrId instanceof String || typeof contextNodeOrId === 'string')) {
                var renderNode = this._nodesById[contextNodeOrId];
                if (!renderNode) {
                    return undefined;
                }

                // Return array
                if (renderNode instanceof Array) {
                    var result = [];
                    for (var i = 0, j = renderNode.length; i < j; i++) {
                        result.push({
                            renderNode: renderNode[i],
                            arrayElement: true
                        });
                    }
                    return result;
                }

                // Create context node
                return {
                    renderNode: renderNode,
                    byId: true
                };
            } else {
                return contextNodeOrId;
            }
        }

        /**
         * Set the node content
         */
        function _contextSet(contextNodeOrId, set) {
            var contextNode = this._nodesById ? _contextGet.call(this, contextNodeOrId) : contextNodeOrId;
            if (contextNode) {
                /* Keeps track of which nodes that have been set */
                this._nodeIdInCurrentBuild.set(contextNode.renderNode, true);
                var node = contextNode.node;
                if (!node) {
                    if (contextNode.next) {
                        if (contextNode.index < this._contextState.nextSetIndex) {
                            LayoutUtility.error('Nodes must be layed out in the same order as they were requested!');
                        }
                        this._contextState.nextSetIndex = contextNode.index;
                    } else if (contextNode.prev) {
                        if (contextNode.index > this._contextState.prevSetIndex) {
                            LayoutUtility.error('Nodes must be layed out in the same order as they were requested!');
                        }
                        this._contextState.prevSetIndex = contextNode.index;
                    }
                    node = _contextGetCreateAndOrderNodes.call(this, contextNode.renderNode, contextNode.prev);
                    node._viewSequence = contextNode.viewSequence;
                    node._layoutCount++;
                    if (node._layoutCount === 1) {
                        this._contextState.addCount++;
                    }
                    contextNode.node = node;
                }
                node.usesTrueSize = contextNode.usesTrueSize;
                node.trueSizeRequested = contextNode.trueSizeRequested;
                node.set(set, this._context.size);
                contextNode.set = set;
            }
            return set;
        }

        /**
         * Helper function that recursively discovers the configured size for a
         * given renderNode.
         */
        function _resolveConfigSize(renderNode) {
            if (renderNode instanceof RenderNode) {
                var result = null;
                var target = renderNode.get();
                if (target) {
                    result = _resolveConfigSize(target);
                    if (result) {
                        return result;
                    }
                }
                if (renderNode._child) {
                    return _resolveConfigSize(renderNode._child);
                }
            } else if (renderNode instanceof Surface) {
                return renderNode.size ? {
                    renderNode: renderNode,
                    size: renderNode.size
                } : undefined;
            } else if (renderNode.options && renderNode.options.size) {
                return {
                    renderNode: renderNode,
                    size: renderNode.options.size
                };
            }
            return undefined;
        }

        /**
         * Resolve the size of the layout-node from the renderable itsself.
         */
        function _contextResolveSize(contextNodeOrId, parentSize) {
            var contextNode = this._nodesById ? _contextGet.call(this, contextNodeOrId) : contextNodeOrId;
            var resolveSize = this._pool.resolveSize;
            if (!contextNode) {
                resolveSize[0] = 0;
                resolveSize[1] = 0;
                return resolveSize;
            }

            // Get in use size
            var renderNode = contextNode.renderNode;
            var size = renderNode.getSize();
            if (!size) {
                return parentSize;
            }

            // Check if true-size is used and it must be reavaluated.
            // This particular piece of code specifically handles true-size Surfaces in famo.us.
            // It contains portions that ensure that the true-size of a Surface is re-evaluated
            // and also workaround code that backs up the size of a Surface, so that when the surface
            // is re-added to the DOM (e.g. when scrolling) it doesn't temporarily have a size of 0.
            var configSize = _resolveConfigSize(renderNode);
            if (configSize && (configSize.size[0] === true || configSize.size[1] === true)) {
                contextNode.usesTrueSize = true;
                if (configSize.renderNode instanceof Surface) {
                    var backupSize = configSize.renderNode._backupSize;
                    if (configSize.renderNode._contentDirty || configSize.renderNode._trueSizeCheck) {
                        this._trueSizeRequested = true;
                        contextNode.trueSizeRequested = true;
                    }
                    if (configSize.renderNode._trueSizeCheck) {

                        // Fix for true-size renderables. When true-size is used, the size
                        // is incorrect for one render-cycle due to the fact that Surface.commit
                        // updates the content after asking the DOM for the offsetHeight/offsetWidth.
                        // The code below backs the size up, and re-uses that when this scenario
                        // occurs.
                        if (backupSize && configSize.size !== size) {
                            var newWidth = configSize.size[0] === true ? Math.max(backupSize[0], size[0]) : size[0];
                            var newHeight = configSize.size[1] === true ? Math.max(backupSize[1], size[1]) : size[1];
                            backupSize[0] = newWidth;
                            backupSize[1] = newHeight;
                            size = backupSize;
                            configSize.renderNode._backupSize = undefined;
                            backupSize = undefined;
                        }
                    }
                    if (this._reevalTrueSize || backupSize && (backupSize[0] !== size[0] || backupSize[1] !== size[1])) {
                        configSize.renderNode._trueSizeCheck = true; // force request of true-size from DOM
                        configSize.renderNode._sizeDirty = true;
                        this._trueSizeRequested = true;
                    }

                    // Backup the size of the node
                    if (!backupSize) {
                        configSize.renderNode._backupSize = [0, 0];
                        backupSize = configSize.renderNode._backupSize;
                    }
                    backupSize[0] = size[0];
                    backupSize[1] = size[1];
                }

                // Ensure re-layout when a child layout-controller is using true-size and it
                // has ben changed.
                else if (configSize.renderNode._nodes) {
                        if (this._reevalTrueSize || configSize.renderNode._nodes._trueSizeRequested) {
                            contextNode.trueSizeRequested = true;
                            this._trueSizeRequested = true;
                        }
                    }
            }

            // Resolve 'undefined' to parent-size and true to 0
            if (size[0] === undefined || size[0] === true || size[1] === undefined || size[1] === true) {
                resolveSize[0] = size[0];
                resolveSize[1] = size[1];
                size = resolveSize;
                if (size[0] === undefined) {
                    size[0] = parentSize[0];
                } else if (size[0] === true) {
                    size[0] = 0;
                    this._trueSizeRequested = true;
                    contextNode.trueSizeRequested = true;
                }
                if (size[1] === undefined) {
                    size[1] = parentSize[1];
                } else if (size[1] === true) {
                    size[1] = 0;
                    this._trueSizeRequested = true;
                    contextNode.trueSizeRequested = true;
                }
            }
            return size;
        }

        module.exports = LayoutNodeManager;
    }).call($__exports, $__require, $__exports, $__module);
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: mark@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */

$__System.registerDynamic('23a', ['198', '23b', '23c'], false, function ($__require, $__exports, $__module) {
  $__module.uri = $__module.id;
  return (function (require, exports, module) {
    var Surface = require('198');
    var Context = require('23b');
    var ElementAllocator = require('23c');

    /**
     * ContainerSurface is an object designed to contain surfaces and
     *   set properties to be applied to all of them at once.
     *   This extends the Surface class.
     *   A container surface will enforce these properties on the
     *   surfaces it contains:
     *
     *   size (clips contained surfaces to its own width and height);
     *
     *   origin;
     *
     *   its own opacity and transform, which will be automatically
     *   applied to  all Surfaces contained directly and indirectly.
     *
     * @class ContainerSurface
     * @extends Surface
     * @constructor
     * @param {Array.Number} [options.size] [width, height] in pixels
     * @param {Array.string} [options.classes] CSS classes to set on all inner content
     * @param {Array} [options.properties] string dictionary of HTML attributes to set on target div
     * @param {string} [options.content] inner (HTML) content of surface (should not be used)
     */
    function ContainerSurface(options) {
      Surface.call(this, options);
      this._container = document.createElement('div');
      this._container.classList.add('famous-group');
      this._container.classList.add('famous-container-group');
      this._shouldRecalculateSize = false;
      this.context = new Context(this._container);
      this.context.setPermanentElementAllocator(new ElementAllocator(this._container));
      this.setContent(this._container);
    }

    ContainerSurface.prototype = Object.create(Surface.prototype);
    ContainerSurface.prototype.constructor = ContainerSurface;
    ContainerSurface.prototype.elementType = 'div';
    ContainerSurface.prototype.elementClass = 'famous-surface';

    /**
     * Add renderables to this object's render tree
     *
     * @method add
     *
     * @param {Object} obj renderable object
     * @return {RenderNode} RenderNode wrapping this object, if not already a RenderNode
     */
    ContainerSurface.prototype.add = function add() {
      return this.context.add.apply(this.context, arguments);
    };

    /**
     * Return spec for this surface.  Note: Can result in a size recalculation.
     *
     * @private
     * @method render
     *
     * @return {Object} render spec for this surface (spec id)
     */
    ContainerSurface.prototype.render = function render() {
      if (this._sizeDirty) this._shouldRecalculateSize = true;
      return Surface.prototype.render.apply(this, arguments);
    };

    /**
     * Place the document element this component manages into the document.
     *
     * @private
     * @method deploy
     * @param {Node} target document parent of this container
     */
    ContainerSurface.prototype.deploy = function deploy() {
      this._shouldRecalculateSize = true;
      return Surface.prototype.deploy.apply(this, arguments);
    };

    /**
     * Apply changes from this component to the corresponding document element.
     * This includes changes to classes, styles, size, content, opacity, origin,
     * and matrix transforms.
     *
     * @private
     * @method commit
     * @param {Context} context commit context
     * @param {Transform} transform unused TODO
     * @param {Number} opacity  unused TODO
     * @param {Array.Number} origin unused TODO
     * @param {Array.Number} size unused TODO
     * @return {undefined} TODO returns an undefined value
     */
    ContainerSurface.prototype.commit = function commit(context, transform, opacity, origin, size) {
      var previousSize = this._size ? [this._size[0], this._size[1]] : null;
      var result = Surface.prototype.commit.apply(this, arguments);
      if (this._shouldRecalculateSize || previousSize && (this._size[0] !== previousSize[0] || this._size[1] !== previousSize[1])) {
        this.context.setSize();
        this._shouldRecalculateSize = false;
      }
      this.context.update();
      return result;
    };

    module.exports = ContainerSurface;
  }).call($__exports, $__require, $__exports, $__module);
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: mark@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */

$__System.registerDynamic('23d', ['1fb', '194', '169'], false, function ($__require, $__exports, $__module) {
    $__module.uri = $__module.id;
    return (function (require, exports, module) {
        var Entity = require('1fb');
        var EventHandler = require('194');
        var Transform = require('169');

        var usePrefix = !('transform' in document.documentElement.style);
        var devicePixelRatio = window.devicePixelRatio || 1;

        /**
         * A base class for viewable content and event
         *   targets inside a Famo.us application, containing a renderable document
         *   fragment. Like an HTML div, it can accept internal markup,
         *   properties, classes, and handle events.
         *
         * @class ElementOutput
         * @constructor
         *
         * @param {Node} element document parent of this container
         */
        function ElementOutput(element) {
            this._matrix = null;
            this._opacity = 1;
            this._origin = null;
            this._size = null;

            this._eventOutput = new EventHandler();
            this._eventOutput.bindThis(this);

            /** @ignore */
            this.eventForwarder = function eventForwarder(event) {
                this._eventOutput.emit(event.type, event);
            }.bind(this);

            this.id = Entity.register(this);
            this._element = null;
            this._sizeDirty = false;
            this._originDirty = false;
            this._transformDirty = false;

            this._invisible = false;
            if (element) this.attach(element);
        }

        /**
         * Bind a callback function to an event type handled by this object.
         *
         * @method "on"
         *
         * @param {string} type event type key (for example, 'click')
         * @param {function(string, Object)} fn handler callback
         * @return {EventHandler} this
         */
        ElementOutput.prototype.on = function on(type, fn) {
            if (this._element) this._element.addEventListener(type, this.eventForwarder);
            this._eventOutput.on(type, fn);
        };

        ElementOutput.prototype.once = function on(type, fn) {
            if (this._element) this._element.addEventListener(type, this.eventForwarder);
            this._eventOutput.once(type, fn);
        };

        /**
         * Unbind an event by type and handler.
         *   This undoes the work of "on"
         *
         * @method removeListener
         * @param {string} type event type key (for example, 'click')
         * @param {function(string, Object)} fn handler
         */
        ElementOutput.prototype.removeListener = function removeListener(type, fn) {
            this._eventOutput.removeListener(type, fn);
        };

        /**
         * Trigger an event, sending to all downstream handlers
         *   listening for provided 'type' key.
         *
         * @method emit
         *
         * @param {string} type event type key (for example, 'click')
         * @param {Object} [event] event data
         * @return {EventHandler} this
         */
        ElementOutput.prototype.emit = function emit(type, event) {
            if (event && !event.origin) event.origin = this;
            var handled = this._eventOutput.emit(type, event);
            if (handled && event && event.stopPropagation) event.stopPropagation();
            return handled;
        };

        /**
         * Add event handler object to set of downstream handlers.
         *
         * @method pipe
         *
         * @param {EventHandler} target event handler target object
         * @return {EventHandler} passed event handler
         */
        ElementOutput.prototype.pipe = function pipe(target) {
            return this._eventOutput.pipe(target);
        };

        /**
         * Remove handler object from set of downstream handlers.
         *   Undoes work of "pipe"
         *
         * @method unpipe
         *
         * @param {EventHandler} target target handler object
         * @return {EventHandler} provided target
         */
        ElementOutput.prototype.unpipe = function unpipe(target) {
            return this._eventOutput.unpipe(target);
        };

        /**
         * Return spec for this surface. Note that for a base surface, this is
         *    simply an id.
         *
         * @method render
         * @private
         * @return {Object} render spec for this surface (spec id)
         */
        ElementOutput.prototype.render = function render() {
            return this.id;
        };

        //  Attach Famous event handling to document events emanating from target
        //    document element.  This occurs just after attachment to the document.
        //    Calling this enables methods like #on and #pipe.
        function _addEventListeners(target) {
            for (var i in this._eventOutput.listeners) {
                target.addEventListener(i, this.eventForwarder);
            }
        }

        //  Detach Famous event handling from document events emanating from target
        //  document element.  This occurs just before detach from the document.
        function _removeEventListeners(target) {
            for (var i in this._eventOutput.listeners) {
                target.removeEventListener(i, this.eventForwarder);
            }
        }

        /**
         * Return a Matrix's webkit css representation to be used with the
         *    CSS3 -webkit-transform style.
         *    Example: -webkit-transform: matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,716,243,0,1)
         *
         * @method _formatCSSTransform
         * @private
         * @param {FamousMatrix} m matrix
         * @return {string} matrix3d CSS style representation of the transform
         */
        function _formatCSSTransform(m) {
            m[12] = Math.round(m[12] * devicePixelRatio) / devicePixelRatio;
            m[13] = Math.round(m[13] * devicePixelRatio) / devicePixelRatio;

            var result = 'matrix3d(';
            for (var i = 0; i < 15; i++) {
                result += m[i] < 0.000001 && m[i] > -0.000001 ? '0,' : m[i] + ',';
            }
            result += m[15] + ')';
            return result;
        }

        /**
         * Directly apply given FamousMatrix to the document element as the
         *   appropriate webkit CSS style.
         *
         * @method setMatrix
         *
         * @static
         * @private
         * @param {Element} element document element
         * @param {FamousMatrix} matrix
         */

        var _setMatrix;
        if (usePrefix) {
            _setMatrix = function (element, matrix) {
                element.style.webkitTransform = _formatCSSTransform(matrix);
            };
        } else {
            _setMatrix = function (element, matrix) {
                element.style.transform = _formatCSSTransform(matrix);
            };
        }

        // format origin as CSS percentage string
        function _formatCSSOrigin(origin) {
            return 100 * origin[0] + '% ' + 100 * origin[1] + '%';
        }

        // Directly apply given origin coordinates to the document element as the
        // appropriate webkit CSS style.
        var _setOrigin = usePrefix ? function (element, origin) {
            element.style.webkitTransformOrigin = _formatCSSOrigin(origin);
        } : function (element, origin) {
            element.style.transformOrigin = _formatCSSOrigin(origin);
        };

        // Shrink given document element until it is effectively invisible.
        var _setInvisible = usePrefix ? function (element) {
            element.style.webkitTransform = 'scale3d(0.0001,0.0001,0.0001)';
            element.style.opacity = 0;
        } : function (element) {
            element.style.transform = 'scale3d(0.0001,0.0001,0.0001)';
            element.style.opacity = 0;
        };

        function _xyNotEquals(a, b) {
            return a && b ? a[0] !== b[0] || a[1] !== b[1] : a !== b;
        }

        /**
         * Apply changes from this component to the corresponding document element.
         * This includes changes to classes, styles, size, content, opacity, origin,
         * and matrix transforms.
         *
         * @private
         * @method commit
         * @param {Context} context commit context
         */
        ElementOutput.prototype.commit = function commit(context) {
            var target = this._element;
            if (!target) return;

            var matrix = context.transform;
            var opacity = context.opacity;
            var origin = context.origin;
            var size = context.size;

            if (!matrix && this._matrix) {
                this._matrix = null;
                this._opacity = 0;
                _setInvisible(target);
                return;
            }

            if (_xyNotEquals(this._origin, origin)) this._originDirty = true;
            if (Transform.notEquals(this._matrix, matrix)) this._transformDirty = true;

            if (this._invisible) {
                this._invisible = false;
                this._element.style.display = '';
            }

            if (this._opacity !== opacity) {
                this._opacity = opacity;
                target.style.opacity = opacity >= 1 ? '0.999999' : opacity;
            }

            if (this._transformDirty || this._originDirty || this._sizeDirty) {
                if (this._sizeDirty) this._sizeDirty = false;

                if (this._originDirty) {
                    if (origin) {
                        if (!this._origin) this._origin = [0, 0];
                        this._origin[0] = origin[0];
                        this._origin[1] = origin[1];
                    } else this._origin = null;
                    _setOrigin(target, this._origin);
                    this._originDirty = false;
                }

                if (!matrix) matrix = Transform.identity;
                this._matrix = matrix;
                var aaMatrix = this._size ? Transform.thenMove(matrix, [-this._size[0] * origin[0], -this._size[1] * origin[1], 0]) : matrix;
                _setMatrix(target, aaMatrix);
                this._transformDirty = false;
            }
        };

        ElementOutput.prototype.cleanup = function cleanup() {
            if (this._element) {
                this._invisible = true;
                this._element.style.display = 'none';
            }
        };

        /**
         * Place the document element that this component manages into the document.
         *
         * @private
         * @method attach
         * @param {Node} target document parent of this container
         */
        ElementOutput.prototype.attach = function attach(target) {
            this._element = target;
            _addEventListeners.call(this, target);
        };

        /**
         * Remove any contained document content associated with this surface
         *   from the actual document.
         *
         * @private
         * @method detach
         */
        ElementOutput.prototype.detach = function detach() {
            var target = this._element;
            if (target) {
                _removeEventListeners.call(this, target);
                if (this._invisible) {
                    this._invisible = false;
                    this._element.style.display = '';
                }
            }
            this._element = null;
            return target;
        };

        module.exports = ElementOutput;
    }).call($__exports, $__require, $__exports, $__module);
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: mark@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */

$__System.registerDynamic('198', ['23d'], false, function ($__require, $__exports, $__module) {
    $__module.uri = $__module.id;
    return (function (require, exports, module) {
        var ElementOutput = require('23d');

        /**
         * A base class for viewable content and event
         *   targets inside a Famo.us application, containing a renderable document
         *   fragment. Like an HTML div, it can accept internal markup,
         *   properties, classes, and handle events.
         *
         * @class Surface
         * @constructor
         *
         * @param {Object} [options] default option overrides
         * @param {Array.Number} [options.size] [width, height] in pixels
         * @param {Array.string} [options.classes] CSS classes to set on target div
         * @param {Array} [options.properties] string dictionary of CSS properties to set on target div
         * @param {Array} [options.attributes] string dictionary of HTML attributes to set on target div
         * @param {string} [options.content] inner (HTML) content of surface
         */
        function Surface(options) {
            ElementOutput.call(this);

            this.options = {};

            this.properties = {};
            this.attributes = {};
            this.content = '';
            this.classList = [];
            this.size = null;

            this._classesDirty = true;
            this._stylesDirty = true;
            this._attributesDirty = true;
            this._sizeDirty = true;
            this._contentDirty = true;
            this._trueSizeCheck = true;

            this._dirtyClasses = [];
            this._dirtyAttributes = [];

            if (options) this.setOptions(options);

            this._currentTarget = null;
        }
        Surface.prototype = Object.create(ElementOutput.prototype);
        Surface.prototype.constructor = Surface;
        Surface.prototype.elementType = 'div';
        Surface.prototype.elementClass = 'famous-surface';

        /**
         * Set HTML attributes on this Surface. Note that this will cause
         *    dirtying and thus re-rendering, even if values do not change.
         *
         * @method setAttributes
        * @param {Object} attributes property dictionary of "key" => "value"
         */
        Surface.prototype.setAttributes = function setAttributes(attributes) {
            for (var n in attributes) {
                if (n === 'style') throw new Error('Cannot set styles via "setAttributes" as it will break Famo.us.  Use "setProperties" instead.');
                this.attributes[n] = attributes[n];
            }
            this._attributesDirty = true;
        };

        /**
         * Get HTML attributes on this Surface.
         *
         * @method getAttributes
         *
         * @return {Object} Dictionary of this Surface's attributes.
         */
        Surface.prototype.getAttributes = function getAttributes() {
            return this.attributes;
        };

        /**
         * Removes existing attributes from this Surface (e.g. needed for 'disabled').
         * @method removeAttributes
         * @param {Array} attributes List of attribute names to remove
         */
        Surface.prototype.removeAttributes = function removeAttributes(attributes) {
            for (var index in attributes) {
                var name = attributes[index];
                delete this.attributes[name];
                this._dirtyAttributes.push(name);
            }
            this._attributesDirty = true;
        };

        /**
         * Set CSS-style properties on this Surface. Note that this will cause
         *    dirtying and thus re-rendering, even if values do not change.
         *
         * @method setProperties
         * @chainable
         * @param {Object} properties property dictionary of "key" => "value"
         */
        Surface.prototype.setProperties = function setProperties(properties) {
            for (var n in properties) {
                this.properties[n] = properties[n];
            }
            this._stylesDirty = true;
            return this;
        };

        /**
         * Get CSS-style properties on this Surface.
         *
         * @method getProperties
         *
         * @return {Object} Dictionary of this Surface's properties.
         */
        Surface.prototype.getProperties = function getProperties() {
            return this.properties;
        };

        /**
         * Add CSS-style class to the list of classes on this Surface. Note
         *   this will map directly to the HTML property of the actual
         *   corresponding rendered <div>.
         *
         * @method addClass
         * @chainable
         * @param {string} className name of class to add
         */
        Surface.prototype.addClass = function addClass(className) {
            if (this.classList.indexOf(className) < 0) {
                this.classList.push(className);
                this._classesDirty = true;
            }
            return this;
        };

        /**
         * Remove CSS-style class from the list of classes on this Surface.
         *   Note this will map directly to the HTML property of the actual
         *   corresponding rendered <div>.
         *
         * @method removeClass
         * @chainable
         * @param {string} className name of class to remove
         */
        Surface.prototype.removeClass = function removeClass(className) {
            var i = this.classList.indexOf(className);
            if (i >= 0) {
                this._dirtyClasses.push(this.classList.splice(i, 1)[0]);
                this._classesDirty = true;
            }
            return this;
        };

        /**
         * Toggle CSS-style class from the list of classes on this Surface.
         *   Note this will map directly to the HTML property of the actual
         *   corresponding rendered <div>.
         *
         * @method toggleClass
         * @param {string} className name of class to toggle
         */
        Surface.prototype.toggleClass = function toggleClass(className) {
            var i = this.classList.indexOf(className);
            if (i >= 0) {
                this.removeClass(className);
            } else {
                this.addClass(className);
            }
            return this;
        };

        /**
         * Reset class list to provided dictionary.
         * @method setClasses
         * @chainable
         * @param {Array.string} classList
         */
        Surface.prototype.setClasses = function setClasses(classList) {
            var i = 0;
            var removal = [];
            for (i = 0; i < this.classList.length; i++) {
                if (classList.indexOf(this.classList[i]) < 0) removal.push(this.classList[i]);
            }
            for (i = 0; i < removal.length; i++) this.removeClass(removal[i]);
            // duplicates are already checked by addClass()
            for (i = 0; i < classList.length; i++) this.addClass(classList[i]);
            return this;
        };

        /**
         * Get array of CSS-style classes attached to this div.
         *
         * @method getClasslist
         * @return {Array.string} array of class names
         */
        Surface.prototype.getClassList = function getClassList() {
            return this.classList;
        };

        /**
         * Set or overwrite inner (HTML) content of this surface. Note that this
         *    causes a re-rendering if the content has changed.
         *
         * @method setContent
         * @chainable
         * @param {string|Document Fragment} content HTML content
         */
        Surface.prototype.setContent = function setContent(content) {
            if (this.content !== content) {
                this.content = content;
                this._contentDirty = true;
            }
            return this;
        };

        /**
         * Return inner (HTML) content of this surface.
         *
         * @method getContent
         *
         * @return {string} inner (HTML) content
         */
        Surface.prototype.getContent = function getContent() {
            return this.content;
        };

        /**
         * Set options for this surface
         *
         * @method setOptions
         * @chainable
         * @param {Object} [options] overrides for default options.  See constructor.
         */
        Surface.prototype.setOptions = function setOptions(options) {
            if (options.size) this.setSize(options.size);
            if (options.classes) this.setClasses(options.classes);
            if (options.properties) this.setProperties(options.properties);
            if (options.attributes) this.setAttributes(options.attributes);
            if (options.content) this.setContent(options.content);
            return this;
        };

        //  Apply to document all changes from removeClass() since last setup().
        function _cleanupClasses(target) {
            for (var i = 0; i < this._dirtyClasses.length; i++) target.classList.remove(this._dirtyClasses[i]);
            this._dirtyClasses = [];
        }

        // Apply values of all Famous-managed styles to the document element.
        //  These will be deployed to the document on call to #setup().
        function _applyStyles(target) {
            for (var n in this.properties) {
                target.style[n] = this.properties[n];
            }
        }

        // Clear all Famous-managed styles from the document element.
        // These will be deployed to the document on call to #setup().
        function _cleanupStyles(target) {
            for (var n in this.properties) {
                target.style[n] = '';
            }
        }

        //  Apply values of all Famous-managed attributes to the document element.
        //  These will be deployed to the document on call to #setup().
        function _applyAttributes(target) {
            for (var n in this.attributes) {
                target.setAttribute(n, this.attributes[n]);
            }
            for (var index in this._dirtyAttributes) {
                var name = this._dirtyAttributes[index];
                target.removeAttribute(name);
                this._dirtyAttributes.shift();
            }
        }

        // Clear all Famous-managed attributes from the document element.
        // These will be deployed to the document on call to #setup().
        function _cleanupAttributes(target) {
            for (var n in this.attributes) {
                target.removeAttribute(n);
            }
        }

        function _xyNotEquals(a, b) {
            return a && b ? a[0] !== b[0] || a[1] !== b[1] : a !== b;
        }

        /**
         * One-time setup for an element to be ready for commits to document.
         *
         * @private
         * @method setup
         *
         * @param {ElementAllocator} allocator document element pool for this context
         */
        Surface.prototype.setup = function setup(allocator) {
            var target = this.allocate(allocator);
            if (this.elementClass) {
                if (this.elementClass instanceof Array) {
                    for (var i = 0; i < this.elementClass.length; i++) {
                        target.classList.add(this.elementClass[i]);
                    }
                } else {
                    target.classList.add(this.elementClass);
                }
            }
            target.style.display = '';
            this.attach(target);
            this._opacity = null;
            this._currentTarget = target;
            this._stylesDirty = true;
            this._classesDirty = true;
            this._attributesDirty = true;
            this._sizeDirty = true;
            this._contentDirty = true;
            this._originDirty = true;
            this._transformDirty = true;
        };

        Surface.prototype.deallocate = function deallocate(allocator, target) {
            return allocator.deallocate(target);
        };

        Surface.prototype.allocate = function allocate(allocator) {
            return allocator.allocate({ type: this.elementType });
        };

        /**
         * Apply changes from this component to the corresponding document element.
         * This includes changes to classes, styles, size, content, opacity, origin,
         * and matrix transforms.
         *
         * @private
         * @method commit
         * @param {Context} context commit context
         */
        Surface.prototype.commit = function commit(context) {
            if (!this._currentTarget) this.setup(context.allocator);
            var target = this._currentTarget;
            var size = context.size;

            if (this._classesDirty) {
                _cleanupClasses.call(this, target);
                var classList = this.getClassList();
                for (var i = 0; i < classList.length; i++) target.classList.add(classList[i]);
                this._classesDirty = false;
                this._trueSizeCheck = true;
            }

            if (this._stylesDirty) {
                _applyStyles.call(this, target);
                this._stylesDirty = false;
                this._trueSizeCheck = true;
            }

            if (this._attributesDirty) {
                _applyAttributes.call(this, target);
                this._attributesDirty = false;
                this._trueSizeCheck = true;
            }

            if (this.size) {
                var origSize = context.size;
                size = [this.size[0], this.size[1]];
                if (size[0] === undefined) size[0] = origSize[0];
                if (size[1] === undefined) size[1] = origSize[1];
                if (size[0] === true || size[1] === true) {
                    if (size[0] === true) {
                        if (this._trueSizeCheck || this._size[0] === 0) {
                            var width = target.offsetWidth;
                            if (this._size && this._size[0] !== width) {
                                this._size[0] = width;
                                this._sizeDirty = true;
                            }
                            size[0] = width;
                        } else {
                            if (this._size) size[0] = this._size[0];
                        }
                    }
                    if (size[1] === true) {
                        if (this._trueSizeCheck || this._size[1] === 0) {
                            var height = target.offsetHeight;
                            if (this._size && this._size[1] !== height) {
                                this._size[1] = height;
                                this._sizeDirty = true;
                            }
                            size[1] = height;
                        } else {
                            if (this._size) size[1] = this._size[1];
                        }
                    }
                    this._trueSizeCheck = false;
                }
            }

            if (_xyNotEquals(this._size, size)) {
                if (!this._size) this._size = [0, 0];
                this._size[0] = size[0];
                this._size[1] = size[1];

                this._sizeDirty = true;
            }

            if (this._sizeDirty) {
                if (this._size) {
                    target.style.width = this.size && this.size[0] === true || this._size[0] === true ? '' : this._size[0] + 'px';
                    target.style.height = this.size && this.size[1] === true || this._size[1] === true ? '' : this._size[1] + 'px';
                }

                this._eventOutput.emit('resize');
            }

            if (this._contentDirty) {
                this.deploy(target);
                this._eventOutput.emit('deploy');
                this._contentDirty = false;
                this._trueSizeCheck = true;
            }

            ElementOutput.prototype.commit.call(this, context);
        };

        /**
         *  Remove all Famous-relevant attributes from a document element.
         *    This is called by SurfaceManager's detach().
         *    This is in some sense the reverse of .deploy().
         *
         * @private
         * @method cleanup
         * @param {ElementAllocator} allocator
         */
        Surface.prototype.cleanup = function cleanup(allocator) {
            /* If clean-up done twice, return. This happens when a surface is cleaned up from
             * one context (e.g. group) and needs to be removed from another context that used to
             * display this surface. */
            if (!this._currentTarget) {
                return;
            }
            var i = 0;
            var target = this._currentTarget;
            this._eventOutput.emit('recall');
            this.recall(target);
            target.style.display = 'none';
            target.style.opacity = '';
            target.style.width = '';
            target.style.height = '';
            _cleanupStyles.call(this, target);
            _cleanupAttributes.call(this, target);
            var classList = this.getClassList();
            _cleanupClasses.call(this, target);
            for (i = 0; i < classList.length; i++) target.classList.remove(classList[i]);
            if (this.elementClass) {
                if (this.elementClass instanceof Array) {
                    for (i = 0; i < this.elementClass.length; i++) {
                        target.classList.remove(this.elementClass[i]);
                    }
                } else {
                    target.classList.remove(this.elementClass);
                }
            }
            this.detach(target);
            this._currentTarget = null;
            this.deallocate(allocator, target);
        };

        /**
         * Place the document element that this component manages into the document.
         *
         * @private
         * @method deploy
         * @param {Node} target document parent of this container
         */
        Surface.prototype.deploy = function deploy(target) {
            var content = this.getContent();
            if (content instanceof Node) {
                while (target.hasChildNodes()) target.removeChild(target.firstChild);
                target.appendChild(content);
            } else {
                target.innerHTML = content;
            }
            this.content = target.innerHTML;
        };

        /**
         * FIX for famous-bug: https://github.com/Famous/famous/issues/673
         *
         * There is a bug in recall which causes the latest setContent()
         * call to be ignored, if the element is removed from the DOM in
         * the next render-cycle.
         */
        Surface.prototype.recall = function recall(target) {
            if (!this._contentDirty) {
                var df = document.createDocumentFragment();
                while (target.hasChildNodes()) {
                    df.appendChild(target.firstChild);
                }
                this.setContent(df);
            } else {
                this._contentDirty = true;
            }
        };

        /**
         *  Get the x and y dimensions of the surface.
         *
         * @method getSize
         * @return {Array.Number} [x,y] size of surface
         */
        Surface.prototype.getSize = function getSize() {
            return this._size ? this._size : this.size;
        };

        /**
         * Set x and y dimensions of the surface.
         *
         * @method setSize
         * @chainable
         * @param {Array.Number} size as [width, height]
         */
        Surface.prototype.setSize = function setSize(size) {
            this.size = size ? [size[0], size[1]] : null;
            this._sizeDirty = true;
            return this;
        };

        module.exports = Surface;
    }).call($__exports, $__require, $__exports, $__module);
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: mark@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */

$__System.registerDynamic('1f7', ['23b', '169', '198'], false, function ($__require, $__exports, $__module) {
  $__module.uri = $__module.id;
  return (function (require, exports, module) {
    var Context = require('23b');
    var Transform = require('169');
    var Surface = require('198');

    /**
     * A Context designed to contain surfaces and set properties
     *   to be applied to all of them at once.
     *   This is primarily used for specific performance improvements in the rendering engine.
     *   Private.
     *
     * @private
     * @class Group
     * @extends Surface
     * @constructor
     * @param {Object} [options] Surface options array (see Surface})
     */
    function Group(options) {
      Surface.call(this, options);
      this._shouldRecalculateSize = false;
      this.context = new Context();
      this._groupSize = [undefined, undefined];
      this._surfaceSize = options ? options.size || Group.SIZE_ZERO : Group.SIZE_ZERO;
    }

    /** @const */
    Group.SIZE_ZERO = [0, 0];

    Group.prototype = Object.create(Surface.prototype);
    Group.prototype.elementType = 'div';
    Group.prototype.elementClass = 'famous-group';

    /**
     * Add renderables to this component's render tree.
     *
     * @method add
     * @private
     * @param {Object} obj renderable object
     * @return {RenderNode} Render wrapping provided object, if not already a RenderNode
     */
    Group.prototype.add = function add() {
      return this.context.add.apply(this.context, arguments);
    };

    /**
     * Generate a render spec from the contents of this component.
     *
     * @private
     * @method render
     * @return {Number} Render spec for this component
     */
    Group.prototype.render = function render() {
      return Surface.prototype.render.call(this);
    };

    /**
     * Place the document element this component manages into the document.
     *
     * @private
     * @method deploy
     * @param {Node} target document parent of this container
     */
    Group.prototype.deploy = function deploy(target) {
      this.context.migrate(target);
    };

    Group.prototype.allocate = function allocate(allocator) {
      this._allocator = allocator.allocate({ type: this.elementType, isNested: true });
      return this._allocator.container;
    };

    /**
     * Place the document element this component manages into the document.
     *
     * @private
     * @method deploy
     * @param {Node} target document parent of this container
     */
    Group.prototype.deploy = function deploy(target) {
      //Do nothing
    };

    /**
     * Remove this component and contained content from the document
     *
     * @private
     * @method recall
     *
     * @param {Node} target node to which the component was deployed
     */
    Group.prototype.recall = function recall(target) {
      /*
       * Previous recalling heuristic was this:
       * this._container = document.createDocumentFragment();
       * this.context.migrate(this._container);
       * However this was abandoned because when the same surfaces were initialized within a different context,
       * they didn't know they needed to be setup again, because their elements still existed. Instead, the
       * current solution keeps the elements in the DOM in a nested manner in case they would be needed again.
       *
       * */
    };

    Group.prototype.deallocate = function deallocate(allocator) {
      this.context.cleanup(this._allocator);
      return allocator.deallocateAllocator(this._allocator);
    };

    /**
     * Apply changes from this component to the corresponding document element.
     *
     * @private
     * @method commit
     *
     * @param {Object} context update spec passed in from above in the render tree.
     */
    Group.prototype.commit = function commit(context) {
      var transform = context.transform;
      var origin = context.origin;
      var opacity = context.opacity;
      var size = context.size;
      var result = Surface.prototype.commit.call(this, {
        allocator: context.allocator,
        transform: Transform.thenMove(transform, [-origin[0] * size[0], -origin[1] * size[1], 0]),
        opacity: opacity,
        origin: origin,
        size: this._surfaceSize
      });
      if (size[0] !== this._groupSize[0] || size[1] !== this._groupSize[1]) {
        this._groupSize[0] = size[0];
        this._groupSize[1] = size[1];
        this.context.setSize(size);
      }
      /* Executes the commit functions of the children */
      this.context.update({
        allocator: this._allocator,
        transform: Transform.translate(-origin[0] * size[0], -origin[1] * size[1], 0),
        origin: origin,
        size: size
      });
      return result;
    };

    module.exports = Group;
  }).call($__exports, $__require, $__exports, $__module);
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
$__System.registerDynamic('239', ['194'], false, function ($__require, $__exports, $__module) {
    $__module.uri = $__module.id;
    return (function (require, exports, module) {
        var EventHandler = require('194');

        /**
         * The Physics Engine is responsible for mediating bodies with their
         *   interaction with forces and constraints (agents). Specifically, it
         *   is responsible for:
         *
         *   - adding and removing bodies
         *   - updating a body's state over time
         *   - attaching and detaching agents
         *   - sleeping upon equillibrium and waking upon excitation
         *
         * @class PhysicsEngine
         * @constructor
         * @param options {Object} options
         */
        function PhysicsEngine(options) {
            this.options = Object.create(PhysicsEngine.DEFAULT_OPTIONS);
            if (options) this.setOptions(options);

            this._particles = []; //list of managed particles
            this._bodies = []; //list of managed bodies
            this._agentData = {}; //hash of managed agent data
            this._forces = []; //list of Ids of agents that are forces
            this._constraints = []; //list of Ids of agents that are constraints

            this._buffer = 0.0;
            this._prevTime = now();
            this._isSleeping = false;
            this._eventHandler = null;
            this._currAgentId = 0;
            this._hasBodies = false;
            this._eventHandler = null;
        }

        /** const */
        var TIMESTEP = 17;
        var MIN_TIME_STEP = 1000 / 120;
        var MAX_TIME_STEP = 17;

        var now = Date.now;

        // Catalogue of outputted events
        var _events = {
            start: 'start',
            update: 'update',
            end: 'end'
        };

        /**
         * @property PhysicsEngine.DEFAULT_OPTIONS
         * @type Object
         * @protected
         * @static
         */
        PhysicsEngine.DEFAULT_OPTIONS = {

            /**
             * The number of iterations the engine takes to resolve constraints
             * @attribute constraintSteps
             * @type Number
             */
            constraintSteps: 1,

            /**
             * The energy threshold required for the Physics Engine to update
             * @attribute sleepTolerance
             * @type Number
             */
            sleepTolerance: 1e-7,

            /**
             * The maximum velocity magnitude of a physics body
             *      Range : [0, Infinity]
             * @attribute velocityCap
             * @type Number
             */
            velocityCap: undefined,

            /**
             * The maximum angular velocity magnitude of a physics body
             *      Range : [0, Infinity]
             * @attribute angularVelocityCap
             * @type Number
             */
            angularVelocityCap: undefined
        };

        /**
         * Options setter
         *
         * @method setOptions
         * @param opts {Object}
         */
        PhysicsEngine.prototype.setOptions = function setOptions(opts) {
            for (var key in opts) if (this.options[key]) this.options[key] = opts[key];
        };

        /**
         * Method to add a physics body to the engine. Necessary to update the
         *   body over time.
         *
         * @method addBody
         * @param body {Body}
         * @return body {Body}
         */
        PhysicsEngine.prototype.addBody = function addBody(body) {
            body._engine = this;
            if (body.isBody) {
                this._bodies.push(body);
                this._hasBodies = true;
            } else this._particles.push(body);
            body.on('start', this.wake.bind(this));
            return body;
        };

        /**
         * Remove a body from the engine. Detaches body from all forces and
         *   constraints.
         *
         * TODO: Fix for in loop
         *
         * @method removeBody
         * @param body {Body}
         */
        PhysicsEngine.prototype.removeBody = function removeBody(body) {
            var array = body.isBody ? this._bodies : this._particles;
            var index = array.indexOf(body);
            if (index > -1) {
                for (var agentKey in this._agentData) {
                    if (this._agentData.hasOwnProperty(agentKey)) {
                        this.detachFrom(this._agentData[agentKey].id, body);
                    }
                }
                array.splice(index, 1);
            }
            if (this.getBodies().length === 0) this._hasBodies = false;
        };

        function _mapAgentArray(agent) {
            if (agent.applyForce) return this._forces;
            if (agent.applyConstraint) return this._constraints;
        }

        function _attachOne(agent, targets, source) {
            if (targets === undefined) targets = this.getParticlesAndBodies();
            if (!(targets instanceof Array)) targets = [targets];

            agent.on('change', this.wake.bind(this));

            this._agentData[this._currAgentId] = {
                agent: agent,
                id: this._currAgentId,
                targets: targets,
                source: source
            };

            _mapAgentArray.call(this, agent).push(this._currAgentId);
            return this._currAgentId++;
        }

        /**
         * Attaches a force or constraint to a Body. Returns an AgentId of the
         *   attached agent which can be used to detach the agent.
         *
         * @method attach
         * @param agents {Agent|Array.Agent} A force, constraint, or array of them.
         * @param [targets=All] {Body|Array.Body} The Body or Bodies affected by the agent
         * @param [source] {Body} The source of the agent
         * @return AgentId {Number}
         */
        PhysicsEngine.prototype.attach = function attach(agents, targets, source) {
            this.wake();

            if (agents instanceof Array) {
                var agentIDs = [];
                for (var i = 0; i < agents.length; i++) agentIDs[i] = _attachOne.call(this, agents[i], targets, source);
                return agentIDs;
            } else return _attachOne.call(this, agents, targets, source);
        };

        /**
         * Append a body to the targets of a previously defined physics agent.
         *
         * @method attachTo
         * @param agentID {AgentId} The agentId of a previously defined agent
         * @param target {Body} The Body affected by the agent
         */
        PhysicsEngine.prototype.attachTo = function attachTo(agentID, target) {
            _getAgentData.call(this, agentID).targets.push(target);
        };

        /**
         * Undoes PhysicsEngine.attach. Removes an agent and its associated
         *   effect on its affected Bodies.
         *
         * @method detach
         * @param id {AgentId} The agentId of a previously defined agent
         */
        PhysicsEngine.prototype.detach = function detach(id) {
            // detach from forces/constraints array
            var agent = this.getAgent(id);
            var agentArray = _mapAgentArray.call(this, agent);
            var index = agentArray.indexOf(id);
            agentArray.splice(index, 1);

            // detach agents array
            delete this._agentData[id];
        };

        /**
         * Remove a single Body from a previously defined agent.
         *
         * @method detach
         * @param id {AgentId} The agentId of a previously defined agent
         * @param target {Body} The body to remove from the agent
         */
        PhysicsEngine.prototype.detachFrom = function detachFrom(id, target) {
            var boundAgent = _getAgentData.call(this, id);
            if (boundAgent.source === target) this.detach(id);else {
                var targets = boundAgent.targets;
                var index = targets.indexOf(target);
                if (index > -1) targets.splice(index, 1);
            }
        };

        /**
         * A convenience method to give the Physics Engine a clean slate of
         * agents. Preserves all added Body objects.
         *
         * @method detachAll
         */
        PhysicsEngine.prototype.detachAll = function detachAll() {
            this._agentData = {};
            this._forces = [];
            this._constraints = [];
            this._currAgentId = 0;
        };

        function _getAgentData(id) {
            return this._agentData[id];
        }

        /**
         * Returns the corresponding agent given its agentId.
         *
         * @method getAgent
         * @param id {AgentId}
         */
        PhysicsEngine.prototype.getAgent = function getAgent(id) {
            return _getAgentData.call(this, id).agent;
        };

        /**
         * Returns all particles that are currently managed by the Physics Engine.
         *
         * @method getParticles
         * @return particles {Array.Particles}
         */
        PhysicsEngine.prototype.getParticles = function getParticles() {
            return this._particles;
        };

        /**
         * Returns all bodies, except particles, that are currently managed by the Physics Engine.
         *
         * @method getBodies
         * @return bodies {Array.Bodies}
         */
        PhysicsEngine.prototype.getBodies = function getBodies() {
            return this._bodies;
        };

        /**
         * Returns all bodies that are currently managed by the Physics Engine.
         *
         * @method getBodies
         * @return bodies {Array.Bodies}
         */
        PhysicsEngine.prototype.getParticlesAndBodies = function getParticlesAndBodies() {
            return this.getParticles().concat(this.getBodies());
        };

        /**
         * Iterates over every Particle and applies a function whose first
         *   argument is the Particle
         *
         * @method forEachParticle
         * @param fn {Function} Function to iterate over
         * @param [dt] {Number} Delta time
         */
        PhysicsEngine.prototype.forEachParticle = function forEachParticle(fn, dt) {
            var particles = this.getParticles();
            for (var index = 0, len = particles.length; index < len; index++) fn.call(this, particles[index], dt);
        };

        /**
         * Iterates over every Body that isn't a Particle and applies
         *   a function whose first argument is the Body
         *
         * @method forEachBody
         * @param fn {Function} Function to iterate over
         * @param [dt] {Number} Delta time
         */
        PhysicsEngine.prototype.forEachBody = function forEachBody(fn, dt) {
            if (!this._hasBodies) return;
            var bodies = this.getBodies();
            for (var index = 0, len = bodies.length; index < len; index++) fn.call(this, bodies[index], dt);
        };

        /**
         * Iterates over every Body and applies a function whose first
         *   argument is the Body
         *
         * @method forEach
         * @param fn {Function} Function to iterate over
         * @param [dt] {Number} Delta time
         */
        PhysicsEngine.prototype.forEach = function forEach(fn, dt) {
            this.forEachParticle(fn, dt);
            this.forEachBody(fn, dt);
        };

        function _updateForce(index) {
            var boundAgent = _getAgentData.call(this, this._forces[index]);
            boundAgent.agent.applyForce(boundAgent.targets, boundAgent.source);
        }

        function _updateForces() {
            for (var index = this._forces.length - 1; index > -1; index--) _updateForce.call(this, index);
        }

        function _updateConstraint(index, dt) {
            var boundAgent = this._agentData[this._constraints[index]];
            return boundAgent.agent.applyConstraint(boundAgent.targets, boundAgent.source, dt);
        }

        function _updateConstraints(dt) {
            var iteration = 0;
            while (iteration < this.options.constraintSteps) {
                for (var index = this._constraints.length - 1; index > -1; index--) _updateConstraint.call(this, index, dt);
                iteration++;
            }
        }

        function _updateVelocities(body, dt) {
            body.integrateVelocity(dt);
            if (this.options.velocityCap) body.velocity.cap(this.options.velocityCap).put(body.velocity);
        }

        function _updateAngularVelocities(body, dt) {
            body.integrateAngularMomentum(dt);
            body.updateAngularVelocity();
            if (this.options.angularVelocityCap) body.angularVelocity.cap(this.options.angularVelocityCap).put(body.angularVelocity);
        }

        function _updateOrientations(body, dt) {
            body.integrateOrientation(dt);
        }

        function _updatePositions(body, dt) {
            body.integratePosition(dt);
            body.emit(_events.update, body);
        }

        function _integrate(dt) {
            _updateForces.call(this, dt);
            this.forEach(_updateVelocities, dt);
            this.forEachBody(_updateAngularVelocities, dt);
            _updateConstraints.call(this, dt);
            this.forEachBody(_updateOrientations, dt);
            this.forEach(_updatePositions, dt);
        }

        function _getParticlesEnergy() {
            var energy = 0.0;
            var particleEnergy = 0.0;
            this.forEach(function (particle) {
                particleEnergy = particle.getEnergy();
                energy += particleEnergy;
            });
            return energy;
        }

        function _getAgentsEnergy() {
            var energy = 0;
            for (var id in this._agentData) energy += this.getAgentEnergy(id);
            return energy;
        }

        /**
         * Calculates the potential energy of an agent, like a spring, by its Id
         *
         * @method getAgentEnergy
         * @param agentId {Number} The attached agent Id
         * @return energy {Number}
         */
        PhysicsEngine.prototype.getAgentEnergy = function (agentId) {
            var agentData = _getAgentData.call(this, agentId);
            return agentData.agent.getEnergy(agentData.targets, agentData.source);
        };

        /**
         * Calculates the kinetic energy of all Body objects and potential energy
         *   of all attached agents.
         *
         * TODO: implement.
         * @method getEnergy
         * @return energy {Number}
         */
        PhysicsEngine.prototype.getEnergy = function getEnergy() {
            return _getParticlesEnergy.call(this) + _getAgentsEnergy.call(this);
        };

        /**
         * Updates all Body objects managed by the physics engine over the
         *   time duration since the last time step was called.
         *
         * @method step
         */
        PhysicsEngine.prototype.step = function step() {
            if (this.isSleeping()) return;

            //set current frame's time
            var currTime = now();

            //milliseconds elapsed since last frame
            var dtFrame = currTime - this._prevTime;

            this._prevTime = currTime;

            if (dtFrame < MIN_TIME_STEP) return;
            if (dtFrame > MAX_TIME_STEP) dtFrame = MAX_TIME_STEP;

            //robust integration
            //        this._buffer += dtFrame;
            //        while (this._buffer > this._timestep){
            //            _integrate.call(this, this._timestep);
            //            this._buffer -= this._timestep;
            //        };
            //        _integrate.call(this, this._buffer);
            //        this._buffer = 0.0;

            _integrate.call(this, TIMESTEP);

            this.emit(_events.update, this);

            if (this.getEnergy() < this.options.sleepTolerance) this.sleep();
        };

        /**
         * Tells whether the Physics Engine is sleeping or awake.
         *
         * @method isSleeping
         * @return {Boolean}
         */
        PhysicsEngine.prototype.isSleeping = function isSleeping() {
            return this._isSleeping;
        };

        /**
         * Tells whether the Physics Engine is sleeping or awake.
         *
         * @method isActive
         * @return {Boolean}
         */
        PhysicsEngine.prototype.isActive = function isSleeping() {
            return !this._isSleeping;
        };

        /**
         * Stops the Physics Engine update loop. Emits an 'end' event.
         *
         * @method sleep
         */
        PhysicsEngine.prototype.sleep = function sleep() {
            if (this._isSleeping) return;
            this.forEach(function (body) {
                body.sleep();
            });
            this.emit(_events.end, this);
            this._isSleeping = true;
        };

        /**
         * Restarts the Physics Engine update loop. Emits an 'start' event.
         *
         * @method wake
         */
        PhysicsEngine.prototype.wake = function wake() {
            if (!this._isSleeping) return;
            this._prevTime = now();
            this.emit(_events.start, this);
            this._isSleeping = false;
        };

        PhysicsEngine.prototype.emit = function emit(type, data) {
            if (this._eventHandler === null) return;
            this._eventHandler.emit(type, data);
        };

        PhysicsEngine.prototype.on = function on(event, fn) {
            if (this._eventHandler === null) this._eventHandler = new EventHandler();
            this._eventHandler.on(event, fn);
        };

        module.exports = PhysicsEngine;
    }).call($__exports, $__require, $__exports, $__module);
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: david@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */

$__System.registerDynamic("23e", [], false, function ($__require, $__exports, $__module) {
  $__module.uri = $__module.id;
  return (function (require, exports, module) {

    /**
     * Ordinary Differential Equation (ODE) Integrator.
     * Manages updating a physics body's state over time.
     *
     *  p = position, v = velocity, m = mass, f = force, dt = change in time
     *
     *      v <- v + dt * f / m
     *      p <- p + dt * v
     *
     *  q = orientation, w = angular velocity, L = angular momentum
     *
     *      L <- L + dt * t
     *      q <- q + dt/2 * q * w
     *
     * @class SymplecticEuler
     * @constructor
     * @param {Object} options Options to set
     */
    var SymplecticEuler = {};

    /*
     * Updates the velocity of a physics body from its accumulated force.
     *      v <- v + dt * f / m
     *
     * @method integrateVelocity
     * @param {Body} physics body
     * @param {Number} dt delta time
     */
    SymplecticEuler.integrateVelocity = function integrateVelocity(body, dt) {
      var v = body.velocity;
      var w = body.inverseMass;
      var f = body.force;

      if (f.isZero()) return;

      v.add(f.mult(dt * w)).put(v);
      f.clear();
    };

    /*
     * Updates the position of a physics body from its velocity.
     *      p <- p + dt * v
     *
     * @method integratePosition
     * @param {Body} physics body
     * @param {Number} dt delta time
     */
    SymplecticEuler.integratePosition = function integratePosition(body, dt) {
      var p = body.position;
      var v = body.velocity;

      p.add(v.mult(dt)).put(p);
    };

    /*
     * Updates the angular momentum of a physics body from its accumuled torque.
     *      L <- L + dt * t
     *
     * @method integrateAngularMomentum
     * @param {Body} physics body (except a particle)
     * @param {Number} dt delta time
     */
    SymplecticEuler.integrateAngularMomentum = function integrateAngularMomentum(body, dt) {
      var L = body.angularMomentum;
      var t = body.torque;

      if (t.isZero()) return;

      L.add(t.mult(dt)).put(L);
      t.clear();
    };

    /*
     * Updates the orientation of a physics body from its angular velocity.
     *      q <- q + dt/2 * q * w
     *
     * @method integrateOrientation
     * @param {Body} physics body (except a particle)
     * @param {Number} dt delta time
     */
    SymplecticEuler.integrateOrientation = function integrateOrientation(body, dt) {
      var q = body.orientation;
      var w = body.angularVelocity;

      if (w.isZero()) return;
      q.add(q.multiply(w).scalarMultiply(0.5 * dt)).put(q);
      //        q.normalize.put(q);
    };

    module.exports = SymplecticEuler;
  }).call($__exports, $__require, $__exports, $__module);
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: david@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */

$__System.registerDynamic('237', ['236', '169', '194', '23e'], false, function ($__require, $__exports, $__module) {
    $__module.uri = $__module.id;
    return (function (require, exports, module) {
        var Vector = require('236');
        var Transform = require('169');
        var EventHandler = require('194');
        var Integrator = require('23e');

        /**
         * A point body that is controlled by the Physics Engine. A particle has
         *   position and velocity states that are updated by the Physics Engine.
         *   Ultimately, a particle is a special type of modifier, and can be added to
         *   the Famo.us Scene Graph like any other modifier.
         *
         * @class Particle
         * @uses EventHandler
         * @extensionfor Body
         *
         * @param [options] {Options}           An object of configurable options.
         * @param [options.position] {Array}    The position of the particle.
         * @param [options.velocity] {Array}    The velocity of the particle.
         * @param [options.mass] {Number}       The mass of the particle.
         */
        function Particle(options) {
            options = options || {};
            var defaults = Particle.DEFAULT_OPTIONS;

            // registers
            this.position = new Vector();
            this.velocity = new Vector();
            this.force = new Vector();

            // state variables
            this._engine = null;
            this._isSleeping = true;
            this._eventOutput = null;

            // set scalars
            this.mass = options.mass !== undefined ? options.mass : defaults.mass;

            this.inverseMass = 1 / this.mass;

            // set vectors
            this.setPosition(options.position || defaults.position);
            this.setVelocity(options.velocity || defaults.velocity);
            this.force.set(options.force || [0, 0, 0]);

            this.transform = Transform.identity.slice();

            // cached _spec
            this._spec = {
                size: [true, true],
                target: {
                    transform: this.transform,
                    origin: [0.5, 0.5],
                    target: null
                }
            };
        }

        Particle.DEFAULT_OPTIONS = {
            position: [0, 0, 0],
            velocity: [0, 0, 0],
            mass: 1
        };

        //Catalogue of outputted events
        var _events = {
            start: 'start',
            update: 'update',
            end: 'end'
        };

        // Cached timing function
        var now = Date.now;

        /**
         * @attribute isBody
         * @type Boolean
         * @static
         */
        Particle.prototype.isBody = false;

        /**
         * Determines if particle is active
         *
         * @method isActive
         * @return {Boolean}
         */
        Particle.prototype.isActive = function isActive() {
            return !this._isSleeping;
        };

        /**
         * Stops the particle from updating
         *
         * @method sleep
         */
        Particle.prototype.sleep = function sleep() {
            if (this._isSleeping) return;
            this.emit(_events.end, this);
            this._isSleeping = true;
        };

        /**
         * Starts the particle update
         *
         * @method wake
         */
        Particle.prototype.wake = function wake() {
            if (!this._isSleeping) return;
            this.emit(_events.start, this);
            this._isSleeping = false;
            this._prevTime = now();
            if (this._engine) this._engine.wake();
        };

        /**
         * Basic setter for position
         *
         * @method setPosition
         * @param position {Array|Vector}
         */
        Particle.prototype.setPosition = function setPosition(position) {
            this.position.set(position);
        };

        /**
         * 1-dimensional setter for position
         *
         * @method setPosition1D
         * @param x {Number}
         */
        Particle.prototype.setPosition1D = function setPosition1D(x) {
            this.position.x = x;
        };

        /**
         * Basic getter function for position
         *
         * @method getPosition
         * @return position {Array}
         */
        Particle.prototype.getPosition = function getPosition() {
            this._engine.step();
            return this.position.get();
        };

        /**
         * 1-dimensional getter for position
         *
         * @method getPosition1D
         * @return value {Number}
         */
        Particle.prototype.getPosition1D = function getPosition1D() {
            this._engine.step();
            return this.position.x;
        };

        /**
         * Basic setter function for velocity Vector
         *
         * @method setVelocity
         * @function
         */
        Particle.prototype.setVelocity = function setVelocity(velocity) {
            this.velocity.set(velocity);
            if (!(velocity[0] === 0 && velocity[1] === 0 && velocity[2] === 0)) this.wake();
        };

        /**
         * 1-dimensional setter for velocity
         *
         * @method setVelocity1D
         * @param x {Number}
         */
        Particle.prototype.setVelocity1D = function setVelocity1D(x) {
            this.velocity.x = x;
            if (x !== 0) this.wake();
        };

        /**
         * Basic getter function for velocity Vector
         *
         * @method getVelocity
         * @return velocity {Array}
         */
        Particle.prototype.getVelocity = function getVelocity() {
            return this.velocity.get();
        };

        /**
         * Basic setter function for force Vector
         *
         * @method setForce
         * @return force {Array}
         */
        Particle.prototype.setForce = function setForce(force) {
            this.force.set(force);
            this.wake();
        };

        /**
         * 1-dimensional getter for velocity
         *
         * @method getVelocity1D
         * @return velocity {Number}
         */
        Particle.prototype.getVelocity1D = function getVelocity1D() {
            return this.velocity.x;
        };

        /**
         * Basic setter function for mass quantity
         *
         * @method setMass
         * @param mass {Number} mass
         */
        Particle.prototype.setMass = function setMass(mass) {
            this.mass = mass;
            this.inverseMass = 1 / mass;
        };

        /**
         * Basic getter function for mass quantity
         *
         * @method getMass
         * @return mass {Number}
         */
        Particle.prototype.getMass = function getMass() {
            return this.mass;
        };

        /**
         * Reset position and velocity
         *
         * @method reset
         * @param position {Array|Vector}
         * @param velocity {Array|Vector}
         */
        Particle.prototype.reset = function reset(position, velocity) {
            this.setPosition(position || [0, 0, 0]);
            this.setVelocity(velocity || [0, 0, 0]);
        };

        /**
         * Add force vector to existing internal force Vector
         *
         * @method applyForce
         * @param force {Vector}
         */
        Particle.prototype.applyForce = function applyForce(force) {
            if (force.isZero()) return;
            this.force.add(force).put(this.force);
            this.wake();
        };

        /**
         * Add impulse (change in velocity) Vector to this Vector's velocity.
         *
         * @method applyImpulse
         * @param impulse {Vector}
         */
        Particle.prototype.applyImpulse = function applyImpulse(impulse) {
            if (impulse.isZero()) return;
            var velocity = this.velocity;
            velocity.add(impulse.mult(this.inverseMass)).put(velocity);
        };

        /**
         * Update a particle's velocity from its force accumulator
         *
         * @method integrateVelocity
         * @param dt {Number} Time differential
         */
        Particle.prototype.integrateVelocity = function integrateVelocity(dt) {
            Integrator.integrateVelocity(this, dt);
        };

        /**
         * Update a particle's position from its velocity
         *
         * @method integratePosition
         * @param dt {Number} Time differential
         */
        Particle.prototype.integratePosition = function integratePosition(dt) {
            Integrator.integratePosition(this, dt);
        };

        /**
         * Update the position and velocity of the particle
         *
         * @method _integrate
         * @protected
         * @param dt {Number} Time differential
         */
        Particle.prototype._integrate = function _integrate(dt) {
            this.integrateVelocity(dt);
            this.integratePosition(dt);
        };

        /**
         * Get kinetic energy of the particle.
         *
         * @method getEnergy
         * @function
         */
        Particle.prototype.getEnergy = function getEnergy() {
            return 0.5 * this.mass * this.velocity.normSquared();
        };

        /**
         * Generate transform from the current position state
         *
         * @method getTransform
         * @return Transform {Transform}
         */
        Particle.prototype.getTransform = function getTransform() {
            this._engine.step();

            var position = this.position;
            var transform = this.transform;

            transform[12] = position.x;
            transform[13] = position.y;
            transform[14] = position.z;
            return transform;
        };

        /**
         * The modify interface of a Modifier
         *
         * @method modify
         * @param target {Spec}
         * @return Spec {Spec}
         */
        Particle.prototype.modify = function modify(target) {
            var _spec = this._spec.target;
            _spec.transform = this.getTransform();
            _spec.target = target;
            return this._spec;
        };

        // private
        function _createEventOutput() {
            this._eventOutput = new EventHandler();
            this._eventOutput.bindThis(this);
            EventHandler.setOutputHandler(this, this._eventOutput);
        }

        Particle.prototype.emit = function emit(type, data) {
            if (!this._eventOutput) return;
            this._eventOutput.emit(type, data);
        };

        Particle.prototype.on = function on() {
            _createEventOutput.call(this);
            return this.on.apply(this, arguments);
        };

        Particle.prototype.removeListener = function removeListener() {
            _createEventOutput.call(this);
            return this.removeListener.apply(this, arguments);
        };

        Particle.prototype.pipe = function pipe() {
            _createEventOutput.call(this);
            return this.pipe.apply(this, arguments);
        };

        Particle.prototype.unpipe = function unpipe() {
            _createEventOutput.call(this);
            return this.unpipe.apply(this, arguments);
        };

        module.exports = Particle;
    }).call($__exports, $__require, $__exports, $__module);
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: david@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */

$__System.registerDynamic('23f', ['240'], false, function ($__require, $__exports, $__module) {
  $__module.uri = $__module.id;
  return (function (require, exports, module) {
    var Force = require('240');

    /**
     * Drag is a force that opposes velocity. Attach it to the physics engine
     * to slow down a physics body in motion.
     *
     * @class Drag
     * @constructor
     * @extends Force
     * @param {Object} options options to set on drag
     */
    function Drag(options) {
      this.options = Object.create(this.constructor.DEFAULT_OPTIONS);
      if (options) this.setOptions(options);

      Force.call(this);
    }

    Drag.prototype = Object.create(Force.prototype);
    Drag.prototype.constructor = Drag;

    /**
     * @property Drag.FORCE_FUNCTIONS
     * @type Object
     * @protected
     * @static
     */
    Drag.FORCE_FUNCTIONS = {

      /**
       * A drag force proportional to the velocity
       * @attribute LINEAR
       * @type Function
       * @param {Vector} velocity
       * @return {Vector} drag force
       */
      LINEAR: function (velocity) {
        return velocity;
      },

      /**
       * A drag force proportional to the square of the velocity
       * @attribute QUADRATIC
       * @type Function
       * @param {Vector} velocity
       * @return {Vector} drag force
       */
      QUADRATIC: function (velocity) {
        return velocity.mult(velocity.norm());
      }
    };

    /**
     * @property Drag.DEFAULT_OPTIONS
     * @type Object
     * @protected
     * @static
     */
    Drag.DEFAULT_OPTIONS = {

      /**
       * The strength of the force
       *    Range : [0, 0.1]
       * @attribute strength
       * @type Number
       * @default 0.01
       */
      strength: 0.01,

      /**
       * The type of opposing force
       * @attribute forceFunction
       * @type Function
       */
      forceFunction: Drag.FORCE_FUNCTIONS.LINEAR
    };

    /**
     * Adds a drag force to a physics body's force accumulator.
     *
     * @method applyForce
     * @param targets {Array.Body} Array of bodies to apply drag force to.
     */
    Drag.prototype.applyForce = function applyForce(targets) {
      var strength = this.options.strength;
      var forceFunction = this.options.forceFunction;
      var force = this.force;
      var index;
      var particle;

      for (index = 0; index < targets.length; index++) {
        particle = targets[index];
        forceFunction(particle.velocity).mult(-strength).put(force);
        particle.applyForce(force);
      }
    };

    /**
     * Basic options setter
     *
     * @method setOptions
     * @param {Objects} options
     */
    Drag.prototype.setOptions = function setOptions(options) {
      for (var key in options) this.options[key] = options[key];
    };

    module.exports = Drag;
  }).call($__exports, $__require, $__exports, $__module);
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: david@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */

$__System.registerDynamic('240', ['236', '194'], false, function ($__require, $__exports, $__module) {
    $__module.uri = $__module.id;
    return (function (require, exports, module) {
        var Vector = require('236');
        var EventHandler = require('194');

        /**
         * Force base class.
         *
         * @class Force
         * @uses EventHandler
         * @constructor
         */
        function Force(force) {
            this.force = new Vector(force);
            this._eventOutput = new EventHandler();
            EventHandler.setOutputHandler(this, this._eventOutput);
        }

        /**
         * Basic setter for options
         *
         * @method setOptions
         * @param options {Objects}
         */
        Force.prototype.setOptions = function setOptions(options) {
            this._eventOutput.emit('change', options);
        };

        /**
         * Adds a force to a physics body's force accumulator.
         *
         * @method applyForce
         * @param targets {Array.Body} Array of bodies to apply a force to.
         */
        Force.prototype.applyForce = function applyForce(targets) {
            var length = targets.length;
            while (length--) {
                targets[length].applyForce(this.force);
            }
        };

        /**
         * Getter for a force's potential energy.
         *
         * @method getEnergy
         * @return energy {Number}
         */
        Force.prototype.getEnergy = function getEnergy() {
            return 0.0;
        };

        module.exports = Force;
    }).call($__exports, $__require, $__exports, $__module);
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: david@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */

$__System.registerDynamic('236', [], false, function ($__require, $__exports, $__module) {
    $__module.uri = $__module.id;
    return (function (require, exports, module) {

        /**
         * Three-element floating point vector.
         *
         * @class Vector
         * @constructor
         *
         * @param {number} x x element value
         * @param {number} y y element value
         * @param {number} z z element value
         */
        function Vector(x, y, z) {
            if (arguments.length === 1 && x !== undefined) this.set(x);else {
                this.x = x || 0;
                this.y = y || 0;
                this.z = z || 0;
            }
            return this;
        }

        var _register = new Vector(0, 0, 0);

        /**
         * Add this element-wise to another Vector, element-wise.
         *   Note: This sets the internal result register, so other references to that vector will change.
         *
         * @method add
         * @param {Vector} v addend
         * @return {Vector} vector sum
         */
        Vector.prototype.add = function add(v) {
            return _setXYZ.call(_register, this.x + v.x, this.y + v.y, this.z + v.z);
        };

        /**
         * Subtract another vector from this vector, element-wise.
         *   Note: This sets the internal result register, so other references to that vector will change.
         *
         * @method sub
         * @param {Vector} v subtrahend
         * @return {Vector} vector difference
         */
        Vector.prototype.sub = function sub(v) {
            return _setXYZ.call(_register, this.x - v.x, this.y - v.y, this.z - v.z);
        };

        /**
         * Scale Vector by floating point r.
         *   Note: This sets the internal result register, so other references to that vector will change.
         *
         * @method mult
         *
         * @param {number} r scalar
         * @return {Vector} vector result
         */
        Vector.prototype.mult = function mult(r) {
            return _setXYZ.call(_register, r * this.x, r * this.y, r * this.z);
        };

        /**
         * Scale Vector by floating point 1/r.
         *   Note: This sets the internal result register, so other references to that vector will change.
         *
         * @method div
         *
         * @param {number} r scalar
         * @return {Vector} vector result
         */
        Vector.prototype.div = function div(r) {
            return this.mult(1 / r);
        };

        /**
         * Given another vector v, return cross product (v)x(this).
         *   Note: This sets the internal result register, so other references to that vector will change.
         *
         * @method cross
         * @param {Vector} v Left Hand Vector
         * @return {Vector} vector result
         */
        Vector.prototype.cross = function cross(v) {
            var x = this.x;
            var y = this.y;
            var z = this.z;
            var vx = v.x;
            var vy = v.y;
            var vz = v.z;

            return _setXYZ.call(_register, z * vy - y * vz, x * vz - z * vx, y * vx - x * vy);
        };

        /**
         * Component-wise equality test between this and Vector v.
         * @method equals
         * @param {Vector} v vector to compare
         * @return {boolean}
         */
        Vector.prototype.equals = function equals(v) {
            return v.x === this.x && v.y === this.y && v.z === this.z;
        };

        /**
         * Rotate clockwise around x-axis by theta radians.
         *   Note: This sets the internal result register, so other references to that vector will change.
         * @method rotateX
         * @param {number} theta radians
         * @return {Vector} rotated vector
         */
        Vector.prototype.rotateX = function rotateX(theta) {
            var x = this.x;
            var y = this.y;
            var z = this.z;

            var cosTheta = Math.cos(theta);
            var sinTheta = Math.sin(theta);

            return _setXYZ.call(_register, x, y * cosTheta - z * sinTheta, y * sinTheta + z * cosTheta);
        };

        /**
         * Rotate clockwise around y-axis by theta radians.
         *   Note: This sets the internal result register, so other references to that vector will change.
         * @method rotateY
         * @param {number} theta radians
         * @return {Vector} rotated vector
         */
        Vector.prototype.rotateY = function rotateY(theta) {
            var x = this.x;
            var y = this.y;
            var z = this.z;

            var cosTheta = Math.cos(theta);
            var sinTheta = Math.sin(theta);

            return _setXYZ.call(_register, z * sinTheta + x * cosTheta, y, z * cosTheta - x * sinTheta);
        };

        /**
         * Rotate clockwise around z-axis by theta radians.
         *   Note: This sets the internal result register, so other references to that vector will change.
         * @method rotateZ
         * @param {number} theta radians
         * @return {Vector} rotated vector
         */
        Vector.prototype.rotateZ = function rotateZ(theta) {
            var x = this.x;
            var y = this.y;
            var z = this.z;

            var cosTheta = Math.cos(theta);
            var sinTheta = Math.sin(theta);

            return _setXYZ.call(_register, x * cosTheta - y * sinTheta, x * sinTheta + y * cosTheta, z);
        };

        /**
         * Return dot product of this with a second Vector
         * @method dot
         * @param {Vector} v second vector
         * @return {number} dot product
         */
        Vector.prototype.dot = function dot(v) {
            return this.x * v.x + this.y * v.y + this.z * v.z;
        };

        /**
         * Return squared length of this vector
         * @method normSquared
         * @return {number} squared length
         */
        Vector.prototype.normSquared = function normSquared() {
            return this.dot(this);
        };

        /**
         * Return length of this vector
         * @method norm
         * @return {number} length
         */
        Vector.prototype.norm = function norm() {
            return Math.sqrt(this.normSquared());
        };

        /**
         * Scale Vector to specified length.
         *   If length is less than internal tolerance, set vector to [length, 0, 0].
         *   Note: This sets the internal result register, so other references to that vector will change.
         * @method normalize
         *
         * @param {number} length target length, default 1.0
         * @return {Vector}
         */
        Vector.prototype.normalize = function normalize(length) {
            if (arguments.length === 0) length = 1;
            var norm = this.norm();

            if (norm > 1e-7) return _setFromVector.call(_register, this.mult(length / norm));else return _setXYZ.call(_register, length, 0, 0);
        };

        /**
         * Make a separate copy of the Vector.
         *
         * @method clone
         *
         * @return {Vector}
         */
        Vector.prototype.clone = function clone() {
            return new Vector(this);
        };

        /**
         * True if and only if every value is 0 (or falsy)
         *
         * @method isZero
         *
         * @return {boolean}
         */
        Vector.prototype.isZero = function isZero() {
            return !(this.x || this.y || this.z);
        };

        function _setXYZ(x, y, z) {
            this.x = x;
            this.y = y;
            this.z = z;
            return this;
        }

        function _setFromArray(v) {
            return _setXYZ.call(this, v[0], v[1], v[2] || 0);
        }

        function _setFromVector(v) {
            return _setXYZ.call(this, v.x, v.y, v.z);
        }

        function _setFromNumber(x) {
            return _setXYZ.call(this, x, 0, 0);
        }

        /**
         * Set this Vector to the values in the provided Array or Vector.
         *
         * @method set
         * @param {object} v array, Vector, or number
         * @return {Vector} this
         */
        Vector.prototype.set = function set(v) {
            if (v instanceof Array) return _setFromArray.call(this, v);
            if (typeof v === 'number') return _setFromNumber.call(this, v);
            return _setFromVector.call(this, v);
        };

        Vector.prototype.setXYZ = function (x, y, z) {
            return _setXYZ.apply(this, arguments);
        };

        Vector.prototype.set1D = function (x) {
            return _setFromNumber.call(this, x);
        };

        /**
         * Put result of last internal register calculation in specified output vector.
         *
         * @method put
         * @param {Vector} v destination vector
         * @return {Vector} destination vector
         */

        Vector.prototype.put = function put(v) {
            if (this === _register) _setFromVector.call(v, _register);else _setFromVector.call(v, this);
        };

        /**
         * Set this vector to [0,0,0]
         *
         * @method clear
         */
        Vector.prototype.clear = function clear() {
            return _setXYZ.call(this, 0, 0, 0);
        };

        /**
         * Scale this Vector down to specified "cap" length.
         *   If Vector shorter than cap, or cap is Infinity, do nothing.
         *   Note: This sets the internal result register, so other references to that vector will change.
         *
         * @method cap
         * @return {Vector} capped vector
         */
        Vector.prototype.cap = function cap(cap) {
            if (cap === Infinity) return _setFromVector.call(_register, this);
            var norm = this.norm();
            if (norm > cap) return _setFromVector.call(_register, this.mult(cap / norm));else return _setFromVector.call(_register, this);
        };

        /**
         * Return projection of this Vector onto another.
         *   Note: This sets the internal result register, so other references to that vector will change.
         *
         * @method project
         * @param {Vector} n vector to project upon
         * @return {Vector} projected vector
         */
        Vector.prototype.project = function project(n) {
            return n.mult(this.dot(n));
        };

        /**
         * Reflect this Vector across provided vector.
         *   Note: This sets the internal result register, so other references to that vector will change.
         *
         * @method reflectAcross
         * @param {Vector} n vector to reflect across
         * @return {Vector} reflected vector
         */
        Vector.prototype.reflectAcross = function reflectAcross(n) {
            n.normalize().put(n);
            return _setFromVector(_register, this.sub(this.project(n).mult(2)));
        };

        /**
         * Convert Vector to three-element array.
         *
         * @method get
         * @return {array<number>} three-element array
         */
        Vector.prototype.get = function get() {
            return [this.x, this.y, this.z];
        };

        Vector.prototype.get1D = function () {
            return this.x;
        };

        module.exports = Vector;
    }).call($__exports, $__require, $__exports, $__module);
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: david@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */

/*global console */

$__System.registerDynamic('238', ['240', '236'], false, function ($__require, $__exports, $__module) {
    $__module.uri = $__module.id;
    return (function (require, exports, module) {
        var Force = require('240');
        var Vector = require('236');

        /**
         *  A force that moves a physics body to a location with a spring motion.
         *    The body can be moved to another physics body, or an anchor point.
         *
         *  @class Spring
         *  @constructor
         *  @extends Force
         *  @param {Object} options options to set on drag
         */
        function Spring(options) {
            Force.call(this);

            this.options = Object.create(this.constructor.DEFAULT_OPTIONS);
            if (options) this.setOptions(options);

            //registers
            this.disp = new Vector(0, 0, 0);

            _init.call(this);
        }

        Spring.prototype = Object.create(Force.prototype);
        Spring.prototype.constructor = Spring;

        /** @const */
        var pi = Math.PI;
        var MIN_PERIOD = 150;

        /**
         * @property Spring.FORCE_FUNCTIONS
         * @type Object
         * @protected
         * @static
         */
        Spring.FORCE_FUNCTIONS = {

            /**
             * A FENE (Finitely Extensible Nonlinear Elastic) spring force
             *      see: http://en.wikipedia.org/wiki/FENE
             * @attribute FENE
             * @type Function
             * @param {Number} dist current distance target is from source body
             * @param {Number} rMax maximum range of influence
             * @return {Number} unscaled force
             */
            FENE: function (dist, rMax) {
                var rMaxSmall = rMax * .99;
                var r = Math.max(Math.min(dist, rMaxSmall), -rMaxSmall);
                return r / (1 - r * r / (rMax * rMax));
            },

            /**
             * A Hookean spring force, linear in the displacement
             *      see: http://en.wikipedia.org/wiki/Hooke's_law
             * @attribute FENE
             * @type Function
             * @param {Number} dist current distance target is from source body
             * @return {Number} unscaled force
             */
            HOOK: function (dist) {
                return dist;
            }
        };

        /**
         * @property Spring.DEFAULT_OPTIONS
         * @type Object
         * @protected
         * @static
         */
        Spring.DEFAULT_OPTIONS = {

            /**
             * The amount of time in milliseconds taken for one complete oscillation
             * when there is no damping
             *    Range : [150, Infinity]
             * @attribute period
             * @type Number
             * @default 300
             */
            period: 300,

            /**
             * The damping of the spring.
             *    Range : [0, 1]
             *    0 = no damping, and the spring will oscillate forever
             *    1 = critically damped (the spring will never oscillate)
             * @attribute dampingRatio
             * @type Number
             * @default 0.1
             */
            dampingRatio: 0.1,

            /**
             * The rest length of the spring
             *    Range : [0, Infinity]
             * @attribute length
             * @type Number
             * @default 0
             */
            length: 0,

            /**
             * The maximum length of the spring (for a FENE spring)
             *    Range : [0, Infinity]
             * @attribute length
             * @type Number
             * @default Infinity
             */
            maxLength: Infinity,

            /**
             * The location of the spring's anchor, if not another physics body
             *
             * @attribute anchor
             * @type Array
             * @optional
             */
            anchor: undefined,

            /**
             * The type of spring force
             * @attribute forceFunction
             * @type Function
             */
            forceFunction: Spring.FORCE_FUNCTIONS.HOOK
        };

        function _calcStiffness() {
            var options = this.options;
            options.stiffness = Math.pow(2 * pi / options.period, 2);
        }

        function _calcDamping() {
            var options = this.options;
            options.damping = 4 * pi * options.dampingRatio / options.period;
        }

        function _init() {
            _calcStiffness.call(this);
            _calcDamping.call(this);
        }

        /**
         * Basic options setter
         *
         * @method setOptions
         * @param options {Object}
         */
        Spring.prototype.setOptions = function setOptions(options) {
            // TODO fix no-console error
            /* eslint no-console: 0 */

            if (options.anchor !== undefined) {
                if (options.anchor.position instanceof Vector) this.options.anchor = options.anchor.position;
                if (options.anchor instanceof Vector) this.options.anchor = options.anchor;
                if (options.anchor instanceof Array) this.options.anchor = new Vector(options.anchor);
            }

            if (options.period !== undefined) {
                if (options.period < MIN_PERIOD) {
                    options.period = MIN_PERIOD;
                    console.warn('The period of a SpringTransition is capped at ' + MIN_PERIOD + ' ms. Use a SnapTransition for faster transitions');
                }
                this.options.period = options.period;
            }

            if (options.dampingRatio !== undefined) this.options.dampingRatio = options.dampingRatio;
            if (options.length !== undefined) this.options.length = options.length;
            if (options.forceFunction !== undefined) this.options.forceFunction = options.forceFunction;
            if (options.maxLength !== undefined) this.options.maxLength = options.maxLength;

            _init.call(this);
            Force.prototype.setOptions.call(this, options);
        };

        /**
         * Adds a spring force to a physics body's force accumulator.
         *
         * @method applyForce
         * @param targets {Array.Body} Array of bodies to apply force to.
         */
        Spring.prototype.applyForce = function applyForce(targets, source) {
            var force = this.force;
            var disp = this.disp;
            var options = this.options;

            var stiffness = options.stiffness;
            var damping = options.damping;
            var restLength = options.length;
            var maxLength = options.maxLength;
            var anchor = options.anchor || source.position;
            var forceFunction = options.forceFunction;

            var i;
            var target;
            var p2;
            var v2;
            var dist;
            var m;

            for (i = 0; i < targets.length; i++) {
                target = targets[i];
                p2 = target.position;
                v2 = target.velocity;

                anchor.sub(p2).put(disp);
                dist = disp.norm() - restLength;

                if (dist === 0) return;

                //if dampingRatio specified, then override strength and damping
                m = target.mass;
                stiffness *= m;
                damping *= m;

                disp.normalize(stiffness * forceFunction(dist, maxLength)).put(force);

                if (damping) if (source) force.add(v2.sub(source.velocity).mult(-damping)).put(force);else force.add(v2.mult(-damping)).put(force);

                target.applyForce(force);
                if (source) source.applyForce(force.mult(-1));
            }
        };

        /**
         * Calculates the potential energy of the spring.
         *
         * @method getEnergy
         * @param [targets] target  The physics body attached to the spring
         * @return {source}         The potential energy of the spring
         */
        Spring.prototype.getEnergy = function getEnergy(targets, source) {
            var options = this.options;
            var restLength = options.length;
            var anchor = source ? source.position : options.anchor;
            var strength = options.stiffness;

            var energy = 0.0;
            for (var i = 0; i < targets.length; i++) {
                var target = targets[i];
                var dist = anchor.sub(target.position).norm() - restLength;
                energy += 0.5 * strength * dist * dist;
            }
            return energy;
        };

        module.exports = Spring;
    }).call($__exports, $__require, $__exports, $__module);
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: mark@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */

$__System.registerDynamic("1fb", [], false, function ($__require, $__exports, $__module) {
  $__module.uri = $__module.id;
  return (function (require, exports, module) {
    /**
     * A singleton that maintains a global registry of Surfaces.
     *   Private.
     *
     * @private
     * @static
     * @class Entity
     */

    var entities = [];

    /**
     * Get entity from global index.
     *
     * @private
     * @method get
     * @param {Number} id entity registration id
     * @return {Surface} entity in the global index
     */
    function get(id) {
      return entities[id];
    }

    /**
     * Overwrite entity in the global index
     *
     * @private
     * @method set
     * @param {Number} id entity registration id
     * @param {Surface} entity to add to the global index
     */
    function set(id, entity) {
      entities[id] = entity;
    }

    /**
     * Add entity to global index
     *
     * @private
     * @method register
     * @param {Surface} entity to add to global index
     * @return {Number} new id
     */
    function register(entity) {
      var id = entities.length;
      set(id, entity);
      return id;
    }

    /**
     * Remove entity from global index
     *
     * @private
     * @method unregister
     * @param {Number} id entity registration id
     */
    function unregister(id) {
      set(id, null);
    }

    module.exports = {
      register: register,
      unregister: unregister,
      get: get,
      set: set
    };
  }).call($__exports, $__require, $__exports, $__module);
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: mark@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */

$__System.registerDynamic('241', ['169'], false, function ($__require, $__exports, $__module) {
    $__module.uri = $__module.id;
    return (function (require, exports, module) {
        var Transform = require('169');

        /**
         *
         * This object translates the rendering instructions ("render specs")
         *   that renderable components generate into document update
         *   instructions ("update specs").  Private.
         *
         * @private
         * @class SpecParser
         * @constructor
         */
        function SpecParser() {
            this.result = {};
        }
        SpecParser._instance = new SpecParser();

        /**
         * Convert a render spec coming from the context's render chain to an
         *    update spec for the update chain. This is the only major entry point
         *    for a consumer of this class.
         *
         * @method parse
         * @static
         * @private
         *
         * @param {renderSpec} spec input render spec
         * @param {Object} context context to do the parse in
         * @return {Object} the resulting update spec (if no callback
         *   specified, else none)
         */
        SpecParser.parse = function parse(spec, context) {
            return SpecParser._instance.parse(spec, context);
        };

        /**
         * Convert a renderSpec coming from the context's render chain to an update
         *    spec for the update chain. This is the only major entrypoint for a
         *    consumer of this class.
         *
         * @method parse
         *
         * @private
         * @param {renderSpec} spec input render spec
         * @param {Context} context
         * @return {updateSpec} the resulting update spec
         */
        SpecParser.prototype.parse = function parse(spec, context) {
            this.reset();
            this._parseSpec(spec, context, Transform.identity);
            return this.result;
        };

        /**
         * Prepare SpecParser for re-use (or first use) by setting internal state
         *  to blank.
         *
         * @private
         * @method reset
         */
        SpecParser.prototype.reset = function reset() {
            this.result = {};
        };

        // Multiply matrix M by vector v
        function _vecInContext(v, m) {
            return [v[0] * m[0] + v[1] * m[4] + v[2] * m[8], v[0] * m[1] + v[1] * m[5] + v[2] * m[9], v[0] * m[2] + v[1] * m[6] + v[2] * m[10]];
        }

        var _zeroZero = [0, 0];

        // From the provided renderSpec tree, recursively compose opacities,
        //    origins, transforms, and sizes corresponding to each surface id from
        //    the provided renderSpec tree structure. On completion, those
        //    properties of 'this' object should be ready to use to build an
        //    updateSpec.
        SpecParser.prototype._parseSpec = function _parseSpec(spec, parentContext, sizeContext) {
            var id;
            var target;
            var transform;
            var opacity;
            var origin;
            var align;
            var size;

            if (typeof spec === 'number') {
                id = spec;
                transform = parentContext.transform;
                align = parentContext.align || _zeroZero;
                if (parentContext.size && align && (align[0] || align[1])) {
                    var alignAdjust = [align[0] * parentContext.size[0], align[1] * parentContext.size[1], 0];
                    transform = Transform.thenMove(transform, _vecInContext(alignAdjust, sizeContext));
                }
                this.result[id] = {
                    transform: transform,
                    opacity: parentContext.opacity,
                    origin: parentContext.origin || _zeroZero,
                    align: parentContext.align || _zeroZero,
                    size: parentContext.size
                };
            } else if (!spec) {
                // placed here so 0 will be cached earlier
                return;
            } else if (spec instanceof Array) {
                for (var i = 0; i < spec.length; i++) {
                    this._parseSpec(spec[i], parentContext, sizeContext);
                }
            } else {
                target = spec.target;
                transform = parentContext.transform;
                opacity = parentContext.opacity;
                origin = parentContext.origin;
                align = parentContext.align;
                size = parentContext.size;
                var nextSizeContext = sizeContext;

                if (spec.opacity !== undefined) opacity = parentContext.opacity * spec.opacity;
                if (spec.transform) transform = Transform.multiply(parentContext.transform, spec.transform);
                if (spec.origin) {
                    origin = spec.origin;
                    nextSizeContext = parentContext.transform;
                }
                if (spec.align) align = spec.align;

                if (spec.size || spec.proportions) {
                    var parentSize = size;
                    size = [size[0], size[1]];

                    if (spec.size) {
                        if (spec.size[0] !== undefined) size[0] = spec.size[0];
                        if (spec.size[1] !== undefined) size[1] = spec.size[1];
                    }

                    if (spec.proportions) {
                        if (spec.proportions[0] !== undefined) size[0] = size[0] * spec.proportions[0];
                        if (spec.proportions[1] !== undefined) size[1] = size[1] * spec.proportions[1];
                    }

                    if (parentSize) {
                        if (align && (align[0] || align[1])) transform = Transform.thenMove(transform, _vecInContext([align[0] * parentSize[0], align[1] * parentSize[1], 0], sizeContext));
                        if (origin && (origin[0] || origin[1])) transform = Transform.moveThen([-origin[0] * size[0], -origin[1] * size[1], 0], transform);
                    }

                    nextSizeContext = parentContext.transform;
                    origin = null;
                    align = null;
                }

                this._parseSpec(target, {
                    transform: transform,
                    opacity: opacity,
                    origin: origin,
                    align: align,
                    size: size
                }, nextSizeContext);
            }
        };

        module.exports = SpecParser;
    }).call($__exports, $__require, $__exports, $__module);
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: mark@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */

$__System.registerDynamic('16f', ['1fb', '241'], false, function ($__require, $__exports, $__module) {
    $__module.uri = $__module.id;
    return (function (require, exports, module) {
        var Entity = require('1fb');
        var SpecParser = require('241');

        /**
         * A wrapper for inserting a renderable component (like a Modifer or
         *   Surface) into the render tree.
         *
         * @class RenderNode
         * @constructor
         *
         * @param {Object} object Target renderable component
         */
        function RenderNode(object) {
            this._object = null;
            this._child = null;
            this._hasMultipleChildren = false;
            this._isRenderable = false;
            this._isModifier = false;

            this._resultCache = {};
            this._prevResults = {};

            this._childResult = null;

            if (object) this.set(object);
        }

        /**
         * Append a renderable to the list of this node's children.
         *   This produces a new RenderNode in the tree.
         *   Note: Does not double-wrap if child is a RenderNode already.
         *
         * @method add
         * @param {Object} child renderable object
         * @return {RenderNode} new render node wrapping child
         */
        RenderNode.prototype.add = function add(child) {
            var childNode = child instanceof RenderNode ? child : new RenderNode(child);
            if (this._child instanceof Array) this._child.push(childNode);else if (this._child) {
                this._child = [this._child, childNode];
                this._hasMultipleChildren = true;
                this._childResult = []; // to be used later
            } else this._child = childNode;

            return childNode;
        };

        /**
         * Return the single wrapped object.  Returns null if this node has multiple child nodes.
         *
         * @method get
         *
         * @return {Object} contained renderable object
         */
        RenderNode.prototype.get = function get() {
            return this._object || (this._hasMultipleChildren ? null : this._child ? this._child.get() : null);
        };

        /**
         * Overwrite the list of children to contain the single provided object
         *
         * @method set
         * @param {Object} child renderable object
         * @return {RenderNode} this render node, or child if it is a RenderNode
         */
        RenderNode.prototype.set = function set(child) {
            this._childResult = null;
            this._hasMultipleChildren = false;
            this._isRenderable = child.render ? true : false;
            this._isModifier = child.modify ? true : false;
            this._object = child;
            this._child = null;
            if (child instanceof RenderNode) return child;else return this;
        };

        /**
         * Get render size of contained object.
         *
         * @method getSize
         * @return {Array.Number} size of this or size of single child.
         */
        RenderNode.prototype.getSize = function getSize() {
            var result = null;
            var target = this.get();
            if (target && target.getSize) result = target.getSize();
            if (!result && this._child && this._child.getSize) result = this._child.getSize();
            return result;
        };

        // apply results of rendering this subtree to the document
        function _applyCommit(spec, context, cacheStorage) {
            var result = SpecParser.parse(spec, context);
            var keys = Object.keys(result);
            for (var i = 0; i < keys.length; i++) {
                var id = keys[i];
                var childNode = Entity.get(id);
                var commitParams = result[id];
                commitParams.allocator = context.allocator;
                var commitResult = childNode.commit(commitParams);
                if (commitResult) _applyCommit(commitResult, context, cacheStorage);else cacheStorage[id] = commitParams;
            }
        }

        /**
         * Commit the content change from this node to the document.
         *
         * @private
         * @method commit
         * @param {Context} context render context
         */
        RenderNode.prototype.commit = function commit(context) {
            // free up some divs from the last loop
            var prevKeys = Object.keys(this._prevResults);
            for (var i = 0; i < prevKeys.length; i++) {
                var id = prevKeys[i];
                if (this._resultCache[id] === undefined) {
                    var object = Entity.get(id);
                    if (object.cleanup) object.cleanup(context.allocator);
                }
            }

            this._prevResults = this._resultCache;
            this._resultCache = {};
            _applyCommit(this.render(), context, this._resultCache);
        };

        /**
         * Cleans up all current renderables
         * @param context
         */
        RenderNode.prototype.cleanup = function commit(allocator) {
            var prevKeys = Object.keys(this._prevResults);
            for (var i = 0; i < prevKeys.length; i++) {
                var id = prevKeys[i];
                var object = Entity.get(id);
                if (object.cleanup) object.cleanup(allocator);
            }
        };

        /**
         * Generate a render spec from the contents of the wrapped component.
         *
         * @private
         * @method render
         *
         * @return {Object} render specification for the component subtree
         *    only under this node.
         */
        RenderNode.prototype.render = function render() {
            if (this._isRenderable) return this._object.render();

            var result = null;
            if (this._hasMultipleChildren) {
                result = this._childResult;
                var children = this._child;
                for (var i = 0; i < children.length; i++) {
                    result[i] = children[i].render();
                }
            } else if (this._child) result = this._child.render();

            return this._isModifier ? this._object.modify(result) : result;
        };

        module.exports = RenderNode;
    }).call($__exports, $__require, $__exports, $__module);
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: mark@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */

$__System.registerDynamic("169", [], false, function ($__require, $__exports, $__module) {
    $__module.uri = $__module.id;
    return (function (require, exports, module) {

        /**
         *  A high-performance static matrix math library used to calculate
         *    affine transforms on surfaces and other renderables.
         *    Famo.us uses 4x4 matrices corresponding directly to
         *    WebKit matrices (column-major order).
         *
         *    The internal "type" of a Matrix is a 16-long float array in
         *    row-major order, with:
         *    elements [0],[1],[2],[4],[5],[6],[8],[9],[10] forming the 3x3
         *          transformation matrix;
         *    elements [12], [13], [14] corresponding to the t_x, t_y, t_z
         *           translation;
         *    elements [3], [7], [11] set to 0;
         *    element [15] set to 1.
         *    All methods are static.
         *
         * @static
         *
         * @class Transform
         */
        var Transform = {};

        // WARNING: these matrices correspond to WebKit matrices, which are
        //    transposed from their math counterparts
        Transform.precision = 1e-6;
        Transform.identity = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];

        /**
         * Multiply two or more Transform matrix types to return a Transform matrix.
         *
         * @method multiply4x4
         * @static
         * @param {Transform} a left Transform
         * @param {Transform} b right Transform
         * @return {Transform}
         */
        Transform.multiply4x4 = function multiply4x4(a, b) {
            return [a[0] * b[0] + a[4] * b[1] + a[8] * b[2] + a[12] * b[3], a[1] * b[0] + a[5] * b[1] + a[9] * b[2] + a[13] * b[3], a[2] * b[0] + a[6] * b[1] + a[10] * b[2] + a[14] * b[3], a[3] * b[0] + a[7] * b[1] + a[11] * b[2] + a[15] * b[3], a[0] * b[4] + a[4] * b[5] + a[8] * b[6] + a[12] * b[7], a[1] * b[4] + a[5] * b[5] + a[9] * b[6] + a[13] * b[7], a[2] * b[4] + a[6] * b[5] + a[10] * b[6] + a[14] * b[7], a[3] * b[4] + a[7] * b[5] + a[11] * b[6] + a[15] * b[7], a[0] * b[8] + a[4] * b[9] + a[8] * b[10] + a[12] * b[11], a[1] * b[8] + a[5] * b[9] + a[9] * b[10] + a[13] * b[11], a[2] * b[8] + a[6] * b[9] + a[10] * b[10] + a[14] * b[11], a[3] * b[8] + a[7] * b[9] + a[11] * b[10] + a[15] * b[11], a[0] * b[12] + a[4] * b[13] + a[8] * b[14] + a[12] * b[15], a[1] * b[12] + a[5] * b[13] + a[9] * b[14] + a[13] * b[15], a[2] * b[12] + a[6] * b[13] + a[10] * b[14] + a[14] * b[15], a[3] * b[12] + a[7] * b[13] + a[11] * b[14] + a[15] * b[15]];
        };

        /**
         * Fast-multiply two Transform matrix types to return a
         *    Matrix, assuming bottom row on each is [0 0 0 1].
         *
         * @method multiply
         * @static
         * @param {Transform} a left Transform
         * @param {Transform} b right Transform
         * @return {Transform}
         */
        Transform.multiply = function multiply(a, b) {
            return [a[0] * b[0] + a[4] * b[1] + a[8] * b[2], a[1] * b[0] + a[5] * b[1] + a[9] * b[2], a[2] * b[0] + a[6] * b[1] + a[10] * b[2], 0, a[0] * b[4] + a[4] * b[5] + a[8] * b[6], a[1] * b[4] + a[5] * b[5] + a[9] * b[6], a[2] * b[4] + a[6] * b[5] + a[10] * b[6], 0, a[0] * b[8] + a[4] * b[9] + a[8] * b[10], a[1] * b[8] + a[5] * b[9] + a[9] * b[10], a[2] * b[8] + a[6] * b[9] + a[10] * b[10], 0, a[0] * b[12] + a[4] * b[13] + a[8] * b[14] + a[12], a[1] * b[12] + a[5] * b[13] + a[9] * b[14] + a[13], a[2] * b[12] + a[6] * b[13] + a[10] * b[14] + a[14], 1];
        };

        /**
         * Return a Transform translated by additional amounts in each
         *    dimension. This is equivalent to the result of
         *
         *    Transform.multiply(Matrix.translate(t[0], t[1], t[2]), m).
         *
         * @method thenMove
         * @static
         * @param {Transform} m a Transform
         * @param {Array.Number} t floats delta vector of length 2 or 3
         * @return {Transform}
         */
        Transform.thenMove = function thenMove(m, t) {
            if (!t[2]) t[2] = 0;
            return [m[0], m[1], m[2], 0, m[4], m[5], m[6], 0, m[8], m[9], m[10], 0, m[12] + t[0], m[13] + t[1], m[14] + t[2], 1];
        };

        /**
         * Return a Transform matrix which represents the result of a transform matrix
         *    applied after a move. This is faster than the equivalent multiply.
         *    This is equivalent to the result of:
         *
         *    Transform.multiply(m, Transform.translate(t[0], t[1], t[2])).
         *
         * @method moveThen
         * @static
         * @param {Array.Number} v vector representing initial movement
         * @param {Transform} m matrix to apply afterwards
         * @return {Transform} the resulting matrix
         */
        Transform.moveThen = function moveThen(v, m) {
            if (!v[2]) v[2] = 0;
            var t0 = v[0] * m[0] + v[1] * m[4] + v[2] * m[8];
            var t1 = v[0] * m[1] + v[1] * m[5] + v[2] * m[9];
            var t2 = v[0] * m[2] + v[1] * m[6] + v[2] * m[10];
            return Transform.thenMove(m, [t0, t1, t2]);
        };

        /**
         * Return a Transform which represents a translation by specified
         *    amounts in each dimension.
         *
         * @method translate
         * @static
         * @param {Number} x x translation
         * @param {Number} y y translation
         * @param {Number} z z translation
         * @return {Transform}
         */
        Transform.translate = function translate(x, y, z) {
            if (z === undefined) z = 0;
            return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x, y, z, 1];
        };

        /**
         * Return a Transform scaled by a vector in each
         *    dimension. This is a more performant equivalent to the result of
         *
         *    Transform.multiply(Transform.scale(s[0], s[1], s[2]), m).
         *
         * @method thenScale
         * @static
         * @param {Transform} m a matrix
         * @param {Array.Number} s delta vector (array of floats &&
         *    array.length == 3)
         * @return {Transform}
         */
        Transform.thenScale = function thenScale(m, s) {
            return [s[0] * m[0], s[1] * m[1], s[2] * m[2], 0, s[0] * m[4], s[1] * m[5], s[2] * m[6], 0, s[0] * m[8], s[1] * m[9], s[2] * m[10], 0, s[0] * m[12], s[1] * m[13], s[2] * m[14], 1];
        };

        /**
         * Return a Transform which represents a scale by specified amounts
         *    in each dimension.
         *
         * @method scale
         * @static
         * @param {Number} x x scale factor
         * @param {Number} y y scale factor
         * @param {Number} z z scale factor
         * @return {Transform}
         */
        Transform.scale = function scale(x, y, z) {
            if (z === undefined) z = 1;
            if (y === undefined) y = x;
            return [x, 0, 0, 0, 0, y, 0, 0, 0, 0, z, 0, 0, 0, 0, 1];
        };

        /**
         * Return a Transform which represents a clockwise
         *    rotation around the x axis.
         *
         * @method rotateX
         * @static
         * @param {Number} theta radians
         * @return {Transform}
         */
        Transform.rotateX = function rotateX(theta) {
            var cosTheta = Math.cos(theta);
            var sinTheta = Math.sin(theta);
            return [1, 0, 0, 0, 0, cosTheta, sinTheta, 0, 0, -sinTheta, cosTheta, 0, 0, 0, 0, 1];
        };

        /**
         * Return a Transform which represents a clockwise
         *    rotation around the y axis.
         *
         * @method rotateY
         * @static
         * @param {Number} theta radians
         * @return {Transform}
         */
        Transform.rotateY = function rotateY(theta) {
            var cosTheta = Math.cos(theta);
            var sinTheta = Math.sin(theta);
            return [cosTheta, 0, -sinTheta, 0, 0, 1, 0, 0, sinTheta, 0, cosTheta, 0, 0, 0, 0, 1];
        };

        /**
         * Return a Transform which represents a clockwise
         *    rotation around the z axis.
         *
         * @method rotateZ
         * @static
         * @param {Number} theta radians
         * @return {Transform}
         */
        Transform.rotateZ = function rotateZ(theta) {
            var cosTheta = Math.cos(theta);
            var sinTheta = Math.sin(theta);
            return [cosTheta, sinTheta, 0, 0, -sinTheta, cosTheta, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
        };

        /**
         * Return a Transform which represents composed clockwise
         *    rotations along each of the axes. Equivalent to the result of
         *    Matrix.multiply(rotateX(phi), rotateY(theta), rotateZ(psi)).
         *
         * @method rotate
         * @static
         * @param {Number} phi radians to rotate about the positive x axis
         * @param {Number} theta radians to rotate about the positive y axis
         * @param {Number} psi radians to rotate about the positive z axis
         * @return {Transform}
         */
        Transform.rotate = function rotate(phi, theta, psi) {
            var cosPhi = Math.cos(phi);
            var sinPhi = Math.sin(phi);
            var cosTheta = Math.cos(theta);
            var sinTheta = Math.sin(theta);
            var cosPsi = Math.cos(psi);
            var sinPsi = Math.sin(psi);
            var result = [cosTheta * cosPsi, cosPhi * sinPsi + sinPhi * sinTheta * cosPsi, sinPhi * sinPsi - cosPhi * sinTheta * cosPsi, 0, -cosTheta * sinPsi, cosPhi * cosPsi - sinPhi * sinTheta * sinPsi, sinPhi * cosPsi + cosPhi * sinTheta * sinPsi, 0, sinTheta, -sinPhi * cosTheta, cosPhi * cosTheta, 0, 0, 0, 0, 1];
            return result;
        };

        /**
         * Return a Transform which represents an axis-angle rotation
         *
         * @method rotateAxis
         * @static
         * @param {Array.Number} v unit vector representing the axis to rotate about
         * @param {Number} theta radians to rotate clockwise about the axis
         * @return {Transform}
         */
        Transform.rotateAxis = function rotateAxis(v, theta) {
            var sinTheta = Math.sin(theta);
            var cosTheta = Math.cos(theta);
            var verTheta = 1 - cosTheta; // versine of theta

            var xxV = v[0] * v[0] * verTheta;
            var xyV = v[0] * v[1] * verTheta;
            var xzV = v[0] * v[2] * verTheta;
            var yyV = v[1] * v[1] * verTheta;
            var yzV = v[1] * v[2] * verTheta;
            var zzV = v[2] * v[2] * verTheta;
            var xs = v[0] * sinTheta;
            var ys = v[1] * sinTheta;
            var zs = v[2] * sinTheta;

            var result = [xxV + cosTheta, xyV + zs, xzV - ys, 0, xyV - zs, yyV + cosTheta, yzV + xs, 0, xzV + ys, yzV - xs, zzV + cosTheta, 0, 0, 0, 0, 1];
            return result;
        };

        /**
         * Return a Transform which represents a transform matrix applied about
         * a separate origin point.
         *
         * @method aboutOrigin
         * @static
         * @param {Array.Number} v origin point to apply matrix
         * @param {Transform} m matrix to apply
         * @return {Transform}
         */
        Transform.aboutOrigin = function aboutOrigin(v, m) {
            var t0 = v[0] - (v[0] * m[0] + v[1] * m[4] + v[2] * m[8]);
            var t1 = v[1] - (v[0] * m[1] + v[1] * m[5] + v[2] * m[9]);
            var t2 = v[2] - (v[0] * m[2] + v[1] * m[6] + v[2] * m[10]);
            return Transform.thenMove(m, [t0, t1, t2]);
        };

        /**
         * Return a Transform representation of a skew transformation
         *
         * @method skew
         * @static
         * @param {Number} phi scale factor skew in the x axis
         * @param {Number} theta scale factor skew in the y axis
         * @param {Number} psi scale factor skew in the z axis
         * @return {Transform}
         */
        Transform.skew = function skew(phi, theta, psi) {
            return [1, Math.tan(theta), 0, 0, Math.tan(psi), 1, 0, 0, 0, Math.tan(phi), 1, 0, 0, 0, 0, 1];
        };

        /**
         * Return a Transform representation of a skew in the x-direction
         *
         * @method skewX
         * @static
         * @param {Number} angle the angle between the top and left sides
         * @return {Transform}
         */
        Transform.skewX = function skewX(angle) {
            return [1, 0, 0, 0, Math.tan(angle), 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
        };

        /**
         * Return a Transform representation of a skew in the y-direction
         *
         * @method skewY
         * @static
         * @param {Number} angle the angle between the top and right sides
         * @return {Transform}
         */
        Transform.skewY = function skewY(angle) {
            return [1, Math.tan(angle), 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
        };

        /**
         * Returns a perspective Transform matrix
         *
         * @method perspective
         * @static
         * @param {Number} focusZ z position of focal point
         * @return {Transform}
         */
        Transform.perspective = function perspective(focusZ) {
            return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, -1 / focusZ, 0, 0, 0, 1];
        };

        /**
         * Return translation vector component of given Transform
         *
         * @method getTranslate
         * @static
         * @param {Transform} m Transform
         * @return {Array.Number} the translation vector [t_x, t_y, t_z]
         */
        Transform.getTranslate = function getTranslate(m) {
            return [m[12], m[13], m[14]];
        };

        /**
         * Return inverse affine transform for given Transform.
         *   Note: This assumes m[3] = m[7] = m[11] = 0, and m[15] = 1.
         *   Will provide incorrect results if not invertible or preconditions not met.
         *
         * @method inverse
         * @static
         * @param {Transform} m Transform
         * @return {Transform}
         */
        Transform.inverse = function inverse(m) {
            // only need to consider 3x3 section for affine
            var c0 = m[5] * m[10] - m[6] * m[9];
            var c1 = m[4] * m[10] - m[6] * m[8];
            var c2 = m[4] * m[9] - m[5] * m[8];
            var c4 = m[1] * m[10] - m[2] * m[9];
            var c5 = m[0] * m[10] - m[2] * m[8];
            var c6 = m[0] * m[9] - m[1] * m[8];
            var c8 = m[1] * m[6] - m[2] * m[5];
            var c9 = m[0] * m[6] - m[2] * m[4];
            var c10 = m[0] * m[5] - m[1] * m[4];
            var detM = m[0] * c0 - m[1] * c1 + m[2] * c2;
            var invD = 1 / detM;
            var result = [invD * c0, -invD * c4, invD * c8, 0, -invD * c1, invD * c5, -invD * c9, 0, invD * c2, -invD * c6, invD * c10, 0, 0, 0, 0, 1];
            result[12] = -m[12] * result[0] - m[13] * result[4] - m[14] * result[8];
            result[13] = -m[12] * result[1] - m[13] * result[5] - m[14] * result[9];
            result[14] = -m[12] * result[2] - m[13] * result[6] - m[14] * result[10];
            return result;
        };

        /**
         * Returns the transpose of a 4x4 matrix
         *
         * @method transpose
         * @static
         * @param {Transform} m matrix
         * @return {Transform} the resulting transposed matrix
         */
        Transform.transpose = function transpose(m) {
            return [m[0], m[4], m[8], m[12], m[1], m[5], m[9], m[13], m[2], m[6], m[10], m[14], m[3], m[7], m[11], m[15]];
        };

        function _normSquared(v) {
            return v.length === 2 ? v[0] * v[0] + v[1] * v[1] : v[0] * v[0] + v[1] * v[1] + v[2] * v[2];
        }
        function _norm(v) {
            return Math.sqrt(_normSquared(v));
        }
        function _sign(n) {
            return n < 0 ? -1 : 1;
        }

        /**
         * Decompose Transform into separate .translate, .rotate, .scale,
         *    and .skew components.
         *
         * @method interpret
         * @static
         * @param {Transform} M transform matrix
         * @return {Object} matrix spec object with component matrices .translate,
         *    .rotate, .scale, .skew
         */
        Transform.interpret = function interpret(M) {

            // QR decomposition via Householder reflections
            //FIRST ITERATION

            //default Q1 to the identity matrix;
            var x = [M[0], M[1], M[2]]; // first column vector
            var sgn = _sign(x[0]); // sign of first component of x (for stability)
            var xNorm = _norm(x); // norm of first column vector
            var v = [x[0] + sgn * xNorm, x[1], x[2]]; // v = x + sign(x[0])|x|e1
            var mult = 2 / _normSquared(v); // mult = 2/v'v

            //bail out if our Matrix is singular
            if (mult >= Infinity) {
                return { translate: Transform.getTranslate(M), rotate: [0, 0, 0], scale: [0, 0, 0], skew: [0, 0, 0] };
            }

            //evaluate Q1 = I - 2vv'/v'v
            var Q1 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1];

            //diagonals
            Q1[0] = 1 - mult * v[0] * v[0]; // 0,0 entry
            Q1[5] = 1 - mult * v[1] * v[1]; // 1,1 entry
            Q1[10] = 1 - mult * v[2] * v[2]; // 2,2 entry

            //upper diagonal
            Q1[1] = -mult * v[0] * v[1]; // 0,1 entry
            Q1[2] = -mult * v[0] * v[2]; // 0,2 entry
            Q1[6] = -mult * v[1] * v[2]; // 1,2 entry

            //lower diagonal
            Q1[4] = Q1[1]; // 1,0 entry
            Q1[8] = Q1[2]; // 2,0 entry
            Q1[9] = Q1[6]; // 2,1 entry

            //reduce first column of M
            var MQ1 = Transform.multiply(Q1, M);

            //SECOND ITERATION on (1,1) minor
            var x2 = [MQ1[5], MQ1[6]];
            var sgn2 = _sign(x2[0]); // sign of first component of x (for stability)
            var x2Norm = _norm(x2); // norm of first column vector
            var v2 = [x2[0] + sgn2 * x2Norm, x2[1]]; // v = x + sign(x[0])|x|e1
            var mult2 = 2 / _normSquared(v2); // mult = 2/v'v

            //evaluate Q2 = I - 2vv'/v'v
            var Q2 = [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1];

            //diagonal
            Q2[5] = 1 - mult2 * v2[0] * v2[0]; // 1,1 entry
            Q2[10] = 1 - mult2 * v2[1] * v2[1]; // 2,2 entry

            //off diagonals
            Q2[6] = -mult2 * v2[0] * v2[1]; // 2,1 entry
            Q2[9] = Q2[6]; // 1,2 entry

            //calc QR decomposition. Q = Q1*Q2, R = Q'*M
            var Q = Transform.multiply(Q2, Q1); //note: really Q transpose
            var R = Transform.multiply(Q, M);

            //remove negative scaling
            var remover = Transform.scale(R[0] < 0 ? -1 : 1, R[5] < 0 ? -1 : 1, R[10] < 0 ? -1 : 1);
            R = Transform.multiply(R, remover);
            Q = Transform.multiply(remover, Q);

            //decompose into rotate/scale/skew matrices
            var result = {};
            result.translate = Transform.getTranslate(M);
            result.rotate = [Math.atan2(-Q[6], Q[10]), Math.asin(Q[2]), Math.atan2(-Q[1], Q[0])];
            if (!result.rotate[0]) {
                result.rotate[0] = 0;
                result.rotate[2] = Math.atan2(Q[4], Q[5]);
            }
            result.scale = [R[0], R[5], R[10]];
            result.skew = [Math.atan2(R[9], result.scale[2]), Math.atan2(R[8], result.scale[2]), Math.atan2(R[4], result.scale[0])];

            //double rotation workaround
            if (Math.abs(result.rotate[0]) + Math.abs(result.rotate[2]) > 1.5 * Math.PI) {
                result.rotate[1] = Math.PI - result.rotate[1];
                if (result.rotate[1] > Math.PI) result.rotate[1] -= 2 * Math.PI;
                if (result.rotate[1] < -Math.PI) result.rotate[1] += 2 * Math.PI;
                if (result.rotate[0] < 0) result.rotate[0] += Math.PI;else result.rotate[0] -= Math.PI;
                if (result.rotate[2] < 0) result.rotate[2] += Math.PI;else result.rotate[2] -= Math.PI;
            }

            return result;
        };

        /**
         * Weighted average between two matrices by averaging their
         *     translation, rotation, scale, skew components.
         *     f(M1,M2,t) = (1 - t) * M1 + t * M2
         *
         * @method average
         * @static
         * @param {Transform} M1 f(M1,M2,0) = M1
         * @param {Transform} M2 f(M1,M2,1) = M2
         * @param {Number} t
         * @return {Transform}
         */
        Transform.average = function average(M1, M2, t) {
            t = t === undefined ? 0.5 : t;
            var specM1 = Transform.interpret(M1);
            var specM2 = Transform.interpret(M2);

            var specAvg = {
                translate: [0, 0, 0],
                rotate: [0, 0, 0],
                scale: [0, 0, 0],
                skew: [0, 0, 0]
            };

            for (var i = 0; i < 3; i++) {
                specAvg.translate[i] = (1 - t) * specM1.translate[i] + t * specM2.translate[i];
                specAvg.rotate[i] = (1 - t) * specM1.rotate[i] + t * specM2.rotate[i];
                specAvg.scale[i] = (1 - t) * specM1.scale[i] + t * specM2.scale[i];
                specAvg.skew[i] = (1 - t) * specM1.skew[i] + t * specM2.skew[i];
            }
            return Transform.build(specAvg);
        };

        /**
         * Compose .translate, .rotate, .scale, .skew components into
         * Transform matrix
         *
         * @method build
         * @static
         * @param {matrixSpec} spec object with component matrices .translate,
         *    .rotate, .scale, .skew
         * @return {Transform} composed transform
         */
        Transform.build = function build(spec) {
            var scaleMatrix = Transform.scale(spec.scale[0], spec.scale[1], spec.scale[2]);
            var skewMatrix = Transform.skew(spec.skew[0], spec.skew[1], spec.skew[2]);
            var rotateMatrix = Transform.rotate(spec.rotate[0], spec.rotate[1], spec.rotate[2]);
            return Transform.thenMove(Transform.multiply(Transform.multiply(rotateMatrix, skewMatrix), scaleMatrix), spec.translate);
        };

        /**
         * Determine if two Transforms are component-wise equal
         *   Warning: breaks on perspective Transforms
         *
         * @method equals
         * @static
         * @param {Transform} a matrix
         * @param {Transform} b matrix
         * @return {boolean}
         */
        Transform.equals = function equals(a, b) {
            return !Transform.notEquals(a, b);
        };

        /**
         * Determine if two Transforms are component-wise unequal
         *   Warning: breaks on perspective Transforms
         *
         * @method notEquals
         * @static
         * @param {Transform} a matrix
         * @param {Transform} b matrix
         * @return {boolean}
         */
        Transform.notEquals = function notEquals(a, b) {
            if (a === b) return false;

            // shortci
            return !(a && b) || a[12] !== b[12] || a[13] !== b[13] || a[14] !== b[14] || a[0] !== b[0] || a[1] !== b[1] || a[2] !== b[2] || a[4] !== b[4] || a[5] !== b[5] || a[6] !== b[6] || a[8] !== b[8] || a[9] !== b[9] || a[10] !== b[10];
        };

        /**
         * Constrain angle-trio components to range of [-pi, pi).
         *
         * @method normalizeRotation
         * @static
         * @param {Array.Number} rotation phi, theta, psi (array of floats
         *    && array.length == 3)
         * @return {Array.Number} new phi, theta, psi triplet
         *    (array of floats && array.length == 3)
         */
        Transform.normalizeRotation = function normalizeRotation(rotation) {
            var result = rotation.slice(0);
            if (result[0] === Math.PI * 0.5 || result[0] === -Math.PI * 0.5) {
                result[0] = -result[0];
                result[1] = Math.PI - result[1];
                result[2] -= Math.PI;
            }
            if (result[0] > Math.PI * 0.5) {
                result[0] = result[0] - Math.PI;
                result[1] = Math.PI - result[1];
                result[2] -= Math.PI;
            }
            if (result[0] < -Math.PI * 0.5) {
                result[0] = result[0] + Math.PI;
                result[1] = -Math.PI - result[1];
                result[2] -= Math.PI;
            }
            while (result[1] < -Math.PI) result[1] += 2 * Math.PI;
            while (result[1] >= Math.PI) result[1] -= 2 * Math.PI;
            while (result[2] < -Math.PI) result[2] += 2 * Math.PI;
            while (result[2] >= Math.PI) result[2] -= 2 * Math.PI;
            return result;
        };

        /**
         * (Property) Array defining a translation forward in z by 1
         *
         * @property {array} inFront
         * @static
         * @final
         */
        Transform.inFront = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1e-3, 1];

        /**
         * (Property) Array defining a translation backwards in z by 1
         *
         * @property {array} behind
         * @static
         * @final
         */
        Transform.behind = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, -1e-3, 1];

        module.exports = Transform;
    }).call($__exports, $__require, $__exports, $__module);
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: david@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
/*eslint-disable new-cap */
$__System.registerDynamic('242', ['196'], false, function ($__require, $__exports, $__module) {
    $__module.uri = $__module.id;
    return (function (require, exports, module) {
        var Utility = require('196');

        /**
         * Transition meta-method to support transitioning multiple
         *   values with scalar-only methods.
         *
         *
         * @class MultipleTransition
         * @constructor
         *
         * @param {Object} method Transionable class to multiplex
         */
        function MultipleTransition(method) {
            this.method = method;
            this._instances = [];
            this.state = [];
        }

        MultipleTransition.SUPPORTS_MULTIPLE = true;

        /**
         * Get the state of each transition.
         *
         * @method get
         *
         * @return state {Number|Array} state array
         */
        MultipleTransition.prototype.get = function get() {
            for (var i = 0; i < this._instances.length; i++) {
                this.state[i] = this._instances[i].get();
            }
            return this.state;
        };

        /**
         * Set the end states with a shared transition, with optional callback.
         *
         * @method set
         *
         * @param {Number|Array} endState Final State.  Use a multi-element argument for multiple transitions.
         * @param {Object} transition Transition definition, shared among all instances
         * @param {Function} callback called when all endStates have been reached.
         */
        MultipleTransition.prototype.set = function set(endState, transition, callback) {
            var _allCallback = Utility.after(endState.length, callback);
            for (var i = 0; i < endState.length; i++) {
                if (!this._instances[i]) this._instances[i] = new this.method();
                this._instances[i].set(endState[i], transition, _allCallback);
            }
        };

        /**
         * Reset all transitions to start state.
         *
         * @method reset
         *
         * @param  {Number|Array} startState Start state
         */
        MultipleTransition.prototype.reset = function reset(startState) {
            for (var i = 0; i < startState.length; i++) {
                if (!this._instances[i]) this._instances[i] = new this.method();
                this._instances[i].reset(startState[i]);
            }
        };

        module.exports = MultipleTransition;
    }).call($__exports, $__require, $__exports, $__module);
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: david@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */

$__System.registerDynamic('243', [], false, function ($__require, $__exports, $__module) {
    $__module.uri = $__module.id;
    return (function (require, exports, module) {

        /**
         *
         * A state maintainer for a smooth transition between
         *    numerically-specified states.  Example numeric states include floats or
         *    Transfornm objects.
         *
         *    An initial state is set with the constructor or set(startValue). A
         *    corresponding end state and transition are set with set(endValue,
         *    transition). Subsequent calls to set(endValue, transition) begin at
         *    the last state. Calls to get(timestamp) provide the _interpolated state
         *    along the way.
         *
         *   Note that there is no event loop here - calls to get() are the only way
         *    to find out state projected to the current (or provided) time and are
         *    the only way to trigger callbacks. Usually this kind of object would
         *    be part of the render() path of a visible component.
         *
         * @class TweenTransition
         * @constructor
         *
         * @param {Object} options TODO
         *    beginning state
         */
        function TweenTransition(options) {
            this.options = Object.create(TweenTransition.DEFAULT_OPTIONS);
            if (options) this.setOptions(options);

            this._startTime = 0;
            this._startValue = 0;
            this._updateTime = 0;
            this._endValue = 0;
            this._curve = undefined;
            this._duration = 0;
            this._active = false;
            this._callback = undefined;
            this.state = 0;
            this.velocity = undefined;
        }

        /**
         * Transition curves mapping independent variable t from domain [0,1] to a
         *    range within [0,1]. Includes functions 'linear', 'easeIn', 'easeOut',
         *    'easeInOut', 'easeOutBounce', 'spring'.
         *
         * @property {object} Curve
         * @final
         */
        TweenTransition.Curves = {
            linear: function (t) {
                return t;
            },
            easeIn: function (t) {
                return t * t;
            },
            easeOut: function (t) {
                return t * (2 - t);
            },
            easeInOut: function (t) {
                if (t <= 0.5) return 2 * t * t;else return -2 * t * t + 4 * t - 1;
            },
            easeOutBounce: function (t) {
                return t * (3 - 2 * t);
            },
            spring: function (t) {
                return (1 - t) * Math.sin(6 * Math.PI * t) + t;
            }
        };

        TweenTransition.SUPPORTS_MULTIPLE = true;
        TweenTransition.DEFAULT_OPTIONS = {
            curve: TweenTransition.Curves.linear,
            duration: 500,
            speed: 0 /* considered only if positive */
        };

        var registeredCurves = {};

        /**
         * Add "unit" curve to internal dictionary of registered curves.
         *
         * @method registerCurve
         *
         * @static
         *
         * @param {string} curveName dictionary key
         * @param {unitCurve} curve function of one numeric variable mapping [0,1]
         *    to range inside [0,1]
         * @return {boolean} false if key is taken, else true
         */
        TweenTransition.registerCurve = function registerCurve(curveName, curve) {
            if (!registeredCurves[curveName]) {
                registeredCurves[curveName] = curve;
                return true;
            } else {
                return false;
            }
        };

        /**
         * Remove object with key "curveName" from internal dictionary of registered
         *    curves.
         *
         * @method unregisterCurve
         *
         * @static
         *
         * @param {string} curveName dictionary key
         * @return {boolean} false if key has no dictionary value
         */
        TweenTransition.unregisterCurve = function unregisterCurve(curveName) {
            if (registeredCurves[curveName]) {
                delete registeredCurves[curveName];
                return true;
            } else {
                return false;
            }
        };

        /**
         * Retrieve function with key "curveName" from internal dictionary of
         *    registered curves. Default curves are defined in the
         *    TweenTransition.Curves array, where the values represent
         *    unitCurve functions.
         *
         * @method getCurve
         *
         * @static
         *
         * @param {string} curveName dictionary key
         * @return {unitCurve} curve function of one numeric variable mapping [0,1]
         *    to range inside [0,1]
         */
        TweenTransition.getCurve = function getCurve(curveName) {
            var curve = registeredCurves[curveName];
            if (curve !== undefined) return curve;else throw new Error('curve not registered');
        };

        /**
         * Retrieve all available curves.
         *
         * @method getCurves
         *
         * @static
         *
         * @return {object} curve functions of one numeric variable mapping [0,1]
         *    to range inside [0,1]
         */
        TweenTransition.getCurves = function getCurves() {
            return registeredCurves;
        };

        // Interpolate: If a linear function f(0) = a, f(1) = b, then return f(t)
        function _interpolate(a, b, t) {
            return (1 - t) * a + t * b;
        }

        function _clone(obj) {
            if (obj instanceof Object) {
                if (obj instanceof Array) return obj.slice(0);else return Object.create(obj);
            } else return obj;
        }

        // Fill in missing properties in "transition" with those in defaultTransition, and
        //   convert internal named curve to function object, returning as new
        //   object.
        function _normalize(transition, defaultTransition) {
            var result = { curve: defaultTransition.curve };
            if (defaultTransition.duration) result.duration = defaultTransition.duration;
            if (defaultTransition.speed) result.speed = defaultTransition.speed;
            if (transition instanceof Object) {
                if (transition.duration !== undefined) result.duration = transition.duration;
                if (transition.curve) result.curve = transition.curve;
                if (transition.speed) result.speed = transition.speed;
            }
            if (typeof result.curve === 'string') result.curve = TweenTransition.getCurve(result.curve);
            return result;
        }

        /**
         * Set internal options, overriding any default options.
         *
         * @method setOptions
         *
         *
         * @param {Object} options options object
         * @param {Object} [options.curve] function mapping [0,1] to [0,1] or identifier
         * @param {Number} [options.duration] duration in ms
         * @param {Number} [options.speed] speed in pixels per ms
         */
        TweenTransition.prototype.setOptions = function setOptions(options) {
            if (options.curve !== undefined) this.options.curve = options.curve;
            if (options.duration !== undefined) this.options.duration = options.duration;
            if (options.speed !== undefined) this.options.speed = options.speed;
        };

        /**
         * Add transition to end state to the queue of pending transitions. Special
         *    Use: calling without a transition resets the object to that state with
         *    no pending actions
         *
         * @method set
         *
         *
         * @param {number|FamousMatrix|Array.Number|Object.<number, number>} endValue
         *    end state to which we _interpolate
         * @param {transition=} transition object of type {duration: number, curve:
         *    f[0,1] -> [0,1] or name}. If transition is omitted, change will be
         *    instantaneous.
         * @param {function()=} callback Zero-argument function to call on observed
         *    completion (t=1)
         */
        TweenTransition.prototype.set = function set(endValue, transition, callback) {
            if (!transition) {
                this.reset(endValue);
                if (callback) callback();
                return;
            }

            this._startValue = _clone(this.get());
            transition = _normalize(transition, this.options);
            if (transition.speed) {
                var startValue = this._startValue;
                if (startValue instanceof Object) {
                    var variance = 0;
                    for (var i in startValue) variance += (endValue[i] - startValue[i]) * (endValue[i] - startValue[i]);
                    transition.duration = Math.sqrt(variance) / transition.speed;
                } else {
                    transition.duration = Math.abs(endValue - startValue) / transition.speed;
                }
            }

            this._startTime = Date.now();
            this._endValue = _clone(endValue);
            this._startVelocity = _clone(transition.velocity);
            this._duration = transition.duration;
            this._curve = transition.curve;
            this._active = true;
            this._callback = callback;
        };

        /**
         * Cancel all transitions and reset to a stable state
         *
         * @method reset
         *
         * @param {number|Array.Number|Object.<number, number>} startValue
         *    starting state
         * @param {number} startVelocity
         *    starting velocity
         */
        TweenTransition.prototype.reset = function reset(startValue, startVelocity) {
            if (this._callback) {
                var callback = this._callback;
                this._callback = undefined;
                callback();
            }
            this.state = _clone(startValue);
            this.velocity = _clone(startVelocity);
            this._startTime = 0;
            this._duration = 0;
            this._updateTime = 0;
            this._startValue = this.state;
            this._startVelocity = this.velocity;
            this._endValue = this.state;
            this._active = false;
        };

        /**
         * Get current velocity
         *
         * @method getVelocity
         *
         * @returns {Number} velocity
         */
        TweenTransition.prototype.getVelocity = function getVelocity() {
            return this.velocity;
        };

        /**
         * Get interpolated state of current action at provided time. If the last
         *    action has completed, invoke its callback.
         *
         * @method get
         *
         *
         * @param {number=} timestamp Evaluate the curve at a normalized version of this
         *    time. If omitted, use current time. (Unix epoch time)
         * @return {number|Object.<number|string, number>} beginning state
         *    _interpolated to this point in time.
         */
        TweenTransition.prototype.get = function get(timestamp) {
            this.update(timestamp);
            return this.state;
        };

        function _calculateVelocity(current, start, curve, duration, t) {
            var velocity;
            var eps = 1e-7;
            var speed = (curve(t) - curve(t - eps)) / eps;
            if (current instanceof Array) {
                velocity = [];
                for (var i = 0; i < current.length; i++) {
                    if (typeof current[i] === 'number') velocity[i] = speed * (current[i] - start[i]) / duration;else velocity[i] = 0;
                }
            } else velocity = speed * (current - start) / duration;
            return velocity;
        }

        function _calculateState(start, end, t) {
            var state;
            if (start instanceof Array) {
                state = [];
                for (var i = 0; i < start.length; i++) {
                    if (typeof start[i] === 'number') state[i] = _interpolate(start[i], end[i], t);else state[i] = start[i];
                }
            } else state = _interpolate(start, end, t);
            return state;
        }

        /**
         * Update internal state to the provided timestamp. This may invoke the last
         *    callback and begin a new action.
         *
         * @method update
         *
         *
         * @param {number=} timestamp Evaluate the curve at a normalized version of this
         *    time. If omitted, use current time. (Unix epoch time)
         */
        TweenTransition.prototype.update = function update(timestamp) {
            if (!this._active) {
                if (this._callback) {
                    var callback = this._callback;
                    this._callback = undefined;
                    callback();
                }
                return;
            }

            if (!timestamp) timestamp = Date.now();
            if (this._updateTime >= timestamp) return;
            this._updateTime = timestamp;

            var timeSinceStart = timestamp - this._startTime;
            if (timeSinceStart >= this._duration) {
                this.state = this._endValue;
                this.velocity = _calculateVelocity(this.state, this._startValue, this._curve, this._duration, 1);
                this._active = false;
            } else if (timeSinceStart < 0) {
                this.state = this._startValue;
                this.velocity = this._startVelocity;
            } else {
                var t = timeSinceStart / this._duration;
                this.state = _calculateState(this._startValue, this._endValue, this._curve(t));
                this.velocity = _calculateVelocity(this.state, this._startValue, this._curve, this._duration, t);
            }
        };

        /**
         * Is there at least one action pending completion?
         *
         * @method isActive
         *
         *
         * @return {boolean}
         */
        TweenTransition.prototype.isActive = function isActive() {
            return this._active;
        };

        /**
         * Halt transition at current state and erase all pending actions.
         *
         * @method halt
         *
         */
        TweenTransition.prototype.halt = function halt() {
            this.reset(this.get());
        };

        // Register all the default curves
        TweenTransition.registerCurve('linear', TweenTransition.Curves.linear);
        TweenTransition.registerCurve('easeIn', TweenTransition.Curves.easeIn);
        TweenTransition.registerCurve('easeOut', TweenTransition.Curves.easeOut);
        TweenTransition.registerCurve('easeInOut', TweenTransition.Curves.easeInOut);
        TweenTransition.registerCurve('easeOutBounce', TweenTransition.Curves.easeOutBounce);
        TweenTransition.registerCurve('spring', TweenTransition.Curves.spring);

        TweenTransition.customCurve = function customCurve(v1, v2) {
            v1 = v1 || 0;v2 = v2 || 0;
            return function (t) {
                return v1 * t + (-2 * v1 - v2 + 3) * t * t + (v1 + v2 - 2) * t * t * t;
            };
        };

        module.exports = TweenTransition;
    }).call($__exports, $__require, $__exports, $__module);
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: david@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
/*eslint-disable new-cap */
$__System.registerDynamic('16a', ['242', '243'], false, function ($__require, $__exports, $__module) {
    $__module.uri = $__module.id;
    return (function (require, exports, module) {
        var MultipleTransition = require('242');
        var TweenTransition = require('243');

        /**
         * A state maintainer for a smooth transition between
         *    numerically-specified states. Example numeric states include floats or
         *    Transform objects.
         *
         * An initial state is set with the constructor or set(startState). A
         *    corresponding end state and transition are set with set(endState,
         *    transition). Subsequent calls to set(endState, transition) begin at
         *    the last state. Calls to get(timestamp) provide the interpolated state
         *    along the way.
         *
         * Note that there is no event loop here - calls to get() are the only way
         *    to find state projected to the current (or provided) time and are
         *    the only way to trigger callbacks. Usually this kind of object would
         *    be part of the render() path of a visible component.
         *
         * @class Transitionable
         * @constructor
         * @param {number|Array.Number|Object.<number|string, number>} start
         *    beginning state
         */
        function Transitionable(start) {
            this.currentAction = null;
            this.actionQueue = [];
            this.callbackQueue = [];

            this.state = 0;
            this.velocity = undefined;
            this._callback = undefined;
            this._engineInstance = null;
            this._currentMethod = null;

            this.set(start);
        }

        var transitionMethods = {};

        Transitionable.register = function register(methods) {
            var success = true;
            for (var method in methods) {
                if (!Transitionable.registerMethod(method, methods[method])) success = false;
            }
            return success;
        };

        Transitionable.registerMethod = function registerMethod(name, engineClass) {
            if (!(name in transitionMethods)) {
                transitionMethods[name] = engineClass;
                return true;
            } else return false;
        };

        Transitionable.unregisterMethod = function unregisterMethod(name) {
            if (name in transitionMethods) {
                delete transitionMethods[name];
                return true;
            } else return false;
        };

        function _loadNext() {
            if (this._callback) {
                var callback = this._callback;
                this._callback = undefined;
                callback();
            }
            if (this.actionQueue.length <= 0) {
                this.set(this.get()); // no update required
                return;
            }
            this.currentAction = this.actionQueue.shift();
            this._callback = this.callbackQueue.shift();

            var method = null;
            var endValue = this.currentAction[0];
            var transition = this.currentAction[1];
            if (transition instanceof Object && transition.method) {
                method = transition.method;
                if (typeof method === 'string') method = transitionMethods[method];
            } else {
                method = TweenTransition;
            }

            if (this._currentMethod !== method) {
                if (!(endValue instanceof Object) || method.SUPPORTS_MULTIPLE === true || endValue.length <= method.SUPPORTS_MULTIPLE) {
                    this._engineInstance = new method();
                } else {
                    this._engineInstance = new MultipleTransition(method);
                }
                this._currentMethod = method;
            }

            this._engineInstance.reset(this.state, this.velocity);
            if (this.velocity !== undefined) transition.velocity = this.velocity;
            this._engineInstance.set(endValue, transition, _loadNext.bind(this));
        }

        /**
         * Add transition to end state to the queue of pending transitions. Special
         *    Use: calling without a transition resets the object to that state with
         *    no pending actions
         *
         * @method set
         *
         * @param {number|FamousMatrix|Array.Number|Object.<number, number>} endState
         *    end state to which we interpolate
         * @param {transition=} transition object of type {duration: number, curve:
         *    f[0,1] -> [0,1] or name}. If transition is omitted, change will be
         *    instantaneous.
         * @param {function()=} callback Zero-argument function to call on observed
         *    completion (t=1)
         */
        Transitionable.prototype.set = function set(endState, transition, callback) {
            if (!transition) {
                this.reset(endState);
                if (callback) callback();
                return this;
            }

            var action = [endState, transition];
            this.actionQueue.push(action);
            this.callbackQueue.push(callback);
            if (!this.currentAction) _loadNext.call(this);
            return this;
        };

        /**
         * Cancel all transitions and reset to a stable state
         *
         * @method reset
         *
         * @param {number|Array.Number|Object.<number, number>} startState
         *    stable state to set to
         */
        Transitionable.prototype.reset = function reset(startState, startVelocity) {
            this._currentMethod = null;
            this._engineInstance = null;
            this._callback = undefined;
            this.state = startState;
            this.velocity = startVelocity;
            this.currentAction = null;
            this.actionQueue = [];
            this.callbackQueue = [];
        };

        /**
         * Add delay action to the pending action queue queue.
         *
         * @method delay
         *
         * @param {number} duration delay time (ms)
         * @param {function} callback Zero-argument function to call on observed
         *    completion (t=1)
         */
        Transitionable.prototype.delay = function delay(duration, callback) {
            var endValue;
            if (this.actionQueue.length) endValue = this.actionQueue[this.actionQueue.length - 1][0];else if (this.currentAction) endValue = this.currentAction[0];else endValue = this.get();

            return this.set(endValue, { duration: duration,
                curve: function () {
                    return 0;
                } }, callback);
        };

        /**
         * Get interpolated state of current action at provided time. If the last
         *    action has completed, invoke its callback.
         *
         * @method get
         *
         * @param {number=} timestamp Evaluate the curve at a normalized version of this
         *    time. If omitted, use current time. (Unix epoch time)
         * @return {number|Object.<number|string, number>} beginning state
         *    interpolated to this point in time.
         */
        Transitionable.prototype.get = function get(timestamp) {
            if (this._engineInstance) {
                if (this._engineInstance.getVelocity) this.velocity = this._engineInstance.getVelocity();
                this.state = this._engineInstance.get(timestamp);
            }
            return this.state;
        };

        /**
         * Is there at least one action pending completion?
         *
         * @method isActive
         *
         * @return {boolean}
         */
        Transitionable.prototype.isActive = function isActive() {
            return !!this.currentAction;
        };

        /**
         * Halt transition at current state and erase all pending actions.
         *
         * @method halt
         */
        Transitionable.prototype.halt = function halt() {
            return this.set(this.get());
        };

        module.exports = Transitionable;
    }).call($__exports, $__require, $__exports, $__module);
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: mark@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */

$__System.registerDynamic('23b', ['16f', '194', '23c', '169', '16a'], false, function ($__require, $__exports, $__module) {
  $__module.uri = $__module.id;
  return (function (require, exports, module) {
    var RenderNode = require('16f');
    var EventHandler = require('194');
    var ElementAllocator = require('23c');
    var Transform = require('169');
    var Transitionable = require('16a');

    var _zeroZero = [0, 0];
    var usePrefix = typeof document !== 'undefined' && !('perspective' in document.documentElement.style);

    //TODO this function is quite ugly as it depends on the last state of _nodeContext
    function _getElementSize() {
      var allocator = this._permanentAllocator || this._nodeContext.allocator;
      var element = allocator.container;
      return [element.clientWidth, element.clientHeight];
    }

    var _setPerspective = usePrefix ? function (element, perspective) {
      element.style.webkitPerspective = perspective ? perspective.toFixed() + 'px' : '';
    } : function (element, perspective) {
      element.style.perspective = perspective ? perspective.toFixed() + 'px' : '';
    };

    /**
     * A context is a group of renderables, representing one hierarchy level in the DOM.
     * Every Famous app has at least one context, which is the root context. The engine
     * can have multiple contexts, and Groups will create new contexts to nest things further.
     * The Context is not strictly bound to a specific point in the DOM, unless setPermanentElementAllocator()
     * is called. Otherwise, the context can be rendered dynamically in different parts of the document.
     *
     * @class Context
     * @constructor
     * @private
     * @param {Node} container Element in which content will be inserted
     */
    function Context() {

      this._node = new RenderNode();
      this._eventOutput = new EventHandler();
      this._size = [0, 0];

      this._perspectiveState = new Transitionable(0);
      this._perspective = undefined;

      this._nodeContext = {
        transform: Transform.identity,
        opacity: 1,
        origin: _zeroZero,
        align: _zeroZero,
        size: this._size
      };

      this._eventOutput.on('resize', function () {
        this.setSize(_getElementSize.call(this));
      }.bind(this));
    }

    /**
     * Add renderables to this Context's render tree.
     *
     * @method add
     *
     * @param {Object} obj renderable object
     * @return {RenderNode} RenderNode wrapping this object, if not already a RenderNode
     */
    Context.prototype.add = function add(obj) {
      return this._node.add(obj);
    };

    /**
     * Move this Context to another containing document element.
     *
     * @method migrate
     *
     * @param {Node} container Element to which content will be migrated
     */
    Context.prototype.migrate = function migrate(container) {
      throw new Error('not supported');
    };

    /**
     *  Cleans up all the RenderNode
     */
    Context.prototype.cleanup = function cleanup(allocator) {
      this._node.cleanup(allocator);
    };

    /**
     * Gets viewport size for Context.
     *
     * @method getSize
     *
     * @return {Array.Number} viewport size as [width, height]
     */
    Context.prototype.getSize = function getSize() {
      return this._size;
    };

    /**
     * Sets viewport size for Context.
     *
     * @method setSize
     *
     * @param {Array.Number} size [width, height].  If unspecified, use size of root document element.
     */
    Context.prototype.setSize = function setSize(size) {
      if (!size) size = _getElementSize.call(this);
      this._size[0] = size[0];
      this._size[1] = size[1];
    };

    /**
     * Marks the context as having a stationary root being the given elementAllocator
     * @param elementAllocator
     */
    Context.prototype.setPermanentElementAllocator = function update(elementAllocator) {
      if (this._permanentAllocator) {
        throw new Error('Cannot reset the permament element allocator!');
      }
      this._permanentAllocator = elementAllocator;
      this._nodeContext.allocator = elementAllocator;
    };

    /**
     * Commit this Context's content changes to the document.
     *
     * @private
     * @method update
     * @param {Object} contextParameters engine commit specification
     */
    Context.prototype.update = function update(contextParameters) {
      if (contextParameters) {
        if (contextParameters.transform) this._nodeContext.transform = contextParameters.transform;
        if (contextParameters.opacity) this._nodeContext.opacity = contextParameters.opacity;
        if (contextParameters.origin) this._nodeContext.origin = contextParameters.origin;
        if (contextParameters.align) this._nodeContext.align = contextParameters.align;
        if (contextParameters.size) this._nodeContext.size = contextParameters.size;
        if (contextParameters.allocator) {
          this._nodeContext.allocator = contextParameters.allocator;
        } else {
          this._nodeContext.allocator = this._permanentAllocator;
        }
      }
      var perspective = this._perspectiveState.get();
      if (perspective !== this._perspective) {
        _setPerspective(this._nodeContext.allocator.container, perspective);
        this._perspective = perspective;
      }

      this._node.commit(this._nodeContext);
    };

    /**
     * Get current perspective of this context in pixels.
     *
     * @method getPerspective
     * @return {Number} depth perspective in pixels
     */
    Context.prototype.getPerspective = function getPerspective() {
      return this._perspectiveState.get();
    };

    /**
     * Set current perspective of this context in pixels.
     *
     * @method setPerspective
     * @param {Number} perspective in pixels
     * @param {Object} [transition] Transitionable object for applying the change
     * @param {function(Object)} callback function called on completion of transition
     */
    Context.prototype.setPerspective = function setPerspective(perspective, transition, callback) {
      return this._perspectiveState.set(perspective, transition, callback);
    };

    /**
     * Trigger an event, sending to all downstream handlers
     *   listening for provided 'type' key.
     *
     * @method emit
     *
     * @param {string} type event type key (for example, 'click')
     * @param {Object} event event data
     * @return {EventHandler} this
     */
    Context.prototype.emit = function emit(type, event) {
      return this._eventOutput.emit(type, event);
    };

    /**
     * Bind a callback function to an event type handled by this object.
     *
     * @method "on"
     *
     * @param {string} type event type key (for example, 'click')
     * @param {function(string, Object)} handler callback
     * @return {EventHandler} this
     */
    Context.prototype.on = function on(type, handler) {
      return this._eventOutput.on(type, handler);
    };

    /**
     * Unbind an event by type and handler.
     *   This undoes the work of "on".
     *
     * @method removeListener
     *
     * @param {string} type event type key (for example, 'click')
     * @param {function} handler function object to remove
     * @return {EventHandler} internal event handler object (for chaining)
     */
    Context.prototype.removeListener = function removeListener(type, handler) {
      return this._eventOutput.removeListener(type, handler);
    };

    /**
     * Add event handler object to set of downstream handlers.
     *
     * @method pipe
     *
     * @param {EventHandler} target event handler target object
     * @return {EventHandler} passed event handler
     */
    Context.prototype.pipe = function pipe(target) {
      return this._eventOutput.pipe(target);
    };

    /**
     * Remove handler object from set of downstream handlers.
     *   Undoes work of "pipe".
     *
     * @method unpipe
     *
     * @param {EventHandler} target target handler object
     * @return {EventHandler} provided target
     */
    Context.prototype.unpipe = function unpipe(target) {
      return this._eventOutput.unpipe(target);
    };

    module.exports = Context;
  }).call($__exports, $__require, $__exports, $__module);
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: mark@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */

$__System.registerDynamic('23c', ['23b'], false, function ($__require, $__exports, $__module) {
  $__module.uri = $__module.id;
  return (function (require, exports, module) {
    var Context = require('23b');

    /**
     * Internal helper object to Context that handles the process of
     *   creating and allocating DOM elements within a managed div.
     *   Private.
     *
     * @class ElementAllocator
     * @constructor
     * @private
     * @param {Node} container document element in which Famo.us content will be inserted
     */
    function ElementAllocator(container) {
      if (!container) container = document.createDocumentFragment();
      this.container = container;
      this.detachedHtmlElements = {};
      this.detachedAllocators = {};
    }

    /**
     * Move the document elements from their original container to a new one.
     *
     * @private
     * @method migrate
     *
     * @param {Node} container document element to which Famo.us content will be migrated
     */
    ElementAllocator.prototype.migrate = function migrate(container) {
      throw new Error('not supported');
      var oldContainer = this.container;
      if (container === oldContainer) return;

      if (oldContainer instanceof DocumentFragment) {
        container.appendChild(oldContainer);
      } else {
        while (oldContainer.hasChildNodes()) {
          container.appendChild(oldContainer.firstChild);
        }
      }

      this.container = container;
    };

    /**
     * Allocate an element of specified type from the pool.
     *
     * @private
     * @method allocate
     *
     * @param {String} options.type type of element, e.g. 'div'
     * @param {Boolean} options.insertFirst Whether it should be allocated from the top instead of the bottom
     * or at the end. Defaults to false (at the bottom).
     * @param {Boolean} options.isNested Whether it should allocate a node that already is nested (treated separately)
     * @return {Node} allocated document element
     */
    ElementAllocator.prototype.allocate = function allocate(options) {
      var type = options.type.toLocaleLowerCase();
      var insertFirst = !!options.insertFirst;
      var isNested = !!options.isNested;
      type = type.toLowerCase();
      var detachedList = isNested ? this.detachedAllocators : this.detachedHtmlElements;
      if (!(type in detachedList)) detachedList[type] = [];
      var nodeStore = detachedList[type];
      var result;
      if (nodeStore.length > 0 && !insertFirst) {
        result = nodeStore.pop();
      } else {
        result = this._allocateNewHtmlOutput(type, insertFirst);
        if (isNested) {
          result = this._allocateNewAllocator(result);
        }
      }
      return result;
    };

    /**
     * Allocates an allocator to nest within the current space
     * @param container
     * @returns {ElementAllocator}
     * @private
     */
    ElementAllocator.prototype._allocateNewAllocator = function _allocateNewContext(container) {
      return new ElementAllocator(container);
    };

    /**
     * Allocates a DOM element
     * @param type
     * @param insertFirst
     * @returns {Element}
     * @private
     */
    ElementAllocator.prototype._allocateNewHtmlOutput = function _allocateNewElementOutput(type, insertFirst) {
      var result = document.createElement(type);
      if (insertFirst) {
        this.container.insertBefore(result, this.container.firstChild);
      } else {
        this.container.appendChild(result);
      }
      return result;
    };

    /**
     * Deallocates an allocator nested within this allocator and stores it for later usage.
     * @param allocator
     */
    ElementAllocator.prototype.deallocateAllocator = function deallocateAllocator(allocator) {
      var elementToDeallocate = allocator.container;
      var nodeType = elementToDeallocate.nodeName.toLocaleLowerCase();
      var nodeStore = this.detachedAllocators[nodeType];
      nodeStore.push(allocator);
    };
    /**
     * De-allocate an element of specified type to the pool.
     *
     * @private
     * @method deallocate
     *
     * @param {Node} element document element to deallocate
     */

    ElementAllocator.prototype.deallocate = function deallocate(element) {
      var nodeType = element.nodeName.toLowerCase();
      var nodeStore = this.detachedHtmlElements[nodeType];
      nodeStore.push(element);
    };

    module.exports = ElementAllocator;
  }).call($__exports, $__require, $__exports, $__module);
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: mark@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */

$__System.registerDynamic('173', ['23b', '23c', '194', '195'], false, function ($__require, $__exports, $__module) {
  $__module.uri = $__module.id;
  return (function (require, exports, module) {

    /**
     * The singleton object initiated upon process
     *   startup which manages all active Context instances, runs
     *   the render dispatch loop, and acts as a listener and dispatcher
     *   for events.  All methods are therefore static.
     *
     *   On static initialization, window.requestAnimationFrame is called with
     *     the event loop function.
     *
     *   Note: Any window in which Engine runs will prevent default
     *     scrolling behavior on the 'touchmove' event.
     *
     * @static
     * @class Engine
     */
    var Context = require('23b');
    var ElementAllocator = require('23c');
    var EventHandler = require('194');
    var OptionsManager = require('195');

    var Engine = {};

    var contexts = [];

    var nextTickQueue = [];

    var currentFrame = 0;
    var nextTickFrame = 0;

    var deferQueue = [];

    var lastTime = Date.now();
    var frameTime;
    var frameTimeLimit;
    var loopEnabled = true;
    var eventForwarders = {};
    var eventHandler = new EventHandler();

    var options = {
      containerType: 'div',
      containerClass: 'famous-container',
      fpsCap: undefined,
      runLoop: true,
      appMode: true
    };
    var optionsManager = new OptionsManager(options);

    /** @const */
    var MAX_DEFER_FRAME_TIME = 10;

    /**
     * Inside requestAnimationFrame loop, step() is called, which:
     *   calculates current FPS (throttling loop if it is over limit set in setFPSCap),
     *   emits dataless 'prerender' event on start of loop,
     *   calls in order any one-shot functions registered by nextTick on last loop,
     *   calls Context.update on all Context objects registered,
     *   and emits dataless 'postrender' event on end of loop.
     *
     * @static
     * @private
     * @method step
     */
    Engine.step = function step() {
      currentFrame++;
      nextTickFrame = currentFrame;

      var currentTime = Date.now();

      this._lastFrameTimeDelta = currentTime - lastTime;
      // skip frame if we're over our framerate cap
      if (frameTimeLimit && this._lastFrameTimeDelta < frameTimeLimit) return;

      var i = 0;

      frameTime = currentTime - lastTime;
      lastTime = currentTime;

      eventHandler.emit('prerender');

      // empty the queue
      var numFunctions = nextTickQueue.length;
      while (numFunctions--) nextTickQueue.shift()(currentFrame);

      // limit total execution time for deferrable functions
      while (deferQueue.length && Date.now() - currentTime < MAX_DEFER_FRAME_TIME) {
        deferQueue.shift().call(this);
      }

      for (i = 0; i < contexts.length; i++) contexts[i].update();

      eventHandler.emit('postrender');
    };

    Engine.getFrameTimeDelta = function getFrameTimeDelta() {
      return this._lastFrameTimeDelta;
    };

    // engage requestAnimationFrame
    function loop() {
      if (options.runLoop) {
        Engine.step();
        window.requestAnimationFrame(loop);
      } else loopEnabled = false;
    }

    if (typeof window !== 'undefined') {
      window.requestAnimationFrame(loop);
    }

    //
    // Upon main document window resize (unless on an "input" HTML element):
    //   scroll to the top left corner of the window,
    //   and for each managed Context: emit the 'resize' event and update its size.
    // @param {Object=} event document event
    //
    function handleResize(event) {
      for (var i = 0; i < contexts.length; i++) {
        contexts[i].emit('resize');
      }
      eventHandler.emit('resize');
    }

    if (typeof window !== 'undefined') {

      window.addEventListener('resize', handleResize, false);
      handleResize();

      window.addEventListener('resize', handleResize, false);
      handleResize();
    }

    Engine.touchMoveEnabled = false;

    Engine.enableTouchMove = function enableTouchMove() {
      if (!this.touchMoveEnabled) {
        console.log("Warning: Touch move enabled. Outcomes might be unwated");
      }
      this.touchMoveEnabled = true;
    };

    /**
     * Initialize famous for app mode
     *
     * @static
     * @private
     * @method initialize
     */
    function initialize() {
      // prevent scrolling via browser
      window.addEventListener('touchmove', function (event) {
        if (event.target.tagName === 'TEXTAREA' || this.touchMoveEnabled) {
          return true;
        } else {
          event.preventDefault();
        }
      }.bind(this), { capture: true, passive: false });

      addRootClasses();
    }

    var initialized = false;

    function addRootClasses() {
      if (!document.body) {
        Engine.nextTick(addRootClasses);
        return;
      }

      document.body.classList.add('famous-root');
      document.documentElement.classList.add('famous-root');
    }

    /**
     * Add event handler object to set of downstream handlers.
     *
     * @method pipe
     *
     * @param {EventHandler} target event handler target object
     * @return {EventHandler} passed event handler
     */
    Engine.pipe = function pipe(target) {
      if (target.subscribe instanceof Function) return target.subscribe(Engine);else return eventHandler.pipe(target);
    };

    /**
     * Remove handler object from set of downstream handlers.
     *   Undoes work of "pipe".
     *
     * @method unpipe
     *
     * @param {EventHandler} target target handler object
     * @return {EventHandler} provided target
     */
    Engine.unpipe = function unpipe(target) {
      if (target.unsubscribe instanceof Function) return target.unsubscribe(Engine);else return eventHandler.unpipe(target);
    };

    /**
     * Bind a callback function to an event type handled by this object.
     *
     * @static
     * @method "on"
     *
     * @param {string} type event type key (for example, 'click')
     * @param {function(string, Object)} handler callback
     * @return {EventHandler} this
     */
    Engine.on = function on(type, handler) {
      if (!(type in eventForwarders)) {
        eventForwarders[type] = eventHandler.emit.bind(eventHandler, type);

        addEngineListener(type, eventForwarders[type]);
      }
      return eventHandler.on(type, handler);
    };

    function addEngineListener(type, forwarder) {
      if (!document.body) {
        Engine.nextTick(addEventListener.bind(this, type, forwarder));
        return;
      }

      document.body.addEventListener(type, forwarder);
    }

    /**
     * Trigger an event, sending to all downstream handlers
     *   listening for provided 'type' key.
     *
     * @method emit
     *
     * @param {string} type event type key (for example, 'click')
     * @param {Object} event event data
     * @return {EventHandler} this
     */
    Engine.emit = function emit(type, event) {
      return eventHandler.emit(type, event);
    };

    /**
     * Unbind an event by type and handler.
     *   This undoes the work of "on".
     *
     * @static
     * @method removeListener
     *
     * @param {string} type event type key (for example, 'click')
     * @param {function} handler function object to remove
     * @return {EventHandler} internal event handler object (for chaining)
     */
    Engine.removeListener = function removeListener(type, handler) {
      return eventHandler.removeListener(type, handler);
    };

    /**
     * Return the current calculated frames per second of the Engine.
     *
     * @static
     * @method getFPS
     *
     * @return {Number} calculated fps
     */
    Engine.getFPS = function getFPS() {
      return 1000 / frameTime;
    };

    /**
     * Set the maximum fps at which the system should run. If internal render
     *    loop is called at a greater frequency than this FPSCap, Engine will
     *    throttle render and update until this rate is achieved.
     *
     * @static
     * @method setFPSCap
     *
     * @param {Number} fps maximum frames per second
     */
    Engine.setFPSCap = function setFPSCap(fps) {
      frameTimeLimit = Math.floor(1000 / fps);
    };

    /**
     * Return engine options.
     *
     * @static
     * @method getOptions
     * @param {string} key
     * @return {Object} engine options
     */
    Engine.getOptions = function getOptions(key) {
      return optionsManager.getOptions(key);
    };

    /**
     * Set engine options
     *
     * @static
     * @method setOptions
     *
     * @param {Object} [options] overrides of default options
     * @param {Number} [options.fpsCap]  maximum fps at which the system should run
     * @param {boolean} [options.runLoop=true] whether the run loop should continue
     * @param {string} [options.containerType="div"] type of container element.  Defaults to 'div'.
     * @param {string} [options.containerClass="famous-container"] type of container element.  Defaults to 'famous-container'.
     */
    Engine.setOptions = function setOptions(options) {
      return optionsManager.setOptions.apply(optionsManager, arguments);
    };

    /**
     * Creates a new Context for rendering and event handling with
     *    provided document element as top of each tree. This will be tracked by the
     *    process-wide Engine.
     *
     * @static
     * @method createContext
     *
     * @param {Node} el will be top of Famo.us document element tree
     * @return {Context} new Context within el
     */
    Engine.createContext = function createContext(el) {
      if (!initialized && options.appMode) Engine.nextTick(initialize.bind(this));

      var needMountContainer = false;
      if (!el) {
        el = document.createElement(options.containerType);
        el.classList.add(options.containerClass);
        needMountContainer = true;
      }

      var context = new Context();
      context.setPermanentElementAllocator(new ElementAllocator(el));
      Engine.registerContext(context);

      if (needMountContainer) mount(context, el);

      return context;
    };

    function mount(context, el) {
      if (!document.body) {
        Engine.nextTick(mount.bind(this, context, el));
        return;
      }

      document.body.appendChild(el);
      context.emit('resize');
    }

    /**
     * Registers an existing context to be updated within the run loop.
     *
     * @static
     * @method registerContext
     *
     * @param {Context} context Context to register
     * @return {FamousContext} provided context
     */
    Engine.registerContext = function registerContext(context) {
      contexts.push(context);
      return context;
    };

    /**
     * Returns a list of all contexts.
     *
     * @static
     * @method getContexts
     * @return {Array} contexts that are updated on each tick
     */
    Engine.getContexts = function getContexts() {
      return contexts;
    };

    /**
     * Removes a context from the run loop. Note: this does not do any
     *     cleanup.
     *
     * @static
     * @method deregisterContext
     *
     * @param {Context} context Context to deregister
     */
    Engine.deregisterContext = function deregisterContext(context) {
      var i = contexts.indexOf(context);
      if (i >= 0) contexts.splice(i, 1);
    };

    /**
     * Queue a function to be executed on the next tick of the
     *    Engine.
     *
     * @static
     * @method nextTick
     *
     * @param {function(Object)} fn function accepting window object
     */
    Engine.nextTick = function nextTick(fn) {
      nextTickQueue.push(fn);
    };

    /**
     * Queue a function to be executed sometime soon, at a time that is
     *    unlikely to affect frame rate.
     *
     * @static
     * @method defer
     *
     * @param {Function} fn
     */
    Engine.defer = function defer(fn) {
      deferQueue.push(fn);
    };

    optionsManager.on('change', function (data) {
      if (data.id === 'fpsCap') Engine.setFPSCap(data.value);else if (data.id === 'runLoop') {
        // kick off the loop only if it was stopped
        if (!loopEnabled && data.value) {
          loopEnabled = true;
          window.requestAnimationFrame(loop);
        }
      }
    });

    module.exports = Engine;
  }).call($__exports, $__require, $__exports, $__module);
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: mark@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */

$__System.registerDynamic("244", [], false, function ($__require, $__exports, $__module) {
  $__module.uri = $__module.id;
  return (function (require, exports, module) {

    /**
     * EventEmitter represents a channel for events.
     *
     * @class EventEmitter
     * @constructor
     */
    function EventEmitter() {
      this.listeners = {};
      this._owner = this;
    }

    /**
     * Trigger an event, sending to all downstream handlers
     *   listening for provided 'type' key.
     *
     * @method emit
     *
     * @param {string} type event type key (for example, 'click')
     * @param {Objects} event event data
     * @param {Objects}(opt) event event data
     * @param {Objects}(opt) event event data
     * @param {Objects}(opt) event event data
     * @return {EventHandler} this
     */
    EventEmitter.prototype.emit = function emit() {
      var type = arguments[0];
      var args = [];
      for (var i = 1; i < arguments.length; i++) {
        args.push(arguments[i]);
      }
      var handlers = this.listeners[type];
      if (handlers) {
        handlers = Array.from(handlers);
        for (var i = 0; i < handlers.length; i++) {
          handlers[i].apply(this._owner, args);
        }
      }
      return this;
    };

    /**
     * Bind a callback function to an event type handled by this object.
     *
     * @method "on"
     *
     * @param {string} type event type key (for example, 'click')
     * @param {function(string, Object)} handler callback
     * @return {EventHandler} this
     */
    EventEmitter.prototype.on = function on(type, handler) {
      if (!(type in this.listeners)) this.listeners[type] = [];
      var index = this.listeners[type].indexOf(handler);
      if (index < 0) this.listeners[type].push(handler);
      return this;
    };

    /**
     * Listens once
     * @param type
     * @param handler
     * @returns {EventHandler}
     */
    EventEmitter.prototype.once = function once(type, handler) {
      return this.on(type, function onceWrapper() {
        this.removeListener(type, onceWrapper);
        handler.apply(this._owner, arguments);
      }, this);
    };

    /**
     * Alias for "on".
     * @method addListener
     */
    EventEmitter.prototype.addListener = EventEmitter.prototype.on;

    /**
     * Unbind an event by type and handler.
     *   This undoes the work of "on".
     *
     * @method removeListener
     *
     * @param {string} type event type key (for example, 'click')
     * @param {function} handler function object to remove
     * @return {EventEmitter} this
     */
    EventEmitter.prototype.removeListener = function removeListener(type, handler) {
      var listener = this.listeners[type];
      if (listener !== undefined) {
        var index = listener.indexOf(handler);
        if (index >= 0) listener.splice(index, 1);
      }
      return this;
    };

    EventEmitter.prototype.replaceListeners = function replaceListeners(type, handler) {
      this.listeners[type] = [];
      return this.on(type, handler);
    };

    /**
     * Call event handlers with this set to owner.
     *
     * @method bindThis
     *
     * @param {Object} owner object this EventEmitter belongs to
     */
    EventEmitter.prototype.bindThis = function bindThis(owner) {
      this._owner = owner;
    };

    module.exports = EventEmitter;
  }).call($__exports, $__require, $__exports, $__module);
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: mark@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */

$__System.registerDynamic('194', ['244'], false, function ($__require, $__exports, $__module) {
  $__module.uri = $__module.id;
  return (function (require, exports, module) {
    var EventEmitter = require('244');

    /**
     * EventHandler forwards received events to a set of provided callback functions.
     * It allows events to be captured, processed, and optionally piped through to other event handlers.
     *
     * @class EventHandler
     * @extends EventEmitter
     * @constructor
     */
    function EventHandler() {
      EventEmitter.apply(this, arguments);

      this.downstream = []; // downstream event handlers
      this.downstreamFn = []; // downstream functions

      this.upstream = []; // upstream event handlers
      this.upstreamListeners = {}; // upstream listeners
    }
    EventHandler.prototype = Object.create(EventEmitter.prototype);
    EventHandler.prototype.constructor = EventHandler;

    /**
     * Assign an event handler to receive an object's input events.
     *
     * @method setInputHandler
     * @static
     *
     * @param {Object} object object to mix trigger, subscribe, and unsubscribe functions into
     * @param {EventHandler} handler assigned event handler
     */
    EventHandler.setInputHandler = function setInputHandler(object, handler) {
      object.trigger = handler.trigger.bind(handler);
      if (handler.subscribe && handler.unsubscribe) {
        object.subscribe = handler.subscribe.bind(handler);
        object.unsubscribe = handler.unsubscribe.bind(handler);
      }
    };

    /**
     * Assign an event handler to receive an object's output events.
     *
     * @method setOutputHandler
     * @static
     *
     * @param {Object} object object to mix pipe, unpipe, on, addListener, and removeListener functions into
     * @param {EventHandler} handler assigned event handler
     */
    EventHandler.setOutputHandler = function setOutputHandler(object, handler) {
      if (handler instanceof EventHandler) handler.bindThis(object);
      object.pipe = handler.pipe.bind(handler);
      object.unpipe = handler.unpipe.bind(handler);
      object.on = handler.on.bind(handler);
      object.once = handler.once.bind(handler);
      object.addListener = object.on;
      object.removeListener = handler.removeListener.bind(handler);
      object.replaceListeners = handler.replaceListeners.bind(handler);
    };

    /**
     * Trigger an event, sending to all downstream handlers
     *   listening for provided 'type' key.
     *
     * @method emit
     *
     * @param {string} type event type key (for example, 'click')
     * @param {Object} event event data
     * @return {EventHandler} this
     */
    EventHandler.prototype.emit = function emit(type, event) {
      EventEmitter.prototype.emit.apply(this, arguments);
      var i = 0;
      for (i = 0; i < this.downstream.length; i++) {
        if (this.downstream[i].trigger) this.downstream[i].trigger(type, event);
      }
      for (i = 0; i < this.downstreamFn.length; i++) {
        this.downstreamFn[i](type, event);
      }
      return this;
    };

    /**
     * Alias for emit
     * @method addListener
     */
    EventHandler.prototype.trigger = EventHandler.prototype.emit;

    /**
     * Add event handler object to set of downstream handlers.
     *
     * @method pipe
     *
     * @param {EventHandler} target event handler target object
     * @return {EventHandler} passed event handler
     */
    EventHandler.prototype.pipe = function pipe(target) {
      if (target.subscribe instanceof Function) return target.subscribe(this);

      var downstreamCtx = target instanceof Function ? this.downstreamFn : this.downstream;
      var index = downstreamCtx.indexOf(target);
      if (index < 0) downstreamCtx.push(target);

      if (target instanceof Function) target('pipe', null);else if (target.trigger) target.trigger('pipe', null);

      return target;
    };

    /**
     * Remove handler object from set of downstream handlers.
     *   Undoes work of "pipe".
     *
     * @method unpipe
     *
     * @param {EventHandler} target target handler object
     * @return {EventHandler} provided target
     */
    EventHandler.prototype.unpipe = function unpipe(target) {
      if (target.unsubscribe instanceof Function) return target.unsubscribe(this);

      var downstreamCtx = target instanceof Function ? this.downstreamFn : this.downstream;
      var index = downstreamCtx.indexOf(target);
      if (index >= 0) {
        downstreamCtx.splice(index, 1);
        if (target instanceof Function) target('unpipe', null);else if (target.trigger) target.trigger('unpipe', null);
        return target;
      } else return false;
    };

    /**
     * Bind a callback function to an event type handled by this object.
     *
     * @method "on"
     *
     * @param {string} type event type key (for example, 'click')
     * @param {function(string, Object)} handler callback
     * @return {EventHandler} this
     */
    EventHandler.prototype.on = function on(type, handler) {
      EventEmitter.prototype.on.apply(this, arguments);
      if (!(type in this.upstreamListeners)) {
        var upstreamListener = this.trigger.bind(this, type);
        this.upstreamListeners[type] = upstreamListener;
        for (var i = 0; i < this.upstream.length; i++) {
          this.upstream[i].on(type, upstreamListener);
        }
      }
      return this;
    };

    /**
     * Listens once
     * @param type
     * @param handler
     * @returns {EventHandler}
     */
    EventHandler.prototype.once = function on(type, handler) {
      EventEmitter.prototype.once.apply(this, arguments);
      return this;
    };

    /**
     * Alias for "on"
     * @method addListener
     */
    EventHandler.prototype.addListener = EventHandler.prototype.on;

    /**
     * Listen for events from an upstream event handler.
     *
     * @method subscribe
     *
     * @param {EventEmitter} source source emitter object
     * @return {EventHandler} this
     */
    EventHandler.prototype.subscribe = function subscribe(source) {
      var index = this.upstream.indexOf(source);
      if (index < 0) {
        this.upstream.push(source);
        for (var type in this.upstreamListeners) {
          source.on(type, this.upstreamListeners[type]);
        }
      }
      return this;
    };

    /**
     * Stop listening to events from an upstream event handler.
     *
     * @method unsubscribe
     *
     * @param {EventEmitter} source source emitter object
     * @return {EventHandler} this
     */
    EventHandler.prototype.unsubscribe = function unsubscribe(source) {
      var index = this.upstream.indexOf(source);
      if (index >= 0) {
        this.upstream.splice(index, 1);
        for (var type in this.upstreamListeners) {
          source.removeListener(type, this.upstreamListeners[type]);
        }
      }
      return this;
    };

    module.exports = EventHandler;
  }).call($__exports, $__require, $__exports, $__module);
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: mark@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */

$__System.registerDynamic('195', ['194'], false, function ($__require, $__exports, $__module) {
    $__module.uri = $__module.id;
    return (function (require, exports, module) {
        var EventHandler = require('194');

        /**
         *  A collection of methods for setting options which can be extended
         *  onto other classes.
         *
         *
         *  **** WARNING ****
         *  You can only pass through objects that will compile into valid JSON.
         *
         *  Valid options:
         *      Strings,
         *      Arrays,
         *      Objects,
         *      Numbers,
         *      Nested Objects,
         *      Nested Arrays.
         *
         *    This excludes:
         *        Document Fragments,
         *        Functions
         * @class OptionsManager
         * @constructor
         * @param {Object} value options dictionary
         */
        function OptionsManager(value) {
            this._value = value;
            this.eventOutput = null;
        }

        /**
         * Create options manager from source dictionary with arguments overriden by patch dictionary.
         *
         * @static
         * @method OptionsManager.patch
         *
         * @param {Object} source source arguments
         * @param {...Object} data argument additions and overwrites
         * @return {Object} source object
         */
        OptionsManager.patch = function patchObject(source, data) {
            var manager = new OptionsManager(source);
            for (var i = 1; i < arguments.length; i++) manager.patch(arguments[i]);
            return source;
        };

        function _createEventOutput() {
            this.eventOutput = new EventHandler();
            this.eventOutput.bindThis(this);
            EventHandler.setOutputHandler(this, this.eventOutput);
        }

        /**
         * Create OptionsManager from source with arguments overriden by patches.
         *   Triggers 'change' event on this object's event handler if the state of
         *   the OptionsManager changes as a result.
         *
         * @method patch
         *
         * @param {...Object} arguments list of patch objects
         * @return {OptionsManager} this
         */
        OptionsManager.prototype.patch = function patch() {
            var myState = this._value;
            for (var i = 0; i < arguments.length; i++) {
                var data = arguments[i];
                for (var k in data) {
                    if (k in myState && data[k] && data[k].constructor === Object && myState[k] && myState[k].constructor === Object) {
                        if (!myState.hasOwnProperty(k)) myState[k] = Object.create(myState[k]);
                        this.key(k).patch(data[k]);
                        if (this.eventOutput) this.eventOutput.emit('change', { id: k, value: this.key(k).value() });
                    } else this.set(k, data[k]);
                }
            }
            return this;
        };

        /**
         * Alias for patch
         *
         * @method setOptions
         *
         */
        OptionsManager.prototype.setOptions = OptionsManager.prototype.patch;

        /**
         * Return OptionsManager based on sub-object retrieved by key
         *
         * @method key
         *
         * @param {string} identifier key
         * @return {OptionsManager} new options manager with the value
         */
        OptionsManager.prototype.key = function key(identifier) {
            var result = new OptionsManager(this._value[identifier]);
            if (!(result._value instanceof Object) || result._value instanceof Array) result._value = {};
            return result;
        };

        /**
         * Look up value by key or get the full options hash
         * @method get
         *
         * @param {string} key key
         * @return {Object} associated object or full options hash
         */
        OptionsManager.prototype.get = function get(key) {
            return key ? this._value[key] : this._value;
        };

        /**
         * Alias for get
         * @method getOptions
         */
        OptionsManager.prototype.getOptions = OptionsManager.prototype.get;

        /**
         * Set key to value.  Outputs 'change' event if a value is overwritten.
         *
         * @method set
         *
         * @param {string} key key string
         * @param {Object} value value object
         * @return {OptionsManager} new options manager based on the value object
         */
        OptionsManager.prototype.set = function set(key, value) {
            var originalValue = this.get(key);
            this._value[key] = value;
            if (this.eventOutput && value !== originalValue) this.eventOutput.emit('change', { id: key, value: value });
            return this;
        };

        /**
         * Bind a callback function to an event type handled by this object.
         *
         * @method "on"
         *
         * @param {string} type event type key (for example, 'change')
         * @param {function(string, Object)} handler callback
         * @return {EventHandler} this
         */
        OptionsManager.prototype.on = function on() {
            _createEventOutput.call(this);
            return this.on.apply(this, arguments);
        };

        /**
         * Unbind an event by type and handler.
         *   This undoes the work of "on".
         *
         * @method removeListener
         *
         * @param {string} type event type key (for example, 'change')
         * @param {function} handler function object to remove
         * @return {EventHandler} internal event handler object (for chaining)
         */
        OptionsManager.prototype.removeListener = function removeListener() {
            _createEventOutput.call(this);
            return this.removeListener.apply(this, arguments);
        };

        /**
         * Add event handler object to set of downstream handlers.
         *
         * @method pipe
         *
         * @param {EventHandler} target event handler target object
         * @return {EventHandler} passed event handler
         */
        OptionsManager.prototype.pipe = function pipe() {
            _createEventOutput.call(this);
            return this.pipe.apply(this, arguments);
        };

        /**
         * Remove handler object from set of downstream handlers.
         * Undoes work of "pipe"
         *
         * @method unpipe
         *
         * @param {EventHandler} target target handler object
         * @return {EventHandler} provided target
         */
        OptionsManager.prototype.unpipe = function unpipe() {
            _createEventOutput.call(this);
            return this.unpipe.apply(this, arguments);
        };

        module.exports = OptionsManager;
    }).call($__exports, $__require, $__exports, $__module);
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: mark@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */
$__System.registerDynamic('245', ['194', '173', '195'], false, function ($__require, $__exports, $__module) {
  $__module.uri = $__module.id;
  return (function (require, exports, module) {
    var EventHandler = require('194');
    var Engine = require('173');
    var OptionsManager = require('195');

    /**
     * Handles piped in mousewheel events.
     *   Emits 'start', 'update', and 'end' events with payloads including:
     *   delta: change since last position,
     *   position: accumulated deltas,
     *   velocity: speed of change in pixels per ms,
     *   slip: true (unused).
     *
     *   Can be used as delegate of GenericSync.
     *
     * @class ScrollSync
     * @constructor
     * @param {Object} [options] overrides of default options
     * @param {Number} [options.direction] Pay attention to x changes (ScrollSync.DIRECTION_X),
     *   y changes (ScrollSync.DIRECTION_Y) or both (undefined)
     * @param {Number} [options.minimumEndSpeed] End speed calculation floors at this number, in pixels per ms
     * @param {boolean} [options.rails] whether to snap position calculations to nearest axis
     * @param {Number | Array.Number} [options.scale] scale outputs in by scalar or pair of scalars
     * @param {Number} [options.stallTime] reset time for velocity calculation in ms
     */
    function ScrollSync(options) {
      this.options = Object.create(ScrollSync.DEFAULT_OPTIONS);
      this._optionsManager = new OptionsManager(this.options);
      if (options) this.setOptions(options);

      this._payload = {
        delta: null,
        position: null,
        velocity: null,
        slip: true
      };

      this._eventInput = new EventHandler();
      this._eventOutput = new EventHandler();

      EventHandler.setInputHandler(this, this._eventInput);
      EventHandler.setOutputHandler(this, this._eventOutput);

      this._position = this.options.direction === undefined ? [0, 0] : 0;
      this._prevTime = undefined;
      this._prevVel = undefined;
      this._eventInput.on('mousewheel', _handleMove.bind(this));
      this._eventInput.on('wheel', _handleMove.bind(this));
      this._inProgress = false;
      this._loopBound = false;
    }

    ScrollSync.DEFAULT_OPTIONS = {
      direction: undefined,
      minimumEndSpeed: Infinity,
      swapDirections: false,
      rails: false,
      scale: 1,
      stallTime: 50,
      lineHeight: 40,
      preventDefault: true
    };

    ScrollSync.DIRECTION_X = 0;
    ScrollSync.DIRECTION_Y = 1;

    var MINIMUM_TICK_TIME = 8;

    var _now = Date.now;

    function _newFrame() {
      if (this._inProgress && _now() - this._prevTime > this.options.stallTime) {
        this._inProgress = false;

        var finalVel = Math.abs(this._prevVel) >= this.options.minimumEndSpeed ? this._prevVel : 0;

        var payload = this._payload;
        payload.position = this._position;
        payload.velocity = finalVel;
        payload.slip = true;

        this._eventOutput.emit('end', payload);
      }
    }

    function _handleMove(event) {
      if (this.options.preventDefault) event.preventDefault();

      if (!this._inProgress) {
        this._inProgress = true;
        this._position = this.options.direction === undefined ? [0, 0] : 0;
        payload = this._payload;
        payload.slip = true;
        payload.position = this._position;
        payload.clientX = event.clientX;
        payload.clientY = event.clientY;
        payload.offsetX = event.offsetX;
        payload.offsetY = event.offsetY;
        this._eventOutput.emit('start', payload);
        if (!this._loopBound) {
          Engine.on('prerender', _newFrame.bind(this));
          this._loopBound = true;
        }
      }

      var currTime = _now();
      var prevTime = this._prevTime || currTime;

      var diffX = event.wheelDeltaX !== undefined ? event.wheelDeltaX : -event.deltaX;
      var diffY = event.wheelDeltaY !== undefined ? event.wheelDeltaY : -event.deltaY;

      if (event.deltaMode === 1) {
        // units in lines, not pixels
        diffX *= this.options.lineHeight;
        diffY *= this.options.lineHeight;
      }

      if (this.options.rails) {
        if (Math.abs(diffX) > Math.abs(diffY)) diffY = 0;else diffX = 0;
      }

      var diffTime = Math.max(currTime - prevTime, MINIMUM_TICK_TIME); // minimum tick time

      var velX = diffX / diffTime;
      var velY = diffY / diffTime;

      var scale = this.options.scale;
      var nextVel;
      var nextDelta;

      if (this.options.direction === ScrollSync.DIRECTION_X) {
        nextDelta = scale * diffX;
        nextVel = scale * velX;
        this._position += nextDelta;
      } else if (this.options.direction === ScrollSync.DIRECTION_Y) {
        nextDelta = scale * diffY;
        nextVel = scale * velY;
        this._position += nextDelta;
      } else {
        nextDelta = [scale * diffX, scale * diffY];
        nextVel = [scale * velX, scale * velY];
        this._position[0] += nextDelta[0];
        this._position[1] += nextDelta[1];
      }

      var payload = this._payload;
      payload.delta = nextDelta;
      payload.velocity = nextVel;
      payload.position = this._position;
      if (this.options.swapDirections) {
        var temp = payload.delta[0];
        payload.delta[0] = payload.delta[1];
        payload.delta[1] = temp;
        temp = payload.velocity[0];
        payload.velocity[0] = payload.velocity[1];
        payload.velocity[1] = temp;
        temp = payload.position[0];
        payload.position[0] = payload.position[1];
        payload.position[1] = temp;
      }
      payload.slip = true;

      this._eventOutput.emit('update', payload);

      this._prevTime = currTime;
      this._prevVel = nextVel;
    }

    /**
     * Return entire options dictionary, including defaults.
     *
     * @method getOptions
     * @return {Object} configuration options
     */
    ScrollSync.prototype.getOptions = function getOptions() {
      return this.options;
    };

    /**
     * Set internal options, overriding any default options
     *
     * @method setOptions
     *
     * @param {Object} [options] overrides of default options
     * @param {Number} [options.minimimEndSpeed] If final velocity smaller than this, round down to 0.
     * @param {Number} [options.stallTime] ms of non-motion before 'end' emitted
     * @param {Number} [options.rails] whether to constrain to nearest axis.
     * @param {Number} [options.direction] ScrollSync.DIRECTION_X, DIRECTION_Y -
     *    pay attention to one specific direction.
     * @param {Number} [options.scale] constant factor to scale velocity output
     */
    ScrollSync.prototype.setOptions = function setOptions(options) {
      return this._optionsManager.setOptions(options);
    };

    module.exports = ScrollSync;
  }).call($__exports, $__require, $__exports, $__module);
});
/**
 * This Source Code is licensed under the MIT license. If a copy of the
 * MIT-license was not distributed with this file, You can obtain one at:
 * http://opensource.org/licenses/mit-license.html.
 *
 * @author: Hein Rutjes (IjzerenHein)
 * @license MIT
 * @copyright Gloey Apps, 2015
 */

/*global console*/
/*eslint no-console:0 */

/**
 * Linked-list based implementation of a view-sequence which fixes
 * several issues in the stock famo.us ViewSequence.
 *
 * @module
 */
$__System.registerDynamic('1fc', [], false, function ($__require, $__exports, $__module) {
    $__module.uri = $__module.id;
    return (function (require, exports, module) {

        /**
         * @private
         */
        function assert(value, message) {
            if (!value) {
                //debugger;
                throw new Error(message);
            }
        }

        /**
         * @class
         * @param {Object} options Configurable options.
         * @alias module:LinkedListViewSequence
         */
        function LinkedListViewSequence(items) {
            if (Array.isArray(items)) {
                this._ = new this.constructor.Backing(this);
                for (var i = 0; i < items.length; i++) {
                    this.push(items[i]);
                }
            } else {
                this._ = items || new this.constructor.Backing(this);
            }
        }

        LinkedListViewSequence.Backing = function Backing() {
            this.length = 0;
            //this.head = undefined;
            //this.tail = undefined;
        };

        /*LinkedListViewSequence.prototype.verifyIntegrity = function() {
            var item = this._.head;
            var count = 0;
            while (item) {
              assert(item._value, 'no rendernode at index: ' + count);
              count++;
              assert(count <= this._.length, 'head -> tail, node-count exceeds length: ' + count + ' > ' + this._.length);
              item = item._next;
            }
            assert(count === this._.length, 'head -> tail, different count: ' + count + ' != ' + this._.length);
            item = this._.tail;
            count = 0;
            while (item) {
              count++;
              assert(count <= this._.length, 'tail -> head, node-count exceeds length: ' + count + ' > ' + this._.length);
              item = item._prev;
            }
            assert(count === this._.length, 'tail -> head, different count: ' + count + ' != ' + this._.length);
        };*/

        /**
         * Get head node.
         *
         * @return {LinkedListViewSequence} head node.
         */
        LinkedListViewSequence.prototype.getHead = function () {
            return this._.head;
        };

        /**
         * Get tail node.
         *
         * @return {LinkedListViewSequence} tail node.
         */
        LinkedListViewSequence.prototype.getTail = function () {
            return this._.tail;
        };

        /**
         * Get previous node.
         *
         * @return {LinkedListViewSequence} previous node.
         */
        LinkedListViewSequence.prototype.getPrevious = function () {
            return this._prev;
        };

        /**
         * Get next node.
         *
         * @return {LinkedListViewSequence} next node.
         */
        LinkedListViewSequence.prototype.getNext = function () {
            return this._next;
        };

        /**
         * Gets the value of this node.
         *
         * @return {Renderable} surface/view
         */
        LinkedListViewSequence.prototype.get = function () {
            return this._value;
        };

        /**
         * Sets the value of this node.
         *
         * @param {Renderable} value surface/view
         * @return {LinkedListViewSequence} this
         */
        LinkedListViewSequence.prototype.set = function (value) {
            this._value = value;
            return this;
        };

        /**
         * Get the index of the node.
         *
         * @return {Number} Index of node.
         */
        LinkedListViewSequence.prototype.getIndex = function () {
            return this._value ? this.indexOf(this._value) : 0;
        };

        /**
         * Get human readable string verion of the node.
         *
         * @return {String} node as a human readable string
         */
        LinkedListViewSequence.prototype.toString = function () {
            return '' + this.getIndex();
        };

        /**
         * Finds the index of a given render-node.
         *
         * @param {Renderable} item Render-node to find.
         * @return {Number} Index or -1 when not found.
         */
        LinkedListViewSequence.prototype.indexOf = function (item) {
            var sequence = this._.head;
            var index = 0;
            while (sequence) {
                if (sequence._value === item) {
                    return index;
                }
                index++;
                sequence = sequence._next;
            }
            return -1;
        };

        /**
         * Finds the view-sequence item at the given index.
         *
         * @param {Number} index 0-based index.
         * @return {LinkedListViewSequence} View-sequence node or undefined.
         */
        LinkedListViewSequence.prototype.findByIndex = function (index) {
            index = index === -1 ? this._.length - 1 : index;
            if (index < 0 || index >= this._.length) {
                return undefined;
            }

            // search for specific index
            var searchIndex;
            var searchSequence;
            if (index > this._.length / 2) {
                // start searching from the tail
                searchSequence = this._.tail;
                searchIndex = this._.length - 1;
                while (searchIndex > index) {
                    searchSequence = searchSequence._prev;
                    searchIndex--;
                }
            } else {
                // start searching from the head
                searchSequence = this._.head;
                searchIndex = 0;
                while (searchIndex < index) {
                    searchSequence = searchSequence._next;
                    searchIndex++;
                }
            }
            return searchSequence;
        };

        /**
         * Finds the view-sequence node by the given renderable.
         *
         * @param {Renderable} value Render-node to search for.
         * @return {LinkedListViewSequence} View-sequence node or undefined.
         */
        LinkedListViewSequence.prototype.findByValue = function (value) {
            var sequence = this._.head;
            while (sequence) {
                if (sequence.get() === value) {
                    return sequence;
                }
                sequence = sequence._next;
            }
            return undefined;
        };

        /**
         * Inserts an item into the view-sequence.
         *
         * @param {Number} index 0-based index (-1 inserts at the tail).
         * @param {Renderable} renderNode Renderable to insert.
         * @return {LinkedListViewSequence} newly inserted view-sequence node.
         */
        LinkedListViewSequence.prototype.insert = function (index, renderNode) {
            index = index === -1 ? this._.length : index;
            /*if (this._.debug) {
                console.log(this._.logName + ': insert (length: ' + this._.length + ')');
            }*/
            if (!this._.length) {
                assert(index === 0, 'inserting in empty view-sequence, but not at index 0 (but ' + index + ' instead)');
                this._value = renderNode;
                this._.head = this;
                this._.tail = this;
                this._.length = 1;
                //this.verifyIntegrity();
                return this;
            }
            var sequence;
            if (index === 0) {
                // insert at head (quick!)
                sequence = new LinkedListViewSequence(this._);
                sequence._value = renderNode;
                sequence._next = this._.head;
                this._.head._prev = sequence;
                this._.head = sequence;
            } else if (index === this._.length) {
                // insert at tail (quick!)
                sequence = new LinkedListViewSequence(this._);
                sequence._value = renderNode;
                sequence._prev = this._.tail;
                this._.tail._next = sequence;
                this._.tail = sequence;
            } else {
                // search for specific index (slow!) ... but fricking solid famo.us...
                var searchIndex;
                var searchSequence;
                assert(index > 0 && index < this._.length, 'invalid insert index: ' + index + ' (length: ' + this._.length + ')');
                if (index > this._.length / 2) {
                    // start searching from the tail
                    searchSequence = this._.tail;
                    searchIndex = this._.length - 1;
                    while (searchIndex >= index) {
                        searchSequence = searchSequence._prev;
                        searchIndex--;
                    }
                } else {
                    // start searching from the head
                    searchSequence = this._.head;
                    searchIndex = 1;
                    while (searchIndex < index) {
                        searchSequence = searchSequence._next;
                        searchIndex++;
                    }
                }
                // insert after searchSequence
                sequence = new LinkedListViewSequence(this._);
                sequence._value = renderNode;
                sequence._prev = searchSequence;
                sequence._next = searchSequence._next;
                searchSequence._next._prev = sequence;
                searchSequence._next = sequence;
            }
            this._.length++;
            //this.verifyIntegrity();
            return sequence;
        };

        /**
         * Removes the view-sequence item at the given index.
         *
         * @param {LinkedListViewSequence} sequence Node to remove
         * @return {LinkedListViewSequence} New current view-sequence node to display.
         */
        LinkedListViewSequence.prototype.remove = function (sequence) {
            /*if (this._.debug) {
                console.log(this._.logName + ': remove (length: ' + this._.length + ')');
            }*/
            if (sequence._prev && sequence._next) {
                sequence._prev._next = sequence._next;
                sequence._next._prev = sequence._prev;
                this._.length--;
                //this.verifyIntegrity();
                return sequence === this ? sequence._prev : this;
            } else if (!sequence._prev && !sequence._next) {
                assert(sequence === this, 'only one sequence exists, should be this one');
                assert(this._value, 'last node should have a value');
                assert(this._.head, 'head is invalid');
                assert(this._.tail, 'tail is invalid');
                assert(this._.length === 1, 'length should be 1');
                this._value = undefined;
                this._.head = undefined;
                this._.tail = undefined;
                this._.length--;
                //this.verifyIntegrity();
                return this;
            } else if (!sequence._prev) {
                assert(this._.head === sequence, 'head is invalid');
                sequence._next._prev = undefined;
                this._.head = sequence._next;
                this._.length--;
                //this.verifyIntegrity();
                return sequence === this ? this._.head : this;
            } else {
                assert(!sequence._next, 'next should be empty');
                assert(this._.tail === sequence, 'tail is invalid');
                sequence._prev._next = undefined;
                this._.tail = sequence._prev;
                this._.length--;
                //this.verifyIntegrity();
                return sequence === this ? this._.tail : this;
            }
        };

        /**
         * Gets the number of items in the view-sequence.
         *
         * @return {Number} length.
         */
        LinkedListViewSequence.prototype.getLength = function () {
            return this._.length;
        };

        /**
         * Removes all items.
         *
         * @return {LinkedListViewSequence} Last remaining view-sequence node.
         */
        LinkedListViewSequence.prototype.clear = function () {
            var sequence = this; //eslint-disable-line consistent-this
            while (this._.length) {
                sequence = sequence.remove(this._.tail);
            }
            //sequence.verifyIntegrity();
            return sequence;
        };

        /**
         * Inserts an item at the beginning of the view-sequence.
         *
         * @param {Renderable} renderNode Renderable to insert.
         * @return {LinkedListViewSequence} newly inserted view-sequence node.
         */
        LinkedListViewSequence.prototype.unshift = function (renderNode) {
            return this.insert(0, renderNode);
        };

        /**
         * Inserts an item at the end of the view-sequence.
         *
         * @param {Renderable} renderNode Renderable to insert.
         * @return {LinkedListViewSequence} newly inserted view-sequence node.
         */
        LinkedListViewSequence.prototype.push = function (renderNode) {
            return this.insert(-1, renderNode);
        };

        LinkedListViewSequence.prototype.splice = function (index, remove, items) {
            if (console.error) {
                console.error('LinkedListViewSequence.splice is not supported');
            }
        };

        /**
         * Swaps the values of two view-sequence nodes.
         *
         * @param {Number} index Index of the first item to swap.
         * @param {Number} index2 Index of item to swap with.
         * @return {LinkedListViewSequence} this
         */
        LinkedListViewSequence.prototype.swap = function (index, index2) {
            var sequence1 = this.findByIndex(index);
            if (!sequence1) {
                throw new Error('Invalid first index specified to swap: ' + index);
            }
            var sequence2 = this.findByIndex(index2);
            if (!sequence2) {
                throw new Error('Invalid second index specified to swap: ' + index2);
            }
            var swap = sequence1._value;
            sequence1._value = sequence2._value;
            sequence2._value = swap;
            //this.verifyIntegrity();
            return this;
        };

        module.exports = LinkedListViewSequence;
    }).call($__exports, $__require, $__exports, $__module);
});
/**
 * This Source Code is licensed under the MIT license. If a copy of the
 * MIT-license was not distributed with this file, You can obtain one at:
 * http://opensource.org/licenses/mit-license.html.
 *
 * @author: Hein Rutjes (IjzerenHein)
 * @license MIT
 * @copyright Gloey Apps, 2014 - 2015
 */

/*global console*/
/*eslint no-console: 0*/

/**
 * Scrollable layout-controller.
 *
 * Key features:
 * -    Customizable layout
 * -    Insert/remove renderables into the scene using animations/spec
 * -    Support for `true` size renderables
 * -    Horizontal/vertical direction
 * -    Top/left or bottom/right alignment
 * -    Pagination
 * -    Option to embed in a ContainerSurface
 *
 * Events:
 *
 * |event      |description|
 * |-----------|-----------|
 * |scrollstart|Emitted when scrolling starts.|
 * |scroll     |Emitted as the content scrolls (once for each frame the visible offset has changed).|
 * |pagechange |Emitted whenever the visible page changes.|
 * |scrollend  |Emitted after scrolling stops (when the scroll particle settles).|
 *
 * Inherited from: [LayoutController](./LayoutController.md)
 * @module
 */
$__System.registerDynamic('246', ['1fa', '16e', '1fe', '1ff', '1fd', '23a', '169', '194', '1f7', '236', '239', '237', '23f', '238', '245', '1fc'], false, function ($__require, $__exports, $__module) {
    $__module.uri = $__module.id;
    return (function (require, exports, module) {

        // import dependencies
        var LayoutUtility = require('1fa');
        var LayoutController = require('16e');
        var LayoutNode = require('1fe');
        var FlowLayoutNode = require('1ff');
        var LayoutNodeManager = require('1fd');
        var ContainerSurface = require('23a');
        var Transform = require('169');
        var EventHandler = require('194');
        var Group = require('1f7');
        var Vector = require('236');
        var PhysicsEngine = require('239');
        var Particle = require('237');
        var Drag = require('23f');
        var Spring = require('238');
        var ScrollSync = require('245');
        var LinkedListViewSequence = require('1fc');

        /**
         * Boudary reached detection
         */
        var Bounds = {
            NONE: 0,
            PREV: 1, // top
            NEXT: 2, // bottom
            BOTH: 3
        };

        /**
         * Source of the spring
         */
        var SpringSource = {
            NONE: 'none',
            NEXTBOUNDS: 'next-bounds', // top
            PREVBOUNDS: 'prev-bounds', // bottom
            MINSIZE: 'minimal-size',
            GOTOSEQUENCE: 'goto-sequence',
            ENSUREVISIBLE: 'ensure-visible',
            GOTOPREVDIRECTION: 'goto-prev-direction',
            GOTONEXTDIRECTION: 'goto-next-direction'
        };

        /**
         * Pagination modes
         */
        var PaginationMode = {
            PAGE: 0,
            SCROLL: 1
        };

        /**
         * @class
         * @extends LayoutController
         * @param {Object} options Configurable options (see LayoutController for all inherited options).
         * @param {Bool} [options.useContainer] Embeds the view in a ContainerSurface to hide any overflow and capture input events (default: `false`).
         * @param {String} [options.container] Options that are passed to the ContainerSurface in case `useContainer` is true.
         * @param {Bool} [options.paginated] Enabled pagination when set to `true` (default: `false`).
         * @param {Number} [options.paginationEnergyThreshold] Threshold after which pagination kicks in (default: `0.01`).
         * @param {PaginationMode} [options.paginationMode] Pagination-mode (either page-based or scroll-based) (default: `PaginationMode.PAGE`).
         * @param {Number} [options.alignment] Alignment of the renderables (0 = top/left, 1 = bottom/right) (default: `0`).
         * @param {Bool} [options.mouseMove] Enables scrolling by holding the mouse-button down and moving the mouse (default: `false`).
         * @param {Bool} [options.enabled] Enables or disabled user input (default: `true`).
         * @param {Bool} [options.overscroll] Enables or disables overscroll (default: `true`).
         * @param {Object} [options.scrollParticle] Options for the scroll particle (default: `{}`)
         * @param {Object} [options.scrollSpring] Spring-force options that are applied on the scroll particle when e.g. bounds is reached (default: `{dampingRatio: 1.0, period: 350}`)
         * @param {Object} [options.scrollDrag] Drag-force options to apply on the scroll particle
         * @param {Object} [options.scrollFriction] Friction-force options to apply on the scroll particle
         * @param {Bool} [options.layoutAll] When set to true, always lays out all renderables in the datasource (default: `false`).
         * @alias module:ScrollController
         */
        function ScrollController(options) {
            options = LayoutUtility.combineOptions(ScrollController.DEFAULT_OPTIONS, options);
            var layoutManager = new LayoutNodeManager(options.flow ? FlowLayoutNode : LayoutNode, _initLayoutNode.bind(this));
            LayoutController.call(this, options, layoutManager);

            // Scrolling
            this._scroll = {
                activeTouches: [],
                // physics-engine to use for scrolling
                pe: new PhysicsEngine(this.options.scrollPhysicsEngine),
                // particle that represents the scroll-offset
                particle: new Particle(this.options.scrollParticle),
                // drag-force that slows the particle down after a "flick"
                dragForce: new Drag(this.options.scrollDrag),
                frictionForce: new Drag(this.options.scrollFriction),
                // spring
                springValue: undefined,
                springForce: new Spring(this.options.scrollSpring),
                springEndState: new Vector([0, 0, 0]),
                // group
                groupStart: 0,
                groupTranslate: [0, 0, 0],
                // delta
                scrollDelta: 0,
                normalizedScrollDelta: 0,
                scrollForce: 0,
                scrollForceCount: 0,
                unnormalizedScrollOffset: 0,
                // state
                isScrolling: false
            };

            // Diagnostics
            this._debug = {
                layoutCount: 0,
                commitCount: 0
            };

            // Create groupt for faster rendering
            this.group = new Group();
            this.group.add({ render: _innerRender.bind(this) });

            // Configure physics engine with particle and drag
            this._scroll.pe.addBody(this._scroll.particle);
            if (!this.options.scrollDrag.disabled) {
                this._scroll.dragForceId = this._scroll.pe.attach(this._scroll.dragForce, this._scroll.particle);
            }
            if (!this.options.scrollFriction.disabled) {
                this._scroll.frictionForceId = this._scroll.pe.attach(this._scroll.frictionForce, this._scroll.particle);
            }
            this._scroll.springForce.setOptions({ anchor: this._scroll.springEndState });

            // Listen to touch events
            this._eventInput.on('touchstart', _touchStart.bind(this));
            this._eventInput.on('touchmove', _touchMove.bind(this));
            this._eventInput.on('touchend', _touchEnd.bind(this));
            this._eventInput.on('touchcancel', _touchEnd.bind(this));

            // Listen to mouse-move events
            this._eventInput.on('mousedown', _mouseDown.bind(this));
            this._eventInput.on('mouseup', _mouseUp.bind(this));
            this._eventInput.on('mousemove', _mouseMove.bind(this));

            // Listen to mouse-wheel events
            this._scrollSync = new ScrollSync(this.options.scrollSync);
            this._eventInput.pipe(this._scrollSync);
            this._scrollSync.on('update', _scrollUpdate.bind(this));

            // Embed in container surface if neccesary
            if (this.options.useContainer) {
                this.container = new ContainerSurface(this.options.container);

                // Create container surface, which has one child, which just returns
                // the entity-id of this scrollview. This causes the Commit function
                // of this scrollview to be called
                this.container.add({
                    render: function () {
                        return this.id;
                    }.bind(this)
                });

                // Pipe events received in container to this scrollview
                if (!this.options.autoPipeEvents) {
                    this.subscribe(this.container);
                    EventHandler.setInputHandler(this.container, this);
                    EventHandler.setOutputHandler(this.container, this);
                }
            }
        }
        ScrollController.prototype = Object.create(LayoutController.prototype);
        ScrollController.prototype.constructor = ScrollController;
        ScrollController.Bounds = Bounds;
        ScrollController.PaginationMode = PaginationMode;

        ScrollController.DEFAULT_OPTIONS = {
            useContainer: false, // when true embeds inside a ContainerSurface for capturing input events & clipping
            container: {
                properties: {
                    overflow: 'hidden' // overflow mode when useContainer is enabled
                }
            },
            scrollPhysicsEngine: {
                // use defaults
                //velocityCap: undefined,
                //angularVelocityCap: undefined
            },
            scrollParticle: {
                // use defaults
                //mass: 1
            },
            scrollDrag: {
                forceFunction: Drag.FORCE_FUNCTIONS.QUADRATIC,
                strength: 0.001,
                disabled: true
            },
            scrollFriction: {
                forceFunction: Drag.FORCE_FUNCTIONS.LINEAR,
                strength: 0.0025,
                disabled: false
            },
            scrollSpring: {
                dampingRatio: 1.0,
                period: 350
            },
            scrollSync: {
                scale: 0.2
            },
            overscroll: true,
            paginated: false,
            paginationMode: PaginationMode.PAGE,
            paginationEnergyThreshold: 0.01,
            alignment: 0, // [0: top/left, 1: bottom/right]
            touchMoveDirectionThreshold: undefined, // 0..1
            touchMoveNoVelocityDuration: 100,
            mouseMove: false,
            scrollWheelForces: false,
            scrollWheelForceStep: 120,
            enabled: true, // set to false to disable scrolling
            layoutAll: false, // set to true is you want all renderables layed out/rendered
            alwaysLayout: false, // set to true to always call the layout function
            extraBoundsSpace: [100, 100],
            debug: false
        };

        /**
         * Patches the ScrollController instance's options with the passed-in ones.
         *
         * @param {Object} options Configurable options (see LayoutController for all inherited options).
         * @param {Bool} [options.paginated] Enabled pagination when set to `true` (default: `false`).
         * @param {Number} [options.paginationEnergyThreshold] Threshold after which pagination kicks in (default: `0.01`).
         * @param {PaginationMode} [options.paginationMode] Pagination-mode (either page-based or scroll-based) (default: `PaginationMode.PAGE`).
         * @param {Number} [options.alignment] Alignment of the renderables (0 = top/left, 1 = bottom/right) (default: `0`).
         * @param {Bool} [options.mouseMove] Enables scrolling by holding the mouse-button down and moving the mouse (default: `false`).
         * @param {Bool} [options.enabled] Enables or disables user input (default: `true`).
         * @param {Bool} [options.overscroll] Enables or disables overscroll (default: `true`).
         * @param {Object} [options.scrollParticle] Options for the scroll particle (default: `{}`)
         * @param {Object} [options.scrollSpring] Spring-force options that are applied on the scroll particle when e.g. bounds is reached (default: `{dampingRatio: 1.0, period: 500}`)
         * @param {Object} [options.scrollDrag] Drag-force options to apply on the scroll particle
         * @param {Object} [options.scrollFriction] Friction-force options to apply on the scroll particle
         * @param {Bool} [options.layoutAll] When set to true, always lays out all renderables in the datasource (default: `false`).
         * @return {ScrollController} this
         */
        ScrollController.prototype.setOptions = function (options) {
            LayoutController.prototype.setOptions.call(this, options);
            if (options.hasOwnProperty('paginationEnergyThresshold')) {
                console.warn('option `paginationEnergyThresshold` has been deprecated, please rename to `paginationEnergyThreshold`.');
                this.setOptions({
                    paginationEnergyThreshold: options.paginationEnergyThresshold
                });
            }
            if (options.hasOwnProperty('touchMoveDirectionThresshold')) {
                console.warn('option `touchMoveDirectionThresshold` has been deprecated, please rename to `touchMoveDirectionThreshold`.');
                this.setOptions({
                    touchMoveDirectionThreshold: options.touchMoveDirectionThresshold
                });
            }
            if (this._scroll) {
                if (options.scrollSpring) {
                    this._scroll.springForce.setOptions(options.scrollSpring);
                }
                if (options.scrollDrag) {
                    this._scroll.dragForce.setOptions(options.scrollDrag);
                }
            }
            if (options.scrollSync && this._scrollSync) {
                this._scrollSync.setOptions(options.scrollSync);
            }
            return this;
        };

        /**
         * Called whenever a layout-node is created/re-used. Initializes
         * the node with the `insertSpec` if it has been defined and enabled
         * locking of the x/y translation so that the x/y position of the renderable
         * is immediately updated when the user scrolls the view.
         */
        function _initLayoutNode(node, spec) {
            if (!spec && this.options.flowOptions.insertSpec) {
                node.setSpec(this.options.flowOptions.insertSpec);
            }
        }

        /**
         * Helper that detects when layout is scrolling optimized (default: true).
         */
        function _isSequentiallyScrollingOptimized() {
            return !this._layout.capabilities || this._layout.capabilities.sequentialScrollingOptimized === undefined || this._layout.capabilities.sequentialScrollingOptimized;
        }

        /**
         * Helper function for logging debug statements to the console.
         */
        /*function _log(args) {
         if (!this.options.debug) {
         return;
         }
         var message = this._debug.commitCount + ': ';
         for (var i = 0, j = arguments.length; i < j; i++) {
         var arg = arguments[i];
         if ((arg instanceof Object) || (arg instanceof Array)) {
         message += JSON.stringify(arg);
         }
         else {
         message += arg;
         }
         }
         console.log(message);
         }*/

        /**
         * Sets the value for the spring, or set to `undefined` to disable the spring
         */
        function _updateSpring() {
            var springValue = this._scroll.scrollForceCount ? undefined : this._scroll.springPosition;
            if (this._scroll.springValue !== springValue) {
                this._scroll.springValue = springValue;
                if (springValue === undefined) {
                    if (this._scroll.springForceId !== undefined) {
                        this._scroll.pe.detach(this._scroll.springForceId);
                        this._scroll.springForceId = undefined;
                        //_log.call(this, 'disabled spring');
                    }
                } else {
                    if (this._scroll.springForceId === undefined) {
                        this._scroll.springForceId = this._scroll.pe.attach(this._scroll.springForce, this._scroll.particle);
                    }
                    this._scroll.springEndState.set1D(springValue);
                    this._scroll.pe.wake();
                    //_log.call(this, 'setting spring to: ', springValue, ' (', this._scroll.springSource, ')');
                }
            }
        }

        /**
         * Returns the time from the given input event.
         */
        function _getEventTimestamp(event) {
            return event.timeStamp || Date.now();
        }

        /**
         * Called whenever the user presses the mouse button on the scrollview
         */
        function _mouseDown(event) {

            // Check whether mouse-scrolling is enabled
            if (!this.options.mouseMove) {
                return;
            }

            // Reset any previous mouse-move operation that has not yet been
            // cleared.
            if (this._scroll.mouseMove) {
                this.releaseScrollForce(this._scroll.mouseMove.delta);
            }

            // Calculate start of move operation
            var current = [event.clientX, event.clientY];
            var time = _getEventTimestamp(event);
            this._scroll.mouseMove = {
                delta: 0,
                start: current,
                current: current,
                prev: current,
                time: time,
                prevTime: time
            };

            // Apply scroll force
            this.applyScrollForce(this._scroll.mouseMove.delta);
        }
        function _mouseMove(event) {

            // Check if any mouse-move is active
            if (!this._scroll.mouseMove || !this.options.enabled) {
                return;
            }

            // When a thresshold is configured, check whether the move operation (x/y ratio)
            // lies within the thresshold. A move of 10 pixels x and 10 pixels y is considered 45 deg,
            // which corresponds to a thresshold of 0.5.
            var moveDirection = Math.atan2(Math.abs(event.clientY - this._scroll.mouseMove.prev[1]), Math.abs(event.clientX - this._scroll.mouseMove.prev[0])) / (Math.PI / 2.0);
            var directionDiff = Math.abs(this._direction - moveDirection);
            if (this.options.touchMoveDirectionThreshold === undefined || directionDiff <= this.options.touchMoveDirectionThreshold) {
                this._scroll.mouseMove.prev = this._scroll.mouseMove.current;
                this._scroll.mouseMove.current = [event.clientX, event.clientY];
                this._scroll.mouseMove.prevTime = this._scroll.mouseMove.time;
                this._scroll.mouseMove.direction = moveDirection;
                this._scroll.mouseMove.time = _getEventTimestamp(event);
            }

            // Update scroll-force
            var delta = this._scroll.mouseMove.current[this._direction] - this._scroll.mouseMove.start[this._direction];
            this.updateScrollForce(this._scroll.mouseMove.delta, delta);
            this._scroll.mouseMove.delta = delta;
        }
        function _mouseUp(event) {

            // Check if any mouse-move is active
            if (!this._scroll.mouseMove) {
                return;
            }

            // Calculate delta and velocity
            var velocity = 0;
            var diffTime = this._scroll.mouseMove.time - this._scroll.mouseMove.prevTime;
            if (diffTime > 0 && _getEventTimestamp(event) - this._scroll.mouseMove.time <= this.options.touchMoveNoVelocityDuration) {
                var diffOffset = this._scroll.mouseMove.current[this._direction] - this._scroll.mouseMove.prev[this._direction];
                velocity = diffOffset / diffTime;
            }

            // Release scroll force
            var swipeDirection = Math.abs(this._scroll.mouseMove.current[0] - this._scroll.mouseMove.prev[0]) > Math.abs(this._scroll.mouseMove.current[1] - this._scroll.mouseMove.prev[1]) ? 0 : 1;
            var allowSwipes = swipeDirection === this._direction;
            this.releaseScrollForce(this._scroll.mouseMove.delta, velocity, allowSwipes);
            this._scroll.mouseMove = undefined;
        }

        /**
         * Called whenever the user starts moving the scroll-view, using
         * touch gestures.
         */
        function _touchStart(event) {

            // Create touch-end event listener
            if (!this._touchEndEventListener) {
                this._touchEndEventListener = function (event2) {
                    event2.target.removeEventListener('touchend', this._touchEndEventListener);
                    _touchEnd.call(this, event2);
                }.bind(this);
            }

            // Remove any touches that are no longer active
            var oldTouchesCount = this._scroll.activeTouches.length;
            var i = 0;
            var j;
            var touchFound;
            while (i < this._scroll.activeTouches.length) {
                var activeTouch = this._scroll.activeTouches[i];
                touchFound = false;
                for (j = 0; j < event.touches.length; j++) {
                    var touch = event.touches[j];
                    if (touch.identifier === activeTouch.id) {
                        touchFound = true;
                        break;
                    }
                }
                if (!touchFound) {
                    //_log.cal(this, 'removing touch with id: ', activeTouch.id);
                    this._scroll.activeTouches.splice(i, 1);
                } else {
                    i++;
                }
            }

            // Process touch
            for (i = 0; i < event.touches.length; i++) {
                var changedTouch = event.touches[i];
                touchFound = false;
                for (j = 0; j < this._scroll.activeTouches.length; j++) {
                    if (this._scroll.activeTouches[j].id === changedTouch.identifier) {
                        touchFound = true;
                        break;
                    }
                }
                if (!touchFound) {
                    var current = [changedTouch.clientX, changedTouch.clientY];
                    var time = _getEventTimestamp(event);
                    this._scroll.activeTouches.push({
                        id: changedTouch.identifier,
                        start: current,
                        current: current,
                        prev: current,
                        time: time,
                        prevTime: time
                    });

                    // The following listener is automatically removed after touchend is received
                    // and ensures that the scrollview always received touchend.
                    changedTouch.target.addEventListener('touchend', this._touchEndEventListener);
                }
            }

            // The first time a touch new touch gesture has arrived, emit event
            if (!oldTouchesCount && this._scroll.activeTouches.length) {
                this.applyScrollForce(0);
                this._scroll.touchDelta = 0;
            }
        }

        /**
         * Called whenever the user is moving his/her fingers to scroll the view.
         * Updates the moveOffset so that the scroll-offset on the view is updated.
         */
        function _touchMove(event) {
            if (!this.options.enabled) {
                return;
            }

            // Process the touch event
            var primaryTouch;
            for (var i = 0; i < event.changedTouches.length; i++) {
                var changedTouch = event.changedTouches[i];
                for (var j = 0; j < this._scroll.activeTouches.length; j++) {
                    var touch = this._scroll.activeTouches[j];
                    if (touch.id === changedTouch.identifier) {

                        // When a thresshold is configured, check whether the move operation (x/y ratio)
                        // lies within the thresshold. A move of 10 pixels x and 10 pixels y is considered 45 deg,
                        // which corresponds to a thresshold of 0.5.
                        var moveDirection = Math.atan2(Math.abs(changedTouch.clientY - touch.prev[1]), Math.abs(changedTouch.clientX - touch.prev[0])) / (Math.PI / 2.0);
                        var directionDiff = Math.abs(this._direction - moveDirection);
                        if (this.options.touchMoveDirectionThreshold === undefined || directionDiff <= this.options.touchMoveDirectionThreshold) {
                            touch.prev = touch.current;
                            touch.current = [changedTouch.clientX, changedTouch.clientY];
                            touch.prevTime = touch.time;
                            touch.direction = moveDirection;
                            touch.time = _getEventTimestamp(event);
                            primaryTouch = j === 0 ? touch : undefined;
                        }
                    }
                }
            }

            // Update move offset and emit event
            if (primaryTouch) {
                var delta = primaryTouch.current[this._direction] - primaryTouch.start[this._direction];
                this.updateScrollForce(this._scroll.touchDelta, delta);
                this._scroll.touchDelta = delta;
            }
        }

        /**
         * Called whenever the user releases his fingers and the touch gesture
         * has completed. This will set the new position and if the user used a 'flick'
         * gesture give the scroll-offset particle a velocity and momentum into a
         * certain direction.
         */
        function _touchEnd(event) {

            // Remove touch
            var primaryTouch = this._scroll.activeTouches.length ? this._scroll.activeTouches[0] : undefined;
            for (var i = 0; i < event.changedTouches.length; i++) {
                var changedTouch = event.changedTouches[i];
                for (var j = 0; j < this._scroll.activeTouches.length; j++) {
                    var touch = this._scroll.activeTouches[j];
                    if (touch.id === changedTouch.identifier) {

                        // Remove touch from active-touches
                        this._scroll.activeTouches.splice(j, 1);

                        // When a different touch now becomes the primary touch, update
                        // its start position to match the current move offset.
                        if (j === 0 && this._scroll.activeTouches.length) {
                            var newPrimaryTouch = this._scroll.activeTouches[0];
                            newPrimaryTouch.start[0] = newPrimaryTouch.current[0] - (touch.current[0] - touch.start[0]);
                            newPrimaryTouch.start[1] = newPrimaryTouch.current[1] - (touch.current[1] - touch.start[1]);
                        }
                        break;
                    }
                }
            }

            // Wait for all fingers to be released from the screen before resetting the move-spring
            if (!primaryTouch || this._scroll.activeTouches.length) {
                return;
            }

            // Determine velocity and add to particle
            var velocity = 0;
            var diffTime = primaryTouch.time - primaryTouch.prevTime;
            if (diffTime > 0 && _getEventTimestamp(event) - primaryTouch.time <= this.options.touchMoveNoVelocityDuration) {
                var diffOffset = primaryTouch.current[this._direction] - primaryTouch.prev[this._direction];
                velocity = diffOffset / diffTime;
            }

            // Release scroll force
            var delta = this._scroll.touchDelta;
            var swipeDirection = Math.abs(primaryTouch.current[0] - primaryTouch.prev[0]) > Math.abs(primaryTouch.current[1] - primaryTouch.prev[1]) ? 0 : 1;
            var allowSwipes = swipeDirection === this._direction;
            this.releaseScrollForce(delta, velocity, allowSwipes);
            this._scroll.touchDelta = 0;
        }

        /**
         * Called whenever the user is scrolling the view using either a mouse
         * scroll wheel or a track-pad.
         */
        function _scrollUpdate(event) {
            if (!this.options.enabled) {
                return;
            }

            var offset = Array.isArray(event.delta) ? event.delta[this._direction] : event.delta;

            if (this.options.scrollWheelForces) {
                var velocity = offset / this.options.scrollWheelForceStep;

                this.applyScrollForce(offset);
                this.releaseScrollForce(offset, velocity);
            } else {
                this.scroll(offset);
            }
        }

        /**
         * Updates the scroll offset particle.
         */
        function _setParticle(position, velocity, phase) {
            if (position !== undefined) {
                //var oldPosition = this._scroll.particle.getPosition1D();
                this._scroll.particleValue = position;
                this._scroll.particle.setPosition1D(position);
                //_log.call(this, 'setParticle.position: ', position, ' (old: ', oldPosition, ', delta: ', position - oldPosition, ', phase: ', phase, ')');
                if (this._scroll.springValue !== undefined) {
                    this._scroll.pe.wake();
                }
            }
            if (velocity !== undefined) {
                var oldVelocity = this._scroll.particle.getVelocity1D();
                if (oldVelocity !== velocity) {
                    this._scroll.particle.setVelocity1D(velocity);
                    //_log.call(this, 'setParticle.velocity: ', velocity, ' (old: ', oldVelocity, ', delta: ', velocity - oldVelocity, ', phase: ', phase, ')');
                }
            }
        }

        /**
         * Get the in-use scroll-offset.
         */
        function _calcScrollOffset(normalize, refreshParticle) {

            // When moving using touch-gestures, make the offset stick to the
            // finger. When the bounds is exceeded, decrease the scroll distance
            // by two.
            if (refreshParticle || this._scroll.particleValue === undefined) {
                this._scroll.particleValue = this._scroll.particle.getPosition1D();
                this._scroll.particleValue = Math.round(this._scroll.particleValue * 1000) / 1000;
            }

            // do stuff
            var scrollOffset = this._scroll.particleValue;
            if (this._scroll.scrollDelta || this._scroll.normalizedScrollDelta) {
                scrollOffset += this._scroll.scrollDelta + this._scroll.normalizedScrollDelta;
                if (this._scroll.boundsReached & Bounds.PREV && scrollOffset > this._scroll.springPosition || this._scroll.boundsReached & Bounds.NEXT && scrollOffset < this._scroll.springPosition || this._scroll.boundsReached === Bounds.BOTH) {
                    scrollOffset = this._scroll.springPosition;
                }
                if (normalize) {
                    if (!this._scroll.scrollDelta) {
                        this._scroll.normalizedScrollDelta = 0;
                        _setParticle.call(this, scrollOffset, undefined, '_calcScrollOffset');
                    }
                    this._scroll.normalizedScrollDelta += this._scroll.scrollDelta;
                    this._scroll.scrollDelta = 0;
                }
            }

            if (this._scroll.scrollForceCount && this._scroll.scrollForce) {
                if (this._scroll.springPosition !== undefined) {
                    scrollOffset = (scrollOffset + this._scroll.scrollForce + this._scroll.springPosition) / 2.0;
                } else {
                    scrollOffset += this._scroll.scrollForce;
                }
            }

            // Prevent the scroll position from exceeding the bounds when overscroll is disabled
            if (!this.options.overscroll) {
                if (this._scroll.boundsReached === Bounds.BOTH || this._scroll.boundsReached === Bounds.PREV && scrollOffset > this._scroll.springPosition || this._scroll.boundsReached === Bounds.NEXT && scrollOffset < this._scroll.springPosition) {
                    scrollOffset = this._scroll.springPosition;
                }
            }

            //_log.call(this, 'scrollOffset: ', scrollOffset, ', particle:', this._scroll.particle.getPosition1D(), ', moveToPosition: ', this._scroll.moveToPosition, ', springPosition: ', this._scroll.springPosition);
            return scrollOffset;
        }

        /**
         * Helper function that calculates the next/prev layed out height.
         * @private
         */
        ScrollController.prototype._calcScrollHeight = function (next, lastNodeOnly) {
            var calcedHeight = 0;
            var node = this._nodes.getStartEnumNode(next);
            while (node) {
                if (node._invalidated) {
                    if (node.trueSizeRequested) {
                        calcedHeight = undefined;
                        break;
                    }
                    if (node.scrollLength !== undefined) {
                        calcedHeight = lastNodeOnly ? node.scrollLength : calcedHeight + node.scrollLength;
                        if (!next && lastNodeOnly) {
                            break;
                        }
                    }
                }
                node = next ? node._next : node._prev;
            }
            return calcedHeight;
        };

        /**
         * Calculates the scroll boundaries and sets the spring accordingly.
         */
        function _calcBounds(size, scrollOffset) {

            // Local data
            var prevHeight = this._calcScrollHeight(false);
            var nextHeight = this._calcScrollHeight(true);
            var enforeMinSize = _isSequentiallyScrollingOptimized.call(this);

            // 1. When the rendered height is smaller than the total height,
            //    then lock to the primary bounds
            var totalHeight;
            if (enforeMinSize) {
                if (nextHeight !== undefined && prevHeight !== undefined) {
                    totalHeight = prevHeight + nextHeight;
                }
                if (totalHeight !== undefined && totalHeight <= size[this._direction]) {
                    this._scroll.boundsReached = Bounds.BOTH;
                    this._scroll.springPosition = this.options.alignment ? -nextHeight : prevHeight;
                    this._scroll.springSource = SpringSource.MINSIZE;
                    return;
                }
            }
            totalHeight = (prevHeight || 0) + (nextHeight || 0);

            // 2. Check whether primary boundary has been reached
            if (this.options.alignment) {
                if (enforeMinSize) {
                    if (nextHeight !== undefined && scrollOffset + nextHeight <= 0) {
                        this._scroll.boundsReached = Bounds.NEXT;
                        this._scroll.springPosition = -nextHeight;
                        this._scroll.springSource = SpringSource.NEXTBOUNDS;
                        return;
                    }
                } else {
                    var firstPrevItemHeight = this._calcScrollHeight(false, true);
                    if (nextHeight !== undefined && firstPrevItemHeight && scrollOffset + nextHeight + size[this._direction] <= firstPrevItemHeight) {
                        this._scroll.boundsReached = Bounds.NEXT;
                        this._scroll.springPosition = nextHeight - (size[this._direction] - firstPrevItemHeight);
                        this._scroll.springSource = SpringSource.NEXTBOUNDS;
                        return;
                    }
                }
            } else {
                if (prevHeight !== undefined && scrollOffset - prevHeight >= 0) {
                    this._scroll.boundsReached = Bounds.PREV;
                    this._scroll.springPosition = prevHeight;
                    this._scroll.springSource = SpringSource.PREVBOUNDS;
                    return;
                }
            }

            // 3. Check if secondary bounds has been reached
            if (this.options.alignment) {
                if (prevHeight !== undefined && totalHeight > size[this._direction] && scrollOffset - prevHeight >= -size[this._direction]) {
                    this._scroll.boundsReached = Bounds.PREV;
                    this._scroll.springPosition = -size[this._direction] + prevHeight;
                    this._scroll.springSource = SpringSource.PREVBOUNDS;
                    return;
                }
            } else {
                var nextBounds = enforeMinSize ? size[this._direction] : this._calcScrollHeight(true, true);
                if (nextHeight !== undefined && scrollOffset + nextHeight <= nextBounds) {
                    this._scroll.boundsReached = Bounds.NEXT;
                    this._scroll.springPosition = nextBounds - nextHeight;
                    this._scroll.springSource = SpringSource.NEXTBOUNDS;
                    return;
                }
            }

            // No bounds reached
            this._scroll.boundsReached = Bounds.NONE;
            this._scroll.springPosition = undefined;
            this._scroll.springSource = SpringSource.NONE;
        }

        /**
         * Calculates the scrollto-offset to which the spring is set when doing scrollToRenderNode.
         */
        function _calcScrollToOffset(size, scrollOffset) {
            var scrollToRenderNode = this._scroll.scrollToRenderNode || this._scroll.ensureVisibleRenderNode;
            if (!scrollToRenderNode) {
                return;
            }

            // 1. When boundary is reached, stop scrolling in that direction
            if (this._scroll.boundsReached === Bounds.BOTH || !this._scroll.scrollToDirection && this._scroll.boundsReached === Bounds.PREV || this._scroll.scrollToDirection && this._scroll.boundsReached === Bounds.NEXT) {
                return;
            }

            // 2. Find the node to scroll to
            var foundNode;
            var scrollToOffset = 0;
            var node = this._nodes.getStartEnumNode(true);
            var count = 0;
            while (node) {
                count++;
                if (!node._invalidated || node.scrollLength === undefined) {
                    break;
                }
                if (this.options.alignment) {
                    scrollToOffset -= node.scrollLength;
                }
                if (node.renderNode === scrollToRenderNode) {
                    foundNode = node;
                    break;
                }
                if (!this.options.alignment) {
                    scrollToOffset -= node.scrollLength;
                }
                node = node._next;
            }
            if (!foundNode) {
                scrollToOffset = 0;
                node = this._nodes.getStartEnumNode(false);
                while (node) {
                    if (!node._invalidated || node.scrollLength === undefined) {
                        break;
                    }
                    if (!this.options.alignment) {
                        scrollToOffset += node.scrollLength;
                    }
                    if (node.renderNode === scrollToRenderNode) {
                        foundNode = node;
                        break;
                    }
                    if (this.options.alignment) {
                        scrollToOffset += node.scrollLength;
                    }
                    node = node._prev;
                }
            }

            // 3. Update springs
            if (foundNode) {
                if (this._scroll.ensureVisibleRenderNode) {
                    if (this.options.alignment) {
                        if (scrollToOffset - foundNode.scrollLength < 0) {
                            this._scroll.springPosition = scrollToOffset;
                            this._scroll.springSource = SpringSource.ENSUREVISIBLE;
                        } else if (scrollToOffset > size[this._direction]) {
                            this._scroll.springPosition = size[this._direction] - scrollToOffset;
                            this._scroll.springSource = SpringSource.ENSUREVISIBLE;
                        } else {
                            if (!foundNode.trueSizeRequested) {
                                this._scroll.ensureVisibleRenderNode = undefined;
                            }
                        }
                    } else {
                        scrollToOffset = -scrollToOffset;
                        if (scrollToOffset < 0) {
                            this._scroll.springPosition = scrollToOffset;
                            this._scroll.springSource = SpringSource.ENSUREVISIBLE;
                        } else if (scrollToOffset + foundNode.scrollLength > size[this._direction]) {
                            this._scroll.springPosition = size[this._direction] - (scrollToOffset + foundNode.scrollLength);
                            this._scroll.springSource = SpringSource.ENSUREVISIBLE;
                        } else {
                            if (!foundNode.trueSizeRequested) {
                                this._scroll.ensureVisibleRenderNode = undefined;
                            }
                        }
                    }
                } else {
                    // scrollToSequence
                    this._scroll.springPosition = scrollToOffset;
                    this._scroll.springSource = SpringSource.GOTOSEQUENCE;
                }
                return;
            }

            // 4. When node not found, keep searching
            if (this._scroll.scrollToDirection) {
                this._scroll.springPosition = scrollOffset - size[this._direction];
                this._scroll.springSource = SpringSource.GOTONEXTDIRECTION;
            } else {
                this._scroll.springPosition = scrollOffset + size[this._direction];
                this._scroll.springSource = SpringSource.GOTOPREVDIRECTION;
            }

            // 5. In case of a VirtualViewSequnce, make sure all the view-sequence nodes are touched, so
            //    that they are not cleaned up.
            if (this._viewSequence.cleanup) {
                var viewSequence = this._viewSequence;
                while (viewSequence.get() !== scrollToRenderNode) {
                    viewSequence = this._scroll.scrollToDirection ? viewSequence.getNext(true) : viewSequence.getPrevious(true);
                    if (!viewSequence) {
                        break;
                    }
                }
            }
        }

        /**
         * Snaps to a page when pagination is enabled.
         */
        function _snapToPage() {

            // Check whether pagination is active
            if (!this.options.paginated || this._scroll.scrollForceCount || //don't paginate while moving
            this._scroll.springPosition !== undefined) {
                return;
            }

            // When the energy is below the thresshold, paginate to the current page
            var item;
            switch (this.options.paginationMode) {
                case PaginationMode.SCROLL:
                    if (!this.options.paginationEnergyThreshold || Math.abs(this._scroll.particle.getEnergy()) <= this.options.paginationEnergyThreshold) {
                        item = this.options.alignment ? this.getLastVisibleItem() : this.getFirstVisibleItem();
                        if (item && item.renderNode) {
                            this.goToRenderNode(item.renderNode);
                        }
                    }
                    break;
                case PaginationMode.PAGE:
                    item = this.options.alignment ? this.getLastVisibleItem() : this.getFirstVisibleItem();
                    if (item && item.renderNode) {
                        this.goToRenderNode(item.renderNode);
                    }
                    break;
            }
        }

        /**
         * Normalizes the view-sequence node so that the view-sequence is near to 0.
         */
        function _normalizePrevViewSequence(scrollOffset) {
            var count = 0;
            var normalizedScrollOffset = scrollOffset;
            var normalizeNextPrev = false;
            var node = this._nodes.getStartEnumNode(false);
            while (node) {
                if (!node._invalidated || !node._viewSequence) {
                    break;
                }
                if (normalizeNextPrev) {
                    this._viewSequence = node._viewSequence;
                    normalizedScrollOffset = scrollOffset;
                    normalizeNextPrev = false;
                }
                if (node.scrollLength === undefined || node.trueSizeRequested || scrollOffset < 0) {
                    break;
                }
                scrollOffset -= node.scrollLength;
                count++;
                if (node.scrollLength) {
                    if (this.options.alignment) {
                        normalizeNextPrev = scrollOffset >= 0;
                    } else {
                        if (Math.round(scrollOffset) >= 0) {
                            this._viewSequence = node._viewSequence;
                            normalizedScrollOffset = scrollOffset;
                        }
                    }
                }
                node = node._prev;
            }
            return normalizedScrollOffset;
        }
        function _normalizeNextViewSequence(scrollOffset) {
            var count = 0;
            var normalizedScrollOffset = scrollOffset;
            var node = this._nodes.getStartEnumNode(true);
            while (node) {
                if (!node._invalidated || node.scrollLength === undefined || node.trueSizeRequested || !node._viewSequence || Math.round(scrollOffset) > 0 && (!this.options.alignment || node.scrollLength !== 0)) {
                    break;
                }
                if (this.options.alignment) {
                    scrollOffset += node.scrollLength;
                    count++;
                }
                if (node.scrollLength || this.options.alignment) {
                    this._viewSequence = node._viewSequence;
                    normalizedScrollOffset = scrollOffset;
                }
                if (!this.options.alignment) {
                    scrollOffset += node.scrollLength;
                    count++;
                }
                node = node._next;
            }
            return normalizedScrollOffset;
        }
        function _normalizeViewSequence(size, scrollOffset) {

            // Check whether normalisation is disabled
            var caps = this._layout.capabilities;
            if (caps && caps.debug && caps.debug.normalize !== undefined && !caps.debug.normalize) {
                return scrollOffset;
            }

            // Don't normalize when forces are at work
            if (this._scroll.scrollForceCount) {
                return scrollOffset;
            }

            // 1. Normalize in primary direction
            var normalizedScrollOffset = scrollOffset;
            if (this.options.alignment && scrollOffset < 0) {
                normalizedScrollOffset = _normalizeNextViewSequence.call(this, scrollOffset);
            } else if (!this.options.alignment && scrollOffset > 0) {
                normalizedScrollOffset = _normalizePrevViewSequence.call(this, scrollOffset);
            }

            // 2. Normalize in secondary direction
            if (normalizedScrollOffset === scrollOffset) {
                if (this.options.alignment && scrollOffset > 0) {
                    normalizedScrollOffset = _normalizePrevViewSequence.call(this, scrollOffset);
                } else if (!this.options.alignment && scrollOffset < 0) {
                    normalizedScrollOffset = _normalizeNextViewSequence.call(this, scrollOffset);
                }
            }

            // Adjust particle and springs
            if (normalizedScrollOffset !== scrollOffset) {
                var delta = normalizedScrollOffset - scrollOffset;

                // Adjust particle
                var particleValue = this._scroll.particle.getPosition1D();
                //var particleValue = this._scroll.particleValue;
                _setParticle.call(this, particleValue + delta, undefined, 'normalize');
                //console.log('normalized scrollOffset: ', normalizedScrollOffset, ', old: ', scrollOffset, ', particle: ', particleValue + delta);

                // Adjust scroll spring
                if (this._scroll.springPosition !== undefined) {
                    this._scroll.springPosition += delta;
                }

                // Adjust group offset
                if (_isSequentiallyScrollingOptimized.call(this)) {
                    this._scroll.groupStart -= delta;
                }
            }
            return normalizedScrollOffset;
        }

        /**
         * Get all items that are partly or completely visible.
         *
         * The returned result is an array of objects containing the
         * following properties. Example:
         * ```javascript
         * {
         *   viewSequence: {LinkedListViewSequence},
         *   index: {Number},
         *   renderNode: {renderable},
         *   visiblePerc: {Number} 0..1
         * }
         * ```
         * @return {Array} array of items
         */
        ScrollController.prototype.getVisibleItems = function () {
            var size = this._contextSizeCache;
            var scrollOffset = this.options.alignment ? this._scroll.unnormalizedScrollOffset + size[this._direction] : this._scroll.unnormalizedScrollOffset;
            var result = [];
            var node = this._nodes.getStartEnumNode(true);
            while (node) {
                if (!node._invalidated || node.scrollLength === undefined || scrollOffset > size[this._direction]) {
                    break;
                }
                scrollOffset += node.scrollLength;
                if (scrollOffset >= 0 && node._viewSequence) {
                    result.push({
                        index: node._viewSequence.getIndex(),
                        viewSequence: node._viewSequence,
                        renderNode: node.renderNode,
                        visiblePerc: node.scrollLength ? (Math.min(scrollOffset, size[this._direction]) - Math.max(scrollOffset - node.scrollLength, 0)) / node.scrollLength : 1,
                        scrollOffset: scrollOffset - node.scrollLength,
                        scrollLength: node.scrollLength,
                        _node: node
                    });
                }
                node = node._next;
            }
            scrollOffset = this.options.alignment ? this._scroll.unnormalizedScrollOffset + size[this._direction] : this._scroll.unnormalizedScrollOffset;
            node = this._nodes.getStartEnumNode(false);
            while (node) {
                if (!node._invalidated || node.scrollLength === undefined || scrollOffset < 0) {
                    break;
                }
                scrollOffset -= node.scrollLength;
                if (scrollOffset < size[this._direction] && node._viewSequence) {
                    result.unshift({
                        index: node._viewSequence.getIndex(),
                        viewSequence: node._viewSequence,
                        renderNode: node.renderNode,
                        visiblePerc: node.scrollLength ? (Math.min(scrollOffset + node.scrollLength, size[this._direction]) - Math.max(scrollOffset, 0)) / node.scrollLength : 1,
                        scrollOffset: scrollOffset,
                        scrollLength: node.scrollLength,
                        _node: node
                    });
                }
                node = node._prev;
            }
            return result;
        };

        /**
         * Get the first or last visible item in the view.
         */
        function _getVisibleItem(first) {
            var result = {};
            var diff;
            var prevDiff = 10000000;
            var diffDelta = first && this.options.alignment ? -this._contextSizeCache[this._direction] : !first && !this.options.alignment ? this._contextSizeCache[this._direction] : 0;
            var scrollOffset = this._scroll.unnormalizedScrollOffset;
            var node = this._nodes.getStartEnumNode(true);
            while (node) {
                if (!node._invalidated || node.scrollLength === undefined) {
                    break;
                }
                if (node._viewSequence) {
                    diff = Math.abs(diffDelta - (scrollOffset + (!first ? node.scrollLength : 0)));
                    if (diff >= prevDiff) {
                        break;
                    }
                    prevDiff = diff;
                    result.scrollOffset = scrollOffset;
                    result._node = node;
                    scrollOffset += node.scrollLength;
                }
                node = node._next;
            }
            scrollOffset = this._scroll.unnormalizedScrollOffset;
            node = this._nodes.getStartEnumNode(false);
            while (node) {
                if (!node._invalidated || node.scrollLength === undefined) {
                    break;
                }
                if (node._viewSequence) {
                    scrollOffset -= node.scrollLength;
                    diff = Math.abs(diffDelta - (scrollOffset + (!first ? node.scrollLength : 0)));
                    if (diff >= prevDiff) {
                        break;
                    }
                    prevDiff = diff;
                    result.scrollOffset = scrollOffset;
                    result._node = node;
                }
                node = node._prev;
            }
            if (!result._node) {
                return undefined;
            }
            result.scrollLength = result._node.scrollLength;
            if (this.options.alignment) {
                result.visiblePerc = (Math.min(result.scrollOffset + result.scrollLength, 0) - Math.max(result.scrollOffset, -this._contextSizeCache[this._direction])) / result.scrollLength;
            } else {
                result.visiblePerc = (Math.min(result.scrollOffset + result.scrollLength, this._contextSizeCache[this._direction]) - Math.max(result.scrollOffset, 0)) / result.scrollLength;
            }
            result.index = result._node._viewSequence.getIndex();
            result.viewSequence = result._node._viewSequence;
            result.renderNode = result._node.renderNode;
            return result;
        }

        /**
         * Get the first visible item in the view.
         *
         * @return {Object} item or `undefined`
         */
        ScrollController.prototype.getFirstVisibleItem = function () {
            return _getVisibleItem.call(this, true);
        };

        /**
         * Forces a new layout the next render cycle, manipulating flow state (in constrast to reflowLayout).
         *
         * @return {LayoutController} this
         */
        ScrollController.prototype.reLayout = function () {
            return this._reLayout = true;
        };

        /**
         * Get the last visible item in the view.
         *
         * @return {Object} item or `undefined`
         */
        ScrollController.prototype.getLastVisibleItem = function () {
            return _getVisibleItem.call(this, false);
        };

        /**
         * Helper function that goes to a view-sequence either by scrolling
         * or immediately without any scrolling animation.
         */
        function _goToSequence(viewSequence, next, noAnimation) {
            if (noAnimation) {
                this._viewSequence = viewSequence;
                this._scroll.springPosition = undefined;
                _updateSpring.call(this);
                this.halt();
                this._scroll.scrollDelta = 0;
                _setParticle.call(this, 0, 0, '_goToSequence');
                this._scroll.scrollDirty = true;
            } else {
                this._scroll.scrollToSequence = viewSequence;
                this._scroll.scrollToRenderNode = viewSequence.get();
                this._scroll.ensureVisibleRenderNode = undefined;
                this._scroll.scrollToDirection = next;
                this._scroll.scrollDirty = true;
            }
        }

        /**
         * Helper function that scrolls the view towards a view-sequence node.
         */
        function _ensureVisibleSequence(viewSequence, next) {
            this._scroll.scrollToSequence = undefined;
            this._scroll.scrollToRenderNode = undefined;
            this._scroll.ensureVisibleRenderNode = viewSequence.get();
            this._scroll.scrollToDirection = next;
            this._scroll.scrollDirty = true;
        }

        /**
         * Moves to the next node in the viewSequence.
         *
         * @param {Number} [amount] Amount of nodes to move
         * @param {Bool} [noAnimation] When set to true, immediately shows the node without any scrolling animation.
         */
        function _goToPage(amount, noAnimation) {

            // Get current scroll-position. When a previous call was made to
            // `scroll' or `scrollTo` and that node has not yet been reached, then
            // the amount is accumalated onto that scroll target.
            var viewSequence = (!noAnimation ? this._scroll.scrollToSequence : undefined) || this._viewSequence;
            if (!this._scroll.scrollToSequence && !noAnimation) {
                var firstVisibleItem = this.getFirstVisibleItem();
                if (firstVisibleItem) {
                    viewSequence = firstVisibleItem.viewSequence;
                    if (amount < 0 && firstVisibleItem.scrollOffset < 0 || amount > 0 && firstVisibleItem.scrollOffset > 0) {
                        amount = 0;
                    }
                }
            }
            if (!viewSequence) {
                return;
            }

            // Find scroll target
            for (var i = 0; i < Math.abs(amount); i++) {
                var nextViewSequence = amount > 0 ? viewSequence.getNext() : viewSequence.getPrevious();
                if (nextViewSequence) {
                    viewSequence = nextViewSequence;
                } else {
                    break;
                }
            }
            _goToSequence.call(this, viewSequence, amount >= 0, noAnimation);
        }

        /**
         * Goes to the first page, making it visible.
         *
         * NOTE: This function does not work on ViewSequences that have the `loop` property enabled.
         *
         * @param {Bool} [noAnimation] When set to true, immediately shows the node without any scrolling animation.
         * @return {ScrollController} this
         */
        ScrollController.prototype.goToFirstPage = function (noAnimation) {
            if (!this._viewSequence) {
                return this;
            }
            if (this._viewSequence._ && this._viewSequence._.loop) {
                LayoutUtility.error('Unable to go to first item of looped ViewSequence');
                return this;
            }
            var viewSequence = this._viewSequence;
            while (viewSequence) {
                var prev = viewSequence.getPrevious();
                if (prev && prev.get()) {
                    viewSequence = prev;
                } else {
                    break;
                }
            }
            _goToSequence.call(this, viewSequence, false, noAnimation);
            return this;
        };

        /**
         * Goes to the previous page, making it visible.
         *
         * @param {Bool} [noAnimation] When set to true, immediately shows the node without any scrolling animation.
         * @return {ScrollController} this
         */
        ScrollController.prototype.goToPreviousPage = function (noAnimation) {
            _goToPage.call(this, -1, noAnimation);
            return this;
        };

        /**
         * Goes to the next page, making it visible.
         *
         * @param {Bool} [noAnimation] When set to true, immediately shows the node without any scrolling animation.
         * @return {ScrollController} this
         */
        ScrollController.prototype.goToNextPage = function (noAnimation) {
            _goToPage.call(this, 1, noAnimation);
            return this;
        };

        /**
         * Goes to the last page, making it visible.
         *
         * NOTE: This function does not work on ViewSequences that have the `loop` property enabled.
         *
         * @param {Bool} [noAnimation] When set to true, immediately shows the node without any scrolling animation.
         * @return {ScrollController} this
         */
        ScrollController.prototype.goToLastPage = function (noAnimation) {
            if (!this._viewSequence) {
                return this;
            }
            if (this._viewSequence._ && this._viewSequence._.loop) {
                LayoutUtility.error('Unable to go to last item of looped ViewSequence');
                return this;
            }
            var viewSequence = this._viewSequence;
            while (viewSequence) {
                var next = viewSequence.getNext();
                if (next && next.get()) {
                    viewSequence = next;
                } else {
                    break;
                }
            }
            _goToSequence.call(this, viewSequence, true, noAnimation);
            return this;
        };

        /**
         * Goes to the given renderable in the datasource.
         *
         * @param {RenderNode} node renderable to scroll to.
         * @param {Bool} [noAnimation] When set to true, immediately shows the node without scrolling animation.
         * @return {ScrollController} this
         */
        ScrollController.prototype.goToRenderNode = function (node, noAnimation) {

            // Verify arguments and state
            if (!this._viewSequence || !node) {
                return this;
            }

            // Check current node
            if (this._viewSequence.get() === node) {
                var next = _calcScrollOffset.call(this) >= 0;
                _goToSequence.call(this, this._viewSequence, next, noAnimation);
                return this;
            }

            // Find the sequence-node that we want to scroll to.
            // We look at both directions at the same time.
            // The first match that is encountered, that direction is chosen.
            var nextSequence = this._viewSequence.getNext();
            var prevSequence = this._viewSequence.getPrevious();
            while ((nextSequence || prevSequence) && nextSequence !== this._viewSequence) {
                var nextNode = nextSequence ? nextSequence.get() : undefined;
                if (nextNode === node) {
                    _goToSequence.call(this, nextSequence, true, noAnimation);
                    break;
                }
                var prevNode = prevSequence ? prevSequence.get() : undefined;
                if (prevNode === node) {
                    _goToSequence.call(this, prevSequence, false, noAnimation);
                    break;
                }
                nextSequence = nextNode ? nextSequence.getNext() : undefined;
                prevSequence = prevNode ? prevSequence.getPrevious() : undefined;
            }
            return this;
        };

        /**
         * Ensures that a render-node is entirely visible.
         *
         * When the node is already visible, nothing happens. If the node is not entirely visible
         * the view is scrolled as much as needed to make it entirely visibl.
         *
         * @param {Number|LinkedListViewSequence|Renderable} node index, renderNode or LinkedListViewSequence
         * @return {ScrollController} this
         */
        ScrollController.prototype.ensureVisible = function (node) {

            // Convert argument into renderNode
            if (node instanceof LinkedListViewSequence) {
                node = node.get();
            } else if (node instanceof Number || typeof node === 'number') {
                var viewSequence = this._viewSequence;
                while (viewSequence.getIndex() < node) {
                    viewSequence = viewSequence.getNext();
                    if (!viewSequence) {
                        return this;
                    }
                }
                while (viewSequence.getIndex() > node) {
                    viewSequence = viewSequence.getPrevious();
                    if (!viewSequence) {
                        return this;
                    }
                }
            }

            // Check current node
            if (this._viewSequence.get() === node) {
                var next = _calcScrollOffset.call(this) >= 0;
                _ensureVisibleSequence.call(this, this._viewSequence, next);
                return this;
            }

            // Find the sequence-node that we want to scroll to.
            // We look at both directions at the same time.
            // The first match that is encountered, that direction is chosen.
            var nextSequence = this._viewSequence.getNext();
            var prevSequence = this._viewSequence.getPrevious();
            while ((nextSequence || prevSequence) && nextSequence !== this._viewSequence) {
                var nextNode = nextSequence ? nextSequence.get() : undefined;
                if (nextNode === node) {
                    _ensureVisibleSequence.call(this, nextSequence, true);
                    break;
                }
                var prevNode = prevSequence ? prevSequence.get() : undefined;
                if (prevNode === node) {
                    _ensureVisibleSequence.call(this, prevSequence, false);
                    break;
                }
                nextSequence = nextNode ? nextSequence.getNext() : undefined;
                prevSequence = prevNode ? prevSequence.getPrevious() : undefined;
            }

            return this;
        };

        /**
         * Scrolls the view by the specified number of pixels.
         *
         * @param {Number} delta Delta in pixels (< 0 = down/right, > 0 = top/left).
         * @return {ScrollController} this
         */
        ScrollController.prototype.scroll = function (delta) {
            this.halt();
            this._scroll.scrollDelta += delta;
            return this;
        };

        /**
         * Checks whether the scrollview can scroll the given delta.
         * When the scrollView can scroll the whole delta, then
         * the return value is the same as the delta. If it cannot
         * scroll the entire delta, the return value is the number of
         * pixels that can be scrolled.
         *
         * @param {Number} delta Delta to test
         * @return {Number} Number of pixels the view is allowed to scroll
         */
        ScrollController.prototype.canScroll = function (delta) {

            // Calculate height in both directions
            var scrollOffset = _calcScrollOffset.call(this);
            var prevHeight = this._calcScrollHeight(false);
            var nextHeight = this._calcScrollHeight(true);

            // When the rendered height is smaller than the total height,
            // then no scrolling whatsover is allowed.
            var totalHeight;
            if (nextHeight !== undefined && prevHeight !== undefined) {
                totalHeight = prevHeight + nextHeight;
            }
            if (totalHeight !== undefined && totalHeight <= this._contextSizeCache[this._direction]) {
                return 0; // no scrolling at all allowed
            }

            // Determine the offset that we can scroll
            if (delta < 0 && nextHeight !== undefined) {
                var nextOffset = this._contextSizeCache[this._direction] - (scrollOffset + nextHeight);
                return Math.max(nextOffset, delta);
            } else if (delta > 0 && prevHeight !== undefined) {
                var prevOffset = -(scrollOffset - prevHeight);
                return Math.min(prevOffset, delta);
            }
            return delta;
        };

        /**
         * Halts all scrolling going on. In essence this function sets
         * the velocity to 0 and cancels any `goToXxx` operation that
         * was applied.
         *
         * @return {ScrollController} this
         */
        ScrollController.prototype.halt = function () {
            this._scroll.scrollToSequence = undefined;
            this._scroll.scrollToRenderNode = undefined;
            this._scroll.ensureVisibleRenderNode = undefined;
            _setParticle.call(this, undefined, 0, 'halt');
            return this;
        };

        /**
         * Checks whether scrolling is in progress or not.
         *
         * @return {Bool} true when scrolling is active
         */
        ScrollController.prototype.isScrolling = function () {
            return this._scroll.isScrolling;
        };

        /**
         * Checks whether user is touching the ScrollController.
         *
         * @return {Bool} true when user is touching the ScrollController
         */
        ScrollController.prototype.isTouching = function () {
            return this._scroll.activeTouches.length > 0;
        };

        /**
         * Checks whether any boundaries have been reached.
         *
         * @return {ScrollController.Bounds} Either, Bounds.PREV, Bounds.NEXT, Bounds.BOTH or Bounds.NONE
         */
        ScrollController.prototype.getBoundsReached = function () {
            return this._scroll.boundsReached;
        };

        /**
         * Get the current scrolling velocity.
         *
         * @return {Number} Scroll velocity
         */
        ScrollController.prototype.getVelocity = function () {
            return this._scroll.particle.getVelocity1D();
        };

        /**
         * Get the current energy of the scrolling particle.
         *
         * @return {Number} Energy
         */
        ScrollController.prototype.getEnergy = function () {
            return this._scroll.particle.getEnergy();
        };

        /**
         * Set the scrolling velocity.
         *
         * @param {Number} velocity New scroll velocity
         * @return {ScrollController} this
         */
        ScrollController.prototype.setVelocity = function (velocity) {
            return this._scroll.particle.setVelocity1D(velocity);
        };

        /**
         * Applies a permanent scroll-force (delta) until it is released.
         * When the cumulative scroll-offset lies outside the allowed bounds
         * a strech effect is used, and the offset beyond the bounds is
         * substracted by halve. This function should always be accompanied
         * by a call to `releaseScrollForce`.
         *
         * This method is used for instance when using touch gestures to move
         * the scroll offset and corresponds to the `touchstart` event.
         *
         * @param {Number} delta Starting scroll-delta force to apply
         * @return {ScrollController} this
         */
        ScrollController.prototype.applyScrollForce = function (delta) {
            this.halt();
            if (this._scroll.scrollForceCount === 0) {
                this._scroll.scrollForceStartItem = this.options.alignment ? this.getLastVisibleItem() : this.getFirstVisibleItem();
            }
            this._scroll.scrollForceCount++;
            this._scroll.scrollForce += delta;
            this._eventOutput.emit(this._scroll.scrollForceCount === 1 ? 'swipestart' : 'swipeupdate', {
                target: this,
                total: this._scroll.scrollForce,
                delta: delta
            });
            return this;
        };

        /**
         * Updates a existing scroll-force previously applied by calling
         * `applyScrollForce`.
         *
         * This method is used for instance when using touch gestures to move
         * the scroll offset and corresponds to the `touchmove` event.
         *
         * @param {Number} prevDelta Previous delta
         * @param {Number} newDelta New delta
         * @return {ScrollController} this
         */
        ScrollController.prototype.updateScrollForce = function (prevDelta, newDelta) {
            this.halt();
            newDelta -= prevDelta;
            this._scroll.scrollForce += newDelta;
            this._eventOutput.emit('swipeupdate', {
                target: this,
                total: this._scroll.scrollForce,
                delta: newDelta
            });
            return this;
        };

        /**
         * Releases a scroll-force and sets the velocity.
         *
         * This method is used for instance when using touch gestures to move
         * the scroll offset and corresponds to the `touchend` event.
         *
         * @param {Number} delta Scroll delta to release
         * @param {Number} [velocity] Velocity to apply after which the view keeps scrolling
         * @return {ScrollController} this
         */
        ScrollController.prototype.releaseScrollForce = function (delta, velocity, detectSwipes) {
            this.halt();
            if (this._scroll.scrollForceCount === 1) {
                var scrollOffset = _calcScrollOffset.call(this);
                _setParticle.call(this, scrollOffset, velocity, 'releaseScrollForce');
                this._scroll.pe.wake();
                this._scroll.scrollForce = 0;
                this._scroll.scrollDirty = true;
                if (this._scroll.scrollForceStartItem && this.options.paginated && this.options.paginationMode === PaginationMode.PAGE) {
                    var item = this.options.alignment ? this.getLastVisibleItem(true) : this.getFirstVisibleItem(true);
                    if (item) {
                        if (item.renderNode !== this._scroll.scrollForceStartItem.renderNode) {
                            this.goToRenderNode(item.renderNode);
                        } else if (detectSwipes && this.options.paginationEnergyThreshold && Math.abs(this._scroll.particle.getEnergy()) >= this.options.paginationEnergyThreshold) {
                            velocity = velocity || 0;
                            if (velocity < 0 && item._node._next && item._node._next.renderNode) {
                                this.goToRenderNode(item._node._next.renderNode);
                            } else if (velocity >= 0 && item._node._prev && item._node._prev.renderNode) {
                                this.goToRenderNode(item._node._prev.renderNode);
                            }
                        } else {
                            this.goToRenderNode(item.renderNode);
                        }
                    }
                }
                this._scroll.scrollForceStartItem = undefined;
                this._scroll.scrollForceCount--;
                this._eventOutput.emit('swipeend', {
                    target: this,
                    total: delta,
                    delta: 0,
                    velocity: velocity
                });
            } else {
                this._scroll.scrollForce -= delta;
                this._scroll.scrollForceCount--;
                this._eventOutput.emit('swipeupdate', {
                    target: this,
                    total: this._scroll.scrollForce,
                    delta: delta
                });
            }
            return this;
        };

        /**
         * Get the spec (size, transform, etc..) for the given renderable or
         * Id.
         *
         * @param {Renderable|String} node Renderabe or Id to look for.
         * @param {Bool} normalize When set to `true` normalizes the origin/align into the transform translation (default: `false`).
         * @return {Spec} spec or undefined
         */
        ScrollController.prototype.getSpec = function (node, normalize) {
            var spec = LayoutController.prototype.getSpec.apply(this, arguments);
            if (spec && _isSequentiallyScrollingOptimized.call(this)) {
                spec = {
                    origin: spec.origin,
                    align: spec.align,
                    opacity: spec.opacity,
                    size: spec.size,
                    renderNode: spec.renderNode,
                    transform: spec.transform
                };
                var translate = [0, 0, 0];
                translate[this._direction] = this._scrollOffsetCache + this._scroll.groupStart;
                spec.transform = Transform.thenMove(spec.transform, translate);
            }
            return spec;
        };

        /**
         * Executes the layout and updates the state of the scrollview.
         */
        function _layout(size, scrollOffset, nested) {

            // Track the number of times the layout-function was executed
            this._debug.layoutCount++;
            //_log.call(this, 'Layout, scrollOffset: ', scrollOffset, ', particle: ', this._scroll.particle.getPosition1D());

            // Determine start & end
            var scrollStart = 0 - Math.max(this.options.extraBoundsSpace[0], 1);
            var scrollEnd = size[this._direction] + Math.max(this.options.extraBoundsSpace[1], 1);
            if (this.options.paginated && this.options.paginationMode === PaginationMode.PAGE) {
                scrollStart = scrollOffset - this.options.extraBoundsSpace[0];
                scrollEnd = scrollOffset + size[this._direction] + this.options.extraBoundsSpace[1];
                if (scrollOffset + size[this._direction] < 0) {
                    scrollStart += size[this._direction];
                    scrollEnd += size[this._direction];
                } else if (scrollOffset - size[this._direction] > 0) {
                    scrollStart -= size[this._direction];
                    scrollEnd -= size[this._direction];
                }
            }
            if (this.options.layoutAll) {
                scrollStart = -1000000;
                scrollEnd = 1000000;
            }

            // Prepare for layout
            var layoutContext = this._nodes.prepareForLayout(this._viewSequence, // first node to layout
            this._nodesById, { // so we can do fast id lookups
                size: size,
                direction: this._direction,
                reverse: this.options.alignment ? true : false,
                scrollOffset: this.options.alignment ? scrollOffset + size[this._direction] : scrollOffset,
                scrollStart: scrollStart,
                scrollEnd: scrollEnd
            });

            // Layout objects
            if (this._layout._function) {
                this._layout._function(layoutContext, // context which the layout-function can use
                this._layout.options // additional layout-options
                );
            }
            this._scroll.unnormalizedScrollOffset = scrollOffset;

            // Call post-layout function
            if (this._postLayout) {
                this._postLayout(size, scrollOffset);
            }

            // Mark non-invalidated nodes for removal
            this._nodes.removeNonInvalidatedNodes(this.options.flowOptions.removeSpec);

            // Check whether the bounds have been reached
            //var oldBoundsReached = this._scroll.boundsReached;
            _calcBounds.call(this, size, scrollOffset);
            //if (oldBoundsReached !== this._scroll.boundsReached) {
            //    _log.call(this, 'bounds reached changed (', oldBoundsReached, ' != ', this._scroll.boundsReached, ')');
            //}

            // Update scroll-to spring
            _calcScrollToOffset.call(this, size, scrollOffset);

            // When pagination is enabled, snap to page
            _snapToPage.call(this);

            // Normalize scroll offset so that the current viewsequence node is as close to the
            // top as possible and the layout function will need to process the least amount
            // of renderables.
            scrollOffset = _normalizeViewSequence.call(this, size, scrollOffset);

            // If the bounds have changed, and the scroll-offset would be different
            // than before, then re-layout entirely using the new offset.
            var newScrollOffset = _calcScrollOffset.call(this, true);
            if (!nested && newScrollOffset !== scrollOffset) {
                //_log.call(this, 'offset changed, re-layouting... (', scrollOffset, ' != ', newScrollOffset, ')');
                return _layout.call(this, size, newScrollOffset, true);
            }

            // Update spring
            _updateSpring.call(this);

            // Cleanup any nodes in case of a VirtualViewSequence
            this._nodes.removeVirtualViewSequenceNodes();

            // Calculate scroll-length and use that as the true-size (height)
            if (this.options.size && this.options.size[this._direction] === true) {
                var scrollLength = 0;
                var node = this._nodes.getStartEnumNode();
                while (node) {
                    if (node._invalidated && node.scrollLength) {
                        scrollLength += node.scrollLength;
                    }
                    node = node._next;
                }
                this._size = this._size || [0, 0];
                this._size[0] = this.options.size[0];
                this._size[1] = this.options.size[1];
                this._size[this._direction] = scrollLength;
            }

            return scrollOffset;
        }

        /**
         * Inner render function of the Group
         */
        function _innerRender() {
            var specs = this._specs;
            for (var i3 = 0, j3 = specs.length; i3 < j3; i3++) {
                if (specs[i3].renderNode) {
                    specs[i3].target = specs[i3].renderNode.render();
                }
            }

            // Add our cleanup-registration id also to the list, so that the
            // cleanup function is called by famo.us when the LayoutController is
            // removed from the render-tree.
            if (!specs.length || specs[specs.length - 1] !== this._cleanupRegistration) {
                specs.push(this._cleanupRegistration);
            }
            return specs;
        }

        /**
         * Apply changes from this component to the corresponding document element.
         * This includes changes to classes, styles, size, content, opacity, origin,
         * and matrix transforms.
         *
         * @private
         * @method commit
         * @param {Context} context commit context
         */
        ScrollController.prototype.commit = function commit(context) {
            var size = context.size;

            // Update debug info
            this._debug.commitCount++;

            // Reset the flow-state when requested
            if (this._resetFlowState) {
                this._resetFlowState = false;
                this._isDirty = true;
                this._nodes.removeAll();
            }

            // Calculate scroll offset
            var scrollOffset = _calcScrollOffset.call(this, true, true);
            if (this._scrollOffsetCache === undefined) {
                this._scrollOffsetCache = scrollOffset;
            }

            // When the size or layout function has changed, reflow the layout
            var emitEndScrollingEvent = false;
            var emitScrollEvent = false;
            var eventData;
            if (size[0] !== this._contextSizeCache[0] || size[1] !== this._contextSizeCache[1] || this._isDirty || this._reLayout || this._scroll.scrollDirty || this._nodes._trueSizeRequested || this.options.alwaysLayout || this._scrollOffsetCache !== scrollOffset) {

                if (this._reLayout) {
                    this._reLayout = false;
                }

                // Prepare event data
                eventData = {
                    target: this,
                    oldSize: this._contextSizeCache,
                    size: size,
                    oldScrollOffset: -(this._scrollOffsetCache + this._scroll.groupStart),
                    scrollOffset: -(scrollOffset + this._scroll.groupStart)
                };

                // When scroll-offset has changed, emit scroll-start and scroll events
                if (this._scrollOffsetCache !== scrollOffset) {
                    if (!this._scroll.isScrolling) {
                        this._scroll.isScrolling = true;
                        this._eventOutput.emit('scrollstart', eventData);
                    }
                    emitScrollEvent = true;
                } else if (this._scroll.isScrolling && !this._scroll.scrollForceCount) {
                    emitEndScrollingEvent = true;
                }

                this._eventOutput.emit('layoutstart', eventData);

                // Update state
                this._contextSizeCache[0] = size[0];
                this._contextSizeCache[1] = size[1];

                // Perform layout
                scrollOffset = _layout.call(this, size, scrollOffset);
                this._scrollOffsetCache = scrollOffset;

                /* Depending on whether an inserted node is in view or not, we might have to enable flowing mode */

                if (this._dirtyRenderables.length) {
                    /*this._dirtyRenderables.thisTick = this._dirtyRenderables.thisTick.concat(this._dirtyRenderables.nextTick);*/
                    this._isDirty = !this._dirtyRenderables.every(function (dirtyRenderable) {
                        return !this._nodes.isNodeInCurrentBuild(dirtyRenderable);
                    }.bind(this));
                    this._dirtyRenderables = [];
                }

                // When the layout has changed, and we are not just scrolling,
                // disable the locked state of the layout-nodes so that they
                // can freely transition between the old and new state.
                if (this.options.flow && (this._isDirty || this.options.flowOptions.reflowOnResize && (size[0] !== this._contextSizeCache[0] || size[1] !== this._contextSizeCache[1]))) {
                    var node = this._nodes.getStartEnumNode();
                    while (node) {
                        node.releaseLock(true);
                        node = node._next;
                    }
                }

                this._isDirty = false;
                this._scroll.scrollDirty = false;

                // Emit end event
                eventData.scrollOffset = -(this._scrollOffsetCache + this._scroll.groupStart);
            } else {
                if (this._scroll.isScrolling && !this._scroll.scrollForceCount) {
                    emitEndScrollingEvent = true;
                }
                /* Reset the ensureVisibleRenderNode to prevent unwanted behaviour when doing replace and not finding the renderable */
                this._scroll.ensureVisibleRenderNode = undefined;
            }

            // Update output and optionally emit event
            var groupTranslate = this._scroll.groupTranslate;
            groupTranslate[0] = 0;
            groupTranslate[1] = 0;
            groupTranslate[2] = 0;
            groupTranslate[this._direction] = -this._scroll.groupStart - scrollOffset;
            var sequentialScrollingOptimized = _isSequentiallyScrollingOptimized.call(this);
            var result = this._nodes.buildSpecAndDestroyUnrenderedNodes(sequentialScrollingOptimized ? groupTranslate : undefined);
            this._specs = result.specs;
            if (!this._specs.length) {
                this._scroll.groupStart = 0;
            }
            if (eventData) {
                // eventData is only used here to check whether there has been a re-layout
                this._eventOutput.emit('layoutend', eventData);
            }
            if (result.modified) {
                this._eventOutput.emit('reflow', {
                    target: this
                });
            }

            // View has been scrolled, emit event
            if (emitScrollEvent) {
                this._eventOutput.emit('scroll', eventData);
            }

            // Check whether the current page has changed
            if (eventData) {
                // eventData is only used here to check whether there has been a re-layout
                var visibleItem = this.options.alignment ? this.getLastVisibleItem() : this.getFirstVisibleItem();
                if (visibleItem && !this._visibleItemCache || !visibleItem && this._visibleItemCache || visibleItem && this._visibleItemCache && visibleItem.renderNode !== this._visibleItemCache.renderNode) {
                    this._eventOutput.emit('pagechange', {
                        target: this,
                        oldViewSequence: this._visibleItemCache ? this._visibleItemCache.viewSequence : undefined,
                        viewSequence: visibleItem ? visibleItem.viewSequence : undefined,
                        oldIndex: this._visibleItemCache ? this._visibleItemCache.index : undefined,
                        index: visibleItem ? visibleItem.index : undefined,
                        renderNode: visibleItem ? visibleItem.renderNode : undefined,
                        oldRenderNode: this._visibleItemCache ? this._visibleItemCache.renderNode : undefined
                    });
                    this._visibleItemCache = visibleItem;
                }
            }

            // Emit end scrolling event
            if (emitEndScrollingEvent) {
                this._scroll.isScrolling = false;
                this._scroll.scrollDirty = true;
                eventData = {
                    target: this,
                    oldSize: size,
                    size: size,
                    oldScrollOffset: -(this._scroll.groupStart + scrollOffset),
                    scrollOffset: -(this._scroll.groupStart + scrollOffset)
                };
                this._eventOutput.emit('scrollend', eventData);
            }

            // When renderables are layed out sequentiall (e.g. a ListLayout or
            // CollectionLayout), then offset the renderables onto the Group
            // and move the group offset instead. This creates a very big performance gain
            // as the renderables don't have to be repositioned for every change
            // to the scrollOffset. For layouts that don't layout sequence, disable
            // this behavior as it will be decremental to the performance.
            var transform = context.transform;
            if (sequentialScrollingOptimized) {
                var windowOffset = scrollOffset + this._scroll.groupStart;
                var translate = [0, 0, 0];
                translate[this._direction] = windowOffset;
                transform = Transform.thenMove(transform, translate);
            }

            // Return the spec
            return {
                transform: transform,
                size: size,
                opacity: context.opacity,
                origin: context.origin,
                target: this.group.render()
            };
        };

        ScrollController.prototype.replace = function (indexOrId, renderable, noAnimation) {
            var sequence;
            //TODO: Check when _nodesById is used as well
            if (!this._nodesById) {
                sequence = this._viewSequence.findByIndex(indexOrId);
                var oldRenderable = sequence.get();
                if (oldRenderable !== renderable && noAnimation && oldRenderable && this._scroll.ensureVisibleRenderNode === oldRenderable) {
                    this._scroll.ensureVisibleRenderNode = renderable;
                }
            }
            return LayoutController.prototype.replace.call(this, indexOrId, renderable, noAnimation, sequence);
        };

        /**
         * Generate a render spec from the contents of this component.
         *
         * @private
         * @method render
         * @return {number} Render spec for this component
         */
        ScrollController.prototype.render = function render() {
            if (this.container) {
                return this.container.render.apply(this.container, arguments);
            } else {
                return this.id;
            }
        };

        module.exports = ScrollController;
    }).call($__exports, $__require, $__exports, $__module);
});
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 *
 * Owner: mark@famo.us
 * @license MPL 2.0
 * @copyright Famous Industries, Inc. 2015
 */

$__System.registerDynamic('196', [], false, function ($__require, $__exports, $__module) {
    $__module.uri = $__module.id;
    return (function (require, exports, module) {
        /**
         * This namespace holds standalone functionality.
         *  Currently includes name mapping for transition curves,
         *  name mapping for origin pairs, and the after() function.
         *
         * @class Utility
         * @static
         */
        var Utility = {};

        /**
         * Table of direction array positions
         *
         * @property {object} Direction
         * @final
         */
        Utility.Direction = {
            X: 0,
            Y: 1,
            Z: 2
        };

        /**
         * Return wrapper around callback function. Once the wrapper is called N
         *   times, invoke the callback function. Arguments and scope preserved.
         *
         * @method after
         *
         * @param {number} count number of calls before callback function invoked
         * @param {Function} callback wrapped callback function
         *
         * @return {function} wrapped callback with coundown feature
         */
        Utility.after = function after(count, callback) {
            var counter = count;
            return function () {
                counter--;
                if (counter === 0) callback.apply(this, arguments);
            };
        };

        /**
         * Load a URL and return its contents in a callback
         *
         * @method loadURL
         *
         * @param {string} url URL of object
         * @param {function} callback callback to dispatch with content
         */
        Utility.loadURL = function loadURL(url, callback) {
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function onreadystatechange() {
                if (this.readyState === 4) {
                    if (callback) callback(this.responseText);
                }
            };
            xhr.open('GET', url);
            xhr.send();
        };

        /**
         * Create a document fragment from a string of HTML
         *
         * @method createDocumentFragmentFromHTML
         *
         * @param {string} html HTML to convert to DocumentFragment
         *
         * @return {DocumentFragment} DocumentFragment representing input HTML
         */
        Utility.createDocumentFragmentFromHTML = function createDocumentFragmentFromHTML(html) {
            var element = document.createElement('div');
            element.innerHTML = html;
            var result = document.createDocumentFragment();
            while (element.hasChildNodes()) result.appendChild(element.firstChild);
            return result;
        };

        /*
         *  Deep clone an object.
         *  @param b {Object} Object to clone
         *  @return a {Object} Cloned object.
         */
        Utility.clone = function clone(b) {
            var a;
            if (typeof b === 'object') {
                a = b instanceof Array ? [] : {};
                for (var key in b) {
                    if (typeof b[key] === 'object' && b[key] !== null) {
                        if (b[key] instanceof Array) {
                            a[key] = new Array(b[key].length);
                            for (var i = 0; i < b[key].length; i++) {
                                a[key][i] = Utility.clone(b[key][i]);
                            }
                        } else {
                            a[key] = Utility.clone(b[key]);
                        }
                    } else {
                        a[key] = b[key];
                    }
                }
            } else {
                a = b;
            }
            return a;
        };

        module.exports = Utility;
    }).call($__exports, $__require, $__exports, $__module);
});
/**
 * This Source Code is licensed under the MIT license. If a copy of the
 * MIT-license was not distributed with this file, You can obtain one at:
 * http://opensource.org/licenses/mit-license.html.
 *
 * @author: Hein Rutjes (IjzerenHein)
 * @license MIT
 * @copyright Gloey Apps, 2014
 */

/*global console*/
/*eslint no-console:0*/

/**
 * Utility class for famous-flex.
 *
 * @module
 */
$__System.registerDynamic('1fa', ['196'], false, function ($__require, $__exports, $__module) {
    $__module.uri = $__module.id;
    return (function (require, exports, module) {

        // import dependencies
        var Utility = require('196');

        /**
         * @class
         * @alias module:LayoutUtility
         */
        function LayoutUtility() {}
        LayoutUtility.registeredHelpers = {};

        var Capabilities = {
            SEQUENCE: 1,
            DIRECTION_X: 2,
            DIRECTION_Y: 4,
            SCROLLING: 8
        };
        LayoutUtility.Capabilities = Capabilities;

        /**
         *  Normalizes the margins argument.
         *
         *  @param {Array.Number} margins
         */
        LayoutUtility.normalizeMargins = function (margins) {
            if (!margins) {
                return [0, 0, 0, 0];
            } else if (!Array.isArray(margins)) {
                return [margins, margins, margins, margins];
            } else if (margins.length === 0) {
                return [0, 0, 0, 0];
            } else if (margins.length === 1) {
                return [margins[0], margins[0], margins[0], margins[0]];
            } else if (margins.length === 2) {
                return [margins[0], margins[1], margins[0], margins[1]];
            } else {
                return margins;
            }
        };

        /**
         * Makes a (shallow) copy of a spec.
         *
         * @param {Spec} spec Spec to clone
         * @return {Spec} cloned spec
         */
        LayoutUtility.cloneSpec = function (spec) {
            var clone = {};
            if (spec.opacity !== undefined) {
                clone.opacity = spec.opacity;
            }
            if (spec.size !== undefined) {
                clone.size = spec.size.slice(0);
            }
            if (spec.transform !== undefined) {
                clone.transform = spec.transform.slice(0);
            }
            if (spec.origin !== undefined) {
                clone.origin = spec.origin.slice(0);
            }
            if (spec.align !== undefined) {
                clone.align = spec.align.slice(0);
            }
            return clone;
        };

        /**
         * Compares two arrays for equality.
         */
        function _isEqualArray(a, b) {
            if (a === b) {
                return true;
            }
            if (a === undefined || b === undefined) {
                return false;
            }
            var i = a.length;
            if (i !== b.length) {
                return false;
            }
            while (i--) {
                if (a[i] !== b[i]) {
                    return false;
                }
            }
            return true;
        }

        /**
         * Compares two specs for equality.
         *
         * @param {Spec} spec1 Spec to compare
         * @param {Spec} spec2 Spec to compare
         * @return {Boolean} true/false
         */
        LayoutUtility.isEqualSpec = function (spec1, spec2) {
            if (spec1.opacity !== spec2.opacity) {
                return false;
            }
            if (!_isEqualArray(spec1.size, spec2.size)) {
                return false;
            }
            if (!_isEqualArray(spec1.transform, spec2.transform)) {
                return false;
            }
            if (!_isEqualArray(spec1.origin, spec2.origin)) {
                return false;
            }
            if (!_isEqualArray(spec1.align, spec2.align)) {
                return false;
            }
            return true;
        };

        /**
         * Helper function that returns a string containing the differences
         * between two specs.
         *
         * @param {Spec} spec1 Spec to compare
         * @param {Spec} spec2 Spec to compare
         * @return {String} text
         */
        LayoutUtility.getSpecDiffText = function (spec1, spec2) {
            var result = 'spec diff:';
            if (spec1.opacity !== spec2.opacity) {
                result += '\nopacity: ' + spec1.opacity + ' != ' + spec2.opacity;
            }
            if (!_isEqualArray(spec1.size, spec2.size)) {
                result += '\nsize: ' + JSON.stringify(spec1.size) + ' != ' + JSON.stringify(spec2.size);
            }
            if (!_isEqualArray(spec1.transform, spec2.transform)) {
                result += '\ntransform: ' + JSON.stringify(spec1.transform) + ' != ' + JSON.stringify(spec2.transform);
            }
            if (!_isEqualArray(spec1.origin, spec2.origin)) {
                result += '\norigin: ' + JSON.stringify(spec1.origin) + ' != ' + JSON.stringify(spec2.origin);
            }
            if (!_isEqualArray(spec1.align, spec2.align)) {
                result += '\nalign: ' + JSON.stringify(spec1.align) + ' != ' + JSON.stringify(spec2.align);
            }
            return result;
        };

        /**
         * Helper function to call whenever a critical error has occurred.
         *
         * @param {String} message error-message
         */
        LayoutUtility.error = function (message) {
            console.log('ERROR: ' + message);
            throw message;
        };

        /**
         * Helper function to call whenever a warning error has occurred.
         *
         * @param {String} message warning-message
         */
        LayoutUtility.warning = function (message) {
            console.log('WARNING: ' + message);
        };

        /**
         * Helper function to log 1 or more arguments. All the arguments
         * are concatenated to produce a single string which is logged.
         *
         * @param {String|Array|Object} args arguments to stringify and concatenate
         */
        LayoutUtility.log = function (args) {
            var message = '';
            for (var i = 0; i < arguments.length; i++) {
                var arg = arguments[i];
                if (arg instanceof Object || arg instanceof Array) {
                    message += JSON.stringify(arg);
                } else {
                    message += arg;
                }
            }
            console.log(message);
        };

        /**
         * Combines two sets of options into a single set.
         *
         * @param {Object} options1 base set of options
         * @param {Object} options2 set of options to merge into `options1`
         * @param {Bool} [forceClone] ensures that a clone is returned rather that one of the original options objects
         * @return {Object} Combined options
         */
        LayoutUtility.combineOptions = function (options1, options2, forceClone) {
            if (options1 && !options2 && !forceClone) {
                return options1;
            } else if (!options1 && options2 && !forceClone) {
                return options2;
            }
            var options = Utility.clone(options1 || {});
            if (options2) {
                for (var key in options2) {
                    options[key] = options2[key];
                }
            }
            return options;
        };

        /**
         * Registers a layout-helper so it can be used as a layout-literal for
         * a layout-controller. The LayoutHelper instance must support the `parse`
         * function, which is fed the layout-literal content.
         *
         * **Example:**
         *
         * ```javascript
         * Layout.registerHelper('dock', LayoutDockHelper);
         *
         * var layoutController = new LayoutController({
         *   layout: { dock: [,
         *     ['top', 'header', 50],
         *     ['bottom', 'footer', 50],
         *     ['fill', 'content'],
         *   ]},
         *   dataSource: {
         *     header: new Surface({content: 'Header'}),
         *     footer: new Surface({content: 'Footer'}),
         *     content: new Surface({content: 'Content'}),
         *   }
         * })
         * ```
         *
         * @param {String} name name of the helper (e.g. 'dock')
         * @param {Function} Helper Helper to register (e.g. LayoutDockHelper)
         */
        LayoutUtility.registerHelper = function (name, Helper) {
            if (!Helper.prototype.parse) {
                LayoutUtility.error('The layout-helper for name "' + name + '" is required to support the "parse" method');
            }
            if (this.registeredHelpers[name] !== undefined) {
                LayoutUtility.warning('A layout-helper with the name "' + name + '" is already registered and will be overwritten');
            }
            this.registeredHelpers[name] = Helper;
        };

        /**
         * Unregisters a layout-helper.
         *
         * @param {String} name name of the layout-helper
         */
        LayoutUtility.unregisterHelper = function (name) {
            delete this.registeredHelpers[name];
        };

        /**
         * Gets a registered layout-helper by its name.
         *
         * @param {String} name name of the layout-helper
         * @return {Function} layout-helper or undefined
         */
        LayoutUtility.getRegisteredHelper = function (name) {
            return this.registeredHelpers[name];
        };

        // Layout function
        module.exports = LayoutUtility;
    }).call($__exports, $__require, $__exports, $__module);
});
/**
 * This Source Code is licensed under the MIT license. If a copy of the
 * MIT-license was not distributed with this file, You can obtain one at:
 * http://opensource.org/licenses/mit-license.html.
 *
 * @author: Hein Rutjes (IjzerenHein)
 * @license MIT
 * @copyright Gloey Apps, 2014 - 2015
 */

/**
 * Lays out items and optionally sticky sections from top to bottom or left to right.
 *
 * |options|type|description|
 * |---|---|---|
 * |`[itemSize]`|Number/Function|Height or width in pixels of an item (used when renderNode has no size)|
 * |`[margins]`|Number/Array|Margins shorthand (e.g. 5, [10, 20], [2, 5, 2, 10])|
 * |`[spacing]`|Number|Spacing between items|
 * |`[isSectionCallback]`|Function|Callback that is called in order to check if a render-node is a section rather than a cell.|
 *
 * Example:
 *
 * ```javascript
 * var FlexScrollView = require('famous-flex/FlexScrollView');
 * var ListLayout = require('famous-flex/layouts/ListLayout');
 *
 * var scrollView = new FlexScrollView({
 *   layout: ListLayout,
 *   layoutOptions: {
 *     margins: [20, 10, 20, 10],
 *     spacing: 1,
 *     isSectionCallback: function(renderNode) {
 *       return renderNode.isSection;
 *     },
 *   },
 *   dataSource: [
 *     // first section
 *     _createSection(),
 *     _createCell(),
 *     _createCell(),
 *     // second section
 *     _createSection(),
 *     _createCell(),
 *   ]
 * });
 * this.add(scrollView);
 *
 * function _createCell() {
 *   return new Surface({
 *     size: [undefined, 50],
 *     content: 'my cell'
 *   });
 * }
 *
 * function _createSection() {
 *   var section = new Surface({
 *     size: [undefined, 30],
 *     content: 'my sticky section'
 *   });
 *   section.isSection = true; // mark renderNode as section
 *   return section;
 * }
 * ```
 * @module
 */
$__System.registerDynamic('247', ['196', '1fa'], false, function ($__require, $__exports, $__module) {
    $__module.uri = $__module.id;
    return (function (require, exports, module) {

        // import dependencies
        var Utility = require('196');
        var LayoutUtility = require('1fa');

        // Define capabilities of this layout function
        var capabilities = {
            sequence: true,
            direction: [Utility.Direction.Y, Utility.Direction.X],
            scrolling: true,
            trueSize: true,
            sequentialScrollingOptimized: true
        };

        // Data
        var set = {
            size: [0, 0],
            translate: [0, 0, 0],
            scrollLength: undefined
        };
        var margin = [0, 0];

        // Layout function
        function ListLayout(context, options) {

            // Local data
            var size = context.size;
            var direction = context.direction;
            var alignment = context.alignment;
            var revDirection = direction ? 0 : 1;
            var offset;
            var margins = LayoutUtility.normalizeMargins(options.margins);
            var spacing = options.spacing || 0;
            var node;
            var nodeSize;
            var itemSize;
            var getItemSize;
            var lastSectionBeforeVisibleCell;
            var lastSectionBeforeVisibleCellOffset;
            var lastSectionBeforeVisibleCellLength;
            var lastSectionBeforeVisibleCellScrollLength;
            var lastSectionBeforeVisibleCellTopReached;
            var firstVisibleCell;
            var lastNode;
            var lastCellOffsetInFirstVisibleSection;
            var isSectionCallback = options.isSectionCallback;
            var bound;

            //
            // Sanity checks
            //
            if (spacing && typeof spacing !== 'number') {
                console.log('Famous-flex warning: ListLayout was initialized with a non-numeric spacing option. ' + // eslint-disable-line no-console
                'The CollectionLayout supports an array spacing argument, but the ListLayout does not.');
            }

            //
            // Reset size & translation
            //
            set.size[0] = size[0];
            set.size[1] = size[1];
            set.size[revDirection] -= margins[1 - revDirection] + margins[3 - revDirection];
            set.translate[0] = 0;
            set.translate[1] = 0;
            set.translate[2] = 0;
            set.translate[revDirection] = margins[direction ? 3 : 0];

            //
            // Determine item-size or use true=size
            //
            if (options.itemSize === true || !options.hasOwnProperty('itemSize')) {
                itemSize = true;
            } else if (options.itemSize instanceof Function) {
                getItemSize = options.itemSize;
            } else {
                itemSize = options.itemSize === undefined ? size[direction] : options.itemSize;
            }

            //
            // Determine leading/trailing margins
            //
            margin[0] = margins[direction ? 0 : 3];
            margin[1] = -margins[direction ? 2 : 1];

            //
            // Process all next nodes
            //
            offset = context.scrollOffset + margin[alignment];
            bound = context.scrollEnd + margin[alignment];
            while (offset < bound + spacing) {
                lastNode = node;
                node = context.next();
                if (!node) {
                    break;
                }

                //
                // Get node size
                //
                nodeSize = getItemSize ? getItemSize(node.renderNode, context.size) : itemSize;
                nodeSize = nodeSize === true ? context.resolveSize(node, size)[direction] : nodeSize;

                //
                // Position node
                //
                set.size[direction] = nodeSize;
                set.translate[direction] = offset + (alignment ? spacing : 0);
                set.scrollLength = nodeSize + spacing;
                context.set(node, set);
                offset += set.scrollLength;

                //
                // Keep track of the last section before the first visible cell
                //
                if (isSectionCallback && isSectionCallback(node.renderNode)) {
                    if (set.translate[direction] <= margin[0] && !lastSectionBeforeVisibleCellTopReached) {
                        lastSectionBeforeVisibleCellTopReached = true;
                        set.translate[direction] = margin[0];
                        context.set(node, set);
                    }
                    if (!firstVisibleCell) {
                        lastSectionBeforeVisibleCell = node;
                        lastSectionBeforeVisibleCellOffset = offset - nodeSize;
                        lastSectionBeforeVisibleCellLength = nodeSize;
                        lastSectionBeforeVisibleCellScrollLength = nodeSize;
                    } else if (lastCellOffsetInFirstVisibleSection === undefined) {
                        lastCellOffsetInFirstVisibleSection = offset - nodeSize;
                    }
                } else if (!firstVisibleCell && offset >= 0) {
                    firstVisibleCell = node;
                }
            }
            if (lastNode && !node && !alignment) {
                set.scrollLength = nodeSize + margin[0] + -margin[1];
                context.set(lastNode, set);
            }

            //
            // Process previous nodes
            //
            lastNode = undefined;
            node = undefined;
            offset = context.scrollOffset + margin[alignment];
            bound = context.scrollStart + margin[alignment];
            while (offset > bound - spacing) {
                lastNode = node;
                node = context.prev();
                if (!node) {
                    break;
                }

                //
                // Get node size
                //
                nodeSize = getItemSize ? getItemSize(node.renderNode, context.size) : itemSize;
                nodeSize = nodeSize === true ? context.resolveSize(node, size)[direction] : nodeSize;

                //
                // Position node
                //
                set.scrollLength = nodeSize + spacing;
                offset -= set.scrollLength;
                set.size[direction] = nodeSize;
                set.translate[direction] = offset + (alignment ? spacing : 0);
                context.set(node, set);

                //
                // Keep track of the last section before the first visible cell
                //
                if (isSectionCallback && isSectionCallback(node.renderNode)) {
                    if (set.translate[direction] <= margin[0] && !lastSectionBeforeVisibleCellTopReached) {
                        lastSectionBeforeVisibleCellTopReached = true;
                        set.translate[direction] = margin[0];
                        context.set(node, set);
                    }
                    if (!lastSectionBeforeVisibleCell) {
                        lastSectionBeforeVisibleCell = node;
                        lastSectionBeforeVisibleCellOffset = offset;
                        lastSectionBeforeVisibleCellLength = nodeSize;
                        lastSectionBeforeVisibleCellScrollLength = set.scrollLength;
                    }
                } else if (offset + nodeSize >= 0) {
                    firstVisibleCell = node;
                    if (lastSectionBeforeVisibleCell) {
                        lastCellOffsetInFirstVisibleSection = offset + nodeSize;
                    }
                    lastSectionBeforeVisibleCell = undefined;
                }
            }
            if (lastNode && !node && alignment) {
                set.scrollLength = nodeSize + margin[0] + -margin[1];
                context.set(lastNode, set);
                if (lastSectionBeforeVisibleCell === lastNode) {
                    lastSectionBeforeVisibleCellScrollLength = set.scrollLength;
                }
            }

            //
            // When no first section is in the scrollable range, then
            // look back further in search for that section
            //
            if (isSectionCallback && !lastSectionBeforeVisibleCell) {
                node = context.prev();
                while (node) {
                    if (isSectionCallback(node.renderNode)) {
                        lastSectionBeforeVisibleCell = node;
                        nodeSize = options.itemSize || context.resolveSize(node, size)[direction];
                        lastSectionBeforeVisibleCellOffset = offset - nodeSize;
                        lastSectionBeforeVisibleCellLength = nodeSize;
                        lastSectionBeforeVisibleCellScrollLength = undefined;
                        break;
                    } else {
                        node = context.prev();
                    }
                }
            }

            //
            // Reposition "last section before first visible cell" to the top of the layout
            //
            if (lastSectionBeforeVisibleCell) {
                var correctedOffset = Math.max(margin[0], lastSectionBeforeVisibleCellOffset);
                if (lastCellOffsetInFirstVisibleSection !== undefined && lastSectionBeforeVisibleCellLength > lastCellOffsetInFirstVisibleSection - margin[0]) {
                    correctedOffset = lastCellOffsetInFirstVisibleSection - lastSectionBeforeVisibleCellLength;
                }
                set.size[direction] = lastSectionBeforeVisibleCellLength;
                set.translate[direction] = correctedOffset;
                set.scrollLength = lastSectionBeforeVisibleCellScrollLength;
                context.set(lastSectionBeforeVisibleCell, set);
            }
        }

        ListLayout.Capabilities = capabilities;
        ListLayout.Name = 'ListLayout';
        ListLayout.Description = 'List-layout with margins, spacing and sticky headers';
        module.exports = ListLayout;
    }).call($__exports, $__require, $__exports, $__module);
});
/**
 * This Source Code is licensed under the MIT license. If a copy of the
 * MIT-license was not distributed with this file, You can obtain one at:
 * http://opensource.org/licenses/mit-license.html.
 *
 * @author: Hein Rutjes (IjzerenHein)
 * @license MIT
 * @copyright Gloey Apps, 2015
 */

/**
 * Flexible FlexScrollView for famo.us.
 *
 * Key features:
 * -    Customizable layout (uses ListLayout by default)
 * -    Insert/remove at any position using animations
 * -    Support for `true` size renderables
 * -    Pull to refresh (header & footer)
 * -    Horizontal/vertical direction
 * -    Top/left or bottom/right alignment
 * -    Pagination
 * -    Option to embed in a ContainerSurface
 * -    FlexScrollView linking
 *
 * Inherited from: [ScrollController](./ScrollController.md)
 * @module
 */
$__System.registerDynamic('248', ['1fa', '246', '247'], false, function ($__require, $__exports, $__module) {
    $__module.uri = $__module.id;
    return (function (require, exports, module) {

        // import dependencies
        var LayoutUtility = require('1fa');
        var ScrollController = require('246');
        var ListLayout = require('247');

        //
        // Pull to refresh states
        //
        var PullToRefreshState = {
            HIDDEN: 0,
            PULLING: 1,
            ACTIVE: 2,
            COMPLETED: 3,
            HIDDING: 4
        };

        /**
         * @class
         * @extends ScrollController
         * @param {Object} options Configurable options (see ScrollController for all inherited options).
         * @param {Renderable} [options.pullToRefreshHeader] Pull to refresh renderable that is displayed when pulling down from the top.
         * @param {Renderable} [options.pullToRefreshFooter] Pull to refresh renderable that is displayed when pulling up from the bottom.
         * @param {FlexScrollView} [options.leadingScrollView] Leading scrollview into which input events are piped (see Tutorial)
         * @param {FlexScrollView} [options.trailingScrollView] Trailing scrollview into which input events are piped (see Tutorial)
         * @alias module:FlexScrollView
         */
        function FlexScrollView(options) {
            ScrollController.call(this, LayoutUtility.combineOptions(FlexScrollView.DEFAULT_OPTIONS, options));
            this._thisScrollViewDelta = 0;
            this._leadingScrollViewDelta = 0;
            this._trailingScrollViewDelta = 0;
        }
        FlexScrollView.prototype = Object.create(ScrollController.prototype);
        FlexScrollView.prototype.constructor = FlexScrollView;
        FlexScrollView.PullToRefreshState = PullToRefreshState;
        FlexScrollView.Bounds = ScrollController.Bounds;
        FlexScrollView.PaginationMode = ScrollController.PaginationMode;

        FlexScrollView.DEFAULT_OPTIONS = {
            layout: ListLayout, // sequential layout, uses width/height from renderable
            direction: undefined, // 0 = X, 1 = Y, undefined = use default from layout
            paginated: false, // pagination on/off
            alignment: 0, // 0 = top/left, 1 = bottom/right
            flow: false, // allow renderables to flow between layouts when not scrolling
            mouseMove: false, // allow mouse to hold and move the view
            useContainer: false, // embeds inside a ContainerSurface for clipping and capturing input events
            visibleItemThresshold: 0.5, // by default, when an item is 50% visible, it is considered visible by `getFirstVisibleItem`
            pullToRefreshHeader: undefined, // assign pull-to-refresh renderable here (renderable must have a size)
            pullToRefreshFooter: undefined, // assign pull-to-refresh renderable here (renderable must have a size)
            leadingScrollView: undefined,
            trailingScrollView: undefined
            // see ScrollController for all other options
        };

        /**
         * Patches the FlexScrollView instance's options with the passed-in ones.
         *
         * @param {Object} options Configurable options (see ScrollController for all inherited options).
         * @param {Renderable} [options.pullToRefreshHeader] Pull to refresh renderable that is displayed when pulling down from the top.
         * @param {Renderable} [options.pullToRefreshFooter] Pull to refresh renderable that is displayed when pulling up from the bottom.
         * @param {FlexScrollView} [options.leadingScrollView] Leading scrollview into which input events are piped (see Tutorial).
         * @param {FlexScrollView} [options.trailingScrollView] Trailing scrollview into which input events are piped (see Tutorial).
         * @return {FlexScrollView} this
         */
        FlexScrollView.prototype.setOptions = function (options) {
            ScrollController.prototype.setOptions.call(this, options);

            // Update pull to refresh renderables
            if (options.pullToRefreshHeader || options.pullToRefreshFooter || this._pullToRefresh) {
                if (options.pullToRefreshHeader) {
                    this._pullToRefresh = this._pullToRefresh || [undefined, undefined];
                    if (!this._pullToRefresh[0]) {
                        this._pullToRefresh[0] = {
                            state: PullToRefreshState.HIDDEN,
                            prevState: PullToRefreshState.HIDDEN,
                            footer: false
                        };
                    }
                    this._pullToRefresh[0].node = options.pullToRefreshHeader;
                } else if (!this.options.pullToRefreshHeader && this._pullToRefresh) {
                    this._pullToRefresh[0] = undefined;
                }
                if (options.pullToRefreshFooter) {
                    this._pullToRefresh = this._pullToRefresh || [undefined, undefined];
                    if (!this._pullToRefresh[1]) {
                        this._pullToRefresh[1] = {
                            state: PullToRefreshState.HIDDEN,
                            prevState: PullToRefreshState.HIDDEN,
                            footer: true
                        };
                    }
                    this._pullToRefresh[1].node = options.pullToRefreshFooter;
                } else if (!this.options.pullToRefreshFooter && this._pullToRefresh) {
                    this._pullToRefresh[1] = undefined;
                }
                if (this._pullToRefresh && !this._pullToRefresh[0] && !this._pullToRefresh[1]) {
                    this._pullToRefresh = undefined;
                }
            }
            return this;
        };

        /**
         * Sets the data-source (alias for setDataSource).
         *
         * This function is a shim provided for compatibility with the stock famo.us Scrollview.
         *
         * @param {Array|LinkedListViewSequence} node Either an array of renderables or a viewSequence.
         * @return {FlexScrollView} this
         */
        FlexScrollView.prototype.sequenceFrom = function (node) {
            return this.setDataSource(node);
        };

        /**
         * Returns the index of the first visible renderable.
         *
         * This function is a shim provided for compatibility with the stock famo.us Scrollview.
         *
         * @return {Number} Index of the first visible renderable.
         */
        FlexScrollView.prototype.getCurrentIndex = function () {
            var item = this.getFirstVisibleItem();
            return item ? item.viewSequence.getIndex() : -1;
        };

        /**
         * Paginates the Scrollview to an absolute page index. This function is a shim provided
         * for compatibility with the stock famo.us Scrollview.
         *
         * @param {Number} index view-sequence index to go to.
         * @param {Bool} [noAnimation] When set to true, immediately shows the node without scrolling animation.
         * @return {FlexScrollView} this
         */
        FlexScrollView.prototype.goToPage = function (index, noAnimation) {
            var viewSequence = this._viewSequence;
            if (!viewSequence) {
                return this;
            }
            while (viewSequence.getIndex() < index) {
                viewSequence = viewSequence.getNext();
                if (!viewSequence) {
                    return this;
                }
            }
            while (viewSequence.getIndex() > index) {
                viewSequence = viewSequence.getPrevious();
                if (!viewSequence) {
                    return this;
                }
            }
            this.goToRenderNode(viewSequence.get(), noAnimation);
            return this;
        };

        /**
         * Returns the offset associated with the Scrollview instance's current node
         * (generally the node currently at the top).
         *
         * This function is a shim provided for compatibility with the stock famo.us Scrollview.
         *
         * @return {number} The position of either the specified node, or the Scrollview's current Node,
         * in pixels translated.
         */
        FlexScrollView.prototype.getOffset = function () {
            return this._scrollOffsetCache;
        };

        /**
         * Returns the position associated with the Scrollview instance's current node
         * (generally the node currently at the top).
         *
         * This function is a shim provided for compatibility with the stock famo.us Scrollview.
         *
         * @deprecated
         * @param {number} [node] If specified, returns the position of the node at that index in the
         * Scrollview instance's currently managed collection.
         * @return {number} The position of either the specified node, or the Scrollview's current Node,
         * in pixels translated.
         */
        FlexScrollView.prototype.getPosition = FlexScrollView.prototype.getOffset;

        /**
         * Returns the absolute position associated with the Scrollview instance.
         *
         * This function is a shim provided for compatibility with the stock famo.us Scrollview.
         *
         * @return {number} The position of the Scrollview's current Node, in pixels translated.
         */
        FlexScrollView.prototype.getAbsolutePosition = function () {
            return -(this._scrollOffsetCache + this._scroll.groupStart);
        };

        /**
         * Helper function for setting the pull-to-refresh status.
         */
        function _setPullToRefreshState(pullToRefresh, state) {
            if (pullToRefresh.state !== state) {
                pullToRefresh.state = state;
                if (pullToRefresh.node && pullToRefresh.node.setPullToRefreshStatus) {
                    pullToRefresh.node.setPullToRefreshStatus(state);
                }
            }
        }

        /**
         * Helper function for getting the pull-to-refresh data.
         */
        function _getPullToRefresh(footer) {
            return this._pullToRefresh ? this._pullToRefresh[footer ? 1 : 0] : undefined;
        }

        /**
         * Post-layout function that adds the pull-to-refresh renderables.
         * @private
         */
        FlexScrollView.prototype._postLayout = function (size, scrollOffset) {

            // Exit immediately when pull to refresh is not configured
            if (!this._pullToRefresh) {
                return;
            }

            // Adjust scroll-offset for alignment
            if (this.options.alignment) {
                scrollOffset += size[this._direction];
            }

            // Prepare
            var prevHeight;
            var nextHeight;
            var totalHeight;

            // Show/activate pull to refresh renderables
            for (var i = 0; i < 2; i++) {
                var pullToRefresh = this._pullToRefresh[i];
                if (pullToRefresh) {

                    // Calculate offset
                    var length = pullToRefresh.node.getSize()[this._direction];
                    var pullLength = pullToRefresh.node.getPullToRefreshSize ? pullToRefresh.node.getPullToRefreshSize()[this._direction] : length;
                    var offset;
                    if (!pullToRefresh.footer) {
                        // header
                        prevHeight = this._calcScrollHeight(false);
                        prevHeight = prevHeight === undefined ? -1 : prevHeight;
                        offset = prevHeight >= 0 ? scrollOffset - prevHeight : prevHeight;
                        if (this.options.alignment) {
                            nextHeight = this._calcScrollHeight(true);
                            nextHeight = nextHeight === undefined ? -1 : nextHeight;
                            totalHeight = prevHeight >= 0 && nextHeight >= 0 ? prevHeight + nextHeight : -1;
                            if (totalHeight >= 0 && totalHeight < size[this._direction]) {
                                offset = Math.round(scrollOffset - size[this._direction] + nextHeight);
                            }
                        }
                    } else {
                        // footer
                        nextHeight = nextHeight === undefined ? nextHeight = this._calcScrollHeight(true) : nextHeight;
                        nextHeight = nextHeight === undefined ? -1 : nextHeight;
                        offset = nextHeight >= 0 ? scrollOffset + nextHeight : size[this._direction] + 1;
                        if (!this.options.alignment) {
                            prevHeight = prevHeight === undefined ? this._calcScrollHeight(false) : prevHeight;
                            prevHeight = prevHeight === undefined ? -1 : prevHeight;
                            totalHeight = prevHeight >= 0 && nextHeight >= 0 ? prevHeight + nextHeight : -1;
                            if (totalHeight >= 0 && totalHeight < size[this._direction]) {
                                offset = Math.round(scrollOffset - prevHeight + size[this._direction]);
                            }
                        }
                        offset = -(offset - size[this._direction]);
                    }

                    // Determine current state
                    var visiblePerc = Math.max(Math.min(offset / pullLength, 1), 0);
                    switch (pullToRefresh.state) {
                        case PullToRefreshState.HIDDEN:
                            if (this._scroll.scrollForceCount) {
                                if (visiblePerc >= 1) {
                                    _setPullToRefreshState(pullToRefresh, PullToRefreshState.ACTIVE);
                                } else if (offset >= 0.2) {
                                    _setPullToRefreshState(pullToRefresh, PullToRefreshState.PULLING);
                                }
                            }
                            break;
                        case PullToRefreshState.PULLING:
                            if (this._scroll.scrollForceCount && visiblePerc >= 1) {
                                _setPullToRefreshState(pullToRefresh, PullToRefreshState.ACTIVE);
                            } else if (offset < 0.2) {
                                _setPullToRefreshState(pullToRefresh, PullToRefreshState.HIDDEN);
                            }
                            break;
                        case PullToRefreshState.ACTIVE:
                            // nothing to do, wait for completed
                            break;
                        case PullToRefreshState.COMPLETED:
                            if (!this._scroll.scrollForceCount) {
                                if (offset >= 0.2) {
                                    _setPullToRefreshState(pullToRefresh, PullToRefreshState.HIDDING);
                                } else {
                                    _setPullToRefreshState(pullToRefresh, PullToRefreshState.HIDDEN);
                                }
                            }
                            break;
                        case PullToRefreshState.HIDDING:
                            if (offset < 0.2) {
                                _setPullToRefreshState(pullToRefresh, PullToRefreshState.HIDDEN);
                            }
                            break;
                    }

                    // Show pull to refresh node
                    if (pullToRefresh.state !== PullToRefreshState.HIDDEN) {
                        var contextNode = {
                            renderNode: pullToRefresh.node,
                            prev: !pullToRefresh.footer,
                            next: pullToRefresh.footer,
                            index: !pullToRefresh.footer ? --this._nodes._contextState.prevGetIndex : ++this._nodes._contextState.nextGetIndex
                        };
                        var scrollLength;
                        if (pullToRefresh.state === PullToRefreshState.ACTIVE) {
                            scrollLength = length;
                        } else if (this._scroll.scrollForceCount) {
                            scrollLength = Math.min(offset, length);
                        }
                        var set = {
                            size: [size[0], size[1]],
                            translate: [0, 0, -1e-3], // transform.behind
                            scrollLength: scrollLength
                        };
                        set.size[this._direction] = Math.max(Math.min(offset, pullLength), 0);
                        set.translate[this._direction] = pullToRefresh.footer ? size[this._direction] - length : 0;
                        this._nodes._context.set(contextNode, set);
                    }
                }
            }
        };

        /**
         * Shows the pulls-to-refresh renderable indicating that a refresh is in progress.
         *
         * @param {Bool} [footer] set to true to show pull-to-refresh at the footer (default: false).
         * @return {FlexScrollView} this
         */
        FlexScrollView.prototype.showPullToRefresh = function (footer) {
            var pullToRefresh = _getPullToRefresh.call(this, footer);
            if (pullToRefresh) {
                _setPullToRefreshState(pullToRefresh, PullToRefreshState.ACTIVE);
                this._scroll.scrollDirty = true;
            }
        };

        /**
         * Hides the pull-to-refresh renderable in case it was visible.
         *
         * @param {Bool} [footer] set to true to hide the pull-to-refresh at the footer (default: false).
         * @return {FlexScrollView} this
         */
        FlexScrollView.prototype.hidePullToRefresh = function (footer) {
            var pullToRefresh = _getPullToRefresh.call(this, footer);
            if (pullToRefresh && pullToRefresh.state === PullToRefreshState.ACTIVE) {
                _setPullToRefreshState(pullToRefresh, PullToRefreshState.COMPLETED);
                this._scroll.scrollDirty = true;
            }
            return this;
        };

        /**
         * Get the visible state of the pull-to-refresh renderable.
         *
         * @param {Bool} [footer] set to true to get the state of the pull-to-refresh footer (default: false).
         */
        FlexScrollView.prototype.isPullToRefreshVisible = function (footer) {
            var pullToRefresh = _getPullToRefresh.call(this, footer);
            return pullToRefresh ? pullToRefresh.state === PullToRefreshState.ACTIVE : false;
        };

        /**
         * Delegates any scroll force to leading/trailing scrollviews.
         * @private
         */
        FlexScrollView.prototype.applyScrollForce = function (delta) {
            var leadingScrollView = this.options.leadingScrollView;
            var trailingScrollView = this.options.trailingScrollView;
            if (!leadingScrollView && !trailingScrollView) {
                return ScrollController.prototype.applyScrollForce.call(this, delta);
            }
            var partialDelta;
            if (delta < 0) {
                if (leadingScrollView) {
                    partialDelta = leadingScrollView.canScroll(delta);
                    this._leadingScrollViewDelta += partialDelta;
                    leadingScrollView.applyScrollForce(partialDelta);
                    delta -= partialDelta;
                }
                if (trailingScrollView) {
                    partialDelta = this.canScroll(delta);
                    ScrollController.prototype.applyScrollForce.call(this, partialDelta);
                    this._thisScrollViewDelta += partialDelta;
                    delta -= partialDelta;
                    trailingScrollView.applyScrollForce(delta);
                    this._trailingScrollViewDelta += delta;
                } else {
                    ScrollController.prototype.applyScrollForce.call(this, delta);
                    this._thisScrollViewDelta += delta;
                }
            } else {
                if (trailingScrollView) {
                    partialDelta = trailingScrollView.canScroll(delta);
                    trailingScrollView.applyScrollForce(partialDelta);
                    this._trailingScrollViewDelta += partialDelta;
                    delta -= partialDelta;
                }
                if (leadingScrollView) {
                    partialDelta = this.canScroll(delta);
                    ScrollController.prototype.applyScrollForce.call(this, partialDelta);
                    this._thisScrollViewDelta += partialDelta;
                    delta -= partialDelta;
                    leadingScrollView.applyScrollForce(delta);
                    this._leadingScrollViewDelta += delta;
                } else {
                    ScrollController.prototype.applyScrollForce.call(this, delta);
                    this._thisScrollViewDelta += delta;
                }
            }
            return this;
        };

        /**
         * Delegates any scroll force to leading/trailing scrollviews.
         * @private
         */
        FlexScrollView.prototype.updateScrollForce = function (prevDelta, newDelta) {
            var leadingScrollView = this.options.leadingScrollView;
            var trailingScrollView = this.options.trailingScrollView;
            if (!leadingScrollView && !trailingScrollView) {
                return ScrollController.prototype.updateScrollForce.call(this, prevDelta, newDelta);
            }
            var partialDelta;
            var delta = newDelta - prevDelta;
            if (delta < 0) {
                if (leadingScrollView) {
                    partialDelta = leadingScrollView.canScroll(delta);
                    leadingScrollView.updateScrollForce(this._leadingScrollViewDelta, this._leadingScrollViewDelta + partialDelta);
                    this._leadingScrollViewDelta += partialDelta;
                    delta -= partialDelta;
                }
                if (trailingScrollView && delta) {
                    partialDelta = this.canScroll(delta);
                    ScrollController.prototype.updateScrollForce.call(this, this._thisScrollViewDelta, this._thisScrollViewDelta + partialDelta);
                    this._thisScrollViewDelta += partialDelta;
                    delta -= partialDelta;
                    this._trailingScrollViewDelta += delta;
                    trailingScrollView.updateScrollForce(this._trailingScrollViewDelta, this._trailingScrollViewDelta + delta);
                } else if (delta) {
                    ScrollController.prototype.updateScrollForce.call(this, this._thisScrollViewDelta, this._thisScrollViewDelta + delta);
                    this._thisScrollViewDelta += delta;
                }
            } else {
                if (trailingScrollView) {
                    partialDelta = trailingScrollView.canScroll(delta);
                    trailingScrollView.updateScrollForce(this._trailingScrollViewDelta, this._trailingScrollViewDelta + partialDelta);
                    this._trailingScrollViewDelta += partialDelta;
                    delta -= partialDelta;
                }
                if (leadingScrollView) {
                    partialDelta = this.canScroll(delta);
                    ScrollController.prototype.updateScrollForce.call(this, this._thisScrollViewDelta, this._thisScrollViewDelta + partialDelta);
                    this._thisScrollViewDelta += partialDelta;
                    delta -= partialDelta;
                    leadingScrollView.updateScrollForce(this._leadingScrollViewDelta, this._leadingScrollViewDelta + delta);
                    this._leadingScrollViewDelta += delta;
                } else {
                    ScrollController.prototype.updateScrollForce.call(this, this._thisScrollViewDelta, this._thisScrollViewDelta + delta);
                    this._thisScrollViewDelta += delta;
                }
            }
            return this;
        };

        /**
         * Delegates any scroll force to leading/trailing scrollviews.
         * @private
         */
        FlexScrollView.prototype.releaseScrollForce = function (delta, velocity, detectSwipes) {
            var leadingScrollView = this.options.leadingScrollView;
            var trailingScrollView = this.options.trailingScrollView;
            if (!leadingScrollView && !trailingScrollView) {
                return ScrollController.prototype.releaseScrollForce.call(this, delta, velocity, detectSwipes);
            }
            var partialDelta;
            if (delta < 0) {
                if (leadingScrollView) {
                    partialDelta = Math.max(this._leadingScrollViewDelta, delta);
                    this._leadingScrollViewDelta -= partialDelta;
                    delta -= partialDelta;
                    leadingScrollView.releaseScrollForce(this._leadingScrollViewDelta, delta ? 0 : velocity, detectSwipes);
                }
                if (trailingScrollView) {
                    partialDelta = Math.max(this._thisScrollViewDelta, delta);
                    this._thisScrollViewDelta -= partialDelta;
                    delta -= partialDelta;
                    ScrollController.prototype.releaseScrollForce.call(this, this._thisScrollViewDelta, delta ? 0 : velocity, detectSwipes);
                    this._trailingScrollViewDelta -= delta;
                    trailingScrollView.releaseScrollForce(this._trailingScrollViewDelta, delta ? velocity : 0, detectSwipes);
                } else {
                    this._thisScrollViewDelta -= delta;
                    ScrollController.prototype.releaseScrollForce.call(this, this._thisScrollViewDelta, delta ? velocity : 0, detectSwipes);
                }
            } else {
                if (trailingScrollView) {
                    partialDelta = Math.min(this._trailingScrollViewDelta, delta);
                    this._trailingScrollViewDelta -= partialDelta;
                    delta -= partialDelta;
                    trailingScrollView.releaseScrollForce(this._trailingScrollViewDelta, delta ? 0 : velocity, detectSwipes);
                }
                if (leadingScrollView) {
                    partialDelta = Math.min(this._thisScrollViewDelta, delta);
                    this._thisScrollViewDelta -= partialDelta;
                    delta -= partialDelta;
                    ScrollController.prototype.releaseScrollForce.call(this, this._thisScrollViewDelta, delta ? 0 : velocity, detectSwipes);
                    this._leadingScrollViewDelta -= delta;
                    leadingScrollView.releaseScrollForce(this._leadingScrollViewDelta, delta ? velocity : 0, detectSwipes);
                } else {
                    this._thisScrollViewDelta -= delta;
                    ScrollController.prototype.updateScrollForce.call(this, this._thisScrollViewDelta, delta ? velocity : 0, detectSwipes);
                }
            }
            return this;
        };

        /**
         * Overriden commit, in order to emit pull-to-refresh event after
         * all the rendering has been done.
         * @private
         */
        FlexScrollView.prototype.commit = function (context) {

            // Call base class
            var result = ScrollController.prototype.commit.call(this, context);

            // Emit pull to refresh events after the whole commit call has been executed
            // so that when the refresh event is received, the FlexScrollView is in a valid state
            // and can be queried.
            if (this._pullToRefresh) {
                for (var i = 0; i < 2; i++) {
                    var pullToRefresh = this._pullToRefresh[i];
                    if (pullToRefresh) {
                        if (pullToRefresh.state === PullToRefreshState.ACTIVE && pullToRefresh.prevState !== PullToRefreshState.ACTIVE) {
                            this._eventOutput.emit('refresh', {
                                target: this,
                                footer: pullToRefresh.footer
                            });
                        }
                        pullToRefresh.prevState = pullToRefresh.state;
                    }
                }
            }
            return result;
        };

        module.exports = FlexScrollView;
    }).call($__exports, $__require, $__exports, $__module);
});
$__System.register("249", [], function() { return { setters: [], execute: function() {} } });

$__System.register('a', ['133', '134', '137', '13d', '13e', '13f', '15e', '15f', '160', '161', '162', '163', '23d', '164', '165', '166', '173', '23b', '16c', '198', '170', '171', '193', '16d', '16e', '1fa', '197', '199', '19a', '1ee', '1ef', '16a', '1f1', '23a', '169', '1f2', '1f3', '1f4', '16f', '168', '248', '249', '172', '135', '136'], function (_export, _context3) {
    "use strict";

    var firebase, merge, extend, camelCase, isEmpty, mergeWith, cloneDeepWith, ElementOutput, Bowser, hash, FastClick, Engine, Context, AnimationController, Surface, Timer, Easing, cloneDeep, FamousView, LayoutController, LayoutUtility, ImageSurface, EventEmitter, isEqual, findIndex, OrderedHashMap, Transitionable, Draggable, ContainerSurface, Transform, GenericSync, MouseSync, TouchSync, RenderNode, Modifier, FlexScrollView, _classCallCheck, _createClass, _possibleConstructorReturn, _inherits, _extends, _slicedToArray, DataSource, ObjectHelper, ownKeys, SuperConstructor, TransientScope, Inject, Provide, ClassProvider, FactoryProvider, _dec, _class$1, FirebaseDataSource, browser, EmptyFunction, ClassProvider$1, FactoryProvider$1, Injector, _class$2, _temp$1, Injection, _regeneratorRuntime, _asyncToGenerator, Utils, layout$1, flow, SizeResolver, BaseLayoutHelper, DockedLayoutHelper, FullSizeLayoutHelper, TraditionalLayoutHelper, Throttler, RenderableHelper, ReflowingScrollView, View, Router, layout$2, flow$1, _dec$3, _dec2$2, _dec3$1, _class$5, _class2$1, _descriptor$1, DialogWrapper, _dec$2, _dec2$1, _dec3, _dec4, _dec5, _dec6, _class$4, _descriptor, _descriptor2, DialogManager, _dec$4, _class$6, ArvaRouter, _dec$1, _class$3, _class2, _temp$2, _dec2, _class3, App$1, FamousContextSingleton, NewAnimationController, Dialog, _dec$5, _class$7, Controller, _dec$6, _dec2$3, _class$8, _descriptor$2, HomeView, HomeController, _class, _temp, App$$1;

    // A bunch of helper functions.

    function isUpperCase(char) {
        return char.toUpperCase() === char;
    }

    function isFunction(value) {
        return typeof value === 'function';
    }

    function isObject(value) {
        return typeof value === 'object';
    }

    function toString$1(token) {
        if (typeof token === 'string') {
            return token;
        }

        if (token === undefined || token === null) {
            return '' + token;
        }

        if (token.name) {
            return token.name;
        }

        return token.toString();
    }

    // HELPERS

    // Append annotation on a function or class.
    // This can be helpful when not using ES6+.


    function annotate(fn, annotation) {
        fn.annotations = fn.annotations || [];
        fn.annotations.push(annotation);
    }

    // Read annotations on a function or class and return whether given annotation is present.
    function hasAnnotation(fn, annotationClass) {
        if (!fn.annotations || fn.annotations.length === 0) {
            return false;
        }

        for (var _iterator = fn.annotations, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var annotation = _ref;

            if (annotation instanceof annotationClass) {
                return true;
            }
        }

        return false;
    }

    // Read annotations on a function or class and collect "interesting" metadata:
    function readAnnotations(fn) {
        var collectedAnnotations = {
            // Description of the provided value.
            provide: {
                token: null
            },

            // List of parameter descriptions.
            // A parameter description is an object with properties:
            // - token (anything)
            params: []
        };

        if (fn.annotations && fn.annotations.length) {
            for (var _iterator2 = fn.annotations, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
                var _ref2;

                if (_isArray2) {
                    if (_i2 >= _iterator2.length) break;
                    _ref2 = _iterator2[_i2++];
                } else {
                    _i2 = _iterator2.next();
                    if (_i2.done) break;
                    _ref2 = _i2.value;
                }

                var annotation = _ref2;

                if (annotation instanceof Inject) {
                    annotation.tokens.forEach(function (token) {
                        collectedAnnotations.params.push({
                            token: token
                        });
                    });
                }

                if (annotation instanceof Provide) {
                    collectedAnnotations.provide.token = annotation.token;
                }
            }
        }

        // Read annotations for individual parameters.
        if (fn.parameters) {
            fn.parameters.forEach(function (param, idx) {
                for (var _iterator3 = param, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
                    var _ref3;

                    if (_isArray3) {
                        if (_i3 >= _iterator3.length) break;
                        _ref3 = _iterator3[_i3++];
                    } else {
                        _i3 = _iterator3.next();
                        if (_i3.done) break;
                        _ref3 = _i3.value;
                    }

                    var paramAnnotation = _ref3;

                    // Type annotation.
                    if (isFunction(paramAnnotation) && !collectedAnnotations.params[idx]) {
                        collectedAnnotations.params[idx] = {
                            token: paramAnnotation
                        };
                    } else if (paramAnnotation instanceof Inject) {
                        collectedAnnotations.params[idx] = {
                            token: paramAnnotation.tokens[0]
                        };
                    }
                }
            });
        }

        return collectedAnnotations;
    }

    function inject() {
        for (var _len3 = arguments.length, tokens = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            tokens[_key3] = arguments[_key3];
        }

        return function (fn) {
            annotate(fn, new (Function.prototype.bind.apply(Inject, [null].concat(tokens)))());
        };
    }

    function provide$1() {
        for (var _len4 = arguments.length, tokens = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            tokens[_key4] = arguments[_key4];
        }

        return function (fn) {
            annotate(fn, new (Function.prototype.bind.apply(Provide, [null].concat(tokens)))());
        };
    }

    /**
     @author: Karl Lundfall (lundfall)
     @license NPOSL-3.0
     @copyright Bizboard, 2015
     */

    function famousMerge(defaultParam, specifiedParam) {
        if (Array.isArray(defaultParam) && Array.isArray(specifiedParam)) {
            var i = void 0,
                results = [];
            for (i = 0; i < specifiedParam.length; i++) {
                var defaultElement = defaultParam[i];
                var specifiedElement = specifiedParam[i];

                /* This is one special case that we want to take into account,
                 (more spcecifically, we want to be able to set the size to undefined) */
                if (specifiedElement === undefined) {
                    results.push(specifiedElement);
                } else {
                    var resultingElement = void 0;
                    if (typeof specifiedElement !== 'object' || typeof resultingElement !== 'object') {
                        resultingElement = specifiedElement;
                    } else {
                        resultingElement = mergeWith(defaultElement, specifiedElement, famousMerge);
                    }
                    results.push(resultingElement);
                }
            }
            for (; i < defaultParam.length; i++) {
                results.push(defaultParam[i]);
            }
            return results;
        }

        var _arr = [specifiedParam, defaultParam];
        for (var _i = 0; _i < _arr.length; _i++) {
            var param = _arr[_i];
            if (!Array.isArray(param)) {

                if (typeof param === 'object' && !!param) {

                    /*
                     * Make sure that we don't merge instances of classes. You _could_ trick this system by specifying an object
                     * with the parameter constructor {name: 'Object'} or specifying a class named Object (don't)
                     */
                    if (param.constructor.name !== 'Object') {
                        return specifiedParam;
                    }

                    if (isEmpty(param)) {
                        return param === specifiedParam ? defaultParam : specifiedParam;
                    }
                }
            }
        }
        var hasDashProperty = false;
        /*
         * Style parameters can be specified with dash-case or camelCase, which we correct here
         */
        var shallowParamCopies = [{}, {}];
        var _arr2 = [[specifiedParam, shallowParamCopies[0]], [defaultParam, shallowParamCopies[1]]];
        for (var _i2 = 0; _i2 < _arr2.length; _i2++) {
            var _arr2$_i = _slicedToArray(_arr2[_i2], 2);

            var _param = _arr2$_i[0];
            var shallowCopy = _arr2$_i[1];

            for (var key in _param) {
                var value = _param[key];
                /* If there is an array present in one place but not the other, we need to be sure to place an empty
                *  array in the other object in order to prevent the contents in that array from being copied unpromptedly */
                if (defaultParam !== undefined && specifiedParam !== undefined && Array.isArray(value) && key in specifiedParam !== key in defaultParam) {
                    if (!key in specifiedParam) {
                        specifiedParam[key] = [];
                    }
                }
                if (~key.indexOf('-')) {
                    hasDashProperty = true;
                    key = camelCase(key);
                }
                shallowCopy[key] = value;
            }
        }
        if (hasDashProperty) {
            return mergeWith(shallowParamCopies[1], shallowParamCopies[0], famousMerge);
        } else {
            return undefined;
        }
    }

    /**
     * Helper function used to clone without cloning class instances
     * @param value
     * @returns {*}
     */
    function dontCloneClassInstances(value) {
        if (typeof value === 'object' && !!value && !Array.isArray(value) && value.constructor.name !== 'Object') {
            return value;
        }
    }

    /**
     *
     * @param defaultOptions
     * @param options
     * @returns {*}
     */
    function combineOptions(defaultOptions, options) {
        var clonedDefaultOptions = cloneDeepWith(defaultOptions, dontCloneClassInstances);
        return mergeWith({ root: clonedDefaultOptions }, { root: options }, famousMerge).root;
    }

    function duplicateZIndex() {
        var oldCommit = ElementOutput.prototype.commit;
        ElementOutput.prototype.commit = function (context) {
            oldCommit.call(this, context);
            if (this._element) {
                var zIndex = this._matrix[14];
                if (this._element.style.zIndex !== zIndex) {
                    this._element.style.zIndex = zIndex;
                }
            }
        };
    }

    function removeSurfacePreserve3D() {
        debugger;
        var styleSheets = window.document.styleSheets;
        for (var sheetIndex in styleSheets) {
            var sheet = styleSheets[sheetIndex];
            if (sheet && sheet.href && sheet.href.indexOf('famous.css') !== -1) {
                for (var ruleIndex in sheet.cssRules) {
                    var rule = sheet.cssRules[ruleIndex];
                    if (rule && rule.selectorText === '.famous-surface') {
                        rule.style.removeProperty('transform-style');
                        rule.style.removeProperty('-moz-transform-style');
                        rule.style.removeProperty('-webkit-transform-style');
                    }
                }
            }
        }
    }

    /**
     * Created by tom on 21/01/16.
     */

    /* */
    function isClass(clsOrFunction) {

        if (hasAnnotation(clsOrFunction, ClassProvider)) {
            return true;
        } else if (hasAnnotation(clsOrFunction, FactoryProvider)) {
            return false;
        }
        /* When code is minified, class names are no longer upper case, so we skip this check
         * if the name is oddly short (which happens during minification). */
        else if (clsOrFunction.name && clsOrFunction.name.length && clsOrFunction.name.length > 3) {
                return isUpperCase(clsOrFunction.name.charAt(0));
            } else {
                return ownKeys(clsOrFunction.prototype).length > 0;
            }
    }

    // Provider is responsible for creating instances.
    //
    // responsibilities:
    // - create instances
    //
    // communication:
    // - exposes `create()` which creates an instance of something
    // - exposes `params` (information about which arguments it requires to be passed into `create()`)
    //
    // Injector reads `provider.params` first, create these dependencies (however it wants),
    // then calls `provider.create(args)`, passing in these arguments.


    function createProviderFromFnOrClass(fnOrClass, annotations) {
        if (isClass(fnOrClass)) {
            return new ClassProvider$1(fnOrClass, annotations.params);
        }

        return new FactoryProvider$1(fnOrClass, annotations.params);
    }

    /* */

    function constructResolvingMessage(resolving, token) {
        // If a token is passed in, add it into the resolving array.
        // We need to check arguments.length because it can be null/undefined.
        if (arguments.length > 1) {
            resolving.push(token);
        }

        if (resolving.length > 1) {
            return ' (' + resolving.map(toString$1).join(' -> ') + ')';
        }

        return '';
    }

    // Injector encapsulate a life scope.
    // There is exactly one instance for given token in given injector.
    //
    // All the state is immutable, the only state changes is the cache. There is however no way to produce different instance under given token. In that sense it is immutable.
    //
    // Injector is responsible for:
    // - resolving tokens into
    //   - provider
    //   - value (cache/calling provider)
    // - loading different "providers" and modules

    /**
     @author: Tom Clement (tjclement)
     @license NPOSL-3.0
     @copyright Bizboard, 2015
    
     */

    function limit(min, value, max) {
        return Math.min(Math.max(min, value), max);
    }

    /**
     * Created by lundfall on 01/09/16.
     */

    /**
    
    
     @author: Hans van den Akker (mysim1)
     @license NPOSL-3.0
     @copyright Bizboard, 2016
    
     */
    function prepDecoratedRenderable(viewOrRenderable, renderableName, descriptor) {
        /* This function can also be called as prepDecoratedRenderable(renderable) */
        if (!renderableName && !descriptor) {
            var renderable = viewOrRenderable;
            renderable.decorations = renderable.decorations || {};
            return renderable;
        }
        var view = viewOrRenderable;

        if (!view.renderableConstructors) {
            view.renderableConstructors = new Map();
        }

        var constructors = view.renderableConstructors;

        /* Because the inherited views share the same prototype, we'll have to split it up depending on which subclass we're referring out */
        var specificRenderableConstructors = constructors.get(view.constructor);
        if (!specificRenderableConstructors) {
            specificRenderableConstructors = constructors.set(view.constructor, {}).get(view.constructor);
        }

        if (!specificRenderableConstructors[renderableName]) {
            /* Getters have a get() method on the descriptor, class properties have an initializer method.
             * get myRenderable(){ return new Surface() } => descriptor.get();
             * myRenderable = new Surface(); => descriptor.initializer();
             */
            if (descriptor.get) {
                (console.warn || console.log)('Adding renderables on views through getters has been deprecated (' + renderableName + ').');
                specificRenderableConstructors[renderableName] = descriptor.get;
            } else if (descriptor.initializer) {
                specificRenderableConstructors[renderableName] = descriptor.initializer;
            }
        }
        var constructor = specificRenderableConstructors[renderableName];
        if (!constructor.decorations) {
            constructor.decorations = { descriptor: descriptor };
        }

        return constructor;
    }

    /**
     * Extracts a decorations object
     *
     * @param {View} prototype
     * @returns {Object} The decorations for the prototype
     */
    function prepPrototypeDecorations(prototype) {

        /* To prevent inherited classes from taking each others class-level decorators, we need to store these decorations in
         * a map, similarly to function preparing a decorated renderable
         */
        if (!prototype.decorationsMap) {
            prototype.decorationsMap = new Map();
        }

        var decorationsMap = prototype.decorationsMap;

        var decorations = decorationsMap.get(prototype.constructor);
        if (!decorations) {
            decorations = decorationsMap.set(prototype.constructor, {}).get(prototype.constructor);
        }

        /* Return the class' prototype, so it can be extended by the decorator */
        return decorations;
    }

    /**
     * Describes a set of decorators used for layouting of a renderable in a View.
     */


    /**
     @author: Karl Lundfall (lundfall)
     @license NPOSL-3.0
     @copyright Bizboard, 2015
    
     Adapted version of the LayoutDockHelper made by Hein Rutjes in famous-flex
     */

    /**
     * @class
     * @param {LayoutContext} context layout-context
     * @param {Object} [options] additional options
     * @param {Object} [options.margins] margins to start out with (default: 0px)
     * @param {Number} [options.translateZ] z-index to use when translating objects (default: 0)
     * @alias module:LayoutDockHelper
     */
    function TrueSizedLayoutDockHelper(context, options) {
        var size = context.size;
        this._size = size;
        this._context = context;
        this._options = options;
        this._data = {
            z: options && options.translateZ ? options.translateZ : 0
        };
        var margins = [0, 0, 0, 0];
        if (options && options.margins) {
            margins = LayoutUtility.normalizeMargins(options.margins);
        }
        this._initialData = {
            left: margins[3],
            top: margins[0],
            right: size[0] - margins[1],
            bottom: size[1] - margins[2]
        };
        this._data.left = this._initialData.left;
        this._data.top = this._initialData.top;
        this._data.right = this._initialData.right;
        this._data.bottom = this._initialData.bottom;
    }

    /**
     * Parses the layout-rules based on a JSON data object.
     *
     * **Example:**
     *
     * ```JSON
     * [
     *   ['top', 'header', 50],
     *   ['bottom', 'footer', 50, 10], // z-index: 10
     *   ['margins', [10, 5]], // marginate remaining space: 10px top/bottom, 5px left/right
     *   ['fill', 'content']
     * ]
     * ```
     *
     * @param {Object} data JSON object
     */


    /**
     * Created by tom on 22/08/16.
     */

    function waitMilliseconds(milliseconds) {
        return new Promise(function (resolve) {
            return Timer.setTimeout(resolve, milliseconds);
        });
    }

    /**
     * Created by lundfall on 02/09/16.
     */

    /**
    
    
     @author: Hans van den Akker (mysim1)
     @license NPOSL-3.0
     @copyright Bizboard, 2016
    
     */
    function prepDecoratedRenderable$1(viewOrRenderable, renderableName, descriptor) {
        /* This function can also be called as prepDecoratedRenderable(renderable) */
        if (!renderableName && !descriptor) {
            var renderable = viewOrRenderable;
            renderable.decorations = renderable.decorations || {};
            return renderable;
        }
        var view = viewOrRenderable;

        if (!view.renderableConstructors) {
            view.renderableConstructors = new Map();
        }

        var constructors = view.renderableConstructors;

        /* Because the inherited views share the same prototype, we'll have to split it up depending on which subclass we're referring out */
        var specificRenderableConstructors = constructors.get(view.constructor);
        if (!specificRenderableConstructors) {
            specificRenderableConstructors = constructors.set(view.constructor, {}).get(view.constructor);
        }

        if (!specificRenderableConstructors[renderableName]) {
            /* Getters have a get() method on the descriptor, class properties have an initializer method.
             * get myRenderable(){ return new Surface() } => descriptor.get();
             * myRenderable = new Surface(); => descriptor.initializer();
             */
            if (descriptor.get) {
                (console.warn || console.log)('Adding renderables on views through getters has been deprecated (' + renderableName + ').');
                specificRenderableConstructors[renderableName] = descriptor.get;
            } else if (descriptor.initializer) {
                specificRenderableConstructors[renderableName] = descriptor.initializer;
            }
        }
        var constructor = specificRenderableConstructors[renderableName];
        if (!constructor.decorations) {
            constructor.decorations = { descriptor: descriptor };
        }

        return constructor;
    }

    /**
     * Extracts a decorations object
     *
     * @param {View} prototype
     * @returns {Object} The decorations for the prototype
     */
    function prepPrototypeDecorations$1(prototype) {

        /* To prevent inherited classes from taking each others class-level decorators, we need to store these decorations in
         * a map, similarly to function preparing a decorated renderable
         */
        if (!prototype.decorationsMap) {
            prototype.decorationsMap = new Map();
        }

        var decorationsMap = prototype.decorationsMap;

        var decorations = decorationsMap.get(prototype.constructor);
        if (!decorations) {
            decorations = decorationsMap.set(prototype.constructor, {}).get(prototype.constructor);
        }

        /* Return the class' prototype, so it can be extended by the decorator */
        return decorations;
    }

    /**
     * Describes a set of decorators used for layouting of a renderable in a View.
     */


    function _initDefineProp$1(target, property, descriptor, context) {
        if (!descriptor) return;
        Object.defineProperty(target, property, {
            enumerable: descriptor.enumerable,
            configurable: descriptor.configurable,
            writable: descriptor.writable,
            value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
        });
    }

    function _applyDecoratedDescriptor$1(target, property, decorators, descriptor, context) {
        var desc = {};
        Object['ke' + 'ys'](descriptor).forEach(function (key) {
            desc[key] = descriptor[key];
        });
        desc.enumerable = !!desc.enumerable;
        desc.configurable = !!desc.configurable;

        if ('value' in desc || desc.initializer) {
            desc.writable = true;
        }

        desc = decorators.slice().reverse().reduce(function (desc, decorator) {
            return decorator(target, property, desc) || desc;
        }, desc);

        if (context && desc.initializer !== void 0) {
            desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
            desc.initializer = undefined;
        }

        if (desc.initializer === void 0) {
            Object['define' + 'Property'](target, property, desc);
            desc = null;
        }

        return desc;
    }

    /**
     * Created by Manuel on 08/02/2017.
     */

    function _initDefineProp(target, property, descriptor, context) {
        if (!descriptor) return;
        Object.defineProperty(target, property, {
            enumerable: descriptor.enumerable,
            configurable: descriptor.configurable,
            writable: descriptor.writable,
            value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
        });
    }

    function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
        var desc = {};
        Object['ke' + 'ys'](descriptor).forEach(function (key) {
            desc[key] = descriptor[key];
        });
        desc.enumerable = !!desc.enumerable;
        desc.configurable = !!desc.configurable;

        if ('value' in desc || desc.initializer) {
            desc.writable = true;
        }

        desc = decorators.slice().reverse().reduce(function (desc, decorator) {
            return decorator(target, property, desc) || desc;
        }, desc);

        if (context && desc.initializer !== void 0) {
            desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
            desc.initializer = undefined;
        }

        if (desc.initializer === void 0) {
            Object['define' + 'Property'](target, property, desc);
            desc = null;
        }

        return desc;
    }

    /**
     * Created by lundfall on 06/07/16.
     */


    function _initDefineProp$2(target, property, descriptor, context) {
        if (!descriptor) return;
        Object.defineProperty(target, property, {
            enumerable: descriptor.enumerable,
            configurable: descriptor.configurable,
            writable: descriptor.writable,
            value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
        });
    }

    function _applyDecoratedDescriptor$2(target, property, decorators, descriptor, context) {
        var desc = {};
        Object['ke' + 'ys'](descriptor).forEach(function (key) {
            desc[key] = descriptor[key];
        });
        desc.enumerable = !!desc.enumerable;
        desc.configurable = !!desc.configurable;

        if ('value' in desc || desc.initializer) {
            desc.writable = true;
        }

        desc = decorators.slice().reverse().reduce(function (desc, decorator) {
            return decorator(target, property, desc) || desc;
        }, desc);

        if (context && desc.initializer !== void 0) {
            desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
            desc.initializer = undefined;
        }

        if (desc.initializer === void 0) {
            Object['define' + 'Property'](target, property, desc);
            desc = null;
        }

        return desc;
    }

    return {
        setters: [function (_) {}, function (_2) {
            firebase = _2.default;
        }, function (_3) {
            merge = _3.default;
        }, function (_d2) {
            extend = _d2.default;
        }, function (_e2) {
            camelCase = _e2.default;
        }, function (_f) {
            isEmpty = _f.default;
        }, function (_e3) {
            mergeWith = _e3.default;
        }, function (_f2) {
            cloneDeepWith = _f2.default;
        }, function (_4) {}, function (_5) {}, function (_6) {}, function (_7) {}, function (_d3) {
            ElementOutput = _d3.default;
        }, function (_8) {
            Bowser = _8.default;
        }, function (_9) {
            hash = _9.default;
        }, function (_10) {
            FastClick = _10.default;
        }, function (_11) {
            Engine = _11.default;
        }, function (_b) {
            Context = _b.default;
        }, function (_c) {
            AnimationController = _c.default;
        }, function (_12) {
            Surface = _12.default;
        }, function (_13) {
            Timer = _13.default;
        }, function (_14) {
            Easing = _14.default;
        }, function (_15) {
            cloneDeep = _15.default;
        }, function (_d4) {
            FamousView = _d4.default;
        }, function (_e4) {
            LayoutController = _e4.default;
        }, function (_fa) {
            LayoutUtility = _fa.default;
        }, function (_16) {
            ImageSurface = _16.default;
        }, function (_17) {
            EventEmitter = _17.default;
        }, function (_a) {
            isEqual = _a.default;
        }, function (_ee) {
            findIndex = _ee.default;
        }, function (_ef) {
            OrderedHashMap = _ef.default;
        }, function (_a2) {
            Transitionable = _a2.default;
        }, function (_f3) {
            Draggable = _f3.default;
        }, function (_a3) {
            ContainerSurface = _a3.default;
        }, function (_18) {
            Transform = _18.default;
        }, function (_f4) {
            GenericSync = _f4.default;
        }, function (_f5) {
            MouseSync = _f5.default;
        }, function (_f6) {
            TouchSync = _f6.default;
        }, function (_f7) {
            RenderNode = _f7.default;
        }, function (_19) {
            Modifier = _19.default;
        }, function (_20) {
            FlexScrollView = _20.default;
        }, function (_21) {}, function (_22) {}, function (_23) {}, function (_24) {}],
        execute: function () {
            _classCallCheck = function (instance, Constructor) {
                if (!(instance instanceof Constructor)) {
                    throw new TypeError("Cannot call a class as a function");
                }
            };

            _createClass = function () {
                function defineProperties(target, props) {
                    for (var i = 0; i < props.length; i++) {
                        var descriptor = props[i];
                        descriptor.enumerable = descriptor.enumerable || false;
                        descriptor.configurable = true;
                        if ("value" in descriptor) descriptor.writable = true;
                        Object.defineProperty(target, descriptor.key, descriptor);
                    }
                }

                return function (Constructor, protoProps, staticProps) {
                    if (protoProps) defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) defineProperties(Constructor, staticProps);
                    return Constructor;
                };
            }();

            _possibleConstructorReturn = function (self, call) {
                if (!self) {
                    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                }

                return call && (typeof call === "object" || typeof call === "function") ? call : self;
            };

            _inherits = function (subClass, superClass) {
                if (typeof superClass !== "function" && superClass !== null) {
                    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
                }

                subClass.prototype = Object.create(superClass && superClass.prototype, {
                    constructor: {
                        value: subClass,
                        enumerable: false,
                        writable: true,
                        configurable: true
                    }
                });
                if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
            };

            _extends = Object.assign || function (target) {
                for (var i = 1; i < arguments.length; i++) {
                    var source = arguments[i];

                    for (var key in source) {
                        if (Object.prototype.hasOwnProperty.call(source, key)) {
                            target[key] = source[key];
                        }
                    }
                }

                return target;
            };

            _slicedToArray = function () {
                function sliceIterator(arr, i) {
                    var _arr = [];
                    var _n = true;
                    var _d = false;
                    var _e = undefined;

                    try {
                        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                            _arr.push(_s.value);

                            if (i && _arr.length === i) break;
                        }
                    } catch (err) {
                        _d = true;
                        _e = err;
                    } finally {
                        try {
                            if (!_n && _i["return"]) _i["return"]();
                        } finally {
                            if (_d) throw _e;
                        }
                    }

                    return _arr;
                }

                return function (arr, i) {
                    if (Array.isArray(arr)) {
                        return arr;
                    } else if (Symbol.iterator in Object(arr)) {
                        return sliceIterator(arr, i);
                    } else {
                        throw new TypeError("Invalid attempt to destructure non-iterable instance");
                    }
                };
            }();

            DataSource = function () {

                /**
                 * @param {String} path Full path to resource in remote data storage.
                 * @return {DataSource} DataSource instance.
                 **/
                function DataSource(path) {
                    _classCallCheck(this, DataSource);

                    this._dataReference = null;
                }

                /**
                 * Indicate that the DataSource can be inherited when instantiating a list of models. By
                 * default we indicate false, which should trigger data model instantiation to create unique
                 * DataSource references to each model either in array or directly.
                 *
                 * If set to false, model updates trigger creation of a new DataSource instance. (default)
                 *
                 * @returns {Boolean} Whether the DataSource is inheritable.
                 */

                _createClass(DataSource, [{
                    key: "toString",

                    /**
                     * Returns the full path to this dataSource's source on the remote storage provider.
                     * @returns {String} Full resource path.
                     */
                    value: function toString() {}

                    /**
                     * Returns a dataSource reference to the given child branch of the current dataSource.
                     * @param {String} childName Child branch name.
                     * @param {Object} options Optional: additional options to pass to new DataSource instance.
                     * @returns {DataSource} New dataSource instance pointing to the given child branch.
                     */

                }, {
                    key: "child",
                    value: function child(childName) {
                        var options = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
                    }

                    /**
                     * Returns the full URL to the path on the dataSource. Functionally identical to toString().
                     * @returns {String} Full resource path.
                     */

                }, {
                    key: "path",
                    value: function path() {}

                    /**
                     * Returns the name of the current branch in the path on the dataSource.
                     * @returns {String} Current branch name.
                     */

                }, {
                    key: "key",
                    value: function key() {}

                    /**
                     * Writes newData to the path this dataSource was constructed with.
                     * @param {Object} newData Data to write to dataSource.
                     * @returns {Promise} Resolves when write to server is complete.
                     */

                }, {
                    key: "set",
                    value: function set(newData) {
                        return Promise.resolve();
                    }

                    /**
                     * Removes the object and all underlying children that this dataSource points to.
                     * @returns {void}
                     */

                }, {
                    key: "remove",
                    value: function remove() {}

                    /**
                     * Writes newData to the path this dataSource was constructed with, appended by a random UID generated by
                     * the dataSource.
                     * @param {Object} newData New data to append to dataSource.
                     * @returns {void}
                     */

                }, {
                    key: "push",
                    value: function push(newData) {}

                    /**
                     * Writes newData with given priority (ordering) to the path this dataSource was constructed with.
                     * @param {Object} newData New data to set.
                     * @param {String|Number} priority Priority value by which the data should be ordered.
                     * @returns {Promise} Resolves when write to server is complete.
                     */

                }, {
                    key: "setWithPriority",
                    value: function setWithPriority(newData, priority) {
                        return Promise.resolve();
                    }

                    /**
                     * Sets the priority (ordering) of an object on a given dataSource.
                     * @param {String|Number} newPriority New priority value to order data by.
                     * @returns {void}
                     */

                }, {
                    key: "setPriority",
                    value: function setPriority(newPriority) {}

                    /**
                     * Orders the DataSource's childs by the value in child[key].
                     * @param {String} childKey Key of the field to order by.
                     * @returns {DataSource} New dataSource instance.
                     */

                }, {
                    key: "orderByChild",
                    value: function orderByChild(childKey) {}

                    /**
                     * Orders the DataSource's childs by their key names, ignoring their priority.
                     * @returns {DataSource} New dataSource instance.
                     */

                }, {
                    key: "orderByKey",
                    value: function orderByKey() {}

                    /**
                     * Orders the DataSource's childs by their values, ignoring their priority.
                     * @returns {DataSource} New dataSource instance.
                     */

                }, {
                    key: "orderByValue",
                    value: function orderByValue() {}

                    /**
                     * Returns a new dataSource reference that will limit the subscription to only the first given amount items.
                     * @param {Number} amount Amount of items to limit the dataSource to.
                     * @returns {DataSource} New dataSource instance.
                     */

                }, {
                    key: "limitToFirst",
                    value: function limitToFirst(amount) {}

                    /**
                     * Returns a new dataSource reference that will limit the subscription to only the last given amount items.
                     * @param {Number} amount Amount of items to limit the dataSource to.
                     * @returns {DataSource} New dataSource instance.
                     */

                }, {
                    key: "limitToLast",
                    value: function limitToLast(amount) {}

                    /**
                     * Authenticates all instances of this DataSource with the given OAuth provider and credentials.
                     * @param {String} provider google, facebook, github, or twitter
                     * @param {String|Object} credentials Access token string, or object with key/value pairs with e.g. OAuth 1.1 credentials.
                     * @param {Function} onComplete Callback, executed when login is completed either successfully or erroneously.
                     * On error, first argument is error message.
                     * On success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires.
                     * @param {Object} options Optional, additional client arguments, such as configuring session persistence.
                     * @returns {void}
                     */

                }, {
                    key: "authWithOAuthToken",
                    value: function authWithOAuthToken(provider, credentials, onComplete, options) {}

                    /**
                     * Merges the current user with the specified provider.
                     * @param provider
                     * @returns {Authentication}
                     */

                }, {
                    key: "linkCurrentUserWithProvider",
                    value: function linkCurrentUserWithProvider(provider) {}

                    /**
                     * Creates a provider with the specified type
                     *
                     * @param {String} providerType Can be 'password' or 'facebook'
                     * @param {String|Object} credential if 'password' providerType, then an object {email:String,password:String}. If
                     * 'facebook' providerType, then a string containing the API token.
                     * @returns {Provider}
                     */

                }, {
                    key: "createProviderFromCredential",
                    value: function createProviderFromCredential(providerType, credential) {}

                    /**
                     * Authenticates all instances of this DataSource with a custom auth token or secret.
                     * @param {String} authToken Authentication token or secret.
                     * @param {Function} onComplete Callback, executed when login is completed either successfully or erroneously.
                     * On error, first argument is error message.
                     * On success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires.
                     * @param {Object} options Optional, additional client arguments, such as configuring session persistence.
                     * @returns {void}
                     */

                }, {
                    key: "authWithCustomToken",
                    value: function authWithCustomToken(authToken, onComplete, options) {}

                    /**
                     * Authenticates all instances of this DataSource with the given email/password credentials.
                     * @param {String|Object} credentials Object with key/value pairs {email: "value", password:"value"}.
                     * @param {Function} onComplete Callback, executed when login is completed either successfully or erroneously.
                     * On error, first argument is error message.
                     * On success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires.
                     * @param {Object} options Optional, additional client arguments, such as configuring session persistence.
                     * @returns {void}
                     */

                }, {
                    key: "authWithPassword",
                    value: function authWithPassword(credentials, onComplete, options) {}

                    /**
                     * Registers a user with instances of this DataSource with the given email/password credentials.
                     * @param {String|Object} credentials Object with key/value pairs {email: "value", password:"value"}.
                     * @param {Function} onComplete Callback, executed when login is completed either successfully or erroneously.
                     * On error, first argument is error message.
                     * On success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires.
                     * @returns {Promise}
                     */

                }, {
                    key: "registerWithPassword",
                    value: function registerWithPassword(credential) {}

                    /**
                     * Authenticates all instances of this DataSource as an anonymous user.
                     * @param {Function} onComplete Callback, executed when login is completed either successfully or erroneously.
                     * On error, first argument is error message.
                     * On success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires.
                     * @param {Object} options Optional, additional client arguments, such as configuring session persistence.
                     * @returns {void}
                     */

                }, {
                    key: "authAnonymously",
                    value: function authAnonymously(onComplete, options) {}

                    /**
                     * Fetches the current user's authentication state.
                     * If the user is authenticated, returns an object containing at least the fields uid, provider, auth, and expires.
                     * If the user is not authenticated, returns null.
                     * @returns {Object|null} User auth object.
                     */

                }, {
                    key: "getAuth",
                    value: function getAuth() {}

                    /**
                     * Logs out from the datasource, allowing to re-authenticate at a later time.
                     * @returns {void}
                     */

                }, {
                    key: "unauth",
                    value: function unauth() {}

                    /**
                     * Subscribe to an event emitted by the DataSource.
                     * @param {String} event Event type to subscribe to. Allowed values are: 'value', 'child_changed', 'child_added', 'child_removed', 'child_moved'.
                     * @param {Function} handler Function to call when the subscribed event is emitted.
                     * @param {Object} context Context to set 'this' to when calling the handler function.
                     */

                }, {
                    key: "on",
                    value: function on(event, handler, context) {}

                    /**
                     * Subscribe to an event emitted by the DataSource once, and then immediately unsubscribe.
                     * @param {String} event Event type to subscribe to. Allowed values are: 'value', 'child_changed', 'child_added', 'child_removed', 'child_moved'.
                     * @param {Function} handler Function to call when the subscribed event is emitted.
                     * @param {Object} context Context to set 'this' to when calling the handler function.
                     */

                }, {
                    key: "once",
                    value: function once(event, handler, context) {}

                    /**
                     * Unsubscribe to a previously subscribed event. If no handler or context is given, all handlers for
                     * the given event are removed. If no parameters are given at all, all event types will have their handlers removed.
                     * @param {String} event Event type to unsubscribe from. Allowed values are: 'value', 'child_changed', 'child_added', 'child_removed', 'child_moved'.
                     * @param {Function} handler Optional: Function that was used in previous subscription.
                     */

                }, {
                    key: "off",
                    value: function off(event, handler) {}

                    /**
                     * Sets the callback triggered when dataSource updates the data.
                     * @param {Function} callback Callback function to call when the subscribed data value changes.
                     * @returns {void}
                     **/

                }, {
                    key: "setValueChangedCallback",
                    value: function setValueChangedCallback(callback) {}

                    /**
                     * Removes the callback set to trigger when dataSource updates the data.
                     * @returns {void}
                     **/

                }, {
                    key: "removeValueChangedCallback",
                    value: function removeValueChangedCallback() {}

                    /**
                     * Set the callback triggered when dataSource adds a data element.
                     * @param {Function} callback Callback function to call when a new data child is added.
                     * @returns {void}
                     **/

                }, {
                    key: "setChildAddedCallback",
                    value: function setChildAddedCallback(callback) {}

                    /**
                     * Removes the callback set to trigger when dataSource adds a data element.
                     * @returns {void}
                     **/

                }, {
                    key: "removeChildAddedCallback",
                    value: function removeChildAddedCallback() {}

                    /**
                     * Set the callback triggered when dataSource changes a data element.
                     * @param {Function} callback Callback function to call when a child is changed.
                     * @returns {void}
                     **/

                }, {
                    key: "setChildChangedCallback",
                    value: function setChildChangedCallback(callback) {}

                    /**
                     * Removes the callback set to trigger when dataSource changes a data element.
                     * @returns {void}
                     **/

                }, {
                    key: "removeChildChangedCallback",
                    value: function removeChildChangedCallback() {}

                    /**
                     * Set the callback triggered when dataSource moves a data element.
                     * @param {Function} callback Callback function to call when a child is moved.
                     * @returns {void}
                     **/

                }, {
                    key: "setChildMovedCallback",
                    value: function setChildMovedCallback(callback) {}

                    /**
                     * Removes the callback set to trigger when dataSource moves a data element.
                     * @returns {void}
                     **/

                }, {
                    key: "removeChildMovedCallback",
                    value: function removeChildMovedCallback() {}

                    /**
                     * Set the callback triggered when dataSource removes a data element.
                     * @param {Function} callback Callback function to call when a child is removed.
                     * @returns {void}
                     **/

                }, {
                    key: "setChildRemovedCallback",
                    value: function setChildRemovedCallback(callback) {}

                    /**
                     * Removes the callback set to trigger when dataSource removes a data element.
                     * @returns {void}
                     **/

                }, {
                    key: "removeChildRemovedCallback",
                    value: function removeChildRemovedCallback() {}

                    /**
                     * Resolves when the DataSource is synchronized to the server
                     * @returns {Promise} Resolves when the DataSource is synchronized
                     */

                }, {
                    key: "synced",
                    value: function synced() {}

                    /**
                     * Performs an atomic transaction
                     * @param {Function} transactionFunction A function that takes the current value as a single argument, and
                     * returns the new value.
                     * @returns {Promise} Resolves the new value when the transaction is finished
                     */

                }, {
                    key: "atomicTransaction",
                    value: function atomicTransaction(transactionFunction) {}
                }, {
                    key: "inheritable",
                    get: function get() {
                        return false;
                    }
                }]);

                return DataSource;
            }();

            ObjectHelper = function () {
                function ObjectHelper() {
                    _classCallCheck(this, ObjectHelper);
                }

                _createClass(ObjectHelper, null, [{
                    key: 'hideMethodsAndPrivatePropertiesFromObject',

                    /* Sets enumerability of methods and all properties starting with '_' on an object to false,
                     * effectively hiding them from for(x in object) loops.   */
                    value: function hideMethodsAndPrivatePropertiesFromObject(object) {
                        for (var propName in object) {

                            var prototype = Object.getPrototypeOf(object);
                            var descriptor = prototype ? Object.getOwnPropertyDescriptor(prototype, propName) : undefined;
                            if (descriptor && (descriptor.get || descriptor.set) && !propName.startsWith('_')) {
                                /* This is a public getter/setter, so we can skip it */
                                continue;
                            }

                            var property = object[propName];
                            if (typeof property === 'function' || propName.startsWith('_')) {
                                ObjectHelper.hidePropertyFromObject(object, propName);
                            }
                        }
                    }

                    /* Sets enumerability of methods on an object to false,
                     * effectively hiding them from for(x in object) loops.   */

                }, {
                    key: 'hideMethodsFromObject',
                    value: function hideMethodsFromObject(object) {
                        for (var propName in object) {
                            var property = object[propName];
                            if (typeof property === 'function') {
                                ObjectHelper.hidePropertyFromObject(object, propName);
                            }
                        }
                    }

                    /* Sets enumerability of an object's property to false,
                     * effectively hiding it from for(x in object) loops.   */

                }, {
                    key: 'hidePropertyFromObject',
                    value: function hidePropertyFromObject(object, propName) {
                        var prototype = object;
                        var descriptor = Object.getOwnPropertyDescriptor(object, propName);
                        while (!descriptor) {
                            prototype = Object.getPrototypeOf(prototype);

                            if (prototype.constructor.name === 'Object' || prototype.constructor.name === 'Array') {
                                return;
                            }

                            descriptor = Object.getOwnPropertyDescriptor(prototype, propName);
                        }
                        descriptor.enumerable = false;
                        Object.defineProperty(prototype, propName, descriptor);
                        Object.defineProperty(object, propName, descriptor);
                    }

                    /* Sets enumerability of all of an object's properties (including methods) to false,
                     * effectively hiding them from for(x in object) loops.   */

                }, {
                    key: 'hideAllPropertiesFromObject',
                    value: function hideAllPropertiesFromObject(object) {
                        for (var propName in object) {
                            ObjectHelper.hidePropertyFromObject(object, propName);
                        }
                    }

                    /* Adds a property with enumerable: false to object */

                }, {
                    key: 'addHiddenPropertyToObject',
                    value: function addHiddenPropertyToObject(object, propName, prop) {
                        var writable = arguments.length <= 3 || arguments[3] === undefined ? true : arguments[3];
                        var useAccessors = arguments.length <= 4 || arguments[4] === undefined ? true : arguments[4];

                        return ObjectHelper.addPropertyToObject(object, propName, prop, false, writable, undefined, useAccessors);
                    }

                    /* Adds a property with given enumerability and writability to object. If writable, uses a hidden object.shadow
                     * property to save the actual data state, and object[propName] with gettter/setter to the shadow. Allows for a
                     * callback to be triggered upon every set.   */

                }, {
                    key: 'addPropertyToObject',
                    value: function addPropertyToObject(object, propName, prop) {
                        var enumerable = arguments.length <= 3 || arguments[3] === undefined ? true : arguments[3];
                        var writable = arguments.length <= 4 || arguments[4] === undefined ? true : arguments[4];
                        var setCallback = arguments.length <= 5 || arguments[5] === undefined ? null : arguments[5];
                        var useAccessors = arguments.length <= 6 || arguments[6] === undefined ? true : arguments[6];

                        /* If property is non-writable, we won't need a shadowed prop for the getters/setters */
                        if (!writable || !useAccessors) {
                            var descriptor = {
                                enumerable: enumerable,
                                writable: writable,
                                value: prop
                            };
                            Object.defineProperty(object, propName, descriptor);
                        } else {
                            ObjectHelper.addGetSetPropertyWithShadow(object, propName, prop, enumerable, writable, setCallback);
                        }
                    }

                    /* Adds given property to the object with get() and set() accessors, and saves actual data in object.shadow */

                }, {
                    key: 'addGetSetPropertyWithShadow',
                    value: function addGetSetPropertyWithShadow(object, propName, prop) {
                        var enumerable = arguments.length <= 3 || arguments[3] === undefined ? true : arguments[3];
                        var writable = arguments.length <= 4 || arguments[4] === undefined ? true : arguments[4];
                        var setCallback = arguments.length <= 5 || arguments[5] === undefined ? null : arguments[5];

                        ObjectHelper.buildPropertyShadow(object, propName, prop);
                        ObjectHelper.buildGetSetProperty(object, propName, enumerable, writable, setCallback);
                    }

                    /* Creates or extends object.shadow to contain a property with name propName */

                }, {
                    key: 'buildPropertyShadow',
                    value: function buildPropertyShadow(object, propName, prop) {
                        var shadow = {};

                        try {
                            /* If a shadow property already exists, we should extend instead of overwriting it. */
                            if ('shadow' in object) {
                                shadow = object.shadow;
                            }
                        } catch (error) {
                            return;
                        }

                        shadow[propName] = prop;
                        Object.defineProperty(object, 'shadow', {
                            writable: true,
                            configurable: true,
                            enumerable: false,
                            value: shadow
                        });
                    }

                    /* Creates a property on object that has a getter that fetches from object.shadow,
                     * and a setter that sets object.shadow as well as triggers setCallback() if set.   */

                }, {
                    key: 'buildGetSetProperty',
                    value: function buildGetSetProperty(object, propName) {
                        var enumerable = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];
                        var writable = arguments.length <= 3 || arguments[3] === undefined ? true : arguments[3];
                        var setCallback = arguments.length <= 4 || arguments[4] === undefined ? null : arguments[4];

                        var descriptor = {
                            enumerable: enumerable,
                            configurable: true,
                            get: function get() {
                                return object.shadow[propName];
                            },
                            set: function set(value) {
                                if (writable) {
                                    object.shadow[propName] = value;
                                    if (setCallback && typeof setCallback === 'function') {
                                        setCallback({
                                            propertyName: propName,
                                            newValue: value
                                        });
                                    }
                                } else {
                                    throw new ReferenceError('Attempted to write to non-writable property ' + propName + '.');
                                }
                            }
                        };

                        Object.defineProperty(object, propName, descriptor);
                    }

                    /* Calls object['functionName'].bind(bindTarget) on all of object's functions. */

                }, {
                    key: 'bindAllMethods',
                    value: function bindAllMethods(object, bindTarget) {
                        /* TODO: There is a bug here that will bind properties that were defined through this.x = <something>. This is
                         * the desired effect because this.x.prototype will be redefined */

                        /* Bind all current object's methods to bindTarget. */
                        var methodDescriptors = ObjectHelper.getMethodDescriptors(object);
                        for (var methodName in methodDescriptors) {
                            /* Skip the constructor as it serves as no purpose and it breaks the minification */
                            if (methodName === 'constructor') {
                                continue;
                            }
                            var propertyDescriptor = methodDescriptors[methodName];
                            if (propertyDescriptor && propertyDescriptor.get) {
                                propertyDescriptor.get = propertyDescriptor.get.bind(bindTarget);
                            } else if (propertyDescriptor.set) {
                                propertyDescriptor.set = propertyDescriptor.set.bind(bindTarget);
                            } else if (propertyDescriptor.writable) {
                                propertyDescriptor.value = propertyDescriptor.value.bind(bindTarget);
                            }
                            Object.defineProperty(object, methodName, propertyDescriptor);
                        }
                    }
                }, {
                    key: 'getMethodDescriptors',
                    value: function getMethodDescriptors(object) {

                        var methodDescriptors = {};

                        for (var _iterator = Object.getOwnPropertyNames(object), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                            var _ref;

                            if (_isArray) {
                                if (_i >= _iterator.length) break;
                                _ref = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) break;
                                _ref = _i.value;
                            }

                            var propertyName = _ref;

                            var propertyDescriptor = Object.getOwnPropertyDescriptor(object, propertyName) || {};
                            /* Initializers can be ignored since they are bound anyways */
                            if (!propertyDescriptor.initializer && (propertyDescriptor.get || typeof object[propertyName] === 'function')) {
                                methodDescriptors[propertyName] = propertyDescriptor;
                            }
                        }

                        /* Recursively find prototype's methods until we hit the Object prototype. */
                        var prototype = Object.getPrototypeOf(object);
                        if (prototype.constructor.name !== 'Object' && prototype.constructor.name !== 'Array') {
                            methodDescriptors = extend(ObjectHelper.getMethodDescriptors(prototype), methodDescriptors);
                        }

                        return methodDescriptors;
                    }

                    /* Returns a new object with all enumerable properties of the given object */

                }, {
                    key: 'getEnumerableProperties',
                    value: function getEnumerableProperties(object) {

                        return ObjectHelper.getPrototypeEnumerableProperties(object, object);
                    }
                }, {
                    key: 'getPrototypeEnumerableProperties',
                    value: function getPrototypeEnumerableProperties(rootObject, prototype) {
                        var result = {};

                        /* Collect all propertise in the prototype's keys() enumerable */
                        var propNames = Object.keys(prototype);
                        for (var _iterator2 = propNames, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
                            var _ref2;

                            if (_isArray2) {
                                if (_i2 >= _iterator2.length) break;
                                _ref2 = _iterator2[_i2++];
                            } else {
                                _i2 = _iterator2.next();
                                if (_i2.done) break;
                                _ref2 = _i2.value;
                            }

                            var name = _ref2;

                            var value = rootObject[name];

                            /* Value must be a non-null primitive or object to be pushable to a dataSource */
                            if (value !== null && value !== undefined && typeof value !== 'function') {
                                if (typeof value === 'object' && !(value instanceof Array)) {
                                    result[name] = ObjectHelper.getEnumerableProperties(value);
                                } else {
                                    result[name] = value;
                                }
                            }
                        }

                        /* Collect all properties with accessors (getters/setters) that are enumerable, too */
                        var descriptorNames = Object.getOwnPropertyNames(prototype);
                        descriptorNames = descriptorNames.filter(function (name) {
                            return propNames.indexOf(name) < 0;
                        });
                        for (var _iterator3 = descriptorNames, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
                            var _ref3;

                            if (_isArray3) {
                                if (_i3 >= _iterator3.length) break;
                                _ref3 = _iterator3[_i3++];
                            } else {
                                _i3 = _iterator3.next();
                                if (_i3.done) break;
                                _ref3 = _i3.value;
                            }

                            var _name = _ref3;

                            var descriptor = Object.getOwnPropertyDescriptor(prototype, _name);
                            if (descriptor && descriptor.enumerable) {
                                var _value = rootObject[_name];

                                /* Value must be a non-null primitive or object to be pushable to a dataSource */
                                if (_value !== null && _value !== undefined && typeof _value !== 'function') {
                                    if (typeof _value === 'object' && !(_value instanceof Array)) {
                                        result[_name] = ObjectHelper.getEnumerableProperties(_value);
                                    } else {
                                        result[_name] = _value;
                                    }
                                }
                            }
                        }

                        /* Collect all enumerable properties in the prototype's prototype as well */
                        var superPrototype = Object.getPrototypeOf(prototype);
                        var ignorableTypes = ['Object', 'Array', 'EventEmitter'];
                        if (ignorableTypes.indexOf(superPrototype.constructor.name) === -1) {
                            var prototypeEnumerables = ObjectHelper.getPrototypeEnumerableProperties(rootObject, superPrototype);
                            merge(result, prototypeEnumerables);
                        }

                        return result;
                    }
                }]);

                return ObjectHelper;
            }();

            ownKeys = undefined && undefined.Reflect && Reflect.ownKeys ? Reflect.ownKeys : function ownKeys(O) {
                var keys = Object.getOwnPropertyNames(O);
                if (Object.getOwnPropertySymbols) return keys.concat(Object.getOwnPropertySymbols(O));
                return keys;
            };

            SuperConstructor = function SuperConstructor() {
                _classCallCheck(this, SuperConstructor);
            };

            TransientScope = function TransientScope() {
                _classCallCheck(this, TransientScope);
            };

            Inject = function Inject() {
                _classCallCheck(this, Inject);

                for (var _len = arguments.length, tokens = Array(_len), _key = 0; _key < _len; _key++) {
                    tokens[_key] = arguments[_key];
                }

                this.tokens = tokens;
            };

            Provide = function Provide(token) {
                _classCallCheck(this, Provide);

                this.token = token;
            };

            ClassProvider = function ClassProvider() {
                _classCallCheck(this, ClassProvider);
            };

            FactoryProvider = function FactoryProvider() {
                _classCallCheck(this, FactoryProvider);
            };

            FirebaseDataSource = (_dec = provide$1(DataSource), _dec(_class$1 = function (_DataSource) {
                _inherits(FirebaseDataSource, _DataSource);

                _createClass(FirebaseDataSource, [{
                    key: 'dataReference',
                    get: function get() {
                        return this._orderedDataReference;
                    },
                    set: function set(value) {
                        this._orderedDataReference = value;
                    }

                    /**
                     * @param {String} path Full path to resource in remote data storage.
                     * @return {FirebaseDataSource} FirebaseDataSource instance.
                     * @param {Object} options Optional: options to construct the DataSource with.
                     * @param {[key: String, value: String]} [options.equalTo] Optional, only subscribe to items with a certain value.
                     * @param {String} [options.orderBy] Optional, order all items received through the dataSource.
                     *                                   Options are: '.priority', '.value', or a string containing the child key to order by (e.g. 'MyModelProperty')
                     * @param {Number} [options.limitToFirst]   Optional, only subscribe to the first amount of entries.
                     * @param {Number} [options.limitToLast]    Optional, only subscribe to the last amount of entries.
                     * @param {Number} [options.startAt]        Optional, only subscribe to the entries from a certain value onwards
                     * @param {Number} [options.endAt]          Optional, only subscribe to the entries towards a certain value
                     * @param {Promise} [options.synced]        Optional, a promise to tell the data source that it is only synchronized after this promise is resolved
                     **/

                }]);

                function FirebaseDataSource(path) {
                    var options = arguments.length <= 1 || arguments[1] === undefined ? { orderBy: '.priority' } : arguments[1];

                    _classCallCheck(this, FirebaseDataSource);

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(FirebaseDataSource).call(this, path));

                    _this._onValueCallback = null;
                    _this._onAddCallback = null;
                    _this._onChangeCallback = null;
                    _this._onMoveCallback = null;
                    _this._onRemoveCallback = null;
                    _this._firebase = options.customFirebase || firebase;

                    _this._dataReference = _this._firebase.database().ref(path);
                    _this.handlers = {};
                    _this.options = combineOptions({ synced: Promise.resolve() }, options);
                    _this._synced = _this.options.synced;

                    /* Populate the orderedReference, which is the standard Firebase reference with an optional ordering
                     * defined. This needs to be saved seperately, because methods like child() and key() can't be called
                     * from the ordered reference, and must instead be performed on the standard reference. */

                    if (_this.options.orderBy && _this.options.orderBy === '.priority' && !_this.options.equalTo) {
                        _this._orderedDataReference = _this._dataReference.orderByPriority();
                    } else if (_this.options.orderBy && _this.options.orderBy === '.value') {
                        _this._orderedDataReference = _this._dataReference.orderByValue();
                    } else if (_this.options.orderBy && _this.options.orderBy !== '') {
                        _this._orderedDataReference = _this._dataReference.orderByChild(_this.options.orderBy);
                    } else if (_this.options.equalTo) {
                        var _this$options$equalTo = _slicedToArray(_this.options.equalTo, 2);

                        var key = _this$options$equalTo[0];
                        var value = _this$options$equalTo[1];

                        if (key === 'id') {
                            _this._orderedDataReference = _this._dataReference.orderByKey().equalTo(value);
                        } else {
                            _this._orderedDataReference = _this._dataReference.orderByChild(key).equalTo(value);
                        }
                    } else {
                        _this._orderedDataReference = _this._dataReference;
                    }

                    if (_this.options.startAt !== undefined) {
                        _this._orderedDataReference = _this._orderedDataReference.startAt(_this.options.startAt);
                    }
                    if (_this.options.endAt !== undefined) {
                        _this._orderedDataReference = _this._orderedDataReference.endAt(_this.options.endAt);
                    }

                    if (_this.options.limitToFirst !== undefined) {
                        _this._orderedDataReference = _this._orderedDataReference.limitToFirst(_this.options.limitToFirst);
                    } else if (_this.options.limitToLast !== undefined) {
                        _this._orderedDataReference = _this._orderedDataReference.limitToLast(_this.options.limitToLast);
                    }

                    /* Bind all local methods to the current object instance, so we can refer to "this"
                     * in the methods as expected, even when they're called from event handlers. */
                    ObjectHelper.bindAllMethods(_this, _this);
                    return _this;
                }

                /**
                 * Returns the full path to this dataSource's source on the remote storage provider.
                 * @returns {String} Full resource path.
                 */

                _createClass(FirebaseDataSource, [{
                    key: 'toString',
                    value: function toString() {
                        return this._dataReference.toString();
                    }

                    /**
                     * Resolves when the DataSource is synchronized to the server
                     * @returns {Promise} Resolves when the DataSource is synchronized
                     */

                }, {
                    key: 'synced',
                    value: function synced() {
                        return this._synced;
                    }

                    /**
                     * Returns a dataSource reference to the given child branch of the current datasource.
                     * @param {String} childName Child branch name.
                     * @param {Object} options Optional: additional options to pass to new DataSource instance.
                     * @returns {DataSource} New dataSource instance pointing to the given child branch.
                     */

                }, {
                    key: 'child',
                    value: function child(childName) {
                        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

                        return new FirebaseDataSource(this.path() + '/' + childName, _extends({ customFirebase: this.options.customFirebase }, options));
                    }

                    /**
                     * Returns the full URL to the path on the dataSource. Functionally identical to toString().
                     * @returns {String} Full resource path.
                     */

                }, {
                    key: 'path',
                    value: function path() {
                        var rootUrl = this.root();
                        var parentUrl = this.parent();

                        var relativePath = parentUrl.replace(rootUrl, '');
                        return relativePath + '/' + this.key();
                    }

                    /**
                     * Returns the name of the current branch in the path on the dataSource.
                     * @returns {String} Current branch name.
                     */

                }, {
                    key: 'key',
                    value: function key() {
                        return (this._dataReference.key || '').toString();
                    }

                    /**
                     * Returns the full URL to the parent of the current branch on the dataSource.
                     * @returns {String} Full resource path of parent.
                     */

                }, {
                    key: 'parent',
                    value: function parent() {
                        return (this._dataReference.parent || '').toString();
                    }

                    /**
                     * Returns the full URL to the root on the dataSource.
                     * @returns {String} Full resource path of root.
                     */

                }, {
                    key: 'root',
                    value: function root() {
                        return (this._dataReference.root || '').toString();
                    }

                    /**
                     * Writes newData to the path this dataSource was constructed with.
                     * @param {Object} newData Data to write to dataSource.
                     * @returns {Promise} Resolves when write to server is complete.
                     */

                }, {
                    key: 'set',
                    value: function set(newData) {
                        var completionPromise = this._dataReference.set(newData);
                        /* Append another promise to the chain to keep track of whether it's still synchronized */
                        this._synced = this._synced.then(function () {
                            return completionPromise;
                        });
                        return completionPromise;
                    }

                    /**
                     * Removes the object and all underlying children that this dataSource points to.
                     * @returns {void}
                     */

                }, {
                    key: 'remove',
                    value: function remove() {
                        return this._dataReference.remove();
                    }

                    /**
                     * Writes newData to the path this dataSource was constructed with, appended by a random UID generated by
                     * the dataSource.
                     * @param {Object} newData New data to append to dataSource.
                     * @returns {FirebaseDataSource} A new FirebaseDataSource pointing to the injected data.
                     */

                }, {
                    key: 'push',
                    value: function push() {
                        var newData = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                        newData = newData === undefined || newData === null ? {} : newData;
                        var pushResult = this._dataReference.push(newData);
                        return new FirebaseDataSource(this.path() + '/' + pushResult.key, {
                            synced: pushResult,
                            customFirebase: this.options.customFirebase
                        });
                    }

                    /**
                     * Writes newData with given priority (ordering) to the path this dataSource was constructed with.
                     * @param {Object} newData New data to set.
                     * @param {String|Number} priority Priority value by which the data should be ordered.
                     * @returns {Promise} Resolves when write to server is complete.
                     */

                }, {
                    key: 'setWithPriority',
                    value: function setWithPriority(newData, priority) {
                        /* Rethrow the error in order to be able to catch it higher up */
                        var completionPromise = this.dataReference.setWithPriority(newData, priority).catch(function (err) {
                            throw new Error(err);
                        });
                        /* Append another promise to the chain to keep track of whether it's still synchronized. Fail silently
                         * since we already have error handling above */
                        this._synced = this._synced.then(function () {
                            return completionPromise;
                        }).catch(function () {});
                        return completionPromise;
                    }

                    /**
                     * Sets the priority (ordering) of an object on a given dataSource.
                     * @param {String|Number} newPriority New priority value to order data by.
                     * @returns {void}
                     */

                }, {
                    key: 'setPriority',
                    value: function setPriority(newPriority) {
                        return this.dataReference.setPriority(newPriority);
                    }

                    /**
                     * Orders the DataSource's childs by the value in child[key].
                     * @param {String} childKey Key of the field to order by.
                     * @returns {DataSource} New dataSource instance.
                     */

                }, {
                    key: 'orderByChild',
                    value: function orderByChild(childKey) {
                        return new FirebaseDataSource(this.path(), merge({}, this.options, {
                            orderBy: childKey,
                            customFirebase: this.options.customFirebase
                        }));
                    }

                    /**
                     * Orders the DataSource's childs by their key names, ignoring their priority.
                     * @returns {DataSource} New dataSource instance.
                     */

                }, {
                    key: 'orderByKey',
                    value: function orderByKey() {
                        return new FirebaseDataSource(this.path(), merge({}, this.options, {
                            orderBy: '.key',
                            customFirebase: this.options.customFirebase
                        }));
                    }

                    /**
                     * Orders the DataSource's childs by their values, ignoring their priority.
                     * @returns {DataSource} New dataSource instance.
                     */

                }, {
                    key: 'orderByValue',
                    value: function orderByValue() {
                        return new FirebaseDataSource(this.path(), merge({}, this.options, {
                            orderBy: '.value',
                            customFirebase: this.options.customFirebase
                        }));
                    }

                    /**
                     * Returns a new dataSource reference that will limit the subscription to only the first given amount items.
                     * @param {Number} amount Amount of items to limit the dataSource to.
                     * @returns {DataSource} New dataSource instance.
                     */

                }, {
                    key: 'limitToFirst',
                    value: function limitToFirst(amount) {
                        return new FirebaseDataSource(this.path(), merge({}, this.options, {
                            limitToFirst: amount,
                            customFirebase: this.options.customFirebase
                        }));
                    }

                    /**
                     * Returns a new dataSource reference that will limit the subscription to only the last given amount items.
                     * @param {Number} amount Amount of items to limit the dataSource to.
                     * @returns {DataSource} New dataSource instance.
                     */

                }, {
                    key: 'limitToLast',
                    value: function limitToLast(amount) {
                        return new FirebaseDataSource(this.path(), merge({}, this.options, { limitToLast: amount }));
                    }

                    /**
                     * Authenticates all instances of this DataSource with the given OAuth provider and credentials.
                     * @param {String} provider google, facebook, github, or twitter
                     * @param {String|Object} credentials Access token string, or object with key/value pairs with e.g. OAuth 1.1 credentials.
                     * @param {Function} onComplete Callback, executed when login is completed either successfully or erroneously.
                     * On error, first argument is error message.
                     * On success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires.
                     * @returns {Promise} A promise that resolves after successful authentication.
                     */

                }, {
                    key: 'authWithOAuthToken',
                    value: function authWithOAuthToken(provider, credentials, onComplete) {
                        var providerObject = this.createProviderFromCredential(provider, credentials);
                        return this._firebase.auth().signInWithCredential(providerObject).then(function (user) {
                            if (onComplete) {
                                onComplete(user);
                            }
                            return user;
                        });
                    }

                    /**
                     * Creates a provider with the specified type
                     *
                     * @param {String} providerType Can be 'password' or 'facebook'
                     * @param {String|Object} credential if 'password' providerType, then an object {email:String,password:String}. If
                     * 'facebook' providerType, then a string containing the API token.
                     * @returns {Provider}
                     */

                }, {
                    key: 'createProviderFromCredential',
                    value: function createProviderFromCredential(providerType, credential) {
                        var providerObject = void 0;
                        switch (providerType) {
                            case 'password':
                                providerObject = this._firebase.auth.EmailAuthProvider.credential(credential.email, credential.password);
                                break;
                            case 'facebook':
                                providerObject = this._firebase.auth.FacebookAuthProvider.credential(credential);
                                break;
                            //TODO: Add more here
                        }
                        return providerObject;
                    }

                    /**
                     * Merges the current user with the specified provider.
                     * @param {Provider} provider
                     * @returns {Authentication}
                     */

                }, {
                    key: 'linkCurrentUserWithProvider',
                    value: function linkCurrentUserWithProvider(provider) {
                        return this._firebase.auth().currentUser.link(provider);
                    }

                    /**
                     * Authenticates all instances of this DataSource with a custom auth token or secret.
                     * @param {String} authToken Authentication token or secret.
                     * @param {Function} onCxomplete Callback, executed when login is completed either successfully or erroneously.
                     * On error, first argument is error message.
                     * On success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires.
                     * @returns {Promise} A promise that resolves after successful authentication.
                     */

                }, {
                    key: 'authWithCustomToken',
                    value: function authWithCustomToken(authToken, onComplete) {
                        return this._firebase.auth().signInWithCustomToken(authToken).then(function (user) {
                            if (onComplete) {
                                onComplete(user);
                            }
                            return user;
                        });
                    }

                    /**
                     * Registers a user with instances of this DataSource with the given email/password credentials.
                     * @param {String|Object} credentials Object with key/value pairs {email: "value", password:"value"}.
                     * @param {Function} onComplete Callback, executed when login is completed either successfully or erroneously.
                     * On error, first argument is error message.
                     * On success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires.
                     * @returns {Promise}
                     */

                }, {
                    key: 'registerWithPassword',
                    value: function registerWithPassword(credentials, onComplete) {
                        return this._firebase.auth().createUserWithEmailAndPassword(credentials.email, credentials.password);
                    }

                    /**
                     * Authenticates all instances of this DataSource with the given email/password credentials.
                     * @param {String|Object} credentials Object with key/value pairs {email: "value", password:"value"}.
                     * @param {Function} onComplete Callback, executed when login is completed either successfully or erroneously.
                     * On error, first argument is error message.
                     * On success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires.
                     * @returns {Promise} A promise that resolves after successful authentication.
                     */

                }, {
                    key: 'authWithPassword',
                    value: function authWithPassword(credentials, onComplete) {
                        return this._firebase.auth().signInWithEmailAndPassword(credentials.email, credentials.password).then(function (user) {
                            if (onComplete) {
                                onComplete(user);
                            }
                            return user;
                        });
                    }

                    /**
                     * Authenticates all instances of this DataSource as an anonymous user.
                     * @param {Function} onComplete Callback, executed when login is completed either successfully or erroneously.
                     * On error, first argument is error message.
                     * On success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires.
                     * @param {Object} options Optional, additional client arguments, such as configuring session persistence.
                     * @returns {Promise} A promise that resolves after successful authentication.
                     */

                }, {
                    key: 'authAnonymously',
                    value: function authAnonymously(options) {
                        return this._firebase.auth().signInAnonymously();
                    }

                    /**
                     * Fetches the current user's authentication state.
                     * If the user is authenticated, returns an object containing at least the fields uid, provider, auth, and expires.
                     * If the user is not authenticated, returns null.
                     * @returns {Object|null} User auth object.
                     */

                }, {
                    key: 'getAuth',
                    value: function getAuth() {
                        var _this2 = this;

                        var firebaseAuth = this._firebase.auth();
                        var currentUser = firebaseAuth.currentUser;

                        if (!this._authDataPresent) {
                            if (currentUser) {
                                this._authDataPresent = true;
                                return Promise.resolve(currentUser);
                            } else {
                                return new Promise(function (resolve) {
                                    firebaseAuth.onAuthStateChanged(function (newUser) {
                                        _this2._authDataPresent = true;
                                        resolve(newUser);
                                    });
                                });
                            }
                        } else {
                            return Promise.resolve(currentUser);
                        }
                    }

                    /**
                     * Logs out from the datasource, allowing to re-authenticate at a later time.
                     * @returns {void}
                     */

                }, {
                    key: 'unauth',
                    value: function unauth() {
                        return this._firebase.auth().signOut();
                    }

                    /**
                     * Subscribe to an event emitted by the DataSource.
                     * @param {String} event Event type to subscribe to. Allowed values are: 'value', 'child_changed', 'child_added', 'child_removed', 'child_moved'.
                     * @param {Function} handler Function to call when the subscribed event is emitted.
                     * @param {Object} context Context to set 'this' to when calling the handler function.
                     * @returns {void}
                     */

                }, {
                    key: 'on',
                    value: function on(event, handler) {
                        var context = arguments.length <= 2 || arguments[2] === undefined ? this : arguments[2];

                        var boundHandler = this.handlers[handler] = handler.bind(this);
                        this._orderedDataReference.on(event, boundHandler);
                    }

                    /**
                     * Subscribe to an event emitted by the DataSource once, and then immediately unsubscribe again once it has been emitted a single time.
                     * @param {String} event Event type to subscribe to. Allowed values are: 'value', 'child_changed', 'child_added', 'child_removed', 'child_moved'.
                     * @param {Function} handler Function to call when the subscribed event is emitted.
                     * @param {Object} context Context to set 'this' to when calling the handler function.
                     * @returns {void}
                     */

                }, {
                    key: 'once',
                    value: function once(event, handler) {
                        var context = arguments.length <= 2 || arguments[2] === undefined ? this : arguments[2];

                        function onceWrapper() {
                            handler.call.apply(handler, [context].concat(Array.prototype.slice.call(arguments)));
                            this.off(event, onceWrapper);
                        }

                        return this.on(event, onceWrapper, this);
                    }

                    /**
                     * Unsubscribe to a previously subscribed event. If no handler or context is given, all handlers for
                     * the given event are removed. If no parameters are given at all, all event types will have their handlers removed.
                     * @param {String} event Event type to unsubscribe from. Allowed values are: 'value', 'child_changed', 'child_added', 'child_removed', 'child_moved'.
                     * @param {Function} handler Optional: Function that was used in previous subscription.
                     * @returns {void}
                     */

                }, {
                    key: 'off',
                    value: function off(event, handler) {
                        var boundHandler = this.handlers[handler];
                        this._orderedDataReference.off(event, boundHandler);
                    }

                    /**
                     * Sets the callback triggered when dataSource updates the data.
                     * @param {Function} callback Callback function to call when the subscribed data value changes.
                     * @deprecated Use the on() method instead.
                     * @returns {void}
                     **/

                }, {
                    key: 'setValueChangedCallback',
                    value: function setValueChangedCallback(callback) {
                        this._onValueCallback = callback;
                        this.on('value', callback);
                    }

                    /**
                     * Removes the callback set to trigger when dataSource updates the data.
                     * @deprecated Use the off() method instead.
                     * @returns {void}
                     **/

                }, {
                    key: 'removeValueChangedCallback',
                    value: function removeValueChangedCallback() {
                        if (this._onValueCallback) {
                            this.off('value', this._onValueCallback);
                            this._onValueCallback = null;
                        }
                    }

                    /**
                     * Set the callback triggered when dataSource adds a data element.
                     * @param {Function} callback Callback function to call when a new data child is added.
                     * @deprecated Use the on() method instead.
                     * @returns {void}
                     **/

                }, {
                    key: 'setChildAddedCallback',
                    value: function setChildAddedCallback(callback) {
                        this._onAddCallback = callback;
                        this.on('child_added', callback);
                    }

                    /**
                     * Removes the callback set to trigger when dataSource adds a data element.
                     * @deprecated Use the off() method instead.
                     * @returns {void}
                     **/

                }, {
                    key: 'removeChildAddedCallback',
                    value: function removeChildAddedCallback() {
                        if (this._onAddCallback) {
                            this.off('child_added', this._onAddCallback);
                            this._onAddCallback = null;
                        }
                    }

                    /**
                     * Set the callback triggered when dataSource changes a data element.
                     * @param {Function} callback Callback function to call when a child is changed.
                     * @deprecated Use the on() method instead.
                     * @returns {void}
                     **/

                }, {
                    key: 'setChildChangedCallback',
                    value: function setChildChangedCallback(callback) {
                        this._onChangeCallback = callback;
                        this.on('child_changed', callback);
                    }

                    /**
                     * Removes the callback set to trigger when dataSource changes a data element.
                     * @deprecated Use the off() method instead.
                     * @returns {void}
                     **/

                }, {
                    key: 'removeChildChangedCallback',
                    value: function removeChildChangedCallback() {
                        if (this._onChangeCallback) {
                            this.off('child_changed', this._onChangeCallback);
                            this._onChangeCallback = null;
                        }
                    }

                    /**
                     * Set the callback triggered when dataSource moves a data element.
                     * @param {Function} callback Callback function to call when a child is moved.
                     * @deprecated Use the on() method instead.
                     * @returns {void}
                     **/

                }, {
                    key: 'setChildMovedCallback',
                    value: function setChildMovedCallback(callback) {
                        this._onMoveCallback = callback;
                        this.on('child_moved', callback);
                    }

                    /**
                     * Removes the callback set to trigger when dataSource moves a data element.
                     * @deprecated Use the off() method instead.
                     * @returns {void}
                     **/

                }, {
                    key: 'removeChildMovedCallback',
                    value: function removeChildMovedCallback() {
                        if (this._onMoveCallback) {
                            this.off('child_moved', this._onMoveCallback);
                            this._onMoveCallback = null;
                        }
                    }

                    /**
                     * Set the callback triggered when dataSource removes a data element.
                     * @param {Function} callback Callback function to call when a child is removed.
                     * @deprecated Use the on() method instead.
                     * @returns {void}
                     **/

                }, {
                    key: 'setChildRemovedCallback',
                    value: function setChildRemovedCallback(callback) {
                        this._onRemoveCallback = callback;
                        this.on('child_removed', this._onRemoveCallback);
                    }

                    /**
                     * Removes the callback set to trigger when dataSource removes a data element.
                     * @deprecated Use the off() method instead.
                     * @returns {void}
                     **/

                }, {
                    key: 'removeChildRemovedCallback',
                    value: function removeChildRemovedCallback() {
                        if (this._onRemoveCallback) {
                            this.off('child_removed', this._onRemoveCallback);
                            this._onRemoveCallback = null;
                        }
                    }

                    /**
                     * Performs an atomic transaction
                     * @param {Function} transactionFunction A function that takes the current value as a single argument, and
                     * returns the new value.
                     * @returns {Promise} Resolves the new value when the transaction is finished
                     */

                }, {
                    key: 'atomicTransaction',
                    value: function atomicTransaction(transactionFunction) {
                        var _this3 = this;

                        return new Promise(function (resolve, reject) {
                            _this3._dataReference.transaction(transactionFunction, function (error, wasSuccessfullyCommited, snapshot) {
                                if (error) {
                                    return reject(error);
                                }
                                if (!wasSuccessfullyCommited) {
                                    console.log('Transaction failed, retrying');
                                    return _this3.atomicTransaction(transactionFunction);
                                }
                                resolve(snapshot.val());
                            });
                        });
                    }
                }]);

                return FirebaseDataSource;
            }(DataSource)) || _class$1);
            browser = Bowser;


            if ((browser.msie || browser.msedge) && parseFloat(browser.version) <= 11 || browser.chrome) {
                //TODO: Check if this is still broken in Chrome v56
                duplicateZIndex();
            } else if (browser.firefox && parseFloat(browser.version) <= 53) {
                removeSurfacePreserve3D();
            }EmptyFunction = Object.getPrototypeOf(Function);

            ClassProvider$1 = function () {
                function ClassProvider$$1(clazz, params) {
                    _classCallCheck(this, ClassProvider$$1);

                    // TODO(vojta): can we hide this.provider? (only used for hasAnnotation(provider.provider))
                    this.provider = clazz;

                    this.params = [];
                    this._constructors = [];

                    this._flattenParams(clazz, params);
                    this._constructors.unshift([clazz, 0, this.params.length - 1]);
                }

                // Normalize params for all the constructors (in the case of inheritance),
                // into a single flat array of DependencyDescriptors.
                // So that the injector does not have to worry about inheritance.
                //
                // This function mutates `this.params` and `this._constructors`,
                // but it is only called during the constructor.
                // TODO(vojta): remove the annotations argument?


                _createClass(ClassProvider$$1, [{
                    key: '_flattenParams',
                    value: function _flattenParams(constructor, params) {
                        var SuperConstructor$$1;
                        var constructorInfo;

                        for (var _iterator = params, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                            var _ref;

                            if (_isArray) {
                                if (_i >= _iterator.length) break;
                                _ref = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) break;
                                _ref = _i.value;
                            }

                            var param = _ref;

                            if (param.token === SuperConstructor) {
                                SuperConstructor$$1 = Object.getPrototypeOf(constructor);

                                if (SuperConstructor$$1 === EmptyFunction) {
                                    throw new Error(toString$1(constructor) + ' does not have a parent constructor. Only classes with a parent can ask for SuperConstructor!');
                                }

                                constructorInfo = [SuperConstructor$$1, this.params.length];
                                this._constructors.push(constructorInfo);
                                this._flattenParams(SuperConstructor$$1, readAnnotations(SuperConstructor$$1).params);
                                constructorInfo.push(this.params.length - 1);
                            } else {
                                this.params.push(param);
                            }
                        }
                    }

                    // Basically the reverse process to `this._flattenParams`:
                    // We get arguments for all the constructors as a single flat array.
                    // This method generates pre-bound "superConstructor" wrapper with correctly passing arguments.

                }, {
                    key: '_createConstructor',
                    value: function _createConstructor(currentConstructorIdx, context, allArguments) {
                        var constructorInfo = this._constructors[currentConstructorIdx];
                        var nextConstructorInfo = this._constructors[currentConstructorIdx + 1];
                        var argsForCurrentConstructor;

                        if (nextConstructorInfo) {
                            argsForCurrentConstructor = allArguments.slice(constructorInfo[1], nextConstructorInfo[1]).concat([this._createConstructor(currentConstructorIdx + 1, context, allArguments)]).concat(allArguments.slice(nextConstructorInfo[2] + 1, constructorInfo[2] + 1));
                        } else {
                            argsForCurrentConstructor = allArguments;
                            /*.slice(constructorInfo[1], constructorInfo[2] + 1);*/
                        }

                        return function InjectedAndBoundSuperConstructor() {
                            // TODO(vojta): throw if arguments given
                            return constructorInfo[0].apply(context, argsForCurrentConstructor);
                        };
                    }

                    // It is called by injector to create an instance.

                }, {
                    key: 'create',
                    value: function create(args) {
                        var context = Object.create(this.provider.prototype);
                        var constructor = this._createConstructor(0, context, args);
                        var returnedValue = constructor();

                        if (isFunction(returnedValue) || isObject(returnedValue)) {
                            return returnedValue;
                        }

                        return context;
                    }
                }]);

                return ClassProvider$$1;
            }();

            FactoryProvider$1 = function () {
                function FactoryProvider$$1(factoryFunction, params) {
                    _classCallCheck(this, FactoryProvider$$1);

                    this.provider = factoryFunction;
                    this.params = params;

                    for (var _iterator2 = params, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
                        var _ref2;

                        if (_isArray2) {
                            if (_i2 >= _iterator2.length) break;
                            _ref2 = _iterator2[_i2++];
                        } else {
                            _i2 = _iterator2.next();
                            if (_i2.done) break;
                            _ref2 = _i2.value;
                        }

                        var param = _ref2;

                        if (param.token === SuperConstructor) {
                            throw new Error(toString$1(factoryFunction) + ' is not a class. Only classes with a parent can ask for SuperConstructor!');
                        }
                    }
                }

                _createClass(FactoryProvider$$1, [{
                    key: 'create',
                    value: function create(args) {
                        return this.provider.apply(undefined, args);
                    }
                }]);

                return FactoryProvider$$1;
            }();

            Injector = function () {
                function Injector() {
                    var modules = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];
                    var parentInjector = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
                    var providers = arguments.length <= 2 || arguments[2] === undefined ? new Map() : arguments[2];
                    var scopes = arguments.length <= 3 || arguments[3] === undefined ? [] : arguments[3];

                    _classCallCheck(this, Injector);

                    this._cache = new Map();
                    this._providers = providers;
                    this._parent = parentInjector;
                    this._scopes = scopes;

                    this._tokenCache = new Map();

                    this._loadModules(modules);
                }

                _createClass(Injector, [{
                    key: '_retrieveTokens',
                    value: function _retrieveTokens(classConstructor) {
                        var constructionParams = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

                        /* The class constructor needs to be hashed due to problems with equality of constructors when importing from
                         * non-jspm modules.
                         */
                        var hashedClassConstructor = hash(classConstructor);

                        if (!this._tokenCache.has(hashedClassConstructor)) {
                            this._tokenCache.set(hashedClassConstructor, new Map());
                        }

                        var paramsHash = hash(constructionParams);
                        var cachedClass = this._tokenCache.get(hashedClassConstructor);
                        if (!cachedClass.has(paramsHash)) {
                            /* Generate a new token */
                            cachedClass.set(paramsHash, '' + Date.now() + Math.random());
                        }

                        // let foundHash = cachedClass.get(paramsHash);
                        // return classConstructor.name ? `${classConstructor.name}-${foundHash}` : foundHash;
                        return {
                            classToken: classConstructor.name ? classConstructor.name + '-' + hashedClassConstructor : hashedClassConstructor,
                            paramsToken: paramsHash
                        };
                    }

                    // Collect all registered providers that has given annotation.
                    // Including providers defined in parent injectors.

                }, {
                    key: '_collectProvidersWithAnnotation',
                    value: function _collectProvidersWithAnnotation(annotationClass, collectedProviders) {
                        this._providers.forEach(function (provider, token) {
                            if (!collectedProviders.has(token) && hasAnnotation(provider.provider, annotationClass)) {
                                collectedProviders.set(token, provider);
                            }
                        });

                        if (this._parent) {
                            this._parent._collectProvidersWithAnnotation(annotationClass, collectedProviders);
                        }
                    }

                    // Load modules/function/classes.
                    // This mutates `this._providers`, but it is only called during the constructor.

                }, {
                    key: '_loadModules',
                    value: function _loadModules(modules) {
                        for (var _iterator = modules, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                            var _ref;

                            if (_isArray) {
                                if (_i >= _iterator.length) break;
                                _ref = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) break;
                                _ref = _i.value;
                            }

                            var module = _ref;

                            // A single provider (class or function).
                            if (isFunction(module)) {
                                this._loadFnOrClass(module);
                                continue;
                            }

                            throw new Error('Invalid module!');
                        }
                    }

                    // Load a function or class.
                    // This mutates `this._providers`, but it is only called during the constructor.

                }, {
                    key: '_loadFnOrClass',
                    value: function _loadFnOrClass(classConstructor) {
                        var annotations = readAnnotations(classConstructor);

                        var _retrieveTokens2 = this._retrieveTokens(annotations.provide.token || classConstructor, []);

                        var classToken = _retrieveTokens2.classToken;
                        var paramsToken = _retrieveTokens2.paramsToken;

                        var provider = createProviderFromFnOrClass(classConstructor, annotations);
                        /* Delete the cache so we try to retrieve it again if replacing an old provider */
                        this._cache.delete('' + classToken + paramsToken);
                        this._providers.set(classToken, provider);
                    }

                    // Returns true if there is any provider registered for given token.
                    // Including parent injectors.

                }, {
                    key: '_hasProviderFor',
                    value: function _hasProviderFor(token) {
                        if (this._providers.has(token)) {
                            return true;
                        }

                        if (this._parent) {
                            return this._parent._hasProviderFor(token);
                        }

                        return false;
                    }

                    // Find the correct injector where the default provider should be instantiated and cached.

                }, {
                    key: '_instantiateDefaultProvider',
                    value: function _instantiateDefaultProvider(provider, token, classConstructor, constructionParams, resolving) {
                        // In root injector, instantiate here.
                        if (!this._parent) {
                            this._providers.set(token, provider);
                            return this.get(classConstructor, constructionParams, resolving);
                        }

                        // Check if this injector forces new instance of this provider.
                        for (var _iterator2 = this._scopes, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
                            var _ref2;

                            if (_isArray2) {
                                if (_i2 >= _iterator2.length) break;
                                _ref2 = _iterator2[_i2++];
                            } else {
                                _i2 = _iterator2.next();
                                if (_i2.done) break;
                                _ref2 = _i2.value;
                            }

                            var ScopeClass = _ref2;

                            if (hasAnnotation(provider.provider, ScopeClass)) {
                                this._providers.set(token, provider);
                                return this.get(token, resolving);
                            }
                        }

                        // Otherwise ask parent injector.
                        return this._parent._instantiateDefaultProvider(provider, token, resolving);
                    }

                    // Return an instance for given token.

                }, {
                    key: 'get',
                    value: function get(classConstructor) {
                        var _this = this;

                        var constructionParams = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
                        var resolving = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];

                        var resolvingMsg = '';
                        var provider;
                        var instance;

                        var _retrieveTokens3 = this._retrieveTokens(classConstructor, constructionParams);

                        var classToken = _retrieveTokens3.classToken;
                        var paramsToken = _retrieveTokens3.paramsToken;

                        var combinedToken = '' + classToken + paramsToken;

                        // Check if there is a cached instance already.
                        if (this._cache.has(combinedToken)) {
                            instance = this._cache.get(combinedToken);
                            return instance;
                        }
                        provider = this._providers.get(classToken);

                        // No provider defined (overridden), use the default provider (token).
                        if (!provider && isFunction(classConstructor) && !this._hasProviderFor(classToken)) {
                            provider = createProviderFromFnOrClass(classConstructor, readAnnotations(classConstructor));
                            return this._instantiateDefaultProvider(provider, classToken, classConstructor, constructionParams, resolving);
                        }

                        if (!provider) {
                            if (!this._parent) {
                                resolvingMsg = constructResolvingMessage(resolving, classToken);
                                throw new Error('No provider for ' + toString$1(classToken) + '!' + resolvingMsg);
                            }

                            return this._parent.get(combinedToken, resolving);
                        }

                        if (resolving.indexOf(combinedToken) !== -1) {
                            resolvingMsg = constructResolvingMessage(resolving, combinedToken);
                            throw new Error('Cannot instantiate cyclic dependency!' + resolvingMsg);
                        }

                        resolving.push(combinedToken);

                        var args = provider.params.map(function (param) {
                            return _this.get(param.token, undefined, resolving);
                        });

                        /* Add custom construction parameters to construction */
                        args = args.concat(constructionParams);

                        try {
                            instance = provider.create(args);
                        } catch (e) {
                            resolvingMsg = constructResolvingMessage(resolving);
                            var originalMsg = 'ORIGINAL ERROR: ' + e.message;
                            e.message = 'Error during instantiation of ' + toString$1(combinedToken) + '!' + resolvingMsg + '\n' + originalMsg;
                            throw e;
                        }

                        if (!hasAnnotation(provider.provider, TransientScope)) {
                            this._cache.set(combinedToken, instance);
                        }

                        resolving.pop();

                        return instance;
                    }

                    // Create a child injector, which encapsulate shorter life scope.
                    // It is possible to add additional providers and also force new instances of existing providers.

                }, {
                    key: 'createChild',
                    value: function createChild() {
                        var modules = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];
                        var forceNewInstancesOf = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

                        var forcedProviders = new Map();

                        // Always force new instance of TransientScope.
                        forceNewInstancesOf.push(TransientScope);

                        for (var _iterator3 = forceNewInstancesOf, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
                            var _ref3;

                            if (_isArray3) {
                                if (_i3 >= _iterator3.length) break;
                                _ref3 = _iterator3[_i3++];
                            } else {
                                _i3 = _iterator3.next();
                                if (_i3.done) break;
                                _ref3 = _i3.value;
                            }

                            var annotation = _ref3;

                            this._collectProvidersWithAnnotation(annotation, forcedProviders);
                        }

                        return new Injector(modules, this, forcedProviders, forceNewInstancesOf);
                    }
                }]);

                return Injector;
            }();

            Injection = (_temp$1 = _class$2 = function () {
                function Injection() {
                    _classCallCheck(this, Injection);
                }

                _createClass(Injection, null, [{
                    key: 'get',

                    /**
                     * Requests an instance of the given class from the DI engine. If an instance
                     * of that class with the same construction parameters already exists, a reference
                     * to it is returned. Otherwise a new instance is created.
                     *
                     * Example usage:
                     * get(HomeController, param1, param2);
                     *
                     * @param {Function} classConstructor The class of which an instance is wanted
                     * @param {*} constructionParams A list of parameters to be passed to the class constructor
                     * @returns {Object} Instance of the given class
                     */
                    value: function get(classConstructor) {
                        for (var _len = arguments.length, constructionParams = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                            constructionParams[_key - 1] = arguments[_key];
                        }

                        return this.injector.get(classConstructor, constructionParams);
                    }

                    /**
                     * Provide an instance a certain type.
                     *
                     * @param {Function} classConstructor The class of which an instance is wanted
                     * @param {Function|Object} functionOrConstructedObject. A function returning an instance of the object, or the object
                     * itself.
                     */

                }, {
                    key: 'provide',
                    value: function provide(classConstructor, functionOrConstructedObject) {
                        var providerFunction = typeof functionOrConstructedObject === 'function' ? functionOrConstructedObject : function () {
                            return functionOrConstructedObject;
                        };
                        provide$1(classConstructor)(providerFunction);
                        this.addProviders(providerFunction);
                    }

                    /**
                     * Provide an instance a certain type.
                     *
                     * @param {Class} classConstructor The class of which an instance is wanted
                     * @param {Function|Object} functionOrConstructedObject
                     */

                }, {
                    key: 'provideAndGet',
                    value: function provideAndGet(classConstructor, functionOrConstructedObject) {
                        this.provide(classConstructor, functionOrConstructedObject);
                        return Injection.get(classConstructor);
                    }

                    /**
                     * Requests instances of multiple classes at once.
                     *
                     * Example usage:
                     * let instances = getAll(ArvaRouter, [HomeController, [param1, param2]], App);
                     *
                     * @param {*} classContructorArray Array of classes to instantiate.
                     * May also be an array where each item is an array containing the class as
                     * its first element, and an array of parameters as its second element.
                     *
                     * @returns {Array} An array of instances of the requested classes
                     */

                }, {
                    key: 'getAll',
                    value: function getAll() {
                        var results = [];

                        for (var _len2 = arguments.length, classContructorArray = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                            classContructorArray[_key2] = arguments[_key2];
                        }

                        for (var _iterator = classContructorArray, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                            var _ref;

                            if (_isArray) {
                                if (_i >= _iterator.length) break;
                                _ref = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) break;
                                _ref = _i.value;
                            }

                            var entry = _ref;

                            var _ref2 = entry instanceof Array ? [entry[0], entry[1]] : [entry, []];

                            var _ref3 = _slicedToArray(_ref2, 2);

                            var _constructor = _ref3[0];
                            var params = _ref3[1];

                            results.push(this.get.apply(this, [_constructor].concat(params)));
                        }
                        return results;
                    }

                    /**
                     * Registers classes as the default provider for their Provide annotation (set by @provide decorator).
                     *
                     * Example usage:
                     * addProviders(ArvaRouter, FamousContext);
                     *
                     * @param {*} classConstructors
                     * @returns {void}
                     */

                }, {
                    key: 'addProviders',
                    value: function addProviders() {
                        for (var _len3 = arguments.length, classConstructors = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                            classConstructors[_key3] = arguments[_key3];
                        }

                        for (var _iterator2 = classConstructors, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
                            var _ref4;

                            if (_isArray2) {
                                if (_i2 >= _iterator2.length) break;
                                _ref4 = _iterator2[_i2++];
                            } else {
                                _i2 = _iterator2.next();
                                if (_i2.done) break;
                                _ref4 = _i2.value;
                            }

                            var _constructor2 = _ref4;

                            this.injector._loadFnOrClass(_constructor2);
                        }
                    }
                }]);

                return Injection;
            }(), _class$2.injector = new Injector(), _temp$1);

            _regeneratorRuntime = function (module) {
                /**
                 * Copyright (c) 2014, Facebook, Inc.
                 * All rights reserved.
                 *
                 * This source code is licensed under the BSD-style license found in the
                 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
                 * additional grant of patent rights can be found in the PATENTS file in
                 * the same directory.
                 */

                !function (global) {
                    "use strict";

                    var hasOwn = Object.prototype.hasOwnProperty;
                    var undefined; // More compressible than void 0.
                    var $Symbol = typeof Symbol === "function" ? Symbol : {};
                    var iteratorSymbol = $Symbol.iterator || "@@iterator";
                    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

                    var inModule = typeof module === "object";
                    var runtime = global.regeneratorRuntime;
                    if (runtime) {
                        if (inModule) {
                            // If regeneratorRuntime is defined globally and we're in a module,
                            // make the exports object identical to regeneratorRuntime.
                            module.exports = runtime;
                        }
                        // Don't bother evaluating the rest of this file if the runtime was
                        // already defined globally.
                        return;
                    }

                    // Define the runtime globally (as expected by generated code) as either
                    // module.exports (if we're in a module) or a new, empty object.
                    runtime = global.regeneratorRuntime = inModule ? module.exports : {};

                    function wrap(innerFn, outerFn, self, tryLocsList) {
                        // If outerFn provided, then outerFn.prototype instanceof Generator.
                        var generator = Object.create((outerFn || Generator).prototype);
                        var context = new Context$$1(tryLocsList || []);

                        // The ._invoke method unifies the implementations of the .next,
                        // .throw, and .return methods.
                        generator._invoke = makeInvokeMethod(innerFn, self, context);

                        return generator;
                    }
                    runtime.wrap = wrap;

                    // Try/catch helper to minimize deoptimizations. Returns a completion
                    // record like context.tryEntries[i].completion. This interface could
                    // have been (and was previously) designed to take a closure to be
                    // invoked without arguments, but in all the cases we care about we
                    // already have an existing method we want to call, so there's no need
                    // to create a new function object. We can even get away with assuming
                    // the method takes exactly one argument, since that happens to be true
                    // in every case, so we don't have to touch the arguments object. The
                    // only additional allocation required is the completion record, which
                    // has a stable shape and so hopefully should be cheap to allocate.
                    function tryCatch(fn, obj, arg) {
                        try {
                            return { type: "normal", arg: fn.call(obj, arg) };
                        } catch (err) {
                            return { type: "throw", arg: err };
                        }
                    }

                    var GenStateSuspendedStart = "suspendedStart";
                    var GenStateSuspendedYield = "suspendedYield";
                    var GenStateExecuting = "executing";
                    var GenStateCompleted = "completed";

                    // Returning this object from the innerFn has the same effect as
                    // breaking out of the dispatch switch statement.
                    var ContinueSentinel = {};

                    // Dummy constructor functions that we use as the .constructor and
                    // .constructor.prototype properties for functions that return Generator
                    // objects. For full spec compliance, you may wish to configure your
                    // minifier not to mangle the names of these two functions.
                    function Generator() {}
                    function GeneratorFunction() {}
                    function GeneratorFunctionPrototype() {}

                    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
                    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
                    GeneratorFunctionPrototype.constructor = GeneratorFunction;
                    GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";

                    // Helper for defining the .next, .throw, and .return methods of the
                    // Iterator interface in terms of a single ._invoke method.
                    function defineIteratorMethods(prototype) {
                        ["next", "throw", "return"].forEach(function (method) {
                            prototype[method] = function (arg) {
                                return this._invoke(method, arg);
                            };
                        });
                    }

                    runtime.isGeneratorFunction = function (genFun) {
                        var ctor = typeof genFun === "function" && genFun.constructor;
                        return ctor ? ctor === GeneratorFunction ||
                        // For the native GeneratorFunction constructor, the best we can
                        // do is to check its .name property.
                        (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
                    };

                    runtime.mark = function (genFun) {
                        if (Object.setPrototypeOf) {
                            Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
                        } else {
                            genFun.__proto__ = GeneratorFunctionPrototype;
                            if (!(toStringTagSymbol in genFun)) {
                                genFun[toStringTagSymbol] = "GeneratorFunction";
                            }
                        }
                        genFun.prototype = Object.create(Gp);
                        return genFun;
                    };

                    // Within the body of any async function, `await x` is transformed to
                    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
                    // `value instanceof AwaitArgument` to determine if the yielded value is
                    // meant to be awaited. Some may consider the name of this method too
                    // cutesy, but they are curmudgeons.
                    runtime.awrap = function (arg) {
                        return new AwaitArgument(arg);
                    };

                    function AwaitArgument(arg) {
                        this.arg = arg;
                    }

                    function AsyncIterator(generator) {
                        function invoke(method, arg, resolve, reject) {
                            var record = tryCatch(generator[method], generator, arg);
                            if (record.type === "throw") {
                                reject(record.arg);
                            } else {
                                var result = record.arg;
                                var value = result.value;
                                if (value instanceof AwaitArgument) {
                                    return Promise.resolve(value.arg).then(function (value) {
                                        invoke("next", value, resolve, reject);
                                    }, function (err) {
                                        invoke("throw", err, resolve, reject);
                                    });
                                }

                                return Promise.resolve(value).then(function (unwrapped) {
                                    // When a yielded Promise is resolved, its final value becomes
                                    // the .value of the Promise<{value,done}> result for the
                                    // current iteration. If the Promise is rejected, however, the
                                    // result for this iteration will be rejected with the same
                                    // reason. Note that rejections of yielded Promises are not
                                    // thrown back into the generator function, as is the case
                                    // when an awaited Promise is rejected. This difference in
                                    // behavior between yield and await is important, because it
                                    // allows the consumer to decide what to do with the yielded
                                    // rejection (swallow it and continue, manually .throw it back
                                    // into the generator, abandon iteration, whatever). With
                                    // await, by contrast, there is no opportunity to examine the
                                    // rejection reason outside the generator function, so the
                                    // only option is to throw it from the await expression, and
                                    // let the generator function handle the exception.
                                    result.value = unwrapped;
                                    resolve(result);
                                }, reject);
                            }
                        }

                        if (typeof process === "object" && process.domain) {
                            invoke = process.domain.bind(invoke);
                        }

                        var previousPromise;

                        function enqueue(method, arg) {
                            function callInvokeWithMethodAndArg() {
                                return new Promise(function (resolve, reject) {
                                    invoke(method, arg, resolve, reject);
                                });
                            }

                            return previousPromise =
                            // If enqueue has been called before, then we want to wait until
                            // all previous Promises have been resolved before calling invoke,
                            // so that results are always delivered in the correct order. If
                            // enqueue has not been called before, then it is important to
                            // call invoke immediately, without waiting on a callback to fire,
                            // so that the async generator function has the opportunity to do
                            // any necessary setup in a predictable way. This predictability
                            // is why the Promise constructor synchronously invokes its
                            // executor callback, and why async functions synchronously
                            // execute code before the first await. Since we implement simple
                            // async functions in terms of async generators, it is especially
                            // important to get this right, even though it requires care.
                            previousPromise ? previousPromise.then(callInvokeWithMethodAndArg,
                            // Avoid propagating failures to Promises returned by later
                            // invocations of the iterator.
                            callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
                        }

                        // Define the unified helper method that is used to implement .next,
                        // .throw, and .return (see defineIteratorMethods).
                        this._invoke = enqueue;
                    }

                    defineIteratorMethods(AsyncIterator.prototype);

                    // Note that simple async functions are implemented on top of
                    // AsyncIterator objects; they just return a Promise for the value of
                    // the final result produced by the iterator.
                    runtime.async = function (innerFn, outerFn, self, tryLocsList) {
                        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));

                        return runtime.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
                        : iter.next().then(function (result) {
                            return result.done ? result.value : iter.next();
                        });
                    };

                    function makeInvokeMethod(innerFn, self, context) {
                        var state = GenStateSuspendedStart;

                        return function invoke(method, arg) {
                            if (state === GenStateExecuting) {
                                throw new Error("Generator is already running");
                            }

                            if (state === GenStateCompleted) {
                                if (method === "throw") {
                                    throw arg;
                                }

                                // Be forgiving, per 25.3.3.3.3 of the spec:
                                // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
                                return doneResult();
                            }

                            while (true) {
                                var delegate = context.delegate;
                                if (delegate) {
                                    if (method === "return" || method === "throw" && delegate.iterator[method] === undefined) {
                                        // A return or throw (when the delegate iterator has no throw
                                        // method) always terminates the yield* loop.
                                        context.delegate = null;

                                        // If the delegate iterator has a return method, give it a
                                        // chance to clean up.
                                        var returnMethod = delegate.iterator["return"];
                                        if (returnMethod) {
                                            var record = tryCatch(returnMethod, delegate.iterator, arg);
                                            if (record.type === "throw") {
                                                // If the return method threw an exception, let that
                                                // exception prevail over the original return or throw.
                                                method = "throw";
                                                arg = record.arg;
                                                continue;
                                            }
                                        }

                                        if (method === "return") {
                                            // Continue with the outer return, now that the delegate
                                            // iterator has been terminated.
                                            continue;
                                        }
                                    }

                                    var record = tryCatch(delegate.iterator[method], delegate.iterator, arg);

                                    if (record.type === "throw") {
                                        context.delegate = null;

                                        // Like returning generator.throw(uncaught), but without the
                                        // overhead of an extra function call.
                                        method = "throw";
                                        arg = record.arg;
                                        continue;
                                    }

                                    // Delegate generator ran and handled its own exceptions so
                                    // regardless of what the method was, we continue as if it is
                                    // "next" with an undefined arg.
                                    method = "next";
                                    arg = undefined;

                                    var info = record.arg;
                                    if (info.done) {
                                        context[delegate.resultName] = info.value;
                                        context.next = delegate.nextLoc;
                                    } else {
                                        state = GenStateSuspendedYield;
                                        return info;
                                    }

                                    context.delegate = null;
                                }

                                if (method === "next") {
                                    // Setting context._sent for legacy support of Babel's
                                    // function.sent implementation.
                                    context.sent = context._sent = arg;
                                } else if (method === "throw") {
                                    if (state === GenStateSuspendedStart) {
                                        state = GenStateCompleted;
                                        throw arg;
                                    }

                                    if (context.dispatchException(arg)) {
                                        // If the dispatched exception was caught by a catch block,
                                        // then let that catch block handle the exception normally.
                                        method = "next";
                                        arg = undefined;
                                    }
                                } else if (method === "return") {
                                    context.abrupt("return", arg);
                                }

                                state = GenStateExecuting;

                                var record = tryCatch(innerFn, self, context);
                                if (record.type === "normal") {
                                    // If an exception is thrown from innerFn, we leave state ===
                                    // GenStateExecuting and loop back for another invocation.
                                    state = context.done ? GenStateCompleted : GenStateSuspendedYield;

                                    var info = {
                                        value: record.arg,
                                        done: context.done
                                    };

                                    if (record.arg === ContinueSentinel) {
                                        if (context.delegate && method === "next") {
                                            // Deliberately forget the last sent value so that we don't
                                            // accidentally pass it on to the delegate.
                                            arg = undefined;
                                        }
                                    } else {
                                        return info;
                                    }
                                } else if (record.type === "throw") {
                                    state = GenStateCompleted;
                                    // Dispatch the exception by looping back around to the
                                    // context.dispatchException(arg) call above.
                                    method = "throw";
                                    arg = record.arg;
                                }
                            }
                        };
                    }

                    // Define Generator.prototype.{next,throw,return} in terms of the
                    // unified ._invoke helper method.
                    defineIteratorMethods(Gp);

                    Gp[iteratorSymbol] = function () {
                        return this;
                    };

                    Gp[toStringTagSymbol] = "Generator";

                    Gp.toString = function () {
                        return "[object Generator]";
                    };

                    function pushTryEntry(locs) {
                        var entry = { tryLoc: locs[0] };

                        if (1 in locs) {
                            entry.catchLoc = locs[1];
                        }

                        if (2 in locs) {
                            entry.finallyLoc = locs[2];
                            entry.afterLoc = locs[3];
                        }

                        this.tryEntries.push(entry);
                    }

                    function resetTryEntry(entry) {
                        var record = entry.completion || {};
                        record.type = "normal";
                        delete record.arg;
                        entry.completion = record;
                    }

                    function Context$$1(tryLocsList) {
                        // The root entry object (effectively a try statement without a catch
                        // or a finally block) gives us a place to store values thrown from
                        // locations where there is no enclosing try statement.
                        this.tryEntries = [{ tryLoc: "root" }];
                        tryLocsList.forEach(pushTryEntry, this);
                        this.reset(true);
                    }

                    runtime.keys = function (object) {
                        var keys = [];
                        for (var key in object) {
                            keys.push(key);
                        }
                        keys.reverse();

                        // Rather than returning an object with a next method, we keep
                        // things simple and return the next function itself.
                        return function next() {
                            while (keys.length) {
                                var key = keys.pop();
                                if (key in object) {
                                    next.value = key;
                                    next.done = false;
                                    return next;
                                }
                            }

                            // To avoid creating an additional object, we just hang the .value
                            // and .done properties off the next function object itself. This
                            // also ensures that the minifier will not anonymize the function.
                            next.done = true;
                            return next;
                        };
                    };

                    function values(iterable) {
                        if (iterable) {
                            var iteratorMethod = iterable[iteratorSymbol];
                            if (iteratorMethod) {
                                return iteratorMethod.call(iterable);
                            }

                            if (typeof iterable.next === "function") {
                                return iterable;
                            }

                            if (!isNaN(iterable.length)) {
                                var i = -1,
                                    next = function next() {
                                    while (++i < iterable.length) {
                                        if (hasOwn.call(iterable, i)) {
                                            next.value = iterable[i];
                                            next.done = false;
                                            return next;
                                        }
                                    }

                                    next.value = undefined;
                                    next.done = true;

                                    return next;
                                };

                                return next.next = next;
                            }
                        }

                        // Return an iterator with no values.
                        return { next: doneResult };
                    }
                    runtime.values = values;

                    function doneResult() {
                        return { value: undefined, done: true };
                    }

                    Context$$1.prototype = {
                        constructor: Context$$1,

                        reset: function reset(skipTempReset) {
                            this.prev = 0;
                            this.next = 0;
                            // Resetting context._sent for legacy support of Babel's
                            // function.sent implementation.
                            this.sent = this._sent = undefined;
                            this.done = false;
                            this.delegate = null;

                            this.tryEntries.forEach(resetTryEntry);

                            if (!skipTempReset) {
                                for (var name in this) {
                                    // Not sure about the optimal order of these conditions:
                                    if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                                        this[name] = undefined;
                                    }
                                }
                            }
                        },

                        stop: function stop() {
                            this.done = true;

                            var rootEntry = this.tryEntries[0];
                            var rootRecord = rootEntry.completion;
                            if (rootRecord.type === "throw") {
                                throw rootRecord.arg;
                            }

                            return this.rval;
                        },

                        dispatchException: function dispatchException(exception) {
                            if (this.done) {
                                throw exception;
                            }

                            var context = this;
                            function handle(loc, caught) {
                                record.type = "throw";
                                record.arg = exception;
                                context.next = loc;
                                return !!caught;
                            }

                            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                                var entry = this.tryEntries[i];
                                var record = entry.completion;

                                if (entry.tryLoc === "root") {
                                    // Exception thrown outside of any try block that could handle
                                    // it, so set the completion value of the entire function to
                                    // throw the exception.
                                    return handle("end");
                                }

                                if (entry.tryLoc <= this.prev) {
                                    var hasCatch = hasOwn.call(entry, "catchLoc");
                                    var hasFinally = hasOwn.call(entry, "finallyLoc");

                                    if (hasCatch && hasFinally) {
                                        if (this.prev < entry.catchLoc) {
                                            return handle(entry.catchLoc, true);
                                        } else if (this.prev < entry.finallyLoc) {
                                            return handle(entry.finallyLoc);
                                        }
                                    } else if (hasCatch) {
                                        if (this.prev < entry.catchLoc) {
                                            return handle(entry.catchLoc, true);
                                        }
                                    } else if (hasFinally) {
                                        if (this.prev < entry.finallyLoc) {
                                            return handle(entry.finallyLoc);
                                        }
                                    } else {
                                        throw new Error("try statement without catch or finally");
                                    }
                                }
                            }
                        },

                        abrupt: function abrupt(type, arg) {
                            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                                var entry = this.tryEntries[i];
                                if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                                    var finallyEntry = entry;
                                    break;
                                }
                            }

                            if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
                                // Ignore the finally entry if control is not jumping to a
                                // location outside the try/catch block.
                                finallyEntry = null;
                            }

                            var record = finallyEntry ? finallyEntry.completion : {};
                            record.type = type;
                            record.arg = arg;

                            if (finallyEntry) {
                                this.next = finallyEntry.finallyLoc;
                            } else {
                                this.complete(record);
                            }

                            return ContinueSentinel;
                        },

                        complete: function complete(record, afterLoc) {
                            if (record.type === "throw") {
                                throw record.arg;
                            }

                            if (record.type === "break" || record.type === "continue") {
                                this.next = record.arg;
                            } else if (record.type === "return") {
                                this.rval = record.arg;
                                this.next = "end";
                            } else if (record.type === "normal" && afterLoc) {
                                this.next = afterLoc;
                            }
                        },

                        finish: function finish(finallyLoc) {
                            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                                var entry = this.tryEntries[i];
                                if (entry.finallyLoc === finallyLoc) {
                                    this.complete(entry.completion, entry.afterLoc);
                                    resetTryEntry(entry);
                                    return ContinueSentinel;
                                }
                            }
                        },

                        "catch": function _catch(tryLoc) {
                            for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                                var entry = this.tryEntries[i];
                                if (entry.tryLoc === tryLoc) {
                                    var record = entry.completion;
                                    if (record.type === "throw") {
                                        var thrown = record.arg;
                                        resetTryEntry(entry);
                                    }
                                    return thrown;
                                }
                            }

                            // The context.catch method must only be called with a location
                            // argument that corresponds to a known catch block.
                            throw new Error("illegal catch attempt");
                        },

                        delegateYield: function delegateYield(iterable, resultName, nextLoc) {
                            this.delegate = {
                                iterator: values(iterable),
                                resultName: resultName,
                                nextLoc: nextLoc
                            };

                            return ContinueSentinel;
                        }
                    };
                }(
                // Among the various tricks for obtaining a reference to the global
                // object, this seems to be the most reliable technique that does not
                // use indirect eval (which violates Content Security Policy).
                typeof global === "object" ? global : typeof window === "object" ? window : typeof self === "object" ? self : this);
                return module.exports;
            }({ exports: {} });

            _asyncToGenerator = function (fn) {
                return function () {
                    var gen = fn.apply(this, arguments);
                    return new Promise(function (resolve, reject) {
                        function step(key, arg) {
                            try {
                                var info = gen[key](arg);
                                var value = info.value;
                            } catch (error) {
                                reject(error);
                                return;
                            }

                            if (info.done) {
                                resolve(value);
                            } else {
                                return Promise.resolve(value).then(function (value) {
                                    return step("next", value);
                                }, function (err) {
                                    return step("throw", err);
                                });
                            }
                        }

                        return step("next");
                    });
                };
            };

            Utils = function () {
                function Utils() {
                    _classCallCheck(this, Utils);
                }

                _createClass(Utils, null, [{
                    key: 'renderableIsSurface',
                    value: function renderableIsSurface(renderable) {
                        return renderable instanceof Surface || renderable instanceof ImageSurface;
                    }

                    /**
                     * Returns tru if the object is not a class but still an object
                     * @param object
                     * @returns {boolean}
                     * @private
                     */

                }, {
                    key: 'isPlainObject',
                    value: function isPlainObject(object) {
                        return typeof object == 'object' && object.constructor.name == 'Object';
                    }

                    /**
                     * Adds to translations returns the result.
                     * @param translate1
                     * @param translate2
                     * @returns {Array}
                     */

                }, {
                    key: 'addTranslations',
                    value: function addTranslations(translate1, translate2) {
                        return [translate1[0] + translate2[0], translate1[1] + translate2[1], translate1[2] + translate2[2]];
                    }
                    /**
                     * Returns true if the renderable is complex and its size can be determined. Returns false if it is a surface
                     * or something else that doesn't have a getSize function specified
                     * @param renderable
                     * @private
                     */

                }, {
                    key: 'renderableIsComposite',
                    value: function renderableIsComposite(renderable) {
                        return renderable.getSize && !Utils.renderableIsSurface(renderable);
                    }

                    /**
                     * Uses either console.warn() or console.log() to log a mildly serious issue, depending on the user agent's availability.
                     * @param {String|Object} message
                     * @returns {void}
                     * @private
                     */

                }, {
                    key: 'warn',
                    value: function warn(message) {
                        if (console.warn) {
                            console.warn(message);
                        } else {
                            console.log(message);
                        }
                    }

                    /**
                     * Specifying origin for true sized renderables doesn't work. Therefore we do a quick fix to adjust the
                     * translation according to the current faulty behaviour of famous.
                     * @param {Renderable}renderable The renderable of which we should correct
                     * @param {Array|Number} size  The size of this renderable
                     * @param {Array|Number} origin The origin
                     * @param {Array|Number} translate The current translation
                     * @param {SizeResolver} A size resolver that is keeping bookkeeping of the renderable
                     * @returns {*[]} The new translation taking this the current famous implementation into account
                     * @private
                     */

                }, {
                    key: 'adjustPlacementForTrueSize',
                    value: function adjustPlacementForTrueSize(renderable, size, origin, translate, sizeResolver) {
                        var newTranslation = [translate[0], translate[1], translate[2]];
                        for (var i = 0; i < 2; i++) {
                            if (size[i] === true && origin[i] !== 0) {
                                /* Because the size is set to true, it is interpreted as 1 by famous. We have to add 1 pixel
                                 *  to make up for this.
                                 */
                                newTranslation[i] -= sizeResolver.getResolvedSize(renderable)[i] * origin[i] - 1;
                            }
                        }
                        return newTranslation;
                    }
                }, {
                    key: 'getRenderableGroupName',
                    value: function getRenderableGroupName(renderable) {
                        var decorations = renderable.decorations;

                        if (!!decorations.dock) {
                            /* 'filled' is a special subset of 'docked' renderables, that need to be rendered after the normal 'docked' renderables are rendered. */
                            return decorations.dock.dockMethod === 'fill' ? 'filled' : 'docked';
                        } else if (!!decorations.fullSize) {
                            return 'fullSize';
                        } else if (decorations.size || decorations.origin || decorations.align || decorations.translate) {
                            return 'traditional';
                        } else {
                            /* This occurs e.g. when a renderable is only marked @renderable, and its parent view has a @layout.custom decorator to define its context. */
                            return 'ignored';
                        }
                    }
                }]);

                return Utils;
            }();

            layout$1 = {

                /**
                 * Merely marks a view property as a decorated renderable, which allows it to be rendered.
                 * Use this in combination with a @layout.custom decorator on the view in which this renderable resides.
                 *
                 * @example
                 * @layout.renderable
                 * renderable = new Surface();
                 *
                 * @returns {Function} A decorator function
                 */
                renderable: function renderable() {
                    return function (view, renderableName, descriptor) {
                        prepDecoratedRenderable(view, renderableName, descriptor);
                    };
                },

                /**
                 * Marks the renderable to cover the entire screen. Translate can also be specified on such a renderable.
                 *
                 * @example
                 * @layout.fullSize()
                 * // View will have a red background
                 * background = new Surface({properties: {backgroundColor: 'red'}});
                 *
                 * @returns {Function} A decorator function
                 */
                fullSize: function fullSize() {
                    return function (view, renderableName, descriptor) {
                        var renderable = prepDecoratedRenderable(view, renderableName, descriptor);
                        renderable.decorations.fullSize = true;
                    };
                },

                /**
                 * Specifies the space that should come before the docked renderable. Useful when not specifying the size in the
                 * layout.dock function. Note that the space does not appear if there isn't any renderable with a size greater than
                 * zero before it. Can also be specified for the view
                 *
                 * @example
                 * // there's a 20px space before this box
                 * @layout.dockSpace(20)
                 * @layout.size(100, 100)
                 * @layout.dock.left()
                 * box = new Surface({properties: {backgroundColor: 'red'}});
                 *
                 * @param {Number} space The space that is inserted before the renderable.
                 * @returns {Function} A decorator function
                 */
                dockSpace: function dockSpace(space) {
                    return function (target, renderableName, descriptor) {
                        if (typeof target == 'function') {
                            prepPrototypeDecorations(target.prototype).dockSpacing = space;
                        } else {
                            var renderable = prepDecoratedRenderable(target, renderableName, descriptor);
                            // Todo refactor also the z index to the dock
                            renderable.decorations.dock = renderable.decorations.dock ? extend(renderable.decorations.dock, { space: space }) : { space: space };
                        }
                    };
                },

                /**
                 * Internal function to do docking
                 *
                 * @param dockMethod
                 * @param size
                 * @param space
                 * @param zIndex
                 * @returns {Function}
                 */
                _dockTo: function _dockTo(dockMethod, size, space, zIndex) {
                    return function (view, renderableName, descriptor) {
                        var renderable = prepDecoratedRenderable(view, renderableName, descriptor);

                        if (renderable.decorations.dock) {
                            space = space || renderable.decorations.dock.space;
                        }

                        var width = dockMethod === 'left' || dockMethod === 'right' ? size : undefined;
                        var height = dockMethod === 'top' || dockMethod === 'bottom' ? size : undefined;

                        var twoDimensionalSize = [width, height];
                        // Todo refactor also the z index to the dock, probably
                        renderable.decorations.dock = { space: space, dockMethod: dockMethod, size: twoDimensionalSize };

                        if (!renderable.decorations.translate) {
                            renderable.decorations.translate = [0, 0, 0];
                        }
                        if (zIndex) {
                            renderable.decorations.translate[2] = zIndex;
                        }
                    };
                },

                dock: {
                    /**
                     * Docks the renderable to the left.
                     * When using both a docked size and the layout.size decorator, then that layout.size becomes the actual inner size.
                     * The renderable can then be stickd within the docking area with origin and align. When combined with align, treats
                     * the context size the docking size.
                     * When using layout.size without specifying a docked size, it will use that size as docking size. Useful for
                     * automatic sizing when parent defines true size and orthogonal size (e.g. height for dock 'left') has to be defined.
                     *
                     * @example
                     * @layout.dock.left(30, 0, 10)
                     * @layout.size(15, undefined)
                     * @layout.origin(0.5, 0)
                     * @layout.align(0.5, 0)
                     * dockedRenderable = new Surface({properties: {backgroundColor: 'red'}});
                     *
                     *
                     * @param {Number|Function} [size]. The size of the renderable in the one dimension that is being docked, e.g.
                     * dock left or right will be width, whereas dock top or bottom will result in height. For more information about
                     * different variations, see layout.size.
                     * @param {Number} [space]. Any space that should be inserted before the docked renderable
                     * @param {Number} [zIndex]. DEPRECATED: Use translate(0, 0, zIndex) instead.
                     * @returns {Function} A decorator function
                     */
                    left: function left() {
                        return layout$1._dockTo.apply(layout$1, ['left'].concat(Array.prototype.slice.call(arguments)));
                    },

                    /**
                     * Docks the renderable to the right.
                     * When using both a docked size and the layout.size decorator, then that layout.size becomes the actual inner size.
                     * The renderable can then be stickd within the docking area with origin and align. When combined with align, treats
                     * the context size the docking size.
                     * When using layout.size without specifying a docked size, it will use that size as docking size. Useful for
                     * automatic sizing when parent defines true size and orthogonal size (e.g. height for dock 'left') has to be defined.
                     *
                     * @example
                     * @layout.dock.right(30, 0, 10)
                     * @layout.size(15, undefined)
                     * @layout.origin(0.5, 0)
                     * @layout.align(0.5, 0)
                     * dockedRenderable = new Surface({properties: {backgroundColor: 'red'}});
                     *
                     * @param {Number|Function} [size]. The size of the renderable in the one dimension that is being docked, e.g.
                     * dock left or right will be width, whereas dock top or bottom will result in height. For more information about
                     * different variations, see layout.size.
                     * @param {Number} [space]. Any space that should be inserted before the docked renderable
                     * @param {Number} [zIndex]. DEPRECATED: Use translate(0, 0, zIndex) instead.
                     * @returns {Function} A decorator function
                     */
                    right: function right() {
                        return layout$1._dockTo.apply(layout$1, ['right'].concat(Array.prototype.slice.call(arguments)));
                    },

                    /**
                     *
                     * Docks the renderable to the top.
                     * When using both a docked size and the layout.size decorator, then that layout.size becomes the actual inner size.
                     * The renderable can then be stickd within the docking area with origin and align. When combined with align, treats
                     * the context size the docking size.
                     * When using layout.size without specifying a docked size, it will use that size as docking size. Useful for
                     * automatic sizing when parent defines true size and orthogonal size (e.g. height for dock 'left') has to be defined.
                     *
                     * @example
                     * @layout.dock.top(30, 0, 10)
                     * @layout.size(15, undefined)
                     * @layout.origin(0.5, 0)
                     * @layout.align(0.5, 0)
                     * dockedRenderable = new Surface({properties: {backgroundColor: 'red'}});
                     *
                     *
                     * @param {Number|Function} [size]. The size of the renderable in the one dimension that is being docked, e.g.
                     * dock left or right will be width, whereas dock top or bottom will result in height. For more information about
                     * different variations, see layout.size.
                     * @param {Number} [space = 0]. Any space that should be inserted before the docked renderable
                     * @param {Number} [zIndex = 0]. DEPRECATED: Use translate(0, 0, zIndex) instead.
                     * @returns {Function} A decorator function
                     */
                    top: function top() {
                        return layout$1._dockTo.apply(layout$1, ['top'].concat(Array.prototype.slice.call(arguments)));
                    },

                    /**
                     *
                     * Docks the renderable to the bottom.
                     * When using both a docked size and the layout.size decorator, then that layout.size becomes the actual inner size.
                     * The renderable can then be stickd within the docking area with origin and align. When combined with align, treats
                     * the context size the docking size.
                     * When using layout.size without specifying a docked size, it will use that size as docking size. Useful for
                     * automatic sizing when parent defines true size and orthogonal size (e.g. height for dock 'left') has to be defined.
                     *
                     * @example
                     * @layout.dock.bottom(30, 0, 10)
                     * @layout.size(15, undefined)
                     * @layout.origin(0.5, 0)
                     * @layout.align(0.5, 0)
                     * dockedRenderable = new Surface({properties: {backgroundColor: 'red'}});
                     *
                     *
                     * @param {Number|Function} [size]. The size of the renderable in the one dimension that is being docked, e.g.
                     * dock left or right will be width, whereas dock top or bottom will result in height. For more information about
                     * different variations, see layout.size.
                     * @param {Number} [space = 0]. Any space that should be inserted before the docked renderable
                     * @param {Number} [zIndex = 0]. DEPRECATED: Use translate(0, 0, zIndex) instead.
                     * @returns {Function} A decorator function
                     */
                    bottom: function bottom() {
                        return layout$1._dockTo.apply(layout$1, ['bottom'].concat(Array.prototype.slice.call(arguments)));
                    },

                    /**
                     * Fills the space that is left after the docking with this renderable. When using layout.size, it will use that
                     * size as an inner size. This works similarly to other docking, from where translate, size, origin, align, etc
                     * can be specified.
                     *
                     * @example
                     * @layout.dock.fill()
                     * filledRenderable = new Surface({properties: {backgroundColor: 'red'}});
                     *
                     * @returns {Function} A decorator function
                     */
                    fill: function fill() {
                        return layout$1._dockTo.apply(layout$1, ['fill'].concat(Array.prototype.slice.call(arguments)));
                    },
                    /**
                     * Marks the renderable as not being docked anymore. Useful when dynamically changing decorations through
                     * this.decorateRenderable or this.setRenderableFlowState
                     *
                     * @example
                     * @layout.dock.fill()
                     * @flow.stateStep('nonFilled', layout.dock.none(), layout.size(100, 100))
                     * filledRenderable = new Surface({properties: {backgroundColor: 'red'}});
                     *
                     * @returns {Function} A decorator function
                     */
                    none: function none() {
                        return function (view, renderableName, descriptor) {
                            var renderable = prepDecoratedRenderable(view, renderableName, descriptor);
                            renderable.decorations.disableDock = true;
                        };
                    }

                },

                /**
                 * Makes the renderable allowed to be dragged around. this.renderables[name] refers to a RenderNode containing this
                 * draggable along with the renderable itself.
                 *
                 * @example
                 * @layout.draggable({xRange: [0, 100}, yRange: [0, 200]})
                 * @layout.size(100, 100)
                 * // Makes a draggable square that is red
                 * draggableRenderable = new Surface({properties: {backgroundColor: 'red'});
                 *
                 * @param {Object} [draggableOptions]. Same options that can be passed to a Famous Draggable.
                 * @param {Number} [options.snapX] grid width for snapping during drag
                 * @param {Number} [options.snapY] grid height for snapping during drag
                 * @param {Array.Number} [options.xRange] maxmimum [negative, positive] x displacement from start of drag
                 * @param {Array.Number} [options.yRange] maxmimum [negative, positive] y displacement from start of drag
                 * @param {Number} [options.scale] one pixel of input motion translates to this many pixels of output drag motion
                 * @param {Number} [options.projection] User should set to Draggable._direction.x or
                 *    Draggable._direction.y to constrain to one axis.
                 * @returns {Function}
                 */
                draggable: function draggable() {
                    var draggableOptions = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                    return function (view, renderableName, descriptor) {
                        var renderable = prepDecoratedRenderable(view, renderableName, descriptor);
                        renderable.decorations.draggableOptions = draggableOptions;
                    };
                },

                /**
                 * Makes the renderable swipable with physics-like velocity after the dragging is released. Emits event
                 * 'thresholdReached' with arguments ('x'|'y', 0|1) when any thresholds have been reached. this.renderables[name]
                 * now refers to a a RenderNode containing a positionModifier along with the renderable itself.
                 *
                 * @example
                 * @layout.size(100, 100)
                 * @layout.swipable({xRange: [0, 100], snapX: true})
                 * //Make a red box that can slide to the right
                 * swipable = new Surface({properties: {backgroundColor: 'red'});
                 *
                 * @param {Object} options
                 * @param {Boolean} [options.snapX] Whether to snap to the x axis
                 * @param {Boolean} [options.snapY] Whether to snap to the Y axis
                 * @param {Boolean} [options.enabled] Whether the swipable should be initially enabled
                 * @param {Array.Number} [options.xThreshold] Two values of the thresholds that trigger the thresholdReached event with
                 * argument 'x' and second argument 0 or 1, depending on the direction.
                 * Specify undefined in one of them to disable threshold to that direction.
                 * @param {Array.Number} [options.yThreshold] Two values of the thresholds that trigger the thresholdReached event with
                 * argument 'y'  and second argument 0 or 1, depending on the direction.
                 * Specify undefined in one of them to disable threshold to that direction.
                 * @returns {Function} A decorator function
                 */
                swipable: function swipable(options) {
                    return function (view, renderableName, descriptor) {
                        var renderable = prepDecoratedRenderable(view, renderableName, descriptor);
                        renderable.decorations.swipableOptions = options;
                    };
                },

                /**
                 * Clips the renderable by creating another DOM-element with overflow: hidden. Internally, creates a Famous
                 * ContainerSurface.
                 * The two size parameters can either be a number or undefined (equals the context size).
                 *
                 * @example
                 * @layout.size(40,40)
                 * @layout.clip(20, 20)
                 * // Shows a quarter of a circle
                 * renderable = new Surface({properties: {backgroundColor: 'red', borderRadius: '50%'});
                 *
                 * @param {Number} width The width of the ContainerSurface
                 * @param {Number} heigh The height of the ContainerSurface
                 * @param {Object} [properties]. Properties that will be passed to the newly created parent DOM-element.
                 * If specified, merged with {overflow: 'hidden'}
                 * @returns {Function} A decorator function
                 */

                /**
                 * Specifies the size of the renderable. For both of the parameters, sizes can be interpreted as follows:
                 *
                 * If specified as a function, then the argument passed is the context size of the specified dimension
                 * (width or height). Note that if an arrow function is used, this scoping cannot be used when inside a
                 * decorator, since the scope will be the global scope.
                 *
                 * If true is specified or a tilde with a size (e.g. ~300), then the renderable will be automatically sized.
                 * If a tilde is used to indicate the size, then the size after the tilde will be used when/if the
                 * renderable doesn't have a size, or turn into the actual size if it can be determined. This is useful when wanting
                 * to reduce the flickering of surfaces who's size cannot be determined the first render tick.
                 * Beware that true sizing of surfaces or other raw dom elements (input surfaces, image surfaces, text boxes etc)
                 * often comes with a perfomance penalty and should only be used when necessary.
                 * Also beware that any negative size will be interpreted as a tilde, since ~x = 1 - x
                 *
                 * If undefined is specified, then the size of that dimension will equal the entire context size.
                 *
                 * If a size between 0 and 1 is specified, then that will be interpreted as a proportion of the context size. For
                 * example if 0.5 is specified, then the size will be half of the context size (the parent's size). Instead of
                 * specifying 1 to cover the entire context size, use undefined instead.
                 * @example
                 * @layout.size(function(contextWidth) {return Math.max(contextWidth, this.options.maxWidth)}, ~300)
                 * // Creates a renderable where the width is equal to the text width and the height is whatever is bigger,
                 * // options.maxWidth, or the context size
                 * text = new Surface({content: 'This is some text', properties: {backgroundColor: 'red'}});
                 *
                 * @param {Number|Function} x
                 * @param {Number|Function} y
                 * @returns {Function} A decorator function
                 */
                size: function size(x, y) {
                    return function (view, renderableName, descriptor) {
                        if (Array.isArray(x)) {
                            throw Error('Please specify size as two arguments, and not as an array');
                        }
                        var renderable = prepDecoratedRenderable(view, renderableName, descriptor);
                        renderable.decorations.size = [x, y];
                    };
                },
                clip: function clip(width, height) {
                    var properties = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

                    return function (view, renderableName, descriptor) {
                        var renderable = prepDecoratedRenderable(view, renderableName, descriptor);
                        renderable.decorations.clip = { size: [width, height], properties: properties };
                    };
                },

                /**
                 * Rotates the renderable around any of the three axes (in radians).
                 *
                 * @example
                 * @layout.size(100,100)
                 * @layout.rotate(0, 0, Math.PI)
                 * // Writes text upside down
                 * renderable = new Surface({content: 'upside down text'});
                 *
                 * @param {Number} x The rotation around the x axis (flips vertically)
                 * @param {Number} y The rotation around the y axis (flips horizontally)
                 * @param {Number} z The rotation around the z axis (rotatesin in the more intuitive sense)
                 * @returns {Function} A decorator function
                 */
                rotate: function rotate(x, y, z) {
                    return function (view, renderableName, descriptor) {
                        var renderable = prepDecoratedRenderable(view, renderableName, descriptor);
                        renderable.decorations.rotate = [x, y, z];
                    };
                },

                /**
                 * Rotates the renderable around any of the three axes (in radians) relatively to the current rotation
                 *
                 * @example
                 * @layout.size(100,100)
                 * @layout.rotate(0, 0, Math.PI)
                 * // Writes text upside down
                 * renderable = new Surface({content: 'upside down text'});
                 *
                 * @param {Number} x The rotation around the x axis (flips vertically)
                 * @param {Number} y The rotation around the y axis (flips horizontally)
                 * @param {Number} z The rotation around the z axis (rotatesin in the more intuitive sense)
                 * @returns {Function} A decorator function
                 */
                rotateFrom: function rotateFrom(x, y, z) {
                    return function (view, renderableName, descriptor) {
                        var renderable = prepDecoratedRenderable(view, renderableName, descriptor);
                        var propertyName = 'rotate';
                        var properties = renderable.decorations[propertyName] || [0, 0, 0];
                        renderable.decorations[propertyName] = [properties[0] + x, properties[1] + y, properties[2] + z];
                    };
                },

                /**
                 * Sets the opacity of a renderable.
                 *
                 * @example
                 * @layout.opacity(0.5)
                 * @layout.size(100, 10)
                 * @layout.place.center()
                 * // Writes text that is half invisible
                 * renderable = new Surface({content: 'Half invisible'});
                 *
                 * @param {Number} opacity The opacity, between 0 and 1
                 * @returns {Function} A decorator function
                 */
                opacity: function opacity(_opacity) {
                    return function (view, renderableName, descriptor) {
                        var renderable = prepDecoratedRenderable(view, renderableName, descriptor);
                        renderable.decorations.opacity = _opacity;
                    };
                },

                _stickTo: function _stickTo(stick) {
                    return function (view, renderableName, descriptor) {
                        var origin = [0, 0],
                            align = [0, 0];
                        switch (stick) {
                            case 'center':
                                origin = align = [0.5, 0.5];
                                break;
                            case 'bottomRight':
                                origin = align = [1, 1];
                                break;
                            case 'bottomLeft':
                                origin = align = [0, 1];
                                break;
                            case 'topRight':
                                origin = align = [1, 0];
                                break;
                            case 'left':
                                origin = align = [0, 0.5];
                                break;
                            case 'right':
                                origin = align = [1, 0.5];
                                break;
                            case 'top':
                                origin = align = [0.5, 0];
                                break;
                            case 'bottom':
                                origin = align = [0.5, 1];
                                break;
                            default:
                            case 'topLeft':
                                origin = align = [0, 0];
                                break;

                        }

                        var renderable = prepDecoratedRenderable(view, renderableName, descriptor);
                        renderable.decorations.origin = origin;
                        renderable.decorations.align = align;
                    };
                },
                /**
                 * Places the renderable by settings origin/align. If nothing is set, it will default to topleft.
                 *
                 * @example
                 * @layout.size(100,~300)
                 * @layout.stick.center()
                 * renderable = new Surface({content: 'centered text'});
                 *
                 * @param {String} stick. Can be either of 'center', 'left', 'right', 'bottom', 'top', 'bottomleft', 'bottomright',
                 * 'topright', 'topleft'
                 * @returns {Function} A decorator function
                 */
                stick: {
                    center: function center() {
                        return layout$1._stickTo('center');
                    },
                    left: function left() {
                        return layout$1._stickTo('left');
                    },
                    right: function right() {
                        return layout$1._stickTo('right');
                    },
                    top: function top() {
                        return layout$1._stickTo('top');
                    },
                    bottom: function bottom() {
                        return layout$1._stickTo('bottom');
                    },
                    bottomLeft: function bottomLeft() {
                        return layout$1._stickTo('bottomLeft');
                    },
                    bottomRight: function bottomRight() {
                        return layout$1._stickTo('bottomRight');
                    },
                    topLeft: function topLeft() {
                        return layout$1._stickTo('topLeft');
                    },
                    topRight: function topRight() {
                        return layout$1._stickTo('topRight');
                    }
                },

                /**
                 * Sets the point where the renderable has its anchor from where rotation and translation will be done.
                 * You could consider it as translating the negative of the proportion times its size. The arguments are always
                 * between and including 0 and 1.
                 *
                 * @example
                 * @layout.origin(0.5, 0)
                 * @layout.align(0.5, 0.5)
                 * @layout.size(100,100)
                 * //Displays a red box horizontically centered and displays just below the vertical mid point
                 * renderable = new Surface({properties: {backgroundColor: 'red'}});
                 *
                 *
                 * @param {Number} x. The x of the origin.
                 * @param {Number} y. The y of the origin.
                 * @returns {Function} A decorator function.
                 */
                origin: function origin(x, y) {
                    return function (view, renderableName, descriptor) {
                        var renderable = prepDecoratedRenderable(view, renderableName, descriptor);
                        renderable.decorations.origin = [x, y];
                    };
                },

                /**
                 * Translates the renderable by a proportion of the context size.
                 *
                 * @example
                 * @layout.align(0.5, 0.5)
                 * @layout.size(100,100)
                 * //Displays a red box just below the vertical mid point and past the horizontal mid point
                 * renderable = new Surface({properties: {backgroundColor: 'red'}});
                 *
                 * @param {Number} x. The proportion of the context width that is going to be translated.
                 * @param {Number} y. The proportion of the context height that is going to be translated.
                 * @returns {Function} A decorator function.
                 */
                align: function align(x, y) {
                    return function (view, renderableName, descriptor) {
                        var renderable = prepDecoratedRenderable(view, renderableName, descriptor);
                        renderable.decorations.align = [x, y];
                    };
                },

                /**
                 * Specifies a translation of a renderable. Can be applied to every kind of renderable (docked, fullSize,
                 * and normal). Can also be applied on view level to translate every renderable of that view. The view wide translation defaults
                 * to [0, 0, 10] in order to always increase the z space of every level of the Famous rendering tree.
                 *
                 * @example
                 * @layout.translate(0, 0, 20)
                 * class myView extends View{
                 *  @layout.translate(0, 0, -20)
                 *  @layout.fullSize()
                 *  // Will display relatively at z level 0 (20 minus 20)
                 *  myBackground = new Surface({properties: {backgroudColor: 'red'}});
                 * }
                 *
                 * @param {Number} x Moves the renderable along the x axis.
                 * @param {Number} y Moves the renderable along the y axis.
                 * @param {Number} z Moves the renderable along the z axis.
                 * @returns {Function} A decorator function.
                 */
                translate: function translate(x, y, z) {
                    return function (target, renderableName, descriptor) {
                        if (Array.isArray(x)) {
                            throw Error('Please specify translate as three arguments, and not as an array');
                        }
                        var propertyName = void 0,
                            decorations = void 0;
                        if (typeof target == 'function') {
                            decorations = prepPrototypeDecorations(target.prototype);
                            propertyName = 'extraTranslate';
                        } else {
                            decorations = prepDecoratedRenderable.apply(undefined, arguments).decorations;
                            propertyName = 'translate';
                        }
                        decorations[propertyName] = [x, y, z];
                    };
                },

                /**
                 * Specifies a relative translation of a renderable. Can be applied to every kind of renderable (docked, fullSize,
                 * and normal).
                 * Can also be applied on view level to translate every renderable of that view. The view wide translation defaults
                 * to [0, 0, 10] in order to always increase the z space of every level of the Famous rendering tree.
                 *
                 * @example
                 * @layout.translateFrom(0, 0, 20)
                 * class myView extends View{
                 *  @layout.translateFrom(0, 0, -20)
                 *  @layout.fullSize()
                 *  // Will display relatively at z level 0 (20 minus 20)
                 *  myBackground = new Surface({properties: {backgroudColor: 'red'}});
                 * }
                 *
                 * @param {Number} x Moves the renderable along the x axis.
                 * @param {Number} y Moves the renderable along the y axis.
                 * @param {Number} z Moves the renderable along the z axis.
                 * @returns {Function} A decorator function.
                 */
                translateFrom: function translateFrom(x, y, z) {
                    return function (target, renderableName, descriptor) {
                        if (Array.isArray(x)) {
                            throw Error('Please specify translate as three arguments, and not as an array');
                        }
                        var propertyName = void 0,
                            decorations = void 0;
                        if (typeof target == 'function') {
                            decorations = prepPrototypeDecorations(target.prototype);
                            propertyName = 'extraTranslate';
                        } else {
                            decorations = prepDecoratedRenderable.apply(undefined, arguments).decorations;
                            propertyName = 'translate';
                        }
                        var properties = decorations[propertyName] || [0, 0, 0];
                        decorations[propertyName] = [properties[0] + x, properties[1] + y, properties[2] + z];
                    };
                },

                /**
                 * Specifies the scale of a renderable. Can be applied to every kind of renderable.
                 *
                 * @example
                 *  class myView extends View{
                 *  @layout.scale(2, 2, 2)
                 *  @layout.fullscreen
                 *  // Will scale the renderable by 2 in the x,y,z dimension
                 *  myBackground = new Surface({properties: {backgroudColor: 'red'}});
                 * }
                 *
                 * @param {Number} x Scales the renderable along the x axis.
                 * @param {Number} y Scales the renderable along the y axis.
                 * @param {Number} z Scales the renderable along the z axis.
                 * @returns {Function} A decorator function.
                 */
                scale: function scale(x) {
                    var y = arguments.length <= 1 || arguments[1] === undefined ? Utils.warn('Please specify y parameter for scaling') : arguments[1];
                    var z = arguments.length <= 2 || arguments[2] === undefined ? Utils.warn('Please specify z parameter for scaling') : arguments[2];

                    return function (target, renderableName, descriptor) {
                        var decorations = prepDecoratedRenderable.apply(undefined, arguments).decorations;
                        var propertyName = 'scale';
                        decorations[propertyName] = [x, y, z];
                    };
                },

                /**
                 * Specifies the skew of a renderable. Can be applied to every kind of renderable.
                 *
                 * @example
                 *  class myView extends View{
                 *  @layout.skew(2, 2, 2)
                 *  @layout.fullscreen
                 *  // Will skew the renderable by 2 in the x,y,z dimension
                 *  myBackground = new Surface({properties: {backgroudColor: 'red'}});
                 * }
                 *
                 * @param {Number} x Skews the renderable along the x axis.
                 * @param {Number} y Skews the renderable along the y axis.
                 * @param {Number} z Skews the renderable along the z axis.
                 * @returns {Function} A decorator function.
                 */
                skew: function skew(x, y, z) {
                    return function (target, renderableName, descriptor) {
                        var decorations = prepDecoratedRenderable.apply(undefined, arguments).decorations;
                        var propertyName = 'skew';
                        decorations[propertyName] = [x, y, z];
                    };
                },

                /**
                 *
                 * Creates an animation controller to show/hide the renderable. Renderables can be shown by calling
                 * this.showRenderable(renderableName) and hidden using this.hideRenderable(renderableName) or
                 * this.showRenderable(renderableName, false). When a renderable has been shown, it will emit the event 'shown'.
                 *
                 * @example
                 * @layout.stick.center()
                 * @layout.size(100,100)
                 * @layout.animate({transition: {duration: 350}})
                 * renderable = new Surface({properties: {backgroundColor: 'red'}});
                 *
                 *
                 *
                 * @param {Object} [options] The same as famous-flex Animation Controller, plus 2 more:
                 * @param {Boolean} [options.showInitially] Whether to show the renderable when the view is created. (Default: true).
                 * @param {String} [options.waitFor] If specified, it will wait for the renderable with the specified name to show
                 * before showing the renderable
                 * @param {Object} [options.transition] Transition options.
                 * @param {Function} [options.animation] Animation function (default: `AnimationController.Animation.FadedZoom`).
                 * @param {Number} [options.zIndexOffset] Optional z-index difference between the hiding & showing renderable (default: 0).
                 * @param {Number} [options.keepHiddenViewsInDOMCount] Keeps views in the DOM after they have been hidden (default: 0).
                 * @param {Object} [options.show] Show specific options.
                 * @param {Object} [options.show.transition] Show specific transition options.
                 * @param {Function} [options.show.animation] Show specific animation function.
                 * @param {Object} [options.hide] Hide specific options.
                 * @param {Object} [options.hide.transition] Hide specific transition options.
                 * @param {Function} [options.hide.animation] Hide specific animation function.
                 * @param {Object} [options.transfer] Transfer options.
                 * @param {Object} [options.transfer.transition] Transfer specific transition options.
                 * @param {Number} [options.transfer.zIndex] Z-index the tranferables are moved on top while animating (default: 10).
                 * @param {Bool} [options.transfer.fastResize] When enabled, scales the renderable i.s.o. resizing when doing the transfer animation (default: true).
                 * @param {Array} [options.transfer.items] Ids (key/value) pairs (source-id/target-id) of the renderables that should be transferred.
                 * @returns {Function}
                 */
                animate: function animate() {
                    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                    return function (view, renderableName, descriptor) {
                        var renderableConstructor = prepDecoratedRenderable(view, renderableName, descriptor);
                        options = merge({
                            showInitially: true,
                            animation: AnimationController.Animation.FadedZoom,
                            show: { transition: options.transition || { curve: Easing.outCubic, duration: 250 } },
                            hide: { transition: options.transition || { curve: Easing.inCubic, duration: 250 } }
                        }, options);

                        renderableConstructor.decorations.animation = options;

                        constructor.decorations = renderableConstructor.decorations;
                    };
                },

                /**
                 * Makes the view flow by tweening all intermediate stages of a changed attribute of any renderable.
                 *
                 * @example
                 * @layout.flow({spring: {dampingRatio: 0.8, period: 1000}})
                 * class myView extends View{
                 * ...
                 * }
                 *
                 * @param {Object} Options to pass as flowOptions to the LayoutController
                 * @param {Bool} [flowOptions.transition] If specified, sets the default transition to use
                 * @param {Bool} [flowOptions.reflowOnResize] Smoothly reflows renderables on resize (only used when flow = true) (default: `true`).
                 * @param {Object} [flowOptions.spring] Spring options used by nodes when reflowing (default: `{dampingRatio: 0.8, period: 300}`).
                 * @param {Object} [flowOptions.properties] Properties which should be enabled or disabled for flowing.
                 * @param {Spec} [flowOptions.insertSpec] Size, transform, opacity... to use when inserting new renderables into the scene (default: `{}`).
                 * @param {Spec} [flowOptions.removeSpec] Size, transform, opacity... to use when removing renderables from the scene (default: undefined).
                 * @returns {Function} A decorator function
                 */
                flow: function flow() {
                    var flowOptions = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                    return function (target) {
                        var decorations = prepPrototypeDecorations(target.prototype);
                        decorations.useFlow = true;
                        decorations.flowOptions = flowOptions || {};
                        decorations.transition = flowOptions.transition || undefined;
                    };
                },

                /**
                 * Makes the view as scrollable. This will put the entire content in a ReflowingScrollView that uses getSize on the
                 * view to determine scrolling size. If the size cannot be determined, you might consider declaring your own
                 * getSize() on the View.
                 *
                 * @example
                 * @layout.scrollable()
                 * class myView extends View{
                 * ...
                 * }
                 *
                 *
                 * @returns {Function} A decorator function
                 */

                scrollable: function scrollable() {
                    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                    return function (target) {
                        var decorations = prepPrototypeDecorations(target.prototype);
                        decorations.scrollableOptions = options;
                    };
                },

                /**
                 * Experimental feature of scrolling natively.
                 *
                 * @param {Object} [options] Options on how to scroll
                 * @param {Boolean} [options.scrollY] Defaults to true
                 * @param {Boolean} [options.scrollX] Defaults to false
                 * @returns {Function} A decorator function
                 */
                nativeScrollable: function nativeScrollable() {
                    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
                    var _options$scrollY = options.scrollY;
                    var scrollY = _options$scrollY === undefined ? true : _options$scrollY;
                    var _options$scrollX = options.scrollX;
                    var scrollX = _options$scrollX === undefined ? false : _options$scrollX;

                    return function (target) {
                        var decorations = prepPrototypeDecorations(target.prototype);
                        decorations.nativeScrollable = { scrollY: scrollY, scrollX: scrollX };
                    };
                },

                /**
                 * Sets the margins for the docked content. This can be applied both to a child and a class. When in conflict,
                 * the parent will override the child's setting. If the margin is set on a Surface, then CSS padding will be set.
                 * margins can be 1, 2, or 4, parameters, which can be specified as shorthand in the same way
                 * as CSS does it.
                 *
                 * @example
                 * @layout.dockPadding(15)
                 * //Creates a class with 15px margin on all sides for docked renderables
                 * class myView extends View{
                 *
                 *  //Will be displayed with margin
                 *  @layout.dock.top(20)
                 *  onTop = new Surface({content: "hello world"});
                 *
                 *  //Will be displayed without margin since we're using @layout.stick
                 *  @layout.stick.bottom
                 *  onButtom = new Surface({content: "hey hey"});
                 * }
                 *
                  *
                 * @param {Number} firstMargin
                 * @param {Number} [secondMargin]
                 * @param {Number} [thirdMargin]
                 * @param {Number} [fourthMargin]
                 * @returns {Function} A decorator function
                 */
                dockPadding: function dockPadding() {
                    for (var _len = arguments.length, margins = Array(_len), _key = 0; _key < _len; _key++) {
                        margins[_key] = arguments[_key];
                    }

                    return function (target) {
                        var decorations = void 0;
                        if (typeof target == 'function') {
                            decorations = prepPrototypeDecorations(target.prototype);
                        } else {
                            decorations = prepDecoratedRenderable.apply(undefined, arguments).decorations;
                        }
                        decorations.viewMargins = LayoutUtility.normalizeMargins(margins);
                    };
                },

                /**
                 * Like @layout.dockPadding, sets the padding between this view and its docked content.
                 * When the screen width plus this padding exceeds maxContentWidth, the padding
                 * is increased, so that the content is never wider than maxContentWidth.
                 *
                 * @example
                 * @layout.columnDockPadding(720, [16])
                 * //Creates a class with 16px margin on all sides for docked renderables
                 * class myView extends View{
                 *
                 *  //Will be displayed with margin to the top and sides, and will at max be 720px wide.
                 *  @layout.dock.top(20)
                 *  onTop = new Surface({content: "hello world"});
                 *
                 *  //Will be displayed without margin since we're using @layout.stick instead of @layout.dock
                 *  @layout.stick.bottom()
                 *  onButtom = new Surface({content: "hey hey"});
                 * }
                 *
                 * @param {Number} maxContentWidth Maximum width the content should be allowed to be.
                 * @param {Array.Number} defaultPadding A 1-D, 2-D, or 4-D array of padding numbers, just like the padding spec in CSS.
                 * @returns {Function}
                 */
                columnDockPadding: function columnDockPadding() {
                    var maxContentWidth = arguments.length <= 0 || arguments[0] === undefined ? 720 : arguments[0];
                    var defaultPadding = arguments.length <= 1 || arguments[1] === undefined ? [0, 16, 0, 16] : arguments[1];

                    return function (target) {
                        var decorations = prepPrototypeDecorations(target.prototype);
                        var normalisedPadding = LayoutUtility.normalizeMargins(defaultPadding);

                        /* Default to 16px dockPadding */
                        layout$1.dockPadding(normalisedPadding);

                        /* Calculate the dockPadding dynamically every time the View's size changes.
                         * The results from calling this method are further handled in View.js.
                         *
                         * The logic behind this is 16px padding by default, unless the screen is
                         * wider than 720px. In that case, the padding is increased to make the content
                         * in between be at maximum 720px. */
                        decorations.dynamicDockPadding = function (size) {
                            var sideWidth = size[0] > maxContentWidth + 32 ? (size[0] - maxContentWidth) / 2 : normalisedPadding[1];
                            return [normalisedPadding[0], sideWidth, normalisedPadding[2], sideWidth];
                        };
                    };
                },

                /**
                 *
                 * Adds a custom layout function to the view.
                 * This decorator works directly on the object so you shouldn't pass any arguments nor use parentheses.
                 *
                 * @example
                 * @layout.custom((context) => {
                 *  context.set('myRenderable', {
                 *  size: [100, 100]
                 * })
                 * class MyView extends View {
                 *  constructor(options) {
                 *      super(options);
                 *      this.renderables.myRenderable = new Surface({properties: {backgroundColor: 'red'}});
                 *  }
                 * }
                 *
                 *
                 * @param customLayoutFunction
                 * @returns {Function} A decorator function
                 */
                custom: function custom(customLayoutFunction) {
                    return function (target) {
                        var decorations = prepPrototypeDecorations(target.prototype);
                        decorations.customLayoutFunction = customLayoutFunction;
                    };
                }
            };
            flow = {
                /**
                 * Sets the default flow options for a View. These options will be overridden by
                 * each of its renderables, if they have flow options defined through e.g. flow.stateStep()
                 *
                 * @example
                 * @flow.defaultOptions({ transition: { curve: Easing.outCubic, duration: 200 } })
                 * class MyView extends View {
                 * }
                 *
                 * @param {Object} flowOptions Options to set as default.
                 * @param {Object} [flowOptions.delay] The amount of milliseconds to wait in between state transitions.
                 * @param {Object} [flowOptions.transition] A Famo.us-compatible transition object defining the animation specifics.
                 * @param {Object} [flowOptions.transition.curve] The animation curve to use when flowing from one state to another, e.g. Easing.outCubic.
                 * @param {Object} [flowOptions.transition.duration] The amount of milliseconds a flow animation should take.
                 * @returns {Function}
                 */
                defaultOptions: function defaultOptions() {
                    var flowOptions = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                    return function (target, renderableName, descriptor) {
                        var decorations = prepDecoratedRenderable.apply(undefined, arguments).decorations;
                        if (!decorations.flow) {
                            decorations.flow = { states: {} };
                        }
                        decorations.flow.defaults = _extends({}, flowOptions);
                    };
                },

                /**
                 * Functions the same as @flow.stateStep(), and additionally also immediately applies the decorators passed into the 'transformations' argument.
                 * Used to define a state step, without having to also manually apply the same decorators to the renderable to ensure it is rendered this way
                 * on initial show.
                 *
                 * @example
                 * // Initial size is [100, 100], and rendered at center of parent.
                 * @flow.defaultState('active', {}, layout.size(100, 100), layout.stick.center())
                 * myRenderable = new Surface();
                 *
                 * @param {String} stateName The state name to assign to this state step.
                 * @param {Object} [stateOptions] Flow options to use in the state step.
                 * @param {Object} [stateOptions.delay] The amount of milliseconds to wait in between state transitions.
                 * @param {Object} [stateOptions.transition] A Famo.us-compatible transition object defining the animation specifics.
                 * @param {Object} [stateOptions.transition.curve] The animation curve to use when flowing from one state to another, e.g. Easing.outCubic.
                 * @param {Object} [stateOptions.transition.duration] The amount of milliseconds a flow animation should take.
                 * @param {Array.Function} transformations Decorators to assign to this state, and to apply initially, passed in as regular comma-separated arguments.
                 * @returns {Function}
                 */
                defaultState: function defaultState() {
                    for (var _len2 = arguments.length, transformations = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
                        transformations[_key2 - 2] = arguments[_key2];
                    }

                    var stateName = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
                    var stateOptions = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

                    return function (target, renderableName, descriptor) {
                        flow.stateStep.apply(flow, [stateName, stateOptions].concat(transformations))(target, renderableName, descriptor);
                        for (var _iterator = transformations, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                            var _ref;

                            if (_isArray) {
                                if (_i >= _iterator.length) break;
                                _ref = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) break;
                                _ref = _i.value;
                            }

                            var transformation = _ref;

                            transformation(target, renderableName, descriptor);
                        }
                    };
                },

                /**
                 * Used to define a state that the renderable is able to flow to. When multiple state steps with the same state name
                 * are defined, flowing into that state will sequentially execute all defined steps with that state name.
                 *
                 * @example
                 * // Initial size is [0, 0], and rendered at top left of parent, because no @flow.defaultStep() was done,
                 * // and no other decorators are applied to the renderable.
                 * @flow.stateStep('active', {}, layout.size(100, 100), layout.stick.center())
                 * myRenderable = new Surface();
                 *
                 * @param {String} stateName The state name to assign to this state step.
                 * @param {Object} [stateOptions] Flow options to use in the state step.
                 * @param {Object} [stateOptions.delay] The amount of milliseconds to wait in between state transitions.
                 * @param {Object} [stateOptions.transition] A Famo.us-compatible transition object defining the animation specifics.
                 * @param {Object} [stateOptions.transition.curve] The animation curve to use when flowing from one state to another, e.g. Easing.outCubic.
                 * @param {Object} [stateOptions.transition.duration] The amount of milliseconds a flow animation should take.
                 * @param {Array.Function} transformations Decorators to assign to this state, and to apply initially, passed in as regular comma-separated arguments.
                 * @returns {Function}
                 */
                stateStep: function stateStep() {
                    for (var _len3 = arguments.length, transformations = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
                        transformations[_key3 - 2] = arguments[_key3];
                    }

                    var stateName = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
                    var stateOptions = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

                    return function (target, renderableName, descriptor) {
                        var decorations = prepDecoratedRenderable.apply(undefined, arguments).decorations;
                        if (!decorations.flow) {
                            decorations.flow = { states: {} };
                        }
                        if (!decorations.flow.states[stateName]) {
                            decorations.flow.states[stateName] = { steps: [] };
                        }
                        decorations.flow.states[stateName].steps.unshift({ transformations: transformations, options: stateOptions });
                    };
                },

                /**
                 * Defines the View-level states, that exist of concurrently and sequentially executed renderable-level states.
                 * When e.g. View.setViewFlowState('active') is called, the renderable states defined in the view-level state 'active' are executed.
                 *
                 * @example
                 * // Calling setViewFlowState('active') will first hide the loader, and when that is completed, show both buttons at the same time.
                 * @flow.viewStates({ 'active': [{loader: 'hidden'}, { button1: 'active', button2: 'active' }] })
                 * class MyView extends View {
                 *
                 *   @flow.defaultState('shown', {}, layout.opacity(1), layout.fullSize())
                 *   @flow.stateStep('hidden', {}, layout.opacity(0))
                 *   loader = new Surface();
                 *
                 *   @flow.defaultState('inactive', {}, layout.opacity(0), layout.size(100, 100), layout.stick.top())
                 *   @flow.stateStep('active', {}, layout.opacity(1))
                 *   button1 = new Surface();
                 *
                 *   @flow.defaultState('inactive', {}, layout.opacity(0), layout.size(100, 100), layout.stick.bottom())
                 *   @flow.stateStep('active', {}, layout.opacity(1))
                 *   button1 = new Surface();
                 * }
                 *
                 * @param {Object} states An object keyed by View-level state names, with values of arrays of objects.
                 * @returns {Function}
                 */
                viewStates: function viewStates() {
                    var states = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                    return function (target) {
                        var decorations = prepPrototypeDecorations(target.prototype);
                        if (!decorations.flow) {
                            decorations.flow = {};
                        }
                        decorations.flow.viewStates = states;
                    };
                },

                /**
                 * A wrapper around @flow.stateStep, to allow defining multiple steps with the same state name.
                 *
                 * @param {String} stateName State name to assign states to.
                 * @param {Array.Object} states An array of {stateOptions: [..], transformations: [..]} objects, with stateOptions and transformations
                 * being the same usage as @flow.stateStep().
                 * @returns {Function}
                 */
                multipleStateStep: function multipleStateStep() {
                    var stateName = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
                    var states = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

                    return function (target, renderableName, descriptor) {
                        for (var _iterator2 = states, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
                            var _ref2;

                            if (_isArray2) {
                                if (_i2 >= _iterator2.length) break;
                                _ref2 = _iterator2[_i2++];
                            } else {
                                _i2 = _iterator2.next();
                                if (_i2.done) break;
                                _ref2 = _i2.value;
                            }

                            var _ref3 = _ref2;
                            var stateOptions = _ref3.stateOptions;
                            var transformations = _ref3.transformations;

                            flow.stateStep.apply(flow, [stateName, stateOptions].concat(transformations))(target, renderableName, descriptor);
                        }
                    };
                }
            };

            SizeResolver = function (_EventEmitter) {
                _inherits(SizeResolver, _EventEmitter);

                function SizeResolver() {
                    _classCallCheck(this, SizeResolver);

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(SizeResolver).call(this));

                    _this._resolvedSizesCache = new Map();
                    _this._sizeIsFinalFor = new Map();
                    _this._trueSizedSurfaceInfo = new Map();
                    return _this;
                }

                /**
                 * Determines the decorated size. If there is true sizing involved, then it will not return the resolved true size.
                 * Instead, this can be accessed through getResolvedSize()
                 * @param {Renderable} renderable. The renderable for which we need the size
                 * @param {Renderable} renderableCounterpart. The renderable counter-part (e.g. AnimationController, RenderNode, or ContainerSurface).
                 * @param {Object} context. The context, with a specified size. The size can be set to NaN in order to return NaN
                 * @param {Array} specifiedSize. The size to use which is specified as a decorator
                 * @returns {*}
                 */

                _createClass(SizeResolver, [{
                    key: 'settleDecoratedSize',
                    value: function settleDecoratedSize(renderable, renderableCounterpart, context) {
                        var specifiedSize = arguments.length <= 3 || arguments[3] === undefined ? [undefined, undefined] : arguments[3];

                        var size = [];
                        var cacheResolvedSize = [];
                        for (var dimension = 0; dimension < 2; dimension++) {
                            size[dimension] = this.resolveSingleSize(specifiedSize[dimension], context.size, dimension);
                            if (this.isValueTrueSized(size[dimension])) {
                                cacheResolvedSize[dimension] = this._resolveSingleTrueSizedRenderable(renderable, size, dimension, renderableCounterpart);
                                if (Utils.renderableIsSurface(renderable)) {
                                    size[dimension] = true;
                                } else {
                                    size[dimension] = cacheResolvedSize[dimension];
                                }
                            } else {
                                this._sizeIsFinalFor.set(renderable, true);
                                size[dimension] = size[dimension] === undefined ? context.size[dimension] || size[dimension] : size[dimension];
                                cacheResolvedSize[dimension] = size[dimension];
                            }
                        }

                        this._resolvedSizesCache.set(renderable, [cacheResolvedSize[0], cacheResolvedSize[1]]);

                        return size[0] !== null && size[1] !== null ? size : null;
                    }

                    /**
                     * Resolves a single dimension (i.e. x or y) size of a renderable.
                     * @param {Number|Boolean|Object|Undefined|Function} renderableSize Renderable's single dimension size.
                     * @param {Array.Number} contextSize The context size
                     * @param {Number} dimension The dimension of the size that is being evaluated (e.g. 1 or 0)
                     * @returns {Number} The resulting size
                     * @private
                     */

                }, {
                    key: 'resolveSingleSize',
                    value: function resolveSingleSize(renderableSize, contextSize, dimension) {
                        switch (typeof renderableSize) {
                            case 'function':
                                return this.resolveSingleSize(renderableSize.apply(undefined, contextSize), contextSize, dimension);
                            case 'number':
                                /* If 0 < renderableSize < 1, we interpret renderableSize as a fraction of the contextSize */
                                return renderableSize < 1 && renderableSize > 0 ? renderableSize * Math.max(contextSize[dimension], 0) : renderableSize;
                            default:
                                /* renderableSize can be true/false, undefined, or 'auto' for example. */
                                return renderableSize;
                        }
                    }

                    /**
                     * Resolves a true size to an actual size of a truesized renderable. size[dim] must be negative or true.
                     * @param {Renderable} renderable the renderable
                     * @param {Array} size the size as specified
                     * @param dim the dimensions e.g. 0,1 that should be processed
                     * @param {Renderable} renderableCounterpart. The renderable counter-part (e.g. AnimationController, RenderNode, or ContainerSurface).
                     * @returns {Number} size[dim] will be returned with a non-truesized value
                     * @private
                     */

                }, {
                    key: '_resolveSingleTrueSizedRenderable',
                    value: function _resolveSingleTrueSizedRenderable(renderable, size, dim, renderableCounterpart) {
                        if (size[dim] === -1) {
                            Utils.warn('-1 detected as set size. If you want a true sized element to take ' + 'up a proportion of your view, please define a function doing so by ' + 'using the context size');
                        }
                        /* If there is an AnimationController without content, display 0 size */
                        if (renderableCounterpart instanceof AnimationController && !renderableCounterpart._showingRenderable) {
                            return 0;
                        }
                        /* True sized element. This has been specified as ~100 where 100 is the initial size
                         * applying this operator again (e.g. ~~100) gives us the value 100 back
                         * */
                        if (Utils.renderableIsComposite(renderable)) {
                            var twoDimensionalSize = renderable.getSize();
                            if (!twoDimensionalSize) {
                                return this._specifyUndeterminedSingleHeight(renderable, size, dim);
                            } else {
                                var renderableIsView = renderable instanceof View;
                                var sizeConsideredFinal = renderableIsView && renderable._initialised && !renderable.containsUncalculatedSurfaces() || !renderableIsView;
                                if (size[dim] === true && twoDimensionalSize[dim] === undefined && sizeConsideredFinal) {
                                    Utils.warn('True sized renderable \'' + renderable.constructor.name + '\' is taking up the entire context size.');
                                    return twoDimensionalSize[dim];
                                } else {
                                    var approximatedSize = size[dim] === true ? twoDimensionalSize[dim] : ~size[dim];
                                    var resultingSize = twoDimensionalSize[dim] !== undefined ? twoDimensionalSize[dim] : approximatedSize;
                                    if (renderableIsView) {
                                        resultingSize = sizeConsideredFinal ? resultingSize : approximatedSize;
                                    }
                                    this._sizeIsFinalFor.set(renderable, sizeConsideredFinal);
                                    return resultingSize;
                                }
                            }
                        } else if (Utils.renderableIsSurface(renderable)) {
                            var trueSizedSurfaceInfo = this._trueSizedSurfaceInfo.get(renderable) || {};
                            if (trueSizedSurfaceInfo.calculateOnNext) {
                                trueSizedSurfaceInfo.calculateOnNext = false;
                                this._tryCalculateTrueSizedSurface(renderable);
                            }
                            var _trueSizedSurfaceInfo = trueSizedSurfaceInfo;
                            var isUncalculated = _trueSizedSurfaceInfo.isUncalculated;

                            this._sizeIsFinalFor.set(renderable, !isUncalculated);
                            if (isUncalculated === false) {
                                return trueSizedSurfaceInfo.size[dim];
                            } else {
                                if (size[dim] === true) {
                                    var defaultSize = 5;
                                    Utils.warn('No initial size set for renderable \'' + renderable.constructor.name + '\', will default to ' + defaultSize + 'px');
                                    size[dim] = ~5;
                                }
                                if (isUncalculated !== true) {
                                    /* Seems like the surface isn't properly configured, let's get that going */
                                    trueSizedSurfaceInfo = this.configureTrueSizedSurface(renderable);
                                }
                                trueSizedSurfaceInfo.trueSizedDimensions[dim] = true;
                                renderable.size[dim] = true;
                                /* Need to set the size in order to get resize notifications */
                                return ~size[dim];
                            }
                        } else {
                            this._sizeIsFinalFor.set(renderable, true);
                            return this._specifyUndeterminedSingleHeight(renderable, size, dim);
                        }
                    }

                    /**
                     * Determines whether the size is considered final or not, and may affect whether the rendering will take place or
                     * not
                     * @param {Renderable} renderable
                     * @returns {Boolean} sizeIsFinal
                     */

                }, {
                    key: 'isSizeFinal',
                    value: function isSizeFinal(renderable) {
                        var consideredFinal = this._sizeIsFinalFor.get(renderable);
                        /* Return true if nothing is known, to be sure not to make errors */
                        if (consideredFinal === undefined) {
                            return true;
                        }
                        return consideredFinal;
                    }
                    /**
                     * Determines if the value is true sized
                     * @param {*} value
                     * @returns {boolean} True if the value is true sized
                     * @private
                     */

                }, {
                    key: 'isValueTrueSized',
                    value: function isValueTrueSized(value) {
                        return value < 0 || value === true;
                    }
                }, {
                    key: '_specifyUndeterminedSingleHeight',
                    value: function _specifyUndeterminedSingleHeight(renderable, size, dim) {
                        var resultingSize = size[dim] < 0 ? ~size[dim] : 5;
                        Utils.warn('Cannot determine size of ' + renderable.constructor.name + ', falling back to default size or ' + resultingSize + 'px. If the renderable is using legacy declaration this.renderables = ... this isn\'t supported for true sizing.');
                        return resultingSize;
                    }
                }, {
                    key: 'containsUncalculatedSurfaces',
                    value: function containsUncalculatedSurfaces() {
                        for (var _iterator = this._trueSizedSurfaceInfo, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                            var _ref;

                            if (_isArray) {
                                if (_i >= _iterator.length) break;
                                _ref = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) break;
                                _ref = _i.value;
                            }

                            var _ref2 = _ref;

                            var _ref3 = _slicedToArray(_ref2, 2);

                            var surface = _ref3[0];
                            var isUncalculated = _ref3[1].isUncalculated;

                            if (isUncalculated) {
                                return true;
                            }
                        }
                        return false;
                    }

                    /**
                     * Calculates a surface size, if possible
                     * @param renderable
                     * @private
                     */

                }, {
                    key: '_tryCalculateTrueSizedSurface',
                    value: function _tryCalculateTrueSizedSurface(renderable) {
                        var renderableHtmlElement = renderable._element;
                        var trueSizedInfo = this._trueSizedSurfaceInfo.get(renderable);
                        var trueSizedDimensions = trueSizedInfo.trueSizedDimensions;

                        if (renderableHtmlElement && (renderableHtmlElement.offsetWidth && renderableHtmlElement.offsetHeight || !renderable.getContent() && !(renderable instanceof ImageSurface)) && renderableHtmlElement.innerHTML === renderable.getContent() && (!renderableHtmlElement.style.width || !trueSizedDimensions[0]) && (!renderableHtmlElement.style.height || !trueSizedDimensions[1])) {
                            var newSize = void 0;

                            newSize = [renderableHtmlElement.offsetWidth, renderableHtmlElement.offsetHeight];

                            var oldSize = trueSizedInfo.size;
                            var sizeChange = false;
                            if (oldSize) {
                                for (var i = 0; i < 2; i++) {
                                    if (trueSizedDimensions[i] && oldSize[i] !== newSize[i]) {
                                        sizeChange = true;
                                    }
                                }
                            } else {
                                sizeChange = true;
                            }

                            if (sizeChange) {
                                trueSizedInfo.size = newSize;
                                trueSizedInfo.isUncalculated = false;
                            }
                            this.requestRecursiveReflow();
                        } else {
                            this.requestReflow();
                            this.requestLayoutControllerReflow();
                        }
                    }

                    //Todo listen for these in the view

                }, {
                    key: 'requestRecursiveReflow',
                    value: function requestRecursiveReflow() {
                        this.emit('reflowRecursively');
                    }
                }, {
                    key: 'requestReflow',
                    value: function requestReflow() {
                        this.emit('reflow');
                    }
                }, {
                    key: 'requestLayoutControllerReflow',
                    value: function requestLayoutControllerReflow() {
                        this.emit('layoutControllerReflow');
                    }

                    /**
                     * Sets up a true sized surface
                     * @param renderable
                     * @returns {{isUncalculated: boolean, trueSizedDimensions: boolean[], name: *}} an entry in this._trueSizedSurfaceInfo
                     * @private
                     */

                }, {
                    key: 'configureTrueSizedSurface',
                    value: function configureTrueSizedSurface(renderable) {
                        var _this2 = this;

                        var trueSizedSurfaceInfo = { isUncalculated: true, trueSizedDimensions: [false, false] };

                        /* We assume both dimensions not to be truesized, they are set in this._resolveDecoratedSize */
                        this._trueSizedSurfaceInfo.set(renderable, trueSizedSurfaceInfo);
                        /* Need to set the size in order to get resize notifications */
                        renderable.size = [undefined, undefined];

                        renderable.on('resize', function () {
                            _this2._tryCalculateTrueSizedSurface(renderable);
                        });
                        renderable.on('deploy', function () {
                            if (!_this2._trueSizedSurfaceInfo.get(renderable).isUncalculated) {
                                _this2._tryCalculateTrueSizedSurface(renderable);
                            }
                        });

                        return trueSizedSurfaceInfo;
                    }

                    /**
                     * Gets the size used when displaying a renderable on the screen the last time the calculation was done.
                     * @param {Renderable/Name} renderableOrName The renderable or the name of the renderable of which you need the size
                     */

                }, {
                    key: 'getResolvedSize',
                    value: function getResolvedSize(renderable) {
                        return this._resolvedSizesCache.get(renderable);
                    }
                }, {
                    key: 'doTrueSizedBookkeeping',
                    value: function doTrueSizedBookkeeping() {
                        for (var _iterator2 = this._trueSizedSurfaceInfo, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
                            var _ref4;

                            if (_isArray2) {
                                if (_i2 >= _iterator2.length) break;
                                _ref4 = _iterator2[_i2++];
                            } else {
                                _i2 = _iterator2.next();
                                if (_i2.done) break;
                                _ref4 = _i2.value;
                            }

                            var _ref5 = _ref4;

                            var _ref6 = _slicedToArray(_ref5, 1);

                            var surface = _ref6[0];

                            /* Encourage the surfaces to check if they have been resized, which could trigger the resize event */
                            surface._trueSizeCheck = true;
                        }
                    }
                }, {
                    key: 'getSurfaceTrueSizedInfo',
                    value: function getSurfaceTrueSizedInfo(surface) {
                        return this._trueSizedSurfaceInfo.get(surface);
                    }
                }]);

                return SizeResolver;
            }(EventEmitter);

            TrueSizedLayoutDockHelper.prototype.parse = function (data) {
                for (var i = 0; i < data.length; i++) {
                    var rule = data[i];
                    var value = rule.length >= 3 ? rule[2] : undefined;
                    if (rule[0] === 'top') {
                        this.top(rule[1], value, rule.length >= 4 ? rule[3] : undefined);
                    } else if (rule[0] === 'left') {
                        this.left(rule[1], value, rule.length >= 4 ? rule[3] : undefined);
                    } else if (rule[0] === 'right') {
                        this.right(rule[1], value, rule.length >= 4 ? rule[3] : undefined);
                    } else if (rule[0] === 'bottom') {
                        this.bottom(rule[1], value, rule.length >= 4 ? rule[3] : undefined);
                    } else if (rule[0] === 'fill') {
                        this.fill(rule[1], rule.length >= 3 ? rule[2] : undefined);
                    } else if (rule[0] === 'margins') {
                        this.margins(rule[1]);
                    }
                }
            };

            /**
             * Dock the node to the top. Sizes can also be specified as ~size, which makes them truesizes
             *
             * @param {LayoutNode|String} [node] layout-node to dock, when omitted the `height` argument argument is used for padding
             * @param {Array}  size of the node. If number, draws only one dimension and leaves the other one undefined
             * @param {Number} [z] z-index to use for the node
             * @param {Number} space the space inserted before this item, defaults to 0
             * @param extraTranslation
             * @return {TrueSizedLayoutDockHelper} this
             */
            TrueSizedLayoutDockHelper.prototype.top = function (renderableName, size) {
                var space = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];
                var extraTranslation = arguments.length <= 3 || arguments[3] === undefined ? [0, 0, 0] : arguments[3];
                var innerSize = arguments[4];
                var otherSpecs = arguments[5];

                var _setupAccordingToDime = this._setupAccordingToDimension(size, 1);

                var _setupAccordingToDime2 = _slicedToArray(_setupAccordingToDime, 2);

                var width = _setupAccordingToDime2[0];
                var height = _setupAccordingToDime2[1];

                if (this._data.top !== this._initialData.top) {
                    this._data.top += space;
                }

                this._context.set(renderableName, _extends({
                    size: innerSize || [width || this._data.right - this._data.left, this._ensureTrueSize(height)],
                    translate: this._addTranslations([this._data.left, this._data.top, this._data.z], extraTranslation)
                }, otherSpecs));
                /* If height was negative, then it is true sized and it needs to be tild'd to return to original */
                this._data.top += this._resolveSingleSize(height);
                return this;
            };

            /**
             * Dock the node to the left. Sizes can also be specified as ~size, which makes them truesizes
             *
             * @param {LayoutNode|String} [node] layout-node to dock, when omitted the `width` argument argument is used for padding
             * @param {Array}  size of the node. If number, draws only one dimension and leaves the other one undefined
             * @param {Number} [z] z-index to use for the node
             * @param {Number} space the space inserted before this item, defaults to 0
             * @param extraTranslation
             * @return {TrueSizedLayoutDockHelper} this
             */
            TrueSizedLayoutDockHelper.prototype.left = function (renderableName, size) {
                var space = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];
                var extraTranslation = arguments.length <= 3 || arguments[3] === undefined ? [0, 0, 0] : arguments[3];
                var innerSize = arguments[4];
                var otherSpecs = arguments[5];

                var _setupAccordingToDime3 = this._setupAccordingToDimension(size, 0);

                var _setupAccordingToDime4 = _slicedToArray(_setupAccordingToDime3, 2);

                var width = _setupAccordingToDime4[0];
                var height = _setupAccordingToDime4[1];

                if (this._data.left !== this._initialData.left) {
                    this._data.left += space;
                }
                this._context.set(renderableName, _extends({
                    size: innerSize || [this._ensureTrueSize(width), height || this._data.bottom - this._data.top],
                    translate: this._addTranslations([this._data.left, this._data.top, this._data.z], extraTranslation)
                }, otherSpecs));
                this._data.left += this._resolveSingleSize(width);
                return this;
            };

            /**
             * Dock the node to the bottom. Sizes can also be specified as ~size, which makes them truesizes
             *
             * @param {LayoutNode|String} [node] layout-node to dock, when omitted the `height` argument argument is used for padding
             * @param {Array}  size of the node. If number, draws only one dimension and leaves the other one undefined
             * @param {Number} [z] z-index to use for the node
             * @param {Number} space the space inserted before this item, defaults to 0
             * @param extraTranslation
             * @return {TrueSizedLayoutDockHelper} this
             */
            TrueSizedLayoutDockHelper.prototype.bottom = function (renderableName, size) {
                var space = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];
                var extraTranslation = arguments.length <= 3 || arguments[3] === undefined ? [0, 0, 0] : arguments[3];
                var innerSize = arguments[4];
                var otherSpecs = arguments[5];

                var _setupAccordingToDime5 = this._setupAccordingToDimension(size, 1);

                var _setupAccordingToDime6 = _slicedToArray(_setupAccordingToDime5, 2);

                var width = _setupAccordingToDime6[0];
                var height = _setupAccordingToDime6[1];

                if (this._data.bottom !== this._initialData.bottom) {
                    this._data.bottom -= space;
                }
                this._data.bottom -= this._resolveSingleSize(height);
                this._context.set(renderableName, _extends({
                    size: innerSize || [width || this._data.right - this._data.left, this._ensureTrueSize(height)],
                    translate: this._addTranslations([this._data.left, this._data.bottom, this._data.z], extraTranslation)
                }, otherSpecs));
                return this;
            };

            /**
             * Dock the node to the right. Sizes can also be specified as ~size, which makes them truesizes
             *
             * @param {LayoutNode|String} [node] layout-node to dock, when omitted the `width` argument argument is used for padding
             * @param {Array}  size of the node. If number, draws only one dimension and leaves the other one undefined
             * @param {Number} [this._data.z] z-index to use for the node
             * @param {Number} space the space inserted before this item, defaults to 0
             * @param extraTranslation
             * @return {TrueSizedLayoutDockHelper} this
             */
            TrueSizedLayoutDockHelper.prototype.right = function (renderableName, size) {
                var space = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];
                var extraTranslation = arguments.length <= 3 || arguments[3] === undefined ? [0, 0, 0] : arguments[3];
                var innerSize = arguments[4];
                var otherSpecs = arguments[5];

                var _setupAccordingToDime7 = this._setupAccordingToDimension(size, 0);

                var _setupAccordingToDime8 = _slicedToArray(_setupAccordingToDime7, 2);

                var width = _setupAccordingToDime8[0];
                var height = _setupAccordingToDime8[1];

                if (this._data.right !== this._initialData.right) {
                    this._data.right -= space;
                }
                this._data.right -= this._resolveSingleSize(width);
                this._context.set(renderableName, _extends({
                    size: innerSize || [this._ensureTrueSize(width), height || this._data.bottom - this._data.top],
                    translate: this._addTranslations([this._data.right, this._data.top, this._data.z], extraTranslation)
                }, otherSpecs));
                return this;
            };

            /**
             * Fills the node to the remaining content.
             *
             * @return {TrueSizedLayoutDockHelper} this
             * @param renderableName
             * @param size
             * @param translate
             * @param otherSpecs
             */
            TrueSizedLayoutDockHelper.prototype.fill = function (renderableName) {
                var size = arguments.length <= 1 || arguments[1] === undefined ? [0, 0] : arguments[1];
                var translate = arguments.length <= 2 || arguments[2] === undefined ? [0, 0, 0] : arguments[2];
                var otherSpecs = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];

                var fillSize = this.getFillSize();
                this._context.set(renderableName, _extends({
                    size: [size[0] || fillSize[0], size[1] || fillSize[1]],
                    translate: this._addTranslations([this._data.left, this._data.top, this._data.z], translate)
                }, otherSpecs));
                return this;
            };

            TrueSizedLayoutDockHelper.prototype.getFillSize = function () {
                return [this._data.right - this._data.left, this._data.bottom - this._data.top];
            };

            /**
             * Applies indent margins to the remaining content.
             *
             * @param {Number|Array} margins margins shorthand (e.g. '5', [10, 10], [5, 10, 5, 10])
             * @return {TrueSizedLayoutDockHelper} this
             */
            TrueSizedLayoutDockHelper.prototype.margins = function (margins) {
                margins = LayoutUtility.normalizeMargins(margins);
                this._data.left += margins[3];
                this._data.top += margins[0];
                this._data.right -= margins[1];
                this._data.bottom -= margins[2];
                this._initialData.left = this._data.left;
                this._initialData.right = this._data.right;
                this._initialData.top = this._data.top;
                this._initialData.bottom = this._data.bottom;
                return this;
            };

            TrueSizedLayoutDockHelper.prototype._resolveSingleSize = function (size) {
                return size < 0 ? ~size : size;
            };
            TrueSizedLayoutDockHelper.prototype._addTranslations = function (translation1, translation2) {
                return [translation1[0] + translation2[0], translation1[1] + translation2[1], translation1[2] + translation2[2]];
            };
            TrueSizedLayoutDockHelper.prototype._ensureTrueSize = function (size) {
                return size < 0 ? true : size;
            };

            TrueSizedLayoutDockHelper.prototype._setupAccordingToDimension = function (size, dim) {
                var height = void 0;
                var width = void 0;
                if (size instanceof Array) {
                    var orthogonalDimension = dim ? 0 : 1;
                    var adjustedSize = [size[0], size[1]];
                    if (size[orthogonalDimension] < 0) {
                        /* If a true size was specified as an orhtogonal dimension, we just set it to true, as we don't need to save the value anywhere here */
                        adjustedSize[orthogonalDimension] = true;
                    }
                    width = adjustedSize[0];
                    height = adjustedSize[1];
                } else {
                    width = size;
                }
                return [width, height];
            };

            /**
             * Gets the current left/right/top/bottom/z bounds used by the dock-helper.
             *
             * @return {Object} `{left: x, right: x, top: x, bottom: x, z: x}`
             */
            TrueSizedLayoutDockHelper.prototype.get = function () {
                return this._data;
            };

            /**
             * Created by lundfall on 01/09/16.
             */

            BaseLayoutHelper = function () {
                function BaseLayoutHelper(sizeResolver) {
                    _classCallCheck(this, BaseLayoutHelper);

                    this._sizeResolver = sizeResolver;
                }

                _createClass(BaseLayoutHelper, [{
                    key: 'layout',
                    value: function layout() {
                        throw Error("Not implemented");
                    }
                }, {
                    key: 'boundingBoxSize',
                    value: function boundingBoxSize() {
                        throw Error("Not implemented");
                    }

                    /**
                     * Gets the flow information from the renderable
                     * @param {Renderable} renderable
                     * @returns {{transition: Object, callback: Function}}
                     * @private
                     */

                }, {
                    key: '_getRenderableFlowInformation',
                    value: function _getRenderableFlowInformation(renderable) {
                        var decorations = renderable.decorations;

                        var flowInformation = { transition: undefined, callback: undefined };
                        var flow = decorations.flow;

                        if (flow) {
                            flowInformation.transition = flow.currentTransition || flow.defaults && flow.defaults.transition;
                            flowInformation.callback = flow.callback;
                        }
                        return flowInformation;
                    }
                }]);

                return BaseLayoutHelper;
            }();

            DockedLayoutHelper = function (_BaseLayoutHelper) {
                _inherits(DockedLayoutHelper, _BaseLayoutHelper);

                function DockedLayoutHelper() {
                    _classCallCheck(this, DockedLayoutHelper);

                    return _possibleConstructorReturn(this, Object.getPrototypeOf(DockedLayoutHelper).apply(this, arguments));
                }

                _createClass(DockedLayoutHelper, [{
                    key: 'layout',

                    /**
                     * Computes translation, inner size, actual docking size (outer size) and an adjusted docking size for a renderable that is about to be docked.
                     * @param {OrderedHashMap} dockedRenderables A map containing Array-pairs of [renderable, renderableCounterpart] containing the things that are attached to the sides.
                     * @param {OrderedHashMap} filledRenderables A map containing Array-pairs of [renderable, renderableCounterpart] containing the things that are filled.
                     * @param {Object} context. The famous context with a valid size proportion.
                     * @param {Object} ownDecorators The decorators that are applied to the view.
                     * @param {Array|Number} [ownDecorators.extraTranslate]. A translate to shift the entire layout with.
                     * @param {Array|Number} [ownDecorators.viewMargins] The margins to apply on the outer edges of the view.
                     * @returns {undefined}
                     * @private
                     */
                    value: function layout(dockedRenderables, filledRenderables, context, ownDecorations) {
                        var extraTranslate = ownDecorations.extraTranslate;
                        var margins = ownDecorations.viewMargins;

                        var dockHelper = new TrueSizedLayoutDockHelper(context);

                        if (margins) {
                            dockHelper.margins(margins);
                        }

                        /* Process Renderables with a non-fill dock */
                        var dockedNames = dockedRenderables ? dockedRenderables.keys() : [];
                        for (var _iterator = dockedNames, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                            var _ref;

                            if (_isArray) {
                                if (_i >= _iterator.length) break;
                                _ref = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) break;
                                _ref = _i.value;
                            }

                            var renderableName = _ref;

                            var _dockedRenderables$ge = dockedRenderables.get(renderableName);

                            var _dockedRenderables$ge2 = _slicedToArray(_dockedRenderables$ge, 2);

                            var renderable = _dockedRenderables$ge2[0];
                            var renderableCounterpart = _dockedRenderables$ge2[1];

                            var _prepareForDockedRend = this._prepareForDockedRenderable(renderable, renderableCounterpart, context, extraTranslate, margins);

                            var dockSize = _prepareForDockedRend.dockSize;
                            var translate = _prepareForDockedRend.translate;
                            var innerSize = _prepareForDockedRend.innerSize;
                            var _prepareForDockedRend2 = _prepareForDockedRend.space;
                            var space = _prepareForDockedRend2 === undefined ? ownDecorations.dockSpacing || 0 : _prepareForDockedRend2;
                            var opacity = _prepareForDockedRend.opacity;

                            var _getRenderableFlowInf = this._getRenderableFlowInformation(renderable);

                            var callback = _getRenderableFlowInf.callback;
                            var transition = _getRenderableFlowInf.transition;
                            var _renderable$decoratio = renderable.decorations;
                            var dock = _renderable$decoratio.dock;
                            var rotate = _renderable$decoratio.rotate;
                            var origin = _renderable$decoratio.origin;
                            var scale = _renderable$decoratio.scale;
                            var skew = _renderable$decoratio.skew;
                            var dockMethod = dock.dockMethod;

                            if (dockHelper[dockMethod]) {
                                dockHelper[dockMethod](renderableName, dockSize, space, translate, innerSize, {
                                    rotate: rotate,
                                    opacity: opacity,
                                    callback: callback,
                                    transition: transition,
                                    origin: origin,
                                    scale: scale,
                                    skew: skew
                                });
                            }
                        }

                        /* Process Renderables with a fill dock (this needs to be done after non-fill docks, since order matters in LayoutDockHelper) */
                        var filledNames = filledRenderables ? filledRenderables.keys() : [];
                        for (var _iterator2 = filledNames, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
                            var _ref2;

                            if (_isArray2) {
                                if (_i2 >= _iterator2.length) break;
                                _ref2 = _iterator2[_i2++];
                            } else {
                                _i2 = _iterator2.next();
                                if (_i2.done) break;
                                _ref2 = _i2.value;
                            }

                            var _renderableName = _ref2;

                            var _filledRenderables$ge = filledRenderables.get(_renderableName);

                            var _filledRenderables$ge2 = _slicedToArray(_filledRenderables$ge, 2);

                            var renderable = _filledRenderables$ge2[0];
                            var renderableCounterpart = _filledRenderables$ge2[1];
                            var decorations = renderable.decorations;
                            var rotate = decorations.rotate;
                            var origin = decorations.origin;

                            decorations.dock.size = dockHelper.getFillSize();

                            var _prepareForDockedRend3 = this._prepareForDockedRenderable(renderable, renderableCounterpart, context, extraTranslate, margins);

                            var translate = _prepareForDockedRend3.translate;
                            var innerSize = _prepareForDockedRend3.innerSize;
                            var opacity = _prepareForDockedRend3.opacity;

                            var _getRenderableFlowInf2 = this._getRenderableFlowInformation(renderable);

                            var callback = _getRenderableFlowInf2.callback;
                            var transition = _getRenderableFlowInf2.transition;

                            dockHelper.fill(_renderableName, innerSize, translate, { rotate: rotate, opacity: opacity, origin: origin, callback: callback, transition: transition });
                        }
                    }

                    /**
                     * Computes translation, inner size, actual docking size (outer size) and an adjusted docking size for a renderable that is about to be docked
                     * @param {Renderable} renderable The renderable that is going to be docked
                     * @param {Renderable} renderableCounterpart. The renderable counter-part (e.g. AnimationController, RenderNode, or ContainerSurface).
                     * @param {Object} context. The famous context with a valid size proportion
                     * @param {Array|Number} extraTranslate. A translate to shift the entire layout with
                     * @param {Array|Nuimber} margins The margins to apply on the outer edges of the view
                     * @returns {{dockSize: (Array|Object), translate, innerSize: (Array|Number), inUseDockSize: (Array|Number}}
                     * @private
                     */

                }, {
                    key: '_prepareForDockedRenderable',
                    value: function _prepareForDockedRenderable(renderable, renderableCounterpart, context, extraTranslate) {
                        var _this2 = this;

                        var margins = arguments.length <= 4 || arguments[4] === undefined ? [0, 0, 0, 0] : arguments[4];
                        var decorations = renderable.decorations;
                        var _decorations$translat = decorations.translate;
                        var translate = _decorations$translat === undefined ? [0, 0, 0] : _decorations$translat;
                        var _decorations$opacity = decorations.opacity;
                        var opacity = _decorations$opacity === undefined ? 1 : _decorations$opacity;

                        translate = Utils.addTranslations(extraTranslate, translate);
                        var _decorations$dock = decorations.dock;
                        var dockMethod = _decorations$dock.dockMethod;
                        var space = _decorations$dock.space;

                        var horizontalMargins = margins[1] + margins[3];
                        var verticalMargins = margins[0] + margins[2];
                        var sizeWithoutMargins = [context.size[0] - horizontalMargins, context.size[1] - verticalMargins];
                        var dockSizeSpecified = !isEqual(decorations.dock.size, [undefined, undefined]);
                        var dockSize = this._sizeResolver.settleDecoratedSize(renderable, renderableCounterpart, { size: sizeWithoutMargins }, dockSizeSpecified ? decorations.dock.size : decorations.size);
                        if (!this._sizeResolver.isSizeFinal(renderable)) {
                            opacity = 0;
                        }
                        var inUseDockSize = this._sizeResolver.getResolvedSize(renderable);
                        var innerSize = void 0;
                        var origin = decorations.origin;
                        var align = decorations.align;
                        /* If origin and align is used, we have to add this to the translate of the renderable */

                        if (decorations.size || origin || align) {

                            var translateWithProportion = function translateWithProportion(proportion, size, translation, dimension, factor) {
                                return translation[dimension] += size[dimension] ? factor * size[dimension] * proportion[dimension] : 0;
                            };

                            if (decorations.size) {

                                this._sizeResolver.settleDecoratedSize(renderable, renderableCounterpart, { size: dockSizeSpecified ? dockSize : sizeWithoutMargins }, decorations.size);
                                if (!this._sizeResolver.isSizeFinal(renderable)) {
                                    opacity = 0;
                                }
                                innerSize = this._sizeResolver.getResolvedSize(renderable);

                                translate = [].concat(translate); //shallow copy the translation to prevent the translation for happening multiple times

                                /* If no docksize was specified in a certain direction, then use the context size without margins */
                                var outerDockSize = dockSize;

                                if (!dockSizeSpecified) {
                                    if (dockMethod === 'fill') {
                                        outerDockSize = [].concat(sizeWithoutMargins);
                                    } else {
                                        var dockingDirection = this.getDockType(dockMethod);
                                        var orthogonalDockingDirection = +!dockingDirection;
                                        outerDockSize[dockingDirection] = innerSize[dockingDirection];
                                        outerDockSize[orthogonalDockingDirection] = sizeWithoutMargins[orthogonalDockingDirection];
                                    }
                                }

                                if (origin && decorations.size) {
                                    decorations.size.forEach(function (size, dimension) {
                                        if (_this2._sizeResolver.isValueTrueSized(size)) {
                                            /* Because the size is set to true, it is interpreted as 1 by famous. We have to add 1 pixel
                                             *  to make up for this.
                                             */
                                            if (origin[dimension] === 1) {
                                                translate[dimension] += 1;
                                            }
                                        }
                                    });
                                }
                                if (align) {
                                    translateWithProportion(align, outerDockSize, translate, 0, 1);
                                    translateWithProportion(align, outerDockSize, translate, 1, 1);
                                }
                            } else if (align) {
                                var _arr = [0, 1];

                                for (var _i3 = 0; _i3 < _arr.length; _i3++) {
                                    var i = _arr[_i3];
                                    translateWithProportion(align, decorations.dock.size[i] ? dockSize : sizeWithoutMargins, translate, i, 1);
                                }
                            }
                        }
                        for (var _i4 = 0; _i4 < 2; _i4++) {
                            if (dockSize[_i4] === true) {
                                /* If a true size is used, do a tilde on it in order for the dockhelper to recognize it as true-sized */
                                dockSize[_i4] = ~inUseDockSize[_i4];
                            }
                        }
                        /* If the renderable is unrenderable due to zero height/width...*/
                        if (inUseDockSize[0] === 0 || inUseDockSize[1] === 0) {
                            /* Don't display the space if the size is 0*/
                            space = 0;
                        }
                        return { dockSize: dockSize, translate: translate, innerSize: innerSize, inUseDockSize: inUseDockSize, space: space, opacity: opacity };
                    }
                }, {
                    key: 'getDockType',
                    value: function getDockType(dockMethodToGet) {
                        var dockTypes = [['right', 'left'], ['top', 'bottom']];
                        return findIndex(dockTypes, function (dockMethods) {
                            return ~dockMethods.indexOf(dockMethodToGet);
                        });
                    }

                    /**
                     * Calculates the bounding box size for all the renderables passed to the function
                     * @param {OrderedHashMap} dockedRenderables A map containing Array-pairs of [renderable, renderableCounterpart] containing the things that are attached to the sides.
                     * @param {OrderedHashMap} filledRenderables A map containing Array-pairs of [renderable, renderableCounterpart] containing the things that are filled.
                     * @param {Object} ownDecorators The decorators that are applied to the view.
                     * @returns {Array|Number} The bounding box size of all the renderables
                     */

                }, {
                    key: 'boundingBoxSize',
                    value: function boundingBoxSize(dockedRenderables, filledRenderables, ownDecorations) {
                        var _this3 = this;

                        var fillSize = [undefined, undefined];
                        if (filledRenderables) {
                            /* We support having multiple fills */
                            fillSize = filledRenderables.reduce(function (resultingSize, _ref3, renderableName) {
                                var _ref4 = _slicedToArray(_ref3, 2);

                                var filledRenderable = _ref4[0];
                                var renderableCounterpart = _ref4[1];

                                _this3._sizeResolver.settleDecoratedSize(filledRenderable, renderableCounterpart, { size: [NaN, NaN] }, filledRenderable.decorations.size);
                                var resolvedSize = _this3._sizeResolver.getResolvedSize(filledRenderable);
                                if (resolvedSize) {
                                    for (var _iterator3 = resolvedSize.entries(), _isArray3 = Array.isArray(_iterator3), _i5 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
                                        var _ref5;

                                        if (_isArray3) {
                                            if (_i5 >= _iterator3.length) break;
                                            _ref5 = _iterator3[_i5++];
                                        } else {
                                            _i5 = _iterator3.next();
                                            if (_i5.done) break;
                                            _ref5 = _i5.value;
                                        }

                                        var _ref6 = _ref5;

                                        var _ref7 = _slicedToArray(_ref6, 2);

                                        var dimension = _ref7[0];
                                        var singleSize = _ref7[1];

                                        if (singleSize !== undefined && (resultingSize[dimension] === undefined || resultingSize[dimension] < singleSize)) {
                                            resultingSize[dimension] = singleSize;
                                        }
                                    }
                                }
                                return resultingSize;
                            }, [undefined, undefined]);
                        }
                        var dockSize = [].concat(fillSize);
                        if (dockedRenderables) {
                            var dockSizeInfo = this._getRegularDockBoundingBoxInfo(dockedRenderables, ownDecorations);
                            dockSize = dockSizeInfo.boundingBoxSize;
                            if (fillSize) {
                                for (var _iterator4 = fillSize.entries(), _isArray4 = Array.isArray(_iterator4), _i6 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
                                    var _ref8;

                                    if (_isArray4) {
                                        if (_i6 >= _iterator4.length) break;
                                        _ref8 = _iterator4[_i6++];
                                    } else {
                                        _i6 = _iterator4.next();
                                        if (_i6.done) break;
                                        _ref8 = _i6.value;
                                    }

                                    var _ref9 = _ref8;

                                    var _ref10 = _slicedToArray(_ref9, 2);

                                    var dimension = _ref10[0];
                                    var singleFillSize = _ref10[1];

                                    if (singleFillSize !== undefined) {
                                        if (dockSize[dimension] === undefined) {
                                            dockSize[dimension] = singleFillSize;
                                        } else if (dockSizeInfo.dockingDirection == dimension) {
                                            dockSize[dimension] += singleFillSize;
                                        } else {
                                            dockSize[dimension] = Math.min(singleFillSize, dockSize[dimension]);
                                        }
                                    }
                                }
                            }
                        }

                        for (var i = 0; i < 2; i++) {
                            if (Number.isNaN(dockSize[i])) {
                                dockSize[i] = undefined;
                            }
                            if (dockSize[i] !== undefined && ownDecorations.viewMargins) {
                                var viewMargins = ownDecorations.viewMargins;
                                /* if i==0 we want margin left and right, if i==1 we want margin top and bottom */

                                dockSize[i] += viewMargins[(i + 1) % 4] + viewMargins[(i + 3) % 4];
                            }
                        }
                        return dockSize;
                    }
                }, {
                    key: '_getRegularDockBoundingBoxInfo',
                    value: function _getRegularDockBoundingBoxInfo(dockedRenderables, ownDecorations) {
                        var _this4 = this;

                        var dockMethod = dockedRenderables.get(dockedRenderables.keyAt(0))[0].decorations.dock.dockMethod;
                        /* Gets the dock type where, 0 is right or left (horizontal) and 1 is top or bottom (vertical) */

                        var dockType = this.getDockType(dockMethod);
                        var dockingDirection = dockType;
                        var orthogonalDirection = !dockType + 0;

                        /* Previously countered dock size for docking direction and opposite docking direction */
                        var previousDockSize = 0;
                        /* Add up the different sizes to if they are docked all in the same direction */
                        var boundingBoxSize = dockedRenderables.reduce(function (result, _ref11, renderableName) {
                            var _ref12 = _slicedToArray(_ref11, 2);

                            var dockedRenderable = _ref12[0];
                            var renderableCounterpart = _ref12[1];
                            var decorations = dockedRenderable.decorations;
                            var otherDockMethod = decorations.dock.dockMethod;
                            /* If docking is done orthogonally */

                            if (_this4.getDockType(otherDockMethod) !== dockType) {
                                return [NaN, NaN];
                            } else {
                                /* Resolve both inner size and outer size */
                                _this4._sizeResolver.settleDecoratedSize(dockedRenderable, renderableCounterpart, { size: [NaN, NaN] }, decorations.dock.size);
                                var resolvedOuterSize = _this4._sizeResolver.getResolvedSize(dockedRenderable);

                                var resolvedInnerSize = [undefined, undefined];
                                if (dockedRenderable.decorations.size) {
                                    _this4._sizeResolver.settleDecoratedSize(dockedRenderable, renderableCounterpart, { size: [NaN, NaN] }, decorations.size);
                                    resolvedInnerSize = _this4._sizeResolver.getResolvedSize(dockedRenderable);
                                }

                                if (!resolvedOuterSize || !resolvedInnerSize) {
                                    return [NaN, NaN];
                                }
                                var resolvedSize = [resolvedOuterSize[0] === undefined ? resolvedInnerSize[0] : resolvedOuterSize[0], resolvedOuterSize[1] === undefined ? resolvedInnerSize[1] : resolvedOuterSize[1]];
                                var newResult = new Array(2);
                                /* If docking is done from opposite directions */
                                var dockingFromOpposite = dockMethod !== otherDockMethod;
                                if (dockingFromOpposite) {
                                    newResult[dockingDirection] = NaN;
                                } else {
                                    /* If this or the previous renderable size is 0, don't add the space */
                                    var spaceSize = resolvedSize[dockingDirection] === 0 || previousDockSize === 0 ? 0 : decorations.dock.space || ownDecorations.dockSpacing || 0;
                                    newResult[dockingDirection] = resolvedSize[dockingDirection] + spaceSize + result[dockingDirection];
                                    previousDockSize = resolvedSize[dockingDirection];
                                }
                                /* If a size in the orthogonalDirection has been set... */
                                if (resolvedSize[orthogonalDirection] !== undefined && !Number.isNaN(resolvedSize[orthogonalDirection])) {
                                    /* If there is no result in the orthogonal direction specified yet... */
                                    if (result[orthogonalDirection] === undefined) {
                                        newResult[orthogonalDirection] = resolvedSize[orthogonalDirection];
                                    } else {
                                        /* get the max bounding box for the specified orthogonal direction */
                                        newResult[orthogonalDirection] = Math.max(result[orthogonalDirection], resolvedSize[orthogonalDirection]);
                                    }
                                } else {
                                    newResult[orthogonalDirection] = result[orthogonalDirection];
                                }
                                return newResult;
                            }
                        }, dockingDirection ? [undefined, 0] : [0, undefined]);
                        return { boundingBoxSize: boundingBoxSize, dockingDirection: dockingDirection, orthogonalDirection: orthogonalDirection };
                    }
                }]);

                return DockedLayoutHelper;
            }(BaseLayoutHelper);

            FullSizeLayoutHelper = function (_BaseLayoutHelper2) {
                _inherits(FullSizeLayoutHelper, _BaseLayoutHelper2);

                function FullSizeLayoutHelper() {
                    _classCallCheck(this, FullSizeLayoutHelper);

                    return _possibleConstructorReturn(this, Object.getPrototypeOf(FullSizeLayoutHelper).apply(this, arguments));
                }

                _createClass(FullSizeLayoutHelper, [{
                    key: 'layout',

                    /**
                     * Layouts full size renderables
                     * @param {OrderedHashMap} A map containing Array-pairs of [renderable, renderableCounterpart] containing the full size renderables.
                     * @param {Object} context The famous-flex context with a valid size property
                     * @param {Object} ownDecorations. The decorators that are applied to the view.
                     */
                    value: function layout(fullScreenRenderables, context, ownDecorations) {
                        var extraTranslate = ownDecorations.extraTranslate;

                        var names = fullScreenRenderables ? fullScreenRenderables.keys() : [];
                        for (var _iterator5 = names, _isArray5 = Array.isArray(_iterator5), _i7 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
                            var _ref13;

                            if (_isArray5) {
                                if (_i7 >= _iterator5.length) break;
                                _ref13 = _iterator5[_i7++];
                            } else {
                                _i7 = _iterator5.next();
                                if (_i7.done) break;
                                _ref13 = _i7.value;
                            }

                            var renderableName = _ref13;

                            var _fullScreenRenderable = fullScreenRenderables.get(renderableName);

                            var _fullScreenRenderable2 = _slicedToArray(_fullScreenRenderable, 1);

                            var renderable = _fullScreenRenderable2[0];

                            var _getRenderableFlowInf3 = this._getRenderableFlowInformation(renderable);

                            var callback = _getRenderableFlowInf3.callback;
                            var transition = _getRenderableFlowInf3.transition;

                            var translate = Utils.addTranslations(extraTranslate, renderable.decorations.translate || [0, 0, 0]);
                            context.set(renderableName, {
                                translate: translate,
                                size: context.size,
                                opacity: renderable.decorations.opacity === undefined ? 1 : renderable.decorations.opacity,
                                callback: callback,
                                transition: transition
                            });
                        }
                    }
                }]);

                return FullSizeLayoutHelper;
            }(BaseLayoutHelper);

            TraditionalLayoutHelper = function (_BaseLayoutHelper3) {
                _inherits(TraditionalLayoutHelper, _BaseLayoutHelper3);

                function TraditionalLayoutHelper() {
                    _classCallCheck(this, TraditionalLayoutHelper);

                    return _possibleConstructorReturn(this, Object.getPrototypeOf(TraditionalLayoutHelper).apply(this, arguments));
                }

                _createClass(TraditionalLayoutHelper, [{
                    key: 'layout',
                    value: function layout(traditionalRenderables, context, ownDecorations) {
                        var names = traditionalRenderables ? traditionalRenderables.keys() : [];
                        for (var _iterator6 = names, _isArray6 = Array.isArray(_iterator6), _i8 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();;) {
                            var _ref14;

                            if (_isArray6) {
                                if (_i8 >= _iterator6.length) break;
                                _ref14 = _iterator6[_i8++];
                            } else {
                                _i8 = _iterator6.next();
                                if (_i8.done) break;
                                _ref14 = _i8.value;
                            }

                            var renderableName = _ref14;

                            var _traditionalRenderabl = traditionalRenderables.get(renderableName);

                            var _traditionalRenderabl2 = _slicedToArray(_traditionalRenderabl, 2);

                            var renderable = _traditionalRenderabl2[0];
                            var renderableCounterpart = _traditionalRenderabl2[1];

                            var renderableSize = this._sizeResolver.settleDecoratedSize(renderable, renderableCounterpart, context, renderable.decorations.size) || [undefined, undefined];
                            var _renderable$decoratio2 = renderable.decorations;
                            var _renderable$decoratio3 = _renderable$decoratio2.translate;
                            var translate = _renderable$decoratio3 === undefined ? [0, 0, 0] : _renderable$decoratio3;
                            var _renderable$decoratio4 = _renderable$decoratio2.origin;
                            var origin = _renderable$decoratio4 === undefined ? [0, 0] : _renderable$decoratio4;
                            var align = _renderable$decoratio2.align;
                            var rotate = _renderable$decoratio2.rotate;
                            var _renderable$decoratio5 = _renderable$decoratio2.opacity;
                            var opacity = _renderable$decoratio5 === undefined ? 1 : _renderable$decoratio5;
                            var scale = _renderable$decoratio2.scale;
                            var skew = _renderable$decoratio2.skew;

                            if (!this._sizeResolver.isSizeFinal(renderable)) {
                                opacity = 0;
                            }
                            translate = Utils.addTranslations(ownDecorations.extraTranslate, translate);

                            var _getRenderableFlowInf4 = this._getRenderableFlowInformation(renderable);

                            var callback = _getRenderableFlowInf4.callback;
                            var transition = _getRenderableFlowInf4.transition;

                            var adjustedTranslation = Utils.adjustPlacementForTrueSize(renderable, renderableSize, origin, translate, this._sizeResolver);
                            context.set(renderableName, {
                                size: renderableSize,
                                translate: adjustedTranslation,
                                origin: origin,
                                scale: scale,
                                skew: skew,
                                align: align,
                                callback: callback,
                                transition: transition,
                                rotate: rotate,
                                opacity: opacity
                            });
                        }
                    }
                }, {
                    key: 'boundingBoxSize',
                    value: function boundingBoxSize(traditionalRenderables) {
                        var renderableNames = traditionalRenderables ? traditionalRenderables.keys() : [];
                        var totalSize = [undefined, undefined];
                        for (var _iterator7 = renderableNames, _isArray7 = Array.isArray(_iterator7), _i9 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();;) {
                            var _ref15;

                            if (_isArray7) {
                                if (_i9 >= _iterator7.length) break;
                                _ref15 = _iterator7[_i9++];
                            } else {
                                _i9 = _iterator7.next();
                                if (_i9.done) break;
                                _ref15 = _i9.value;
                            }

                            var renderableName = _ref15;

                            var _traditionalRenderabl3 = traditionalRenderables.get(renderableName);

                            var _traditionalRenderabl4 = _slicedToArray(_traditionalRenderabl3, 2);

                            var renderable = _traditionalRenderabl4[0];
                            var renderableCounterpart = _traditionalRenderabl4[1];

                            this._sizeResolver.settleDecoratedSize(renderable, renderableCounterpart, { size: [NaN, NaN] }, renderable.decorations.size);
                            var size = this._sizeResolver.getResolvedSize(renderable);

                            /* Backup: If size can't be resolved, then see if there's a size specified on the decorator */
                            if (!size && renderable.decorations) {
                                var decoratedSize = renderable.decorations.size;
                                var isValidSize = function isValidSize(inputSize) {
                                    return typeof inputSize == 'number' && inputSize > 0;
                                };
                                if (decoratedSize && decoratedSize.every(isValidSize)) {
                                    size = decoratedSize;
                                }
                            }
                            if (!size) {
                                continue;
                            }
                            var renderableSpec = void 0;
                            renderableSpec = renderable.decorations;
                            var _renderableSpec = renderableSpec;
                            var _renderableSpec$align = _renderableSpec.align;
                            var align = _renderableSpec$align === undefined ? [0, 0] : _renderableSpec$align;

                            var translate = Utils.adjustPlacementForTrueSize(renderable, size, renderableSpec.origin || [0, 0], renderableSpec.translate || [0, 0, 0]);

                            /* If there has been an align specified, then nothing can be calculated */
                            if (!renderableSpec || !renderableSpec.size || align[0] && align[1]) {
                                continue;
                            }

                            /* If the renderable has a lower min y/x position, or a higher max y/x position, save its values */
                            for (var i = 0; i < 2; i++) {
                                /* Undefined is the same as context size */
                                if (renderable.decorations.size[i] !== undefined && size[i] !== undefined && !(align && align[i])) {
                                    var newPotentialOuterSize = translate[i] + size[i];
                                    if (newPotentialOuterSize > totalSize[i] || totalSize[i] === undefined) {
                                        totalSize[i] = newPotentialOuterSize;
                                    }
                                }
                            }
                        }
                        return totalSize;
                    }
                }]);

                return TraditionalLayoutHelper;
            }(BaseLayoutHelper);

            Throttler = function () {
                /**
                 *
                 * @param {Number} throttleDelay Minimum amount of time in between each action executed by the Throttler, in milliseconds or ticks.
                 * @param {Boolean} shouldQueue Enable if each added action should be executed consecutively, or disable if a newly
                 * added action should replace a previous one.
                 * @param {Object} actionContext Context to which the actions executed by the Throttler will be bound.
                 * @param {Boolean} useTicks whether ticks should be used instead of milliseconds
                 * @returns {Throttler} Throttler instance.
                 */
                function Throttler() {
                    var throttleDelay = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];
                    var shouldQueue = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
                    var actionContext = arguments.length <= 2 || arguments[2] === undefined ? this : arguments[2];
                    var useTicks = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];

                    _classCallCheck(this, Throttler);

                    this.delay = throttleDelay;
                    this._useTicks = useTicks;
                    this._timerFunction = useTicks ? Timer.every : Timer.setInterval;
                    this.timer = null;
                    this.shouldQueue = shouldQueue;
                    this.actionContext = actionContext;

                    this.queue = [];
                    this.executionTimer = null;

                    ObjectHelper.bindAllMethods(this, this);
                }

                /**
                 * Adds an executable action to the queue that will be executed consecutively by the Throttler.
                 * If Throttler was constructed with shouldQueue = false, adding a new action will remove the old one.
                 * @param {Function} action Function to execute.
                 * @returns {void}
                 */

                _createClass(Throttler, [{
                    key: 'add',
                    value: function add(action) {
                        if (this.delay === 0) {
                            action.call(this.actionContext);
                        } else {
                            /* If we're not queueing, clear the previous action if present. The new action will replace the old one. */
                            if (!this.shouldQueue) {
                                this.queue.pop();
                            }

                            this.queue.push(action);
                            if (!this.timer) {
                                this.timer = this._timerFunction(this._executeTopAction, this.delay);
                            }
                        }
                    }

                    /**
                     * Clears the Throttler's timer if it is set.
                     * @returns {void}
                     * @private
                     */

                }, {
                    key: '_clearTimer',
                    value: function _clearTimer() {
                        Timer.clear(this.timer);
                        this.timer = null;
                    }

                    /**
                     * Removes the top action from the Throttler's queue if any is present, and executes it with the correct binding context.
                     * @returns {void}
                     * @private
                     */

                }, {
                    key: '_executeTopAction',
                    value: function _executeTopAction() {
                        var action = this.queue.shift();
                        if (action && typeof action === 'function') {
                            action.call(this.actionContext);
                        }
                        if (!this.queue.length) {
                            this._clearTimer();
                        }
                    }
                }]);

                return Throttler;
            }();

            RenderableHelper = function () {

                /**
                 * Creates a utility for maintaining proper state of decorated renderables
                 * @param {Function} bindMethod
                 * @param {Function} pipeMethod
                 * @param {Object|Renderable} outputRenderables
                 * @param sizeResolver
                 */
                function RenderableHelper(bindMethod, pipeMethod, outputRenderables, sizeResolver) {
                    _classCallCheck(this, RenderableHelper);

                    this._bindMethod = bindMethod;
                    this._renderableCounterparts = outputRenderables;
                    this._sizeResolver = sizeResolver;
                    this._pipeToView = pipeMethod;
                    this.waitingAnimations = [];
                    this._renderables = {};
                    this._groupedRenderables = {};
                    this._pipedRenderables = {};
                    this._groupedRenderables = {};
                    this._runningFlowStates = {};
                }

                _createClass(RenderableHelper, [{
                    key: 'assignRenderable',
                    value: function assignRenderable(renderable, renderableName) {
                        this._renderables[renderableName] = renderable;
                        var renderableEquivalent = renderable;
                        if (renderable.decorations) {
                            renderableEquivalent = this._addDecoratedRenderable(renderable, renderableName);
                        }
                        this._renderableCounterparts[renderableName] = renderableEquivalent;
                        this._setupAllRenderableListeners(renderableName);
                    }

                    /**
                     * Setups all renderable listeners (decoration events, decoration pipes, pipe to the view)
                     * @param {String} renderableName the name of the renderable
                     * @param {Boolean} enabled set to false to unset all the events
                     * @private
                     */

                }, {
                    key: '_setupAllRenderableListeners',
                    value: function _setupAllRenderableListeners(renderableName) {
                        var enabled = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

                        /* If the this._renderableCounterparts equivalent doesn't have the pipe function as is the case with the draggable, then use the regular renderable */
                        var renderableOrEquivalent = this._getPipeableRenderableFromName(renderableName);
                        if (enabled) {
                            this._pipeRenderable(renderableOrEquivalent, renderableName);
                        } else {
                            this._unpipeRenderable(renderableOrEquivalent, renderableName);
                        }
                        var decorations = this._renderables[renderableName].decorations;

                        if (decorations) {
                            this._setDecorationPipes(renderableOrEquivalent, decorations.pipes, enabled);
                            this._setDecorationEvents(renderableOrEquivalent, decorations.eventSubscriptions, enabled);
                        }
                    }

                    /**
                     * Sets the decoration events that are specified with (among potential others) @layout.on and @layout.once
                     * @param {String} renderableName
                     * @param enable. If false, removes the events.
                     * @private
                     */

                }, {
                    key: '_setDecorationEvents',
                    value: function _setDecorationEvents(renderable, subscriptions) {
                        var enable = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];

                        for (var _iterator = subscriptions || [], _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                            var _ref;

                            if (_isArray) {
                                if (_i >= _iterator.length) break;
                                _ref = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) break;
                                _ref = _i.value;
                            }

                            var subscription = _ref;

                            var subscriptionType = subscription.type || 'on';
                            if (!enable) {
                                /* In famous, you remove a listener by calling removeListener, but some classes might have another event
                                 * listener that is called off
                                 */
                                subscriptionType = renderable.removeListener ? 'removeListener' : 'off';
                            }
                            var eventName = subscription.eventName;
                            var callback = subscription.callback;
                            if (subscriptionType in renderable) {
                                renderable[subscriptionType](eventName, this._bindMethod(callback));
                            }
                        }
                    }

                    /**
                     * Pipes the renderable to a list of other renderables
                     * @param {Renderable} renderable
                     * @param {Array|String} Names of renderables that have to be piped.
                     * @param {Boolean} enabled. Set to false to unpipe
                     * @private
                     */

                }, {
                    key: '_setDecorationPipes',
                    value: function _setDecorationPipes(renderable, pipes) {
                        var enabled = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];

                        for (var _iterator2 = pipes || [], _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
                            var _ref2;

                            if (_isArray2) {
                                if (_i2 >= _iterator2.length) break;
                                _ref2 = _iterator2[_i2++];
                            } else {
                                _i2 = _iterator2.next();
                                if (_i2.done) break;
                                _ref2 = _i2.value;
                            }

                            var pipeToName = _ref2;

                            var target = pipeToName ? this._renderables[pipeToName] : this;
                            var pipeFn = (enabled ? '' : 'un') + 'pipe';
                            /* In order to keep things consistent and easier to use, we pipe from the renderable equivalent */
                            if (renderable[pipeFn]) {
                                renderable[pipeFn](target);
                            }
                            if (renderable[pipeFn] && target._eventOutput) {
                                renderable[pipeFn](target._eventOutput);
                            }
                        }
                    }

                    /**
                     * Unpipes a renderables that has been piped to this view
                     * @param {String} renderableName The name of the renderable
                     * @private
                     */

                }, {
                    key: '_unpipeRenderable',
                    value: function _unpipeRenderable(renderableName) {
                        if (this._pipeToView(this._pipedRenderables[renderableName], false)) {
                            delete this._pipedRenderables[renderableName];
                        }
                    }

                    /**
                     * Pipes a renderable to this view
                     * @param {Renderable} renderable. The renderable that is going to be piped
                     * @param {String} renderableName. The name of the renderable that is going to be piped.
                     * @private
                     */

                }, {
                    key: '_pipeRenderable',
                    value: function _pipeRenderable(renderable, renderableName) {
                        /* Auto pipe events from the renderable to the view */
                        if (this._pipeToView(renderable, true)) {
                            this._pipedRenderables[renderableName] = renderable;
                        }
                    }

                    /**
                     * Determines whether the renderable counterpart (i.e. animationcontroller or containersurface) should be used 
                     * when piping, or the renderable itself
                     * @param {String} renderableName The name of the renderable
                     * @returns {Renderable} the renderable or its counterpart
                     * @private
                     */

                }, {
                    key: '_getPipeableRenderableFromName',
                    value: function _getPipeableRenderableFromName(renderableName) {
                        return this._renderableCounterparts[renderableName].pipe ? this._renderableCounterparts[renderableName] : this._renderables[renderableName];
                    }

                    /**
                     * Adds a decorated renderable to the bookkeeping of the view
                     * @param renderable
                     * @param renderableName
                     * @returns {Renderable} newRenderable The renderable that is normally stored this._renderableCounterpart[renderableName]
                     * @private
                     */

                }, {
                    key: '_addDecoratedRenderable',
                    value: function _addDecoratedRenderable(renderable, renderableName) {
                        var _renderable$decoratio = renderable.decorations;
                        var flow = _renderable$decoratio.flow;
                        var size = _renderable$decoratio.size;
                        var dock = _renderable$decoratio.dock;

                        if (size) {
                            this._bindSizeFunctions(size);
                        }
                        if (dock && dock.size) {
                            this._bindSizeFunctions(dock.size);
                        }
                        var renderableCounterpart = this._processsDecoratedRenderableCounterpart(renderable, renderableName);

                        this._addRenderableToDecoratorGroup(renderable, renderableCounterpart, renderableName);
                        return renderableCounterpart;
                    }

                    /**
                     * Bind the size functions so that they don't have to be bound afterwards
                     * @param {Array|Number} size
                     * @private
                     */

                }, {
                    key: '_bindSizeFunctions',
                    value: function _bindSizeFunctions(size) {
                        for (var index = 0; index < 2; index++) {
                            if (typeof size[index] === 'function') {
                                size[index] = this._bindMethod(size[index]);
                            }
                        }
                    }

                    /**
                     * Returns true if there are any flowy renderables.
                     * @returns {Boolean} hasFlowyRenderables
                     */

                }, {
                    key: 'hasFlowyRenderables',
                    value: function hasFlowyRenderables() {
                        var _this = this;

                        var _loop = function _loop(groupName) {
                            var renderableGroup = _this._groupedRenderables[groupName];
                            if (!renderableGroup.keys().every(function (renderableName) {
                                return !renderableGroup.get(renderableName)[0].decorations.flow;
                            })) {
                                return {
                                    v: true
                                };
                            }
                        };

                        for (var groupName in this._groupedRenderables) {
                            var _ret = _loop(groupName);

                            if (typeof _ret === "object") return _ret.v;
                        }
                        return false;
                    }

                    /**
                     * Processes the renderable counter-part of the renderable. The counterpart is different from the renderable
                     * in @layout.draggable, @layout.swipable, @layout.animate, and others.
                     * @param {Renderable} renderable the renderable which has renderable.decorations set to determine the counter part
                     * @param {String} renderableName the name of the renderable
                     * @returns {AnimationController|ContainerSurface|RenderNode|*} The renderable counterpart
                     * @private
                     */

                }, {
                    key: '_processsDecoratedRenderableCounterpart',
                    value: function _processsDecoratedRenderableCounterpart(renderable, renderableName) {
                        var _renderable$decoratio2 = renderable.decorations;
                        var draggableOptions = _renderable$decoratio2.draggableOptions;
                        var swipableOptions = _renderable$decoratio2.swipableOptions;
                        var clip = _renderable$decoratio2.clip;
                        var animation = _renderable$decoratio2.animation;
                        var flow = _renderable$decoratio2.flow;

                        /* If we clip, then we need to create a containerSurface */

                        if (clip) {
                            var clipSize = clip.size;
                            /* Resolve clipSize specified as undefined */
                            var containerSurface = new ContainerSurface({
                                size: clipSize,
                                properties: _extends({ overflow: 'hidden' }, clip.properties)
                            });
                            containerSurface.add(renderable);
                            if (renderable.pipe) {
                                renderable.pipe(containerSurface._eventOutput);
                            }
                            renderable.containerSurface = containerSurface;
                        }

                        if (animation) {
                            this._processAnimatedRenderable(renderable, renderableName, animation);
                        }

                        if (swipableOptions) {
                            renderable = this._initSwipable(swipableOptions, renderable);
                        } else if (draggableOptions && !renderable.node) {
                            renderable.node = new RenderNode();
                            var draggable = new Draggable(draggableOptions);
                            renderable.draggable = draggable;
                            renderable.node.add(draggable).add(renderable);
                            renderable.pipe(draggable);
                            //TODO: We don't do an unpiping of the draggable, which might be dangerous
                            this._pipeToView(draggable);
                        }

                        if (renderable.node) {
                            /* Assign output handler */
                            renderable.node._eventOutput = renderable._eventOutput;
                        }

                        var renderableCounterpart = renderable.animationController || renderable.containerSurface || renderable.node || renderable;
                        /* If a renderable has an AnimationController used to animate it, add that to this._renderableCounterparts.
                         * If a renderable has an ContainerSurface used to clip it, add that to this._renderableCounterparts.
                         * this._renderableCounterparts is used in the LayoutController in this.layout to render this view. */
                        if (flow) {
                            renderableCounterpart.isFlowy = true;
                        }
                        return renderableCounterpart;
                    }

                    /**
                     * Pipes the output events of all items in the renderable counterparts that might have been forgotten due to legacy way of declaring
                     * renderables
                     * @returns {void}
                     * @private
                     */

                }, {
                    key: 'pipeAllRenderables',
                    value: function pipeAllRenderables() {
                        for (var renderableName in this.renderables) {
                            if (!this._pipedRenderables[renderableName]) {
                                this._pipeRenderable(this._getPipeableRenderableFromName(renderableName), renderableName);
                            }
                        }
                    }

                    /**
                     * Initialize all animation set by @layout.animate
                     */

                }, {
                    key: 'initializeAnimations',
                    value: function initializeAnimations() {
                        var _this2 = this;

                        var _loop2 = function _loop2() {
                            if (_isArray3) {
                                if (_i3 >= _iterator3.length) return 'break';
                                _ref3 = _iterator3[_i3++];
                            } else {
                                _i3 = _iterator3.next();
                                if (_i3.done) return 'break';
                                _ref3 = _i3.value;
                            }

                            var animation = _ref3;

                            var renderableToWaitFor = _this2._renderables[animation.waitFor];
                            if (renderableToWaitFor && renderableToWaitFor.on) {
                                renderableToWaitFor.on('shown', function subscription() {
                                    animation.showMethod();
                                    if ('off' in renderableToWaitFor) {
                                        renderableToWaitFor.off('shown', subscription);
                                    }
                                    if ('removeListener' in renderableToWaitFor) {
                                        renderableToWaitFor.removeListener('shown', subscription);
                                    }
                                });
                            } else {
                                Utils.warn('Attempted to delay showing renderable ' + animation.waitFor + ', which does not exist or contain an on() method.');
                            }
                        };

                        for (var _iterator3 = this.waitingAnimations || [], _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
                            var _ref3;

                            var _ret2 = _loop2();

                            if (_ret2 === 'break') break;
                        }
                    }

                    /**
                     * Processes an animated renderable
                     * @param renderable
                     * @param renderableName
                     * @param options
                     * @private
                     */

                }, {
                    key: '_processAnimatedRenderable',
                    value: function _processAnimatedRenderable(renderable, renderableName, options) {

                        var pipeRenderable = function pipeRenderable() {
                            if (renderable.pipe) renderable.pipe(renderable.animationController._eventOutput);
                        };

                        /* If there's already an animationcontroller present, just change the options */
                        var renderableCounterpart = this._renderableCounterparts[renderableName];
                        if (renderableCounterpart instanceof AnimationController) {
                            renderable.animationController = renderableCounterpart;
                            renderable.animationController.setOptions(options);
                            pipeRenderable();
                        } else {
                            var animationController = renderable.animationController = new AnimationController(options);
                            pipeRenderable();
                            var showMethod = this.showWithAnimationController.bind(this, animationController, renderable);

                            if (options.delay && options.delay > 0 && options.showInitially) {
                                Timer.setTimeout(showMethod, options.delay);
                            } else if (options.waitFor) {
                                this.waitingAnimations.push({ showMethod: showMethod, waitFor: options.waitFor });
                            } else if (options.showInitially) {
                                showMethod();
                            }
                        }
                    }

                    /**
                     * Shows a renderable using the animationController specified. When operation is complete, the renderable emits
                     * the one events 'show' or 'hide', depending on what operation that was done.
                     * @param animationController
                     * @param renderable
                     * @param show
                     * @private
                     */

                }, {
                    key: 'showWithAnimationController',
                    value: function showWithAnimationController(animationController, renderable) {
                        var show = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];
                        var callback = arguments[3];

                        animationController._showingRenderable = show;
                        var callbackIfExists = function callbackIfExists() {
                            if (callback) {
                                callback();
                            }
                        };
                        var emitOnFinished = function emitOnFinished() {
                            if (renderable.emit) {
                                renderable.emit(show ? 'shown' : 'hidden');
                            }
                            callbackIfExists();
                        };

                        if (show) {
                            animationController.show(renderable.containerSurface || renderable, null, emitOnFinished);
                        } else {
                            animationController.hide(null, emitOnFinished);
                        }
                    }
                }, {
                    key: '_addRenderableToDecoratorGroup',
                    value: function _addRenderableToDecoratorGroup(renderable, renderableCounterpart, renderableName) {
                        /* Group the renderable */
                        var groupName = this._getGroupName(renderable);

                        if (groupName) {
                            if (!(groupName in this._groupedRenderables)) {
                                this._groupedRenderables[groupName] = new OrderedHashMap();
                            }
                            /* We save the both the renderable and the renderable counterpart in pairs */
                            this._groupedRenderables[groupName].set(renderableName, [renderable, renderableCounterpart]);
                        }
                    }
                }, {
                    key: '_getGroupName',
                    value: function _getGroupName(renderable) {
                        var decorations = renderable.decorations;

                        if (!!decorations.dock) {
                            /* 'filled' is a special subset of 'docked' renderables, that need to be rendered after the normal 'docked' renderables are rendered. */
                            return decorations.dock.dockMethod === 'fill' ? 'filled' : 'docked';
                        } else if (!!decorations.fullSize) {
                            return 'fullSize';
                        } else if (decorations.size || decorations.origin || decorations.align || decorations.translate) {
                            return 'traditional';
                        } else {
                            /* This occurs e.g. when a renderable is only marked @renderable, and its parent view has a @layout.custom decorator to define its context. */
                            return 'ignored';
                        }
                    }

                    /**
                     * Gets the renderables of a certain group
                     * @param {String} The name of the group
                     * @returns {OrderedHashMap} A map containing Array-pairs of [renderable, renderableCounterpart] containing the renderables of the specified type.
                     */

                }, {
                    key: 'getRenderableGroup',
                    value: function getRenderableGroup(groupName) {
                        return this._groupedRenderables[groupName];
                    }

                    /**
                     * Removes the renderable from the view
                     * @param {String} renderableName The name of the renderable
                     */

                }, {
                    key: 'removeRenderable',
                    value: function removeRenderable(renderableName) {
                        var renderable = this._renderables[renderableName];
                        this._setDecorationPipes(renderableName, false);
                        this._setDecorationEvents(renderableName, false);
                        this._unpipeRenderable(renderableName, renderableName);
                        this._removeRenderableFromDecoratorGroup(renderable, renderableName);
                        delete this._renderableCounterparts[renderableName];
                        delete this._renderables[renderableName];
                    }
                    //Done

                }, {
                    key: '_removeRenderableFromDecoratorGroup',
                    value: function _removeRenderableFromDecoratorGroup(renderable, renderableName) {
                        var groupName = this._getGroupName(renderable);
                        this._removeRenderableFromGroupWithName(renderableName, groupName);
                    }
                }, {
                    key: '_removeRenderableFromGroupWithName',
                    value: function _removeRenderableFromGroupWithName(renderableName, groupName) {
                        var group = this._groupedRenderables[groupName];
                        group.remove(renderableName);
                        if (!group.count()) {
                            delete this._groupedRenderables[groupName];
                        }
                    }

                    /**
                     * @example
                     * decorateRenderable('myRenderable',layout.size(100, 100));
                     *
                     * Decorates a renderable with other decorators. Using the same decorators as used previously will override the old ones.
                     * @param {String} renderableName The name of the renderable
                     * @param ...decorators The decorators that should be applied
                     */

                }, {
                    key: 'decorateRenderable',
                    value: function decorateRenderable(renderableName) {
                        var renderable = this._renderables[renderableName];
                        /* Add translate and rotate to be sure that there decorators translateFrom and rotateFrom work */
                        var fakeRenderable = {
                            decorations: {
                                translate: renderable.decorations.translate || [0, 0, 0],
                                rotate: renderable.decorations.rotate || [0, 0, 0]
                            }
                        };

                        for (var _len = arguments.length, decorators = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                            decorators[_key - 1] = arguments[_key];
                        }

                        if (!decorators.length) {
                            Utils.warn('No decorators specified to decorateRenderable(renderableName, ...decorators)');
                        }
                        /* There can be existing decorators already, which are preserved. We are extending the decorators object,
                         * by first creating a fake renderable that gets decorators */
                        this.applyDecoratorFunctionsToRenderable(fakeRenderable, decorators);
                        var decorations = fakeRenderable.decorations;

                        var renderableOrEquivalent = this._getPipeableRenderableFromName(renderableName);
                        /* We might need to do extra piping */
                        this._setDecorationPipes(renderableOrEquivalent, decorations.pipes);
                        this._setDecorationEvents(renderableOrEquivalent, decorations.eventSubscriptions);

                        /* If the renderable is surface, we need to do some special things if there is a true size being used */
                        if (Utils.renderableIsSurface(renderable)) {
                            var sizesToCheck = [];
                            var size = decorations.size;
                            var dock = decorations.dock;

                            if (size) {
                                sizesToCheck.push(size);
                            }
                            if (dock) {
                                sizesToCheck.push(dock.size);
                            }
                            var renderableSize = [undefined, undefined];
                            var trueSizedInfo = this._sizeResolver.getSurfaceTrueSizedInfo(renderable);
                            for (var _iterator4 = sizesToCheck, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
                                var _ref4;

                                if (_isArray4) {
                                    if (_i4 >= _iterator4.length) break;
                                    _ref4 = _iterator4[_i4++];
                                } else {
                                    _i4 = _iterator4.next();
                                    if (_i4.done) break;
                                    _ref4 = _i4.value;
                                }

                                var sizeToCheck = _ref4;
                                var _arr = [0, 1];

                                for (var _i5 = 0; _i5 < _arr.length; _i5++) {
                                    var dimension = _arr[_i5];
                                    if (this._sizeResolver.isValueTrueSized(sizeToCheck[dimension])) {
                                        if (!trueSizedInfo) {
                                            trueSizedInfo = this._sizeResolver.configureTrueSizedSurface(renderable);
                                        }
                                        trueSizedInfo.trueSizedDimensions[dimension] = true;
                                        renderableSize[dimension] = true;
                                    } else {
                                        if (trueSizedInfo) {
                                            trueSizedInfo.trueSizedDimensions[dimension] = false;
                                        }
                                    }
                                }
                            }
                            if (sizesToCheck.length) {
                                renderable.setSize(renderableSize);
                            }
                        }
                        var oldRenderableGroupName = this._getGroupName(renderable);
                        var shouldDisableDock = fakeRenderable.decorations.disableDock && renderable.decorations.dock;
                        var shouldDisableFullSize = fakeRenderable.decorations.size && renderable.decorations.fullSize;
                        if (shouldDisableDock) {
                            delete renderable.decorations.dock;
                        }
                        if (shouldDisableFullSize) {
                            delete renderable.decorations.fullSize;
                        }

                        /* Merge existing flow decorations so they won't be discarded */
                        if (renderable.decorations.flow && fakeRenderable.decorations.flow) {
                            merge(fakeRenderable.decorations.flow, renderable.decorations.flow);
                        }

                        /* Extend the object */
                        Object.assign(renderable.decorations, fakeRenderable.decorations);
                        /* See if we have to redo the grouping */
                        var needToChangeDecoratorGroup = oldRenderableGroupName !== this._getGroupName(renderable) || shouldDisableDock || shouldDisableFullSize;
                        /* Process new renderable equivalent, if that applies */
                        var renderableCounterpart = this._renderableCounterparts[renderableName] = this._processsDecoratedRenderableCounterpart(renderable, renderableName);
                        if (needToChangeDecoratorGroup) {
                            this._removeRenderableFromGroupWithName(renderableName, oldRenderableGroupName);
                            this._addRenderableToDecoratorGroup(renderable, renderableCounterpart, renderableName);
                        }
                    }
                }, {
                    key: 'applyDecoratorFunctionsToRenderable',
                    value: function applyDecoratorFunctionsToRenderable(renderable, decorators) {
                        for (var _iterator5 = decorators, _isArray5 = Array.isArray(_iterator5), _i6 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
                            var _ref5;

                            if (_isArray5) {
                                if (_i6 >= _iterator5.length) break;
                                _ref5 = _iterator5[_i6++];
                            } else {
                                _i6 = _iterator5.next();
                                if (_i6.done) break;
                                _ref5 = _i6.value;
                            }

                            var decorator = _ref5;

                            /* There can be existing decorators already, which are preserved. We are extending the decorators object,
                             * by first creating a fake renderable that gets decorators */
                            decorator(renderable);
                        }
                    }
                }, {
                    key: 'replaceRenderable',
                    value: function replaceRenderable(renderableName, newRenderable) {
                        var renderable = this._renderables[renderableName];
                        var renderableHasAnimationController = this._renderableCounterparts[renderableName] instanceof AnimationController;
                        /* If there isn't a renderable equivalent animationController that does the piping, then we need to redo the event piping */
                        if (!renderableHasAnimationController) {
                            this._setupAllRenderableListeners(renderableName, false);
                        }
                        newRenderable.decorations = _extends({}, newRenderable.decorations, renderable.decorations);
                        var newRenderableCounterpart = this._processsDecoratedRenderableCounterpart(newRenderable, renderableName);
                        this._groupedRenderables[this._getGroupName(renderable)].set(renderableName, [newRenderable, newRenderableCounterpart]);
                        if (!renderableHasAnimationController) {
                            this._renderableCounterparts[renderableName] = newRenderableCounterpart;
                            this._setupAllRenderableListeners(renderableName, true);
                        }
                        this._renderables[renderableName] = newRenderable;
                    }
                }, {
                    key: 'setRenderableFlowState',
                    value: function () {
                        var _ref6 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {
                            var renderableName = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
                            var stateName = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];

                            var renderable, flowOptions, flowWasInterrupted, _iterator6, _isArray6, _i7, _ref7, _ref8, transformations, options, resolveData, emit;

                            return _regeneratorRuntime.wrap(function _callee$(_context) {
                                while (1) {
                                    switch (_context.prev = _context.next) {
                                        case 0:
                                            renderable = this._renderables[renderableName];

                                            if (!(!renderable || !renderable.decorations || !renderable.decorations.flow)) {
                                                _context.next = 3;
                                                break;
                                            }

                                            return _context.abrupt('return', Utils.warn('setRenderableFlowState called on non-existing or renderable \'' + renderableName + '\' without flowstate'));

                                        case 3:
                                            flowOptions = renderable.decorations.flow;

                                            /* Keep track of which flow state changes are running. We only allow one at a time per renderable.
                                             * The latest one is always the valid one.
                                             */

                                            flowWasInterrupted = false;

                                            flowOptions.currentState = stateName;
                                            _iterator6 = flowOptions.states[stateName].steps, _isArray6 = Array.isArray(_iterator6), _i7 = 0, _iterator6 = _isArray6 ? _iterator6 : _iterator6[Symbol.iterator]();

                                        case 7:
                                            if (!_isArray6) {
                                                _context.next = 13;
                                                break;
                                            }

                                            if (!(_i7 >= _iterator6.length)) {
                                                _context.next = 10;
                                                break;
                                            }

                                            return _context.abrupt('break', 36);

                                        case 10:
                                            _ref7 = _iterator6[_i7++];
                                            _context.next = 17;
                                            break;

                                        case 13:
                                            _i7 = _iterator6.next();

                                            if (!_i7.done) {
                                                _context.next = 16;
                                                break;
                                            }

                                            return _context.abrupt('break', 36);

                                        case 16:
                                            _ref7 = _i7.value;

                                        case 17:
                                            _ref8 = _ref7;
                                            transformations = _ref8.transformations;
                                            options = _ref8.options;

                                            flowOptions.currentTransition = options.transition;
                                            this.decorateRenderable.apply(this, [renderableName].concat(transformations));

                                            /* Make sure FlowLayoutNode.set() is called next render tick */
                                            this._sizeResolver.requestReflow();

                                            /* Set the callback of the renderable so it's passed to the flowLayoutNode */
                                            _context.next = 25;
                                            return new Promise(function (resolve) {
                                                return renderable.decorations.flow.callback = resolve;
                                            });

                                        case 25:
                                            resolveData = _context.sent;

                                            if (!options.delay) {
                                                _context.next = 29;
                                                break;
                                            }

                                            _context.next = 29;
                                            return waitMilliseconds(options.delay);

                                        case 29:
                                            if (!(resolveData.reason === 'flowInterrupted')) {
                                                _context.next = 32;
                                                break;
                                            }

                                            flowWasInterrupted = true;
                                            return _context.abrupt('break', 36);

                                        case 32:
                                            emit = (renderable._eventOutput && renderable._eventOutput.emit || renderable.emit).bind(renderable._eventOutput || renderable);

                                            emit('flowStep', { state: stateName });

                                        case 34:
                                            _context.next = 7;
                                            break;

                                        case 36:
                                            return _context.abrupt('return', !flowWasInterrupted);

                                        case 37:
                                        case 'end':
                                            return _context.stop();
                                    }
                                }
                            }, _callee, this);
                        }));

                        function setRenderableFlowState(_x5, _x6) {
                            return _ref6.apply(this, arguments);
                        }

                        return setRenderableFlowState;
                    }()
                }, {
                    key: 'setViewFlowState',
                    value: function () {
                        var _ref9 = _asyncToGenerator(_regeneratorRuntime.mark(function _callee2() {
                            var stateName = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
                            var flowOptions = arguments[1];

                            var steps, _iterator7, _isArray7, _i8, _ref10, step;

                            return _regeneratorRuntime.wrap(function _callee2$(_context2) {
                                while (1) {
                                    switch (_context2.prev = _context2.next) {
                                        case 0:
                                            steps = flowOptions.viewStates[stateName];

                                            /* This is intended to be overwritten by other asynchronous calls to this method, see the stateName check below. */

                                            flowOptions.currentState = stateName;

                                            _iterator7 = steps, _isArray7 = Array.isArray(_iterator7), _i8 = 0, _iterator7 = _isArray7 ? _iterator7 : _iterator7[Symbol.iterator]();

                                        case 3:
                                            if (!_isArray7) {
                                                _context2.next = 9;
                                                break;
                                            }

                                            if (!(_i8 >= _iterator7.length)) {
                                                _context2.next = 6;
                                                break;
                                            }

                                            return _context2.abrupt('break', 20);

                                        case 6:
                                            _ref10 = _iterator7[_i8++];
                                            _context2.next = 13;
                                            break;

                                        case 9:
                                            _i8 = _iterator7.next();

                                            if (!_i8.done) {
                                                _context2.next = 12;
                                                break;
                                            }

                                            return _context2.abrupt('break', 20);

                                        case 12:
                                            _ref10 = _i8.value;

                                        case 13:
                                            step = _ref10;
                                            _context2.next = 16;
                                            return Promise.all(this.generateWaitQueueFromViewStateStep(step));

                                        case 16:
                                            if (!(flowOptions.currentState !== stateName)) {
                                                _context2.next = 18;
                                                break;
                                            }

                                            return _context2.abrupt('break', 20);

                                        case 18:
                                            _context2.next = 3;
                                            break;

                                        case 20:
                                            return _context2.abrupt('return', true);

                                        case 21:
                                        case 'end':
                                            return _context2.stop();
                                    }
                                }
                            }, _callee2, this);
                        }));

                        function setViewFlowState(_x9, _x10) {
                            return _ref9.apply(this, arguments);
                        }

                        return setViewFlowState;
                    }()
                }, {
                    key: 'generateWaitQueueFromViewStateStep',
                    value: function generateWaitQueueFromViewStateStep(step) {
                        var waitQueue = [];
                        for (var renderableName in step) {
                            var state = step[renderableName];
                            waitQueue.push(this.setRenderableFlowState(renderableName, state));
                        }
                        return waitQueue;
                    }
                }, {
                    key: 'getRenderableFlowState',
                    value: function getRenderableFlowState() {
                        var renderableName = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

                        var renderable = this._renderables[renderableName];
                        if (!renderable || !renderable.decorations || !renderable.decorations.flow) {
                            return Utils.warn('getRenderableFlowState called on non-existing or renderable \'' + renderableName + '\' without flowstate');
                        }
                        var flowOptions = renderable.decorations.flow;
                        return flowOptions.currentState;
                    }
                }, {
                    key: 'getViewFlowState',
                    value: function getViewFlowState() {
                        var flowOptions = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                        return flowOptions.currentState;
                    }

                    /**
                     * Create the swipable and register all the event logic for a swipable renderable
                     * @private
                     */

                }, {
                    key: '_initSwipable',
                    value: function _initSwipable() {
                        var _this3 = this;

                        var swipableOptions = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
                        var renderable = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

                        GenericSync.register({
                            'mouse': MouseSync,
                            'touch': TouchSync
                        });

                        var sync = new GenericSync({
                            'mouse': {},
                            'touch': {}
                        });

                        renderable.pipe(sync);

                        /* Translation modifier */
                        var positionModifier = new Modifier({
                            transform: function transform() {
                                var _position$get = position.get();

                                var _position$get2 = _slicedToArray(_position$get, 2);

                                var x = _position$get2[0];
                                var y = _position$get2[1];

                                return Transform.translate(x, y, 0);
                            }
                        });

                        var position = new Transitionable([0, 0]);

                        sync.on('update', function (data) {
                            var _position$get3 = position.get();

                            var _position$get4 = _slicedToArray(_position$get3, 2);

                            var x = _position$get4[0];
                            var y = _position$get4[1];

                            x += !swipableOptions.snapX ? data.delta[0] : 0;
                            y += !swipableOptions.snapY ? data.delta[1] : 0;
                            var _swipableOptions$yRan = swipableOptions.yRange;
                            var yRange = _swipableOptions$yRan === undefined ? [0, 0] : _swipableOptions$yRan;
                            var _swipableOptions$xRan = swipableOptions.xRange;
                            var xRange = _swipableOptions$xRan === undefined ? [0, 0] : _swipableOptions$xRan;

                            y = limit(yRange[0], y, yRange[1]);
                            x = limit(xRange[0], x, xRange[1]);
                            position.set([x, y]);
                        });

                        sync.on('end', function (data) {
                            var _position$get5 = position.get();

                            var _position$get6 = _slicedToArray(_position$get5, 2);

                            var x = _position$get6[0];
                            var y = _position$get6[1];

                            data.velocity[0] = Math.abs(data.velocity[0]) < 0.5 ? data.velocity[0] * 2 : data.velocity[0];
                            var endX = swipableOptions.snapX ? 0 : x + data.delta[0] + data.velocity[0] * 175;
                            var endY = swipableOptions.snapY ? 0 : y + data.delta[1] + data.velocity[1] * 175;
                            var _swipableOptions$yRan2 = swipableOptions.yRange;
                            var yRange = _swipableOptions$yRan2 === undefined ? [0, 0] : _swipableOptions$yRan2;
                            var _swipableOptions$xRan2 = swipableOptions.xRange;
                            var xRange = _swipableOptions$xRan2 === undefined ? [0, 0] : _swipableOptions$xRan2;

                            endY = limit(yRange[0], endY, yRange[1]);
                            endX = limit(xRange[0], endX, xRange[1]);
                            position.set([endX, endY], {
                                curve: Easing.outCirc,
                                duration: 750 - Math.abs(data.velocity[0] * 150)
                            });

                            _this3._determineSwipeEvents(renderable, swipableOptions, endX, endY);
                        });

                        renderable.node = new RenderNode();
                        renderable.node.add(positionModifier).add(renderable);

                        return renderable;
                    }
                }, {
                    key: '_determineSwipeEvents',
                    value: function _determineSwipeEvents(renderable) {
                        var swipableOptions = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
                        var endX = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];
                        var endY = arguments.length <= 3 || arguments[3] === undefined ? 0 : arguments[3];

                        if (!renderable || !renderable._eventOutput) return;

                        var xThreshold = swipableOptions.xThreshold || [undefined, undefined];
                        var yThreshold = swipableOptions.yThreshold || [undefined, undefined];

                        if (xThreshold[1] && endX > xThreshold[1]) {
                            renderable._eventOutput.emit('swiped', {
                                direction: 0,
                                displacement: 'right'
                            });
                        }

                        if (xThreshold[0] && endX < xThreshold[0]) {
                            renderable._eventOutput.emit('swiped', {
                                direction: 0,
                                displacement: 'left'
                            });
                        }

                        if (yThreshold[1] && endY > yThreshold[1]) {
                            renderable._eventOutput.emit('swiped', {
                                direction: 1,
                                displacement: 'bottom'
                            });
                        }

                        if (yThreshold[0] && endY < yThreshold[0]) {
                            renderable._eventOutput.emit('swiped', {
                                direction: 1,
                                displacement: 'top'
                            });
                        }
                    }

                    /**
                     * Rearranges the order in which docked renderables are parsed for rendering, ensuring that 'renderableName' is processed
                     * before 'nextRenderableName'.
                     * @param {String} renderableName
                     * @param {String} nextRenderableName
                     */

                }, {
                    key: 'prioritiseDockBefore',
                    value: function prioritiseDockBefore(renderableName, nextRenderableName) {
                        var dockedRenderables = this._groupedRenderables.docked;
                        if (!dockedRenderables) {
                            Utils.warn('Could not prioritise \'' + renderableName + '\' before \'' + nextRenderableName + '\': no docked renderables present.');
                            return false;
                        }
                        var result = this._prioritiseDockAtIndex(renderableName, dockedRenderables.indexOf(nextRenderableName));
                        if (!result) {
                            Utils.warn('Could not prioritise \'' + renderableName + '\' before \'' + nextRenderableName + '\': could not find one of the renderables by name.\n                        The following docked renderables are present: ' + dockedRenderables.keys());
                        }
                        return result;
                    }

                    /**
                     * @param {String} renderableName
                     * @param {String} prevRenderableName
                     */

                }, {
                    key: 'prioritiseDockAfter',
                    value: function prioritiseDockAfter(renderableName, prevRenderableName) {
                        var dockedRenderables = this._groupedRenderables.docked;
                        if (!dockedRenderables) {
                            Utils.warn('Could not prioritise \'' + renderableName + '\' after \'' + prevRenderableName + '\': no docked renderables present.');
                            return false;
                        }
                        var result = this._prioritiseDockAtIndex(renderableName, dockedRenderables.indexOf(prevRenderableName) + 1);
                        if (!result) {
                            Utils.warn('Could not prioritise \'' + renderableName + '\' after \'' + prevRenderableName + '\': could not find one of the renderables by name.\n                        The following docked renderables are present: ' + dockedRenderables.keys());
                        }
                        return result;
                    }

                    /**
                     * Helper function used by prioritiseDockBefore and prioritiseDockAfter to change order of docked renderables
                     * @param renderableName
                     * @param index
                     * @returns {boolean}
                     * @private
                     */

                }, {
                    key: '_prioritiseDockAtIndex',
                    value: function _prioritiseDockAtIndex(renderableName, index) {
                        var dockedRenderables = this._groupedRenderables.docked;
                        var renderableToRearrange = dockedRenderables.get(renderableName);

                        if (index < 0 || !renderableToRearrange) {
                            return false;
                        }

                        dockedRenderables.remove(renderableName);
                        dockedRenderables.insert(index, renderableName, renderableToRearrange);

                        return true;
                    }
                }]);

                return RenderableHelper;
            }();

            ReflowingScrollView = function (_FlexScrollView) {
                _inherits(ReflowingScrollView, _FlexScrollView);

                /**
                 * Constructor does not add any new options.
                 *
                 * @param options
                 */
                function ReflowingScrollView() {
                    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                    _classCallCheck(this, ReflowingScrollView);

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ReflowingScrollView).call(this, options));

                    ObjectHelper.bindAllMethods(_this, _this);
                    _this._eventInput.on('recursiveReflow', _this._reflowWhenPossible);
                    return _this;
                }

                _createClass(ReflowingScrollView, [{
                    key: '_reflowWhenPossible',
                    value: function _reflowWhenPossible() {
                        if (!this.isScrolling() && !this._nodes._reevalTrueSize || !this._didReflowOnce) {
                            this.reLayout();
                            this._didReflowOnce = true;
                        }
                    }
                }, {
                    key: '_addItem',
                    value: function _addItem() {
                        /* Views that use this ReflowingScrollView should manually subscribe to this event,
                         * since it does not automatically bubble to Arva's View.js.
                         */
                        this._eventOutput.emit('resize');
                    }
                }, {
                    key: '_removeItem',
                    value: function _removeItem() {
                        /* Views that use this ReflowingScrollView should manually subscribe to this event,
                         * since it does not automatically bubble to Arva's View.js.
                         */
                        this._eventOutput.emit('resize');
                    }
                }]);

                return ReflowingScrollView;
            }(FlexScrollView);

            View = function (_FamousView) {
                _inherits(View, _FamousView);

                /**
                 * @example
                 * HomeController extends Controller {
                 *      Index() {
                 *          let view = new View();
                 *          view.add(new Surface({properties: {backgroundColor: 'red'}}));
                 *          return view
                 *      }
                 * }
                 * @example
                 * class HomeView extends View {
                 *      @layout.size(100, 100)
                 *      @layout.place.center()
                 *      mySurface = new Surface({properties: {backgroundColor: 'red'}})
                 * }
                 *
                 *
                 *
                 * @param {Object} options. The options passed to the view will be stored in this.options, but won't change any
                 * behaviour of the core functionality of the view. Instead, configuration of the View is done by decorators.
                 *
                 */
                function View() {
                    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                    _classCallCheck(this, View);

                    /* Bind all local methods to the current object instance, so we can refer to 'this'
                     * in the methods as expected, even when they're called from event handlers.        */
                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(View).call(this, options));

                    ObjectHelper.bindAllMethods(_this, _this);

                    _this._copyPrototypeProperties();
                    _this._initDataStructures();
                    _this._initOwnDecorations();
                    _this._initOptions(options);
                    _this._initUtils();
                    _this._constructDecoratedRenderables();

                    _this._createLayoutController();
                    _this._initTrueSizedBookkeeping();

                    return _this;
                }

                //noinspection JSUnusedGlobalSymbols
                /**
                 * Deprecated, it is no longer required to call build() from within your View instances.
                 * @deprecated
                 * @returns {void}
                 */

                _createClass(View, [{
                    key: 'build',
                    value: function build() {
                        Utils.warn('Arva: calling build() from within views is no longer necessary, any existing calls can safely be removed. Called from ' + this._name());
                    }

                    /**
                     * Reflows the layout while also informing any subscribing parents that a reflow has to take place
                     */

                }, {
                    key: 'reflowRecursively',
                    value: function reflowRecursively() {
                        this.layout.reflowLayout();
                        this._eventOutput.emit('recursiveReflow');
                    }

                    /**
                     * Gets the size used when displaying a renderable on the screen the last tick
                     * @param {Renderable/Name} renderableOrName The renderable or the name of the renderable of which you need the size
                     */

                }, {
                    key: 'getResolvedSize',
                    value: function getResolvedSize(renderableOrName) {
                        var renderable = renderableOrName;
                        if (typeof renderableOrName === 'string') {
                            renderable = this.renderables[renderableOrName];
                        }
                        var size = this._sizeResolver.getResolvedSize(renderable);

                        /* Backup: If size can't be resolved, then see if there's a size specified on the decorator */
                        if (!size && renderable.decorations) {
                            var decoratedSize = renderable.decorations.size;
                            var isValidSize = function isValidSize(inputSize) {
                                return typeof inputSize == 'number' && inputSize > 0;
                            };
                            if (decoratedSize && decoratedSize.every(isValidSize)) {
                                size = decoratedSize;
                            }
                        }

                        return size || [undefined, undefined];
                    }

                    /**
                     * Returns true if the view contains uncalculated surfaces
                     * @returns {Boolean}
                     */

                }, {
                    key: 'containsUncalculatedSurfaces',
                    value: function containsUncalculatedSurfaces() {
                        return this._sizeResolver.containsUncalculatedSurfaces();
                    }

                    /**
                     * Adds a renderable to the layout.
                     * @param {Renderable} renderable The renderable to be added
                     * @param {String} renderableName The name (key) of the renderable
                     * @param {Decorator} Decorator Any decorator(s) to apply to the renderable
                     * @returns {Renderable} The renderable that was assigned
                     */

                }, {
                    key: 'addRenderable',
                    value: function addRenderable(renderable, renderableName) {
                        /* Due to common mistake, we check if renderableName is a string */
                        if (typeof renderableName !== 'string') {
                            Utils.warn('The second argument of addRenderable(...) was not a string. Please pass the renderable name in ' + this._name());
                        }

                        for (var _len = arguments.length, decorators = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
                            decorators[_key - 2] = arguments[_key];
                        }

                        this._renderableHelper.applyDecoratorFunctionsToRenderable(renderable, decorators);
                        this._assignRenderable(renderable, renderableName);
                        this.layout.reflowLayout();
                        return renderable;
                    }

                    /**
                     * Removes the renderable from the view
                     * @param {String} renderableName The name of the renderable
                     */

                }, {
                    key: 'removeRenderable',
                    value: function removeRenderable(renderableName) {
                        this._renderableHelper.removeRenderable(renderableName);
                        this[renderableName] = undefined;
                        this.layout.reflowLayout();
                    }

                    /**
                     * Rearranges the order in which docked renderables are parsed for rendering, ensuring that 'renderableName' is processed
                     * before 'nextRenderableName'.
                     * @param {String} renderableName
                     * @param {String} nextRenderableName
                     */

                }, {
                    key: 'prioritiseDockBefore',
                    value: function prioritiseDockBefore(renderableName, nextRenderableName) {
                        this.reflowRecursively();
                        return this._renderableHelper.prioritiseDockBefore(renderableName, nextRenderableName);
                    }

                    /**
                     * @param {String} renderableName
                     * @param {String} prevRenderableName
                     */

                }, {
                    key: 'prioritiseDockAfter',
                    value: function prioritiseDockAfter(renderableName, prevRenderableName) {
                        this.reflowRecursively();
                        return this._renderableHelper.prioritiseDockAfter(renderableName, prevRenderableName);
                    }

                    /**
                     *
                     * @param {String} renderableName
                     * @param {Boolean} show. Whether to show or not
                     * @returns {Promise} when the renderable has finished its animation
                     */

                }, {
                    key: 'showRenderable',
                    value: function showRenderable(renderableName) {
                        var _this2 = this;

                        var show = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

                        var renderable = this[renderableName];
                        if (!renderable) {
                            Utils.warn('Trying to show renderable ' + renderableName + ' which does not exist!');
                            return;
                        }
                        if (!renderable.animationController) {
                            Utils.warn('Trying to show renderable ' + renderableName + ' which does not have an animationcontroller. Please use @layout.animate');
                            return;
                        }
                        var decoratedSize = this[renderableName].decorations.size || (this[renderableName].decorations.dock ? this[renderableName].decorations.dock.size : undefined);
                        if (decoratedSize) {
                            /* Check if animationController has a true size specified. If so a reflow needs to be performed since there is a
                             * new size to take into account. */
                            var _arr = [0, 1];
                            for (var _i = 0; _i < _arr.length; _i++) {
                                var dimension = _arr[_i];
                                if (this._sizeResolver.isValueTrueSized(this._sizeResolver.resolveSingleSize(decoratedSize[dimension], [NaN, NaN], dimension))) {
                                    this.reflowRecursively();
                                    break;
                                }
                            }
                        }

                        return new Promise(function (resolve) {
                            return _this2._renderableHelper.showWithAnimationController(_this2.renderables[renderableName], renderable, show, resolve);
                        });
                    }

                    /**
                     * Decorates a renderable with other decorators. Using the same decorators as used previously will override the old ones.
                     * @example
                     * this.decorateRenderable('myRenderable',layout.size(100, 100));
                     *
                     * @param {String} renderableName The name of the renderable
                     * @param ...decorators The decorators that should be applied
                     */

                }, {
                    key: 'decorateRenderable',
                    value: function decorateRenderable(renderableName) {
                        var _renderableHelper;

                        for (var _len2 = arguments.length, decorators = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                            decorators[_key2 - 1] = arguments[_key2];
                        }

                        (_renderableHelper = this._renderableHelper).decorateRenderable.apply(_renderableHelper, [renderableName].concat(decorators));
                        this.reflowRecursively();
                    }

                    /**
                     * Sets a renderable flow state as declared in the @flow.stateStep, or @flow.defaultState
                     * @param {String} renderableName. The name of the renderable
                     * @param {String} stateName. The name of the state as declared in the first argument of the decorator
                     * @returns {*}
                     */

                }, {
                    key: 'setRenderableFlowState',
                    value: function setRenderableFlowState() {
                        var renderableName = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
                        var stateName = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];

                        return this._renderableHelper.setRenderableFlowState(renderableName, stateName);
                    }

                    /**
                     * Sets a renderable flow state as declared in the @flow.viewState
                     * @param {String} renderableName. The name of the renderable
                     * @param {String} stateName. The name of the state as declared in the first argument of the decorator
                     * @returns {*}
                     */

                }, {
                    key: 'setViewFlowState',
                    value: function setViewFlowState() {
                        var stateName = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

                        return this._renderableHelper.setViewFlowState(stateName, this.decorations.flow);
                    }

                    /**
                     * Gets the name of a flow state of a renderable.
                     *
                     * @param {String} renderableName the name of the renderable of which the flow state is concerned
                     * @returns {String} stateName the name of the state that the renderable is in
                     */

                }, {
                    key: 'getRenderableFlowState',
                    value: function getRenderableFlowState() {
                        var renderableName = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

                        return this._renderableHelper.getRenderableFlowState(renderableName);
                    }

                    /**
                     * Gets the name of the flow state of a view.
                     *
                     * @returns {String} stateName the name of the state that this view is in.
                     */

                }, {
                    key: 'getViewFlowState',
                    value: function getViewFlowState() {
                        return this._renderableHelper.getViewFlowState(this.decorations.flow);
                    }

                    /**
                     * Replaces an existing decorated renderable with a new renderable, preserving all necessary state and decorations
                     * @param {String} renderableName. The name of the renderable
                     * @param {Renderable} newRenderable Renderable to replace the old renderable with
                     */

                }, {
                    key: 'replaceRenderable',
                    value: function replaceRenderable(renderableName, newRenderable) {
                        this._renderableHelper.replaceRenderable(renderableName, newRenderable);
                        this.reflowRecursively();
                        this[renderableName] = newRenderable;
                    }

                    /**
                     * Gets the scroll view that was set if @layout.scrollable was used on the view
                     * @returns {ReflowingScrollView}
                     */

                }, {
                    key: 'getScrollView',
                    value: function getScrollView() {
                        return this._scrollView;
                    }

                    /**
                     * getSize() is called by this view and by layoutControllers. For lazy people that don't want to specifiy their own getSize() function,
                     * we provide a fallback. This function can be performance expensive when using non-docked renderables, but for docked renderables it
                     * is efficient and convenient]
                     * @returns {*[]}
                     */

                }, {
                    key: 'getSize',
                    value: function getSize() {
                        return this._getLayoutSize();
                    }

                    /**
                     * Hides a renderable that has been declared with @layout.animate
                     * @param renderableName
                     * @returns {Promise} when the renderable has finished its animation
                     */

                }, {
                    key: 'hideRenderable',
                    value: function hideRenderable(renderableName) {
                        return this.showRenderable(renderableName, false);
                    }

                    /**
                     * Passes a callback that gets called every time the context size changes.
                     *
                     * @param {Function} callback a callback with arguments (width, height)
                     */

                }, {
                    key: 'onNewSize',
                    value: function onNewSize(callback) {
                        this._onNewSizeCallbacks.push(callback);
                    }

                    /**
                     * Gets a (new) context size of the view. This will always happen at least once immediately after the view is constructed.
                     * Hence, it can safely be used in the constructor to get the (initial) size of the view.
                     *
                     * @example
                     * constructor(options){
                     *  super(options);
                     *  onceNewSize.then((width, height) => {
                     *      console.log(width, height);
                     *  });
                     * }
                     *
                     * @returns {Promise} Resolves when there's a new size
                     */

                }, {
                    key: 'onceNewSize',
                    value: function onceNewSize() {
                        var _this3 = this;

                        return new Promise(function (resolve) {
                            var onNewSize = function onNewSize(size) {
                                _this3._onNewSizeCallbacks.splice(_this3._onNewSizeCallbacks.indexOf(onNewSize), 1);
                                resolve(size);
                            };
                            _this3._onNewSizeCallbacks.push(onNewSize);
                        });
                    }

                    /**
                     * Repeat a certain flowState indefinitely
                     * @param renderableName
                     * @param stateName
                     * @param {Boolean} persistent. If true, then it will keep on repeating until explicitly cancelled by cancelRepeatFlowState.
                     * If false, it will be interrupted automatically by any interrput to another state. Defaults to true
                     * @returns {Promise} resolves to false if the flow state can't be repeated due to an existing running repeat
                     */

                }, {
                    key: 'repeatFlowState',
                    value: function () {
                        var _ref = _asyncToGenerator(_regeneratorRuntime.mark(function _callee() {
                            var renderableName = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
                            var stateName = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];
                            var persistent = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];
                            return _regeneratorRuntime.wrap(function _callee$(_context) {
                                while (1) {
                                    switch (_context.prev = _context.next) {
                                        case 0:
                                            if (this._runningRepeatingFlowStates[renderableName]) {
                                                _context.next = 17;
                                                break;
                                            }

                                            this._runningRepeatingFlowStates[renderableName] = { persistent: persistent };

                                        case 2:
                                            _context.t0 = this._runningRepeatingFlowStates[renderableName];

                                            if (!_context.t0) {
                                                _context.next = 10;
                                                break;
                                            }

                                            _context.next = 6;
                                            return this.setRenderableFlowState(renderableName, stateName);

                                        case 6:
                                            _context.t1 = _context.sent;

                                            if (_context.t1) {
                                                _context.next = 9;
                                                break;
                                            }

                                            _context.t1 = persistent;

                                        case 9:
                                            _context.t0 = _context.t1;

                                        case 10:
                                            if (!_context.t0) {
                                                _context.next = 13;
                                                break;
                                            }

                                            _context.next = 2;
                                            break;

                                        case 13:
                                            delete this._runningRepeatingFlowStates[renderableName];
                                            return _context.abrupt('return', true);

                                        case 17:
                                            return _context.abrupt('return', false);

                                        case 18:
                                        case 'end':
                                            return _context.stop();
                                    }
                                }
                            }, _callee, this);
                        }));

                        function repeatFlowState(_x7, _x8, _x9) {
                            return _ref.apply(this, arguments);
                        }

                        return repeatFlowState;
                    }()

                    /**
                     * Cancel a repeating renderable. This will cancel the animation for next flow-cycle, it won't interject the current animation cycle.
                     * @param renderableName
                     */

                }, {
                    key: 'cancelRepeatFlowState',
                    value: function cancelRepeatFlowState(renderableName) {
                        if (this._runningRepeatingFlowStates) {
                            delete this._runningRepeatingFlowStates[renderableName];
                        }
                    }

                    /**
                     * Initiate a renderable to a default flow state.
                     * @param renderableName
                     * @param stateName
                     */

                }, {
                    key: 'setDefaultState',
                    value: function setDefaultState(renderableName, stateName) {
                        for (var _iterator = this[renderableName].decorations.flow.states[stateName].steps, _isArray = Array.isArray(_iterator), _i2 = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                            var _ref2;

                            if (_isArray) {
                                if (_i2 >= _iterator.length) break;
                                _ref2 = _iterator[_i2++];
                            } else {
                                _i2 = _iterator.next();
                                if (_i2.done) break;
                                _ref2 = _i2.value;
                            }

                            var step = _ref2;

                            this.decorateRenderable.apply(this, [renderableName].concat(step.transformations));
                        }
                    }

                    /**
                     * Inits the utils that are used as helper classes for the view
                     * @private
                     */

                }, {
                    key: '_initUtils',
                    value: function _initUtils() {
                        var _this4 = this;

                        this._sizeResolver = new SizeResolver();
                        this._sizeResolver.on('layoutControllerReflow', this._requestLayoutControllerReflow);
                        this._sizeResolver.on('reflow', function () {
                            return _this4.layout.reflowLayout();
                        });
                        this._sizeResolver.on('reflowRecursively', this.reflowRecursively);
                        this._dockedRenderablesHelper = new DockedLayoutHelper(this._sizeResolver);
                        this._fullSizeLayoutHelper = new FullSizeLayoutHelper(this._sizeResolver);
                        this._traditionalLayoutHelper = new TraditionalLayoutHelper(this._sizeResolver);
                        this._renderableHelper = new RenderableHelper(this._bindToSelf, this._setPipeToSelf, this.renderables, this._sizeResolver);
                    }

                    /** Requests for a parent LayoutController trying to resolve the size of this view
                     * @private
                     */

                }, {
                    key: '_requestLayoutControllerReflow',
                    value: function _requestLayoutControllerReflow() {
                        this._nodes = { _trueSizeRequested: true };
                        //TODO: Do we really need to emit this?
                        this._eventOutput.emit('layoutControllerReflow');
                    }
                }, {
                    key: '_getRenderableOptions',
                    value: function _getRenderableOptions(renderableName) {
                        var decorations = arguments.length <= 1 || arguments[1] === undefined ? this.renderables[renderableName] : arguments[1];

                        var decoratorOptions = decorations.constructionOptionsMethod ? decorations.constructionOptionsMethod.call(this, this.options) : {};
                        if (!Utils.isPlainObject(decoratorOptions)) {
                            Utils.warn('Invalid option \'' + decoratorOptions + '\' given to item ' + renderableName);
                        }
                        return decoratorOptions;
                    }

                    /**
                     * Construct all the renderables that have been decorated in the class.
                     * @private
                     */

                }, {
                    key: '_constructDecoratedRenderables',
                    value: function _constructDecoratedRenderables() {
                        var _this5 = this;

                        var classConstructorList = [];

                        /* Reverse the class list becaues rit makes more sense to make the renderables of the parent before the renderables
                         * of this view
                        */
                        for (var currentClass = this; currentClass.__proto__.constructor !== View; currentClass = Object.getPrototypeOf(currentClass)) {
                            classConstructorList.push(currentClass.__proto__.constructor);
                        }
                        classConstructorList.reverse();

                        for (var _iterator2 = classConstructorList, _isArray2 = Array.isArray(_iterator2), _i3 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
                            var _ref3;

                            if (_isArray2) {
                                if (_i3 >= _iterator2.length) break;
                                _ref3 = _iterator2[_i3++];
                            } else {
                                _i3 = _iterator2.next();
                                if (_i3.done) break;
                                _ref3 = _i3.value;
                            }

                            var currentClassConstructor = _ref3;

                            var renderableConstructors = this.renderableConstructors.get(currentClassConstructor);

                            var _loop = function _loop(renderableName) {
                                var decorations = renderableConstructors[renderableName].decorations;

                                var renderable = renderableConstructors[renderableName].call(_this5, _this5._getRenderableOptions(renderableName, decorations));

                                /* Allow decorated class properties to be set to false, null, or undefined, in order to skip rendering */
                                if (!renderable) {
                                    return 'continue';
                                }

                                /* Allow class property to be a function that returns a renderable */
                                if (typeof renderable === 'function') {
                                    var factoryFunction = renderable;
                                    renderable = factoryFunction(_this5.options);
                                }

                                /* Clone the decorator properties, because otherwise every view of the same type willl share them between
                                 * the same corresponding renderable. TODO: profiling reveals that cloneDeep affects performance
                                 */
                                renderable.decorations = cloneDeep(extend({}, decorations, renderable.decorations || {}));

                                /* Since after constructor() of this View class is called, all decorated renderables will
                                 * be attempted to be initialized by Babel / the ES7 class properties spec, we'll need to
                                 * override the descriptor get/initializer to return this specific instance once.
                                 *
                                 * If we don't do this, the View will have its renderables overwritten by new renderable instances
                                 * that don't have constructor.options applied to them correctly. If we always return this specific instance
                                 * instead of only just once, any instantiation of the same View class somewhere else in the code will refer
                                 * to the renderables of this instance, which is unwanted.
                                 */
                                var descriptor = decorations.descriptor;

                                if (descriptor) {
                                    if (descriptor.get) {
                                        (function () {
                                            var originalGet = decorations.descriptor.get;
                                            descriptor.get = function () {
                                                descriptor.get = originalGet;
                                                return renderable;
                                            };
                                        })();
                                    }
                                    if (descriptor.initializer) {
                                        (function () {
                                            var originalInitializer = decorations.descriptor.initializer;
                                            descriptor.initializer = function () {
                                                descriptor.initializer = originalInitializer;
                                                return renderable;
                                            };
                                        })();
                                    }
                                }
                                _this5._assignRenderable(renderable, renderableName);
                            };

                            for (var renderableName in renderableConstructors) {
                                var _ret = _loop(renderableName);

                                if (_ret === 'continue') continue;
                            }
                        }
                    }

                    /**
                     * Assigns a renderable to this view, without setting this[renderableName]
                     * @param {Renderable} renderable the renderable that is going to be added
                     * @param {String} renderableName the name of the renderable
                     * @private
                     */

                }, {
                    key: '_assignRenderable',
                    value: function _assignRenderable(renderable, renderableName) {
                        this._renderableHelper.assignRenderable(renderable, renderableName);
                        /* Do add property to object because there can be a getter defined instead of a class property,
                         * in which case we have to use the ObjectHelper
                         */
                        ObjectHelper.addPropertyToObject(this, renderableName, renderable, true, true, null, false);
                    }
                }, {
                    key: '_layoutDecoratedRenderables',
                    value: function _layoutDecoratedRenderables(context, options) {
                        var _this6 = this;

                        var dockedRenderables = this._renderableHelper;
                        var nativeScrollableOptions = this.decorations.nativeScrollable;
                        if (nativeScrollableOptions) {
                            (function () {
                                Engine.enableTouchMove();
                                var thisSize = _this6.getSize();
                                context.size = context.size.map(function (size, index) {
                                    return nativeScrollableOptions['scroll' + (index === 0 ? 'X' : 'Y')] && Math.max(thisSize[index], size) || size;
                                });
                            })();
                        }
                        this._dockedRenderablesHelper.layout(dockedRenderables.getRenderableGroup('docked'), dockedRenderables.getRenderableGroup('filled'), context, this.decorations);
                        this._fullSizeLayoutHelper.layout(dockedRenderables.getRenderableGroup('fullSize'), context, this.decorations);
                        this._traditionalLayoutHelper.layout(dockedRenderables.getRenderableGroup('traditional'), context, this.decorations);
                    }

                    /**
                     * Combines all layouts defined in subclasses of the View into a single layout for the LayoutController.
                     * @returns {void}
                     * @private
                     */

                }, {
                    key: '_createLayoutController',
                    value: function _createLayoutController() {
                        var _this7 = this;

                        var hasFlowyRenderables = this._renderableHelper.hasFlowyRenderables();
                        this.layout = new LayoutController({
                            flow: !!this.decorations.useFlow || hasFlowyRenderables,
                            partialFlow: !this.decorations.useFlow,
                            nativeScroll: !!this.decorations.nativeScrollable,
                            flowOptions: this.decorations.flowOptions || { spring: { period: 200 } },
                            layout: function (context, options) {

                                /* Because views that extend this View class first call super() and then define their renderables,
                                 * we wait until the first engine render tick to add our renderables to the layout, when the view will have declared them all.
                                 * layout.setDataSource() will automatically pipe events from the renderables to this View. */
                                if (!this._initialised) {
                                    this.layout.setDataSource(this.renderables);
                                    this._renderableHelper.pipeAllRenderables();
                                    this._renderableHelper.initializeAnimations();
                                    this._initialised = true;
                                    this.layout.reflowLayout();

                                    /*
                                     * When the data source is set, it will not be reflected in the context yet because the layout is already
                                     * prepared for the previous (empty) renderable data source. Therefore, it's a waste of resources
                                     * and mysterious bugs to continue. We will wait for the next rendering cycle. However, if views
                                     * are only having decorated renderables, then we don't have to do this whatsoever
                                     */
                                    return;
                                }

                                /* Layout all renderables that have decorators (e.g. @someDecorator) */
                                this._layoutDecoratedRenderables(context, options);
                                if (this.decorations.customLayoutFunction) {
                                    this.decorations.customLayoutFunction(context);
                                }

                                this._doTrueSizedSurfacesBookkeeping();

                                /* Legacy context.set() based layout functions */
                                if (this.layouts.length) {
                                    this._callLegacyLayoutFunctions(context, options);
                                }
                            }.bind(this)
                        });

                        this._eventInput.on('recursiveReflow', function () {
                            _this7.reflowRecursively();
                        });

                        /* Add the layoutController to this View's rendering context. */
                        this._prepareLayoutController();

                        if ((this.decorations.scrollable || this.decorations.nativeScrollable) && !this._renderableHelper.getRenderableGroup('fullSize')) {
                            this.addRenderable(new Surface(), '_fullScreenTouchArea', layout$1.fullSize(), layout$1.translate(0, 0, -10));
                        }
                    }

                    /**
                     * Layout all renderables that have explicit context.set() calls in this View's legacy layout array.
                     * @returns {void}
                     * @private
                     */

                }, {
                    key: '_callLegacyLayoutFunctions',
                    value: function _callLegacyLayoutFunctions(context, options) {
                        for (var _iterator3 = this.layouts, _isArray3 = Array.isArray(_iterator3), _i4 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
                            var _ref4;

                            if (_isArray3) {
                                if (_i4 >= _iterator3.length) break;
                                _ref4 = _iterator3[_i4++];
                            } else {
                                _i4 = _iterator3.next();
                                if (_i4.done) break;
                                _ref4 = _i4.value;
                            }

                            var _layout = _ref4;

                            try {
                                switch (typeof _layout) {
                                    case 'function':
                                        _layout.call(this, context, options);
                                        break;
                                    default:
                                        Utils.warn('Unrecognized layout specification in view \'' + this._name() + '\'.');
                                        break;
                                }
                            } catch (error) {
                                Utils.warn('Exception thrown in ' + this._name() + ':');
                                console.log(error);
                            }
                        }
                    }

                    /**
                     * Either adds this.layout (a LayoutController) to the current View, or a FlexScrollView containing this.layout if this view
                     * has been decorated with a @scrollable.
                     * @returns {void}
                     * @private
                     */

                }, {
                    key: '_prepareLayoutController',
                    value: function _prepareLayoutController() {
                        var scrollableOptions = this.decorations.scrollableOptions;

                        if (scrollableOptions) {
                            this._scrollView = new ReflowingScrollView(scrollableOptions);
                            this.layout.getSize = this.getSize;
                            this._scrollView.push(this.layout);
                            this.pipe(this._scrollView);
                            this.add(this._scrollView);
                        } else {
                            this.add(this.layout);
                        }
                    }

                    /**
                     * Calculates the total height of the View's layout when it's embedded inside a FlexScrollView (i.e. @scrollable is set on the View),
                     * by iterating over each renderable inside the View, and finding the minimum and maximum y values at which they are drawn.
                     *
                     *
                     * @returns {*[]}
                     * @private
                     */

                }, {
                    key: '_getLayoutSize',
                    value: function _getLayoutSize() {
                        var dockedRenderables = this._renderableHelper.getRenderableGroup('docked');
                        var traditionalRenderables = this._renderableHelper.getRenderableGroup('traditional');
                        var filledRenderables = this._renderableHelper.getRenderableGroup('filled');
                        if (!traditionalRenderables && !dockedRenderables) {
                            return [undefined, undefined];
                        }
                        var totalSize = [undefined, undefined];
                        if (dockedRenderables || filledRenderables) {
                            totalSize = this._dockedRenderablesHelper.boundingBoxSize(dockedRenderables, filledRenderables, this.decorations);
                        }

                        if (traditionalRenderables) {
                            var traditionalRenderablesBoundingBox = this._traditionalLayoutHelper.boundingBoxSize(traditionalRenderables);
                            for (var _iterator4 = totalSize.entries(), _isArray4 = Array.isArray(_iterator4), _i5 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[Symbol.iterator]();;) {
                                var _ref5;

                                if (_isArray4) {
                                    if (_i5 >= _iterator4.length) break;
                                    _ref5 = _iterator4[_i5++];
                                } else {
                                    _i5 = _iterator4.next();
                                    if (_i5.done) break;
                                    _ref5 = _i5.value;
                                }

                                var _ref6 = _ref5;

                                var _ref7 = _slicedToArray(_ref6, 2);

                                var dimension = _ref7[0];
                                var singleSize = _ref7[1];

                                var traditionalSingleSize = traditionalRenderablesBoundingBox[dimension];
                                if (traditionalSingleSize !== undefined && (singleSize === undefined || singleSize < traditionalSingleSize)) {
                                    totalSize[dimension] = traditionalSingleSize;
                                }
                            }
                        }
                        return totalSize;
                    }

                    /**
                     * Retrieves the class name of the subclass View instance.
                     * @returns {string}
                     * @private
                     */

                }, {
                    key: '_name',
                    value: function _name() {
                        return Object.getPrototypeOf(this).constructor.name;
                    }

                    /**
                     * Copies prototype properties set by decorators to this
                     * @private
                     */

                }, {
                    key: '_copyPrototypeProperties',
                    value: function _copyPrototypeProperties() {
                        var prototype = Object.getPrototypeOf(this);

                        /* Move over all renderable- and decoration information that decorators.js set to the View prototype */
                        var _arr2 = ['decorationsMap', 'renderableConstructors'];
                        for (var _i6 = 0; _i6 < _arr2.length; _i6++) {
                            var name = _arr2[_i6];
                            this[name] = cloneDeep(prototype[name]) || new Map();
                        }
                    }

                    /**
                     * Inits the decorations that is set on a class level
                     * @private
                     */

                }, {
                    key: '_initOwnDecorations',
                    value: function _initOwnDecorations() {
                        var _this8 = this;

                        for (var currentClass = this; currentClass.__proto__.constructor !== View; currentClass = Object.getPrototypeOf(currentClass)) {
                            /* The close the decoration is to this constructor in the prototype chain, the higher the priority */
                            var _decorations = this.decorationsMap.get(currentClass.__proto__.constructor);
                            for (var property in _decorations) {
                                if (!(property in this.decorations)) {
                                    this.decorations[property] = _decorations[property];
                                }
                            }
                        }

                        if (this.decorations.dynamicDockPadding) {
                            this.onNewSize(function (size) {
                                return _this8.decorations.viewMargins = _this8.decorations.dynamicDockPadding(size);
                            });
                        }

                        if (!this.decorations.extraTranslate) {
                            this.decorations.extraTranslate = [0, 0, 10];
                        }
                    }
                }, {
                    key: '_doTrueSizedSurfacesBookkeeping',
                    value: function _doTrueSizedSurfacesBookkeeping() {
                        this._nodes._trueSizeRequested = false;
                    }
                }, {
                    key: '_initTrueSizedBookkeeping',
                    value: function _initTrueSizedBookkeeping() {
                        var _this9 = this;

                        this.layout.on('layoutstart', function (_ref8) {
                            var oldSize = _ref8.oldSize;
                            var size = _ref8.size;

                            if (size[0] !== oldSize[0] || size[1] !== oldSize[1]) {
                                _this9._sizeResolver.doTrueSizedBookkeeping();
                                ///
                                //TODO: Kept for legacy reasons, but remove all listeners to this function
                                _this9._eventOutput.emit('newSize', size);
                                for (var _iterator5 = _this9._onNewSizeCallbacks, _isArray5 = Array.isArray(_iterator5), _i7 = 0, _iterator5 = _isArray5 ? _iterator5 : _iterator5[Symbol.iterator]();;) {
                                    var _ref9;

                                    if (_isArray5) {
                                        if (_i7 >= _iterator5.length) break;
                                        _ref9 = _iterator5[_i7++];
                                    } else {
                                        _i7 = _iterator5.next();
                                        if (_i7.done) break;
                                        _ref9 = _i7.value;
                                    }

                                    var callback = _ref9;

                                    callback(size);
                                }
                            }
                        });
                        /* Hack to make the layoutcontroller reevaluate sizes on resize of the parent */
                        this._nodes = { _trueSizedRequested: false };
                        /* This needs to be set in order for the LayoutNodeManager to be happy */
                        this.options.size = this.options.size || [true, true];
                    }
                }, {
                    key: '_initOptions',
                    value: function _initOptions(options) {
                        if (!Utils.isPlainObject(options)) {
                            Utils.warn('View ' + this._name() + ' initialized with invalid non-object arguments');
                        }
                        /**
                         * A copy of the options that were passed in the constructor
                         *
                         * @type {Object}
                         */
                        this.options = options;
                    }
                }, {
                    key: '_initDataStructures',
                    value: function _initDataStructures() {
                        if (!this.renderables) {
                            /**
                             * The renderables "outputted" by the view that are passed to the underlying famous-flex layer
                             *
                             * @type {Object}
                             */
                            this.renderables = {};
                        }
                        if (!this.layouts) {
                            /**
                             * @deprecated
                             *`
                             * The old way of setting the spec of the renderables created by adding renderables through
                             * `this.renderables.myRenderable = ....
                             *
                             * @type {Array|Function}
                             */
                            this.layouts = [];
                        }

                        if (!this.decorations) {
                            this.decorations = {};
                        }

                        this._runningRepeatingFlowStates = {};
                        this._onNewSizeCallbacks = [];
                    }

                    /**
                     * Binds the method to this view. Used by the util DecoratedRenderables
                     * @param {Function} method The method that is about to be bound
                     * @returns {*}
                     * @private
                     */

                }, {
                    key: '_bindToSelf',
                    value: function _bindToSelf(method) {
                        return method.bind(this);
                    }

                    /**
                     * Pipes a renderable to this view. Used by the util DecoratedRenderables
                     * @param {Function} method The method that is about to be bound
                     * @param {Boolean} enable set to false to unpipe
                     * @returns {Boolean} true if piping was successful, otherwise false
                     * @private
                     */

                }, {
                    key: '_setPipeToSelf',
                    value: function _setPipeToSelf(renderable) {
                        var enable = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

                        var methodName = enable ? 'pipe' : 'unpipe';
                        /* Auto pipe events from the renderable to the view */
                        if (renderable && renderable[methodName]) {
                            /*
                             * We see it as a bit of a mystery why the piping needs to be done both to this and this._eventOutput,
                             * but they both seem to be necessary so I'm gonna leave it for now.
                             */
                            renderable[methodName](this);
                            renderable[methodName](this._eventOutput);
                            return true;
                        }
                        return false;
                    }
                }]);

                return View;
            }(FamousView);

            Router = function (_EventEmitter) {
                _inherits(Router, _EventEmitter);

                function Router() {
                    _classCallCheck(this, Router);

                    // make classes behave like context bound
                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Router).call(this));

                    ObjectHelper.bindAllMethods(_this, _this);

                    // make the router aware of controllers active in the application
                    // each controller will need to subscribe itself to this container.
                    _this.controllers = [];

                    // when a default controller is designated. The router will map every route without a
                    // controller reference to the HomeController.
                    _this.defaultController = 'Home';

                    // when a default method is designated. the router map will every route without a
                    // method reference to the HomeController's method.
                    _this.defaultMethod = 'Index';
                    return _this;
                }

                /**
                 * On a route change, calls the corresponding controller method with the given parameter values.
                 * @returns {Boolean} Whether the current route was successfully ran.
                 */

                _createClass(Router, [{
                    key: 'run',
                    value: function run() {}

                    /**
                     * Sets the initial controller and method to be activated whenever the controllers are activated.
                     * @param {Controller|Function|String} controller Default controller instance, controller constructor, or controller name to go to.
                     * @param {String} method Default method to call in given controller.
                     * @returns {void}
                     */

                }, {
                    key: 'setDefault',
                    value: function setDefault(controller, method) {}

                    /**
                     * Registers a single controller.
                     * @param {String} route Route to trigger handler on.
                     * @param {Function} handler Method to call on given route.
                     * @returns {void}
                     */

                }, {
                    key: 'add',
                    value: function add(route, handler) {}

                    /**
                     * Triggers navigation to one of the controllers
                     * @param {Controller|Function|String} controller The controller instance, controller constructor, or controller name to go to.
                     * @param {String} method The method to call in given controller.
                     * @param {Object} [params] Dictonary of key-value pairs containing named arguments (i.e. {id: 1, test: "yes"})
                     * @returns {void}
                     */

                }, {
                    key: 'go',
                    value: function go(controller, method, params) {}

                    /**
                     * Executes the controller handler associated with a given route, passing the route as a parameter.
                     * @param {Object} rule Rule handler to execute.
                     * @param {Object} route Route object to pass as parameter.
                     * @returns {void}
                     * @private
                     */

                }, {
                    key: '_executeRoute',
                    value: function _executeRoute(rule, route) {}
                }]);

                return Router;
            }(EventEmitter);

            layout$2 = {

                /**
                 * Merely marks a view property as a decorated renderable, which allows it to be rendered.
                 * Use this in combination with a @layout.custom decorator on the view in which this renderable resides.
                 *
                 * @example
                 * @layout.renderable
                 * renderable = new Surface();
                 *
                 * @returns {Function} A decorator function
                 */
                renderable: function renderable() {
                    return function (view, renderableName, descriptor) {
                        prepDecoratedRenderable$1(view, renderableName, descriptor);
                    };
                },

                /**
                 * Marks the renderable to cover the entire screen. Translate can also be specified on such a renderable.
                 *
                 * @example
                 * @layout.fullSize()
                 * // View will have a red background
                 * background = new Surface({properties: {backgroundColor: 'red'}});
                 *
                 * @returns {Function} A decorator function
                 */
                fullSize: function fullSize() {
                    return function (view, renderableName, descriptor) {
                        var renderable = prepDecoratedRenderable$1(view, renderableName, descriptor);
                        renderable.decorations.fullSize = true;
                    };
                },

                /**
                 * Specifies the space that should come before the docked renderable. Useful when not specifying the size in the
                 * layout.dock function. Note that the space does not appear if there isn't any renderable with a size greater than
                 * zero before it. Can also be specified for the view
                 *
                 * @example
                 * // there's a 20px space before this box
                 * @layout.dockSpace(20)
                 * @layout.size(100, 100)
                 * @layout.dock.left()
                 * box = new Surface({properties: {backgroundColor: 'red'}});
                 *
                 * @param {Number} space The space that is inserted before the renderable.
                 * @returns {Function} A decorator function
                 */
                dockSpace: function dockSpace(space) {
                    return function (target, renderableName, descriptor) {
                        if (typeof target == 'function') {
                            prepPrototypeDecorations$1(target.prototype).dockSpacing = space;
                        } else {
                            var renderable = prepDecoratedRenderable$1(target, renderableName, descriptor);
                            // Todo refactor also the z index to the dock
                            renderable.decorations.dock = renderable.decorations.dock ? extend(renderable.decorations.dock, { space: space }) : { space: space };
                        }
                    };
                },

                /**
                 * Internal function to do docking
                 *
                 * @param dockMethod
                 * @param size
                 * @param space
                 * @param zIndex
                 * @returns {Function}
                 */
                _dockTo: function _dockTo(dockMethod, size, space, zIndex) {
                    return function (view, renderableName, descriptor) {
                        var renderable = prepDecoratedRenderable$1(view, renderableName, descriptor);

                        if (renderable.decorations.dock) {
                            space = space || renderable.decorations.dock.space;
                        }

                        var width = dockMethod === 'left' || dockMethod === 'right' ? size : undefined;
                        var height = dockMethod === 'top' || dockMethod === 'bottom' ? size : undefined;

                        var twoDimensionalSize = [width, height];
                        // Todo refactor also the z index to the dock, probably
                        renderable.decorations.dock = { space: space, dockMethod: dockMethod, size: twoDimensionalSize };

                        if (!renderable.decorations.translate) {
                            renderable.decorations.translate = [0, 0, 0];
                        }
                        if (zIndex) {
                            renderable.decorations.translate[2] = zIndex;
                        }
                    };
                },

                dock: {
                    /**
                     * Docks the renderable to the left.
                     * When using both a docked size and the layout.size decorator, then that layout.size becomes the actual inner size.
                     * The renderable can then be stickd within the docking area with origin and align. When combined with align, treats
                     * the context size the docking size.
                     * When using layout.size without specifying a docked size, it will use that size as docking size. Useful for
                     * automatic sizing when parent defines true size and orthogonal size (e.g. height for dock 'left') has to be defined.
                     *
                     * @example
                     * @layout.dock.left(30, 0, 10)
                     * @layout.size(15, undefined)
                     * @layout.origin(0.5, 0)
                     * @layout.align(0.5, 0)
                     * dockedRenderable = new Surface({properties: {backgroundColor: 'red'}});
                     *
                     *
                     * @param {Number|Function} [size]. The size of the renderable in the one dimension that is being docked, e.g.
                     * dock left or right will be width, whereas dock top or bottom will result in height. For more information about
                     * different variations, see layout.size.
                     * @param {Number} [space]. Any space that should be inserted before the docked renderable
                     * @param {Number} [zIndex]. DEPRECATED: Use translate(0, 0, zIndex) instead.
                     * @returns {Function} A decorator function
                     */
                    left: function left() {
                        return layout$2._dockTo.apply(layout$2, ['left'].concat(Array.prototype.slice.call(arguments)));
                    },

                    /**
                     * Docks the renderable to the right.
                     * When using both a docked size and the layout.size decorator, then that layout.size becomes the actual inner size.
                     * The renderable can then be stickd within the docking area with origin and align. When combined with align, treats
                     * the context size the docking size.
                     * When using layout.size without specifying a docked size, it will use that size as docking size. Useful for
                     * automatic sizing when parent defines true size and orthogonal size (e.g. height for dock 'left') has to be defined.
                     *
                     * @example
                     * @layout.dock.right(30, 0, 10)
                     * @layout.size(15, undefined)
                     * @layout.origin(0.5, 0)
                     * @layout.align(0.5, 0)
                     * dockedRenderable = new Surface({properties: {backgroundColor: 'red'}});
                     *
                     * @param {Number|Function} [size]. The size of the renderable in the one dimension that is being docked, e.g.
                     * dock left or right will be width, whereas dock top or bottom will result in height. For more information about
                     * different variations, see layout.size.
                     * @param {Number} [space]. Any space that should be inserted before the docked renderable
                     * @param {Number} [zIndex]. DEPRECATED: Use translate(0, 0, zIndex) instead.
                     * @returns {Function} A decorator function
                     */
                    right: function right() {
                        return layout$2._dockTo.apply(layout$2, ['right'].concat(Array.prototype.slice.call(arguments)));
                    },

                    /**
                     *
                     * Docks the renderable to the top.
                     * When using both a docked size and the layout.size decorator, then that layout.size becomes the actual inner size.
                     * The renderable can then be stickd within the docking area with origin and align. When combined with align, treats
                     * the context size the docking size.
                     * When using layout.size without specifying a docked size, it will use that size as docking size. Useful for
                     * automatic sizing when parent defines true size and orthogonal size (e.g. height for dock 'left') has to be defined.
                     *
                     * @example
                     * @layout.dock.top(30, 0, 10)
                     * @layout.size(15, undefined)
                     * @layout.origin(0.5, 0)
                     * @layout.align(0.5, 0)
                     * dockedRenderable = new Surface({properties: {backgroundColor: 'red'}});
                     *
                     *
                     * @param {Number|Function} [size]. The size of the renderable in the one dimension that is being docked, e.g.
                     * dock left or right will be width, whereas dock top or bottom will result in height. For more information about
                     * different variations, see layout.size.
                     * @param {Number} [space = 0]. Any space that should be inserted before the docked renderable
                     * @param {Number} [zIndex = 0]. DEPRECATED: Use translate(0, 0, zIndex) instead.
                     * @returns {Function} A decorator function
                     */
                    top: function top() {
                        return layout$2._dockTo.apply(layout$2, ['top'].concat(Array.prototype.slice.call(arguments)));
                    },

                    /**
                     *
                     * Docks the renderable to the bottom.
                     * When using both a docked size and the layout.size decorator, then that layout.size becomes the actual inner size.
                     * The renderable can then be stickd within the docking area with origin and align. When combined with align, treats
                     * the context size the docking size.
                     * When using layout.size without specifying a docked size, it will use that size as docking size. Useful for
                     * automatic sizing when parent defines true size and orthogonal size (e.g. height for dock 'left') has to be defined.
                     *
                     * @example
                     * @layout.dock.bottom(30, 0, 10)
                     * @layout.size(15, undefined)
                     * @layout.origin(0.5, 0)
                     * @layout.align(0.5, 0)
                     * dockedRenderable = new Surface({properties: {backgroundColor: 'red'}});
                     *
                     *
                     * @param {Number|Function} [size]. The size of the renderable in the one dimension that is being docked, e.g.
                     * dock left or right will be width, whereas dock top or bottom will result in height. For more information about
                     * different variations, see layout.size.
                     * @param {Number} [space = 0]. Any space that should be inserted before the docked renderable
                     * @param {Number} [zIndex = 0]. DEPRECATED: Use translate(0, 0, zIndex) instead.
                     * @returns {Function} A decorator function
                     */
                    bottom: function bottom() {
                        return layout$2._dockTo.apply(layout$2, ['bottom'].concat(Array.prototype.slice.call(arguments)));
                    },

                    /**
                     * Fills the space that is left after the docking with this renderable. When using layout.size, it will use that
                     * size as an inner size. This works similarly to other docking, from where translate, size, origin, align, etc
                     * can be specified.
                     *
                     * @example
                     * @layout.dock.fill()
                     * filledRenderable = new Surface({properties: {backgroundColor: 'red'}});
                     *
                     * @returns {Function} A decorator function
                     */
                    fill: function fill() {
                        return layout$2._dockTo.apply(layout$2, ['fill'].concat(Array.prototype.slice.call(arguments)));
                    },
                    /**
                     * Marks the renderable as not being docked anymore. Useful when dynamically changing decorations through
                     * this.decorateRenderable or this.setRenderableFlowState
                     *
                     * @example
                     * @layout.dock.fill()
                     * @flow.stateStep('nonFilled', layout.dock.none(), layout.size(100, 100))
                     * filledRenderable = new Surface({properties: {backgroundColor: 'red'}});
                     *
                     * @returns {Function} A decorator function
                     */
                    none: function none() {
                        return function (view, renderableName, descriptor) {
                            var renderable = prepDecoratedRenderable$1(view, renderableName, descriptor);
                            renderable.decorations.disableDock = true;
                        };
                    }

                },

                /**
                 * Makes the renderable allowed to be dragged around. this.renderables[name] refers to a RenderNode containing this
                 * draggable along with the renderable itself.
                 *
                 * @example
                 * @layout.draggable({xRange: [0, 100}, yRange: [0, 200]})
                 * @layout.size(100, 100)
                 * // Makes a draggable square that is red
                 * draggableRenderable = new Surface({properties: {backgroundColor: 'red'});
                 *
                 * @param {Object} [draggableOptions]. Same options that can be passed to a Famous Draggable.
                 * @param {Number} [options.snapX] grid width for snapping during drag
                 * @param {Number} [options.snapY] grid height for snapping during drag
                 * @param {Array.Number} [options.xRange] maxmimum [negative, positive] x displacement from start of drag
                 * @param {Array.Number} [options.yRange] maxmimum [negative, positive] y displacement from start of drag
                 * @param {Number} [options.scale] one pixel of input motion translates to this many pixels of output drag motion
                 * @param {Number} [options.projection] User should set to Draggable._direction.x or
                 *    Draggable._direction.y to constrain to one axis.
                 * @returns {Function}
                 */
                draggable: function draggable() {
                    var draggableOptions = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                    return function (view, renderableName, descriptor) {
                        var renderable = prepDecoratedRenderable$1(view, renderableName, descriptor);
                        renderable.decorations.draggableOptions = draggableOptions;
                    };
                },

                /**
                 * Makes the renderable swipable with physics-like velocity after the dragging is released. Emits event
                 * 'thresholdReached' with arguments ('x'|'y', 0|1) when any thresholds have been reached. this.renderables[name]
                 * now refers to a a RenderNode containing a positionModifier along with the renderable itself.
                 *
                 * @example
                 * @layout.size(100, 100)
                 * @layout.swipable({xRange: [0, 100], snapX: true})
                 * //Make a red box that can slide to the right
                 * swipable = new Surface({properties: {backgroundColor: 'red'});
                 *
                 * @param {Object} options
                 * @param {Boolean} [options.snapX] Whether to snap to the x axis
                 * @param {Boolean} [options.snapY] Whether to snap to the Y axis
                 * @param {Boolean} [options.enabled] Whether the swipable should be initially enabled
                 * @param {Array.Number} [options.xThreshold] Two values of the thresholds that trigger the thresholdReached event with
                 * argument 'x' and second argument 0 or 1, depending on the direction.
                 * Specify undefined in one of them to disable threshold to that direction.
                 * @param {Array.Number} [options.yThreshold] Two values of the thresholds that trigger the thresholdReached event with
                 * argument 'y'  and second argument 0 or 1, depending on the direction.
                 * Specify undefined in one of them to disable threshold to that direction.
                 * @returns {Function} A decorator function
                 */
                swipable: function swipable(options) {
                    return function (view, renderableName, descriptor) {
                        var renderable = prepDecoratedRenderable$1(view, renderableName, descriptor);
                        renderable.decorations.swipableOptions = options;
                    };
                },

                /**
                 * Clips the renderable by creating another DOM-element with overflow: hidden. Internally, creates a Famous
                 * ContainerSurface.
                 * The two size parameters can either be a number or undefined (equals the context size).
                 *
                 * @example
                 * @layout.size(40,40)
                 * @layout.clip(20, 20)
                 * // Shows a quarter of a circle
                 * renderable = new Surface({properties: {backgroundColor: 'red', borderRadius: '50%'});
                 *
                 * @param {Number} width The width of the ContainerSurface
                 * @param {Number} heigh The height of the ContainerSurface
                 * @param {Object} [properties]. Properties that will be passed to the newly created parent DOM-element.
                 * If specified, merged with {overflow: 'hidden'}
                 * @returns {Function} A decorator function
                 */

                /**
                 * Specifies the size of the renderable. For both of the parameters, sizes can be interpreted as follows:
                 *
                 * If specified as a function, then the argument passed is the context size of the specified dimension
                 * (width or height). Note that if an arrow function is used, this scoping cannot be used when inside a
                 * decorator, since the scope will be the global scope.
                 *
                 * If true is specified or a tilde with a size (e.g. ~300), then the renderable will be automatically sized.
                 * If a tilde is used to indicate the size, then the size after the tilde will be used when/if the
                 * renderable doesn't have a size, or turn into the actual size if it can be determined. This is useful when wanting
                 * to reduce the flickering of surfaces who's size cannot be determined the first render tick.
                 * Beware that true sizing of surfaces or other raw dom elements (input surfaces, image surfaces, text boxes etc)
                 * often comes with a perfomance penalty and should only be used when necessary.
                 * Also beware that any negative size will be interpreted as a tilde, since ~x = 1 - x
                 *
                 * If undefined is specified, then the size of that dimension will equal the entire context size.
                 *
                 * If a size between 0 and 1 is specified, then that will be interpreted as a proportion of the context size. For
                 * example if 0.5 is specified, then the size will be half of the context size (the parent's size). Instead of
                 * specifying 1 to cover the entire context size, use undefined instead.
                 * @example
                 * @layout.size(function(contextWidth) {return Math.max(contextWidth, this.options.maxWidth)}, ~300)
                 * // Creates a renderable where the width is equal to the text width and the height is whatever is bigger,
                 * // options.maxWidth, or the context size
                 * text = new Surface({content: 'This is some text', properties: {backgroundColor: 'red'}});
                 *
                 * @param {Number|Function} x
                 * @param {Number|Function} y
                 * @returns {Function} A decorator function
                 */
                size: function size(x, y) {
                    return function (view, renderableName, descriptor) {
                        if (Array.isArray(x)) {
                            throw Error('Please specify size as two arguments, and not as an array');
                        }
                        var renderable = prepDecoratedRenderable$1(view, renderableName, descriptor);
                        renderable.decorations.size = [x, y];
                    };
                },
                clip: function clip(width, height) {
                    var properties = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

                    return function (view, renderableName, descriptor) {
                        var renderable = prepDecoratedRenderable$1(view, renderableName, descriptor);
                        renderable.decorations.clip = { size: [width, height], properties: properties };
                    };
                },

                /**
                 * Rotates the renderable around any of the three axes (in radians).
                 *
                 * @example
                 * @layout.size(100,100)
                 * @layout.rotate(0, 0, Math.PI)
                 * // Writes text upside down
                 * renderable = new Surface({content: 'upside down text'});
                 *
                 * @param {Number} x The rotation around the x axis (flips vertically)
                 * @param {Number} y The rotation around the y axis (flips horizontally)
                 * @param {Number} z The rotation around the z axis (rotatesin in the more intuitive sense)
                 * @returns {Function} A decorator function
                 */
                rotate: function rotate(x, y, z) {
                    return function (view, renderableName, descriptor) {
                        var renderable = prepDecoratedRenderable$1(view, renderableName, descriptor);
                        renderable.decorations.rotate = [x, y, z];
                    };
                },

                /**
                 * Rotates the renderable around any of the three axes (in radians) relatively to the current rotation
                 *
                 * @example
                 * @layout.size(100,100)
                 * @layout.rotate(0, 0, Math.PI)
                 * // Writes text upside down
                 * renderable = new Surface({content: 'upside down text'});
                 *
                 * @param {Number} x The rotation around the x axis (flips vertically)
                 * @param {Number} y The rotation around the y axis (flips horizontally)
                 * @param {Number} z The rotation around the z axis (rotatesin in the more intuitive sense)
                 * @returns {Function} A decorator function
                 */
                rotateFrom: function rotateFrom(x, y, z) {
                    return function (view, renderableName, descriptor) {
                        var renderable = prepDecoratedRenderable$1(view, renderableName, descriptor);
                        var propertyName = 'rotate';
                        var properties = renderable.decorations[propertyName] || [0, 0, 0];
                        renderable.decorations[propertyName] = [properties[0] + x, properties[1] + y, properties[2] + z];
                    };
                },

                /**
                 * Sets the opacity of a renderable.
                 *
                 * @example
                 * @layout.opacity(0.5)
                 * @layout.size(100, 10)
                 * @layout.place.center()
                 * // Writes text that is half invisible
                 * renderable = new Surface({content: 'Half invisible'});
                 *
                 * @param {Number} opacity The opacity, between 0 and 1
                 * @returns {Function} A decorator function
                 */
                opacity: function opacity(_opacity) {
                    return function (view, renderableName, descriptor) {
                        var renderable = prepDecoratedRenderable$1(view, renderableName, descriptor);
                        renderable.decorations.opacity = _opacity;
                    };
                },

                _stickTo: function _stickTo(stick) {
                    return function (view, renderableName, descriptor) {
                        var origin = [0, 0],
                            align = [0, 0];
                        switch (stick) {
                            case 'center':
                                origin = align = [0.5, 0.5];
                                break;
                            case 'bottomRight':
                                origin = align = [1, 1];
                                break;
                            case 'bottomLeft':
                                origin = align = [0, 1];
                                break;
                            case 'topRight':
                                origin = align = [1, 0];
                                break;
                            case 'left':
                                origin = align = [0, 0.5];
                                break;
                            case 'right':
                                origin = align = [1, 0.5];
                                break;
                            case 'top':
                                origin = align = [0.5, 0];
                                break;
                            case 'bottom':
                                origin = align = [0.5, 1];
                                break;
                            default:
                            case 'topLeft':
                                origin = align = [0, 0];
                                break;

                        }

                        var renderable = prepDecoratedRenderable$1(view, renderableName, descriptor);
                        renderable.decorations.origin = origin;
                        renderable.decorations.align = align;
                    };
                },
                /**
                 * Places the renderable by settings origin/align. If nothing is set, it will default to topleft.
                 *
                 * @example
                 * @layout.size(100,~300)
                 * @layout.stick.center()
                 * renderable = new Surface({content: 'centered text'});
                 *
                 * @param {String} stick. Can be either of 'center', 'left', 'right', 'bottom', 'top', 'bottomleft', 'bottomright',
                 * 'topright', 'topleft'
                 * @returns {Function} A decorator function
                 */
                stick: {
                    center: function center() {
                        return layout$2._stickTo('center');
                    },
                    left: function left() {
                        return layout$2._stickTo('left');
                    },
                    right: function right() {
                        return layout$2._stickTo('right');
                    },
                    top: function top() {
                        return layout$2._stickTo('top');
                    },
                    bottom: function bottom() {
                        return layout$2._stickTo('bottom');
                    },
                    bottomLeft: function bottomLeft() {
                        return layout$2._stickTo('bottomLeft');
                    },
                    bottomRight: function bottomRight() {
                        return layout$2._stickTo('bottomRight');
                    },
                    topLeft: function topLeft() {
                        return layout$2._stickTo('topLeft');
                    },
                    topRight: function topRight() {
                        return layout$2._stickTo('topRight');
                    }
                },

                /**
                 * Sets the point where the renderable has its anchor from where rotation and translation will be done.
                 * You could consider it as translating the negative of the proportion times its size. The arguments are always
                 * between and including 0 and 1.
                 *
                 * @example
                 * @layout.origin(0.5, 0)
                 * @layout.align(0.5, 0.5)
                 * @layout.size(100,100)
                 * //Displays a red box horizontically centered and displays just below the vertical mid point
                 * renderable = new Surface({properties: {backgroundColor: 'red'}});
                 *
                 *
                 * @param {Number} x. The x of the origin.
                 * @param {Number} y. The y of the origin.
                 * @returns {Function} A decorator function.
                 */
                origin: function origin(x, y) {
                    return function (view, renderableName, descriptor) {
                        var renderable = prepDecoratedRenderable$1(view, renderableName, descriptor);
                        renderable.decorations.origin = [x, y];
                    };
                },

                /**
                 * Translates the renderable by a proportion of the context size.
                 *
                 * @example
                 * @layout.align(0.5, 0.5)
                 * @layout.size(100,100)
                 * //Displays a red box just below the vertical mid point and past the horizontal mid point
                 * renderable = new Surface({properties: {backgroundColor: 'red'}});
                 *
                 * @param {Number} x. The proportion of the context width that is going to be translated.
                 * @param {Number} y. The proportion of the context height that is going to be translated.
                 * @returns {Function} A decorator function.
                 */
                align: function align(x, y) {
                    return function (view, renderableName, descriptor) {
                        var renderable = prepDecoratedRenderable$1(view, renderableName, descriptor);
                        renderable.decorations.align = [x, y];
                    };
                },

                /**
                 * Specifies a translation of a renderable. Can be applied to every kind of renderable (docked, fullSize,
                 * and normal). Can also be applied on view level to translate every renderable of that view. The view wide translation defaults
                 * to [0, 0, 10] in order to always increase the z space of every level of the Famous rendering tree.
                 *
                 * @example
                 * @layout.translate(0, 0, 20)
                 * class myView extends View{
                 *  @layout.translate(0, 0, -20)
                 *  @layout.fullSize()
                 *  // Will display relatively at z level 0 (20 minus 20)
                 *  myBackground = new Surface({properties: {backgroudColor: 'red'}});
                 * }
                 *
                 * @param {Number} x Moves the renderable along the x axis.
                 * @param {Number} y Moves the renderable along the y axis.
                 * @param {Number} z Moves the renderable along the z axis.
                 * @returns {Function} A decorator function.
                 */
                translate: function translate(x, y, z) {
                    return function (target, renderableName, descriptor) {
                        if (Array.isArray(x)) {
                            throw Error('Please specify translate as three arguments, and not as an array');
                        }
                        var propertyName = void 0,
                            decorations = void 0;
                        if (typeof target == 'function') {
                            decorations = prepPrototypeDecorations$1(target.prototype);
                            propertyName = 'extraTranslate';
                        } else {
                            decorations = prepDecoratedRenderable$1.apply(undefined, arguments).decorations;
                            propertyName = 'translate';
                        }
                        decorations[propertyName] = [x, y, z];
                    };
                },

                /**
                 * Specifies a relative translation of a renderable. Can be applied to every kind of renderable (docked, fullSize,
                 * and normal).
                 * Can also be applied on view level to translate every renderable of that view. The view wide translation defaults
                 * to [0, 0, 10] in order to always increase the z space of every level of the Famous rendering tree.
                 *
                 * @example
                 * @layout.translateFrom(0, 0, 20)
                 * class myView extends View{
                 *  @layout.translateFrom(0, 0, -20)
                 *  @layout.fullSize()
                 *  // Will display relatively at z level 0 (20 minus 20)
                 *  myBackground = new Surface({properties: {backgroudColor: 'red'}});
                 * }
                 *
                 * @param {Number} x Moves the renderable along the x axis.
                 * @param {Number} y Moves the renderable along the y axis.
                 * @param {Number} z Moves the renderable along the z axis.
                 * @returns {Function} A decorator function.
                 */
                translateFrom: function translateFrom(x, y, z) {
                    return function (target, renderableName, descriptor) {
                        if (Array.isArray(x)) {
                            throw Error('Please specify translate as three arguments, and not as an array');
                        }
                        var propertyName = void 0,
                            decorations = void 0;
                        if (typeof target == 'function') {
                            decorations = prepPrototypeDecorations$1(target.prototype);
                            propertyName = 'extraTranslate';
                        } else {
                            decorations = prepDecoratedRenderable$1.apply(undefined, arguments).decorations;
                            propertyName = 'translate';
                        }
                        var properties = decorations[propertyName] || [0, 0, 0];
                        decorations[propertyName] = [properties[0] + x, properties[1] + y, properties[2] + z];
                    };
                },

                /**
                 * Specifies the scale of a renderable. Can be applied to every kind of renderable.
                 *
                 * @example
                 *  class myView extends View{
                 *  @layout.scale(2, 2, 2)
                 *  @layout.fullscreen
                 *  // Will scale the renderable by 2 in the x,y,z dimension
                 *  myBackground = new Surface({properties: {backgroudColor: 'red'}});
                 * }
                 *
                 * @param {Number} x Scales the renderable along the x axis.
                 * @param {Number} y Scales the renderable along the y axis.
                 * @param {Number} z Scales the renderable along the z axis.
                 * @returns {Function} A decorator function.
                 */
                scale: function scale(x) {
                    var y = arguments.length <= 1 || arguments[1] === undefined ? Utils.warn('Please specify y parameter for scaling') : arguments[1];
                    var z = arguments.length <= 2 || arguments[2] === undefined ? Utils.warn('Please specify z parameter for scaling') : arguments[2];

                    return function (target, renderableName, descriptor) {
                        var decorations = prepDecoratedRenderable$1.apply(undefined, arguments).decorations;
                        var propertyName = 'scale';
                        decorations[propertyName] = [x, y, z];
                    };
                },

                /**
                 * Specifies the skew of a renderable. Can be applied to every kind of renderable.
                 *
                 * @example
                 *  class myView extends View{
                 *  @layout.skew(2, 2, 2)
                 *  @layout.fullscreen
                 *  // Will skew the renderable by 2 in the x,y,z dimension
                 *  myBackground = new Surface({properties: {backgroudColor: 'red'}});
                 * }
                 *
                 * @param {Number} x Skews the renderable along the x axis.
                 * @param {Number} y Skews the renderable along the y axis.
                 * @param {Number} z Skews the renderable along the z axis.
                 * @returns {Function} A decorator function.
                 */
                skew: function skew(x, y, z) {
                    return function (target, renderableName, descriptor) {
                        var decorations = prepDecoratedRenderable$1.apply(undefined, arguments).decorations;
                        var propertyName = 'skew';
                        decorations[propertyName] = [x, y, z];
                    };
                },

                /**
                 *
                 * Creates an animation controller to show/hide the renderable. Renderables can be shown by calling
                 * this.showRenderable(renderableName) and hidden using this.hideRenderable(renderableName) or
                 * this.showRenderable(renderableName, false). When a renderable has been shown, it will emit the event 'shown'.
                 *
                 * @example
                 * @layout.stick.center()
                 * @layout.size(100,100)
                 * @layout.animate({transition: {duration: 350}})
                 * renderable = new Surface({properties: {backgroundColor: 'red'}});
                 *
                 *
                 *
                 * @param {Object} [options] The same as famous-flex Animation Controller, plus 2 more:
                 * @param {Boolean} [options.showInitially] Whether to show the renderable when the view is created. (Default: true).
                 * @param {String} [options.waitFor] If specified, it will wait for the renderable with the specified name to show
                 * before showing the renderable
                 * @param {Object} [options.transition] Transition options.
                 * @param {Function} [options.animation] Animation function (default: `AnimationController.Animation.FadedZoom`).
                 * @param {Number} [options.zIndexOffset] Optional z-index difference between the hiding & showing renderable (default: 0).
                 * @param {Number} [options.keepHiddenViewsInDOMCount] Keeps views in the DOM after they have been hidden (default: 0).
                 * @param {Object} [options.show] Show specific options.
                 * @param {Object} [options.show.transition] Show specific transition options.
                 * @param {Function} [options.show.animation] Show specific animation function.
                 * @param {Object} [options.hide] Hide specific options.
                 * @param {Object} [options.hide.transition] Hide specific transition options.
                 * @param {Function} [options.hide.animation] Hide specific animation function.
                 * @param {Object} [options.transfer] Transfer options.
                 * @param {Object} [options.transfer.transition] Transfer specific transition options.
                 * @param {Number} [options.transfer.zIndex] Z-index the tranferables are moved on top while animating (default: 10).
                 * @param {Bool} [options.transfer.fastResize] When enabled, scales the renderable i.s.o. resizing when doing the transfer animation (default: true).
                 * @param {Array} [options.transfer.items] Ids (key/value) pairs (source-id/target-id) of the renderables that should be transferred.
                 * @returns {Function}
                 */
                animate: function animate() {
                    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                    return function (view, renderableName, descriptor) {
                        var renderableConstructor = prepDecoratedRenderable$1(view, renderableName, descriptor);
                        options = merge({
                            showInitially: true,
                            animation: AnimationController.Animation.FadedZoom,
                            show: { transition: options.transition || { curve: Easing.outCubic, duration: 250 } },
                            hide: { transition: options.transition || { curve: Easing.inCubic, duration: 250 } }
                        }, options);

                        renderableConstructor.decorations.animation = options;

                        constructor.decorations = renderableConstructor.decorations;
                    };
                },

                /**
                 * Makes the view flow by tweening all intermediate stages of a changed attribute of any renderable.
                 *
                 * @example
                 * @layout.flow({spring: {dampingRatio: 0.8, period: 1000}})
                 * class myView extends View{
                 * ...
                 * }
                 *
                 * @param {Object} Options to pass as flowOptions to the LayoutController
                 * @param {Bool} [flowOptions.transition] If specified, sets the default transition to use
                 * @param {Bool} [flowOptions.reflowOnResize] Smoothly reflows renderables on resize (only used when flow = true) (default: `true`).
                 * @param {Object} [flowOptions.spring] Spring options used by nodes when reflowing (default: `{dampingRatio: 0.8, period: 300}`).
                 * @param {Object} [flowOptions.properties] Properties which should be enabled or disabled for flowing.
                 * @param {Spec} [flowOptions.insertSpec] Size, transform, opacity... to use when inserting new renderables into the scene (default: `{}`).
                 * @param {Spec} [flowOptions.removeSpec] Size, transform, opacity... to use when removing renderables from the scene (default: undefined).
                 * @returns {Function} A decorator function
                 */
                flow: function flow$1() {
                    var flowOptions = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                    return function (target) {
                        var decorations = prepPrototypeDecorations$1(target.prototype);
                        decorations.useFlow = true;
                        decorations.flowOptions = flowOptions || {};
                        decorations.transition = flowOptions.transition || undefined;
                    };
                },

                /**
                 * Makes the view as scrollable. This will put the entire content in a ReflowingScrollView that uses getSize on the
                 * view to determine scrolling size. If the size cannot be determined, you might consider declaring your own
                 * getSize() on the View.
                 *
                 * @example
                 * @layout.scrollable()
                 * class myView extends View{
                 * ...
                 * }
                 *
                 *
                 * @returns {Function} A decorator function
                 */

                scrollable: function scrollable() {
                    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                    return function (target) {
                        var decorations = prepPrototypeDecorations$1(target.prototype);
                        decorations.scrollableOptions = options;
                    };
                },

                /**
                 * Experimental feature of scrolling natively.
                 *
                 * @param {Object} [options] Options on how to scroll
                 * @param {Boolean} [options.scrollY] Defaults to true
                 * @param {Boolean} [options.scrollX] Defaults to false
                 * @returns {Function} A decorator function
                 */
                nativeScrollable: function nativeScrollable() {
                    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
                    var _options$scrollY = options.scrollY;
                    var scrollY = _options$scrollY === undefined ? true : _options$scrollY;
                    var _options$scrollX = options.scrollX;
                    var scrollX = _options$scrollX === undefined ? false : _options$scrollX;

                    return function (target) {
                        var decorations = prepPrototypeDecorations$1(target.prototype);
                        decorations.nativeScrollable = { scrollY: scrollY, scrollX: scrollX };
                    };
                },

                /**
                 * Sets the margins for the docked content. This can be applied both to a child and a class. When in conflict,
                 * the parent will override the child's setting. If the margin is set on a Surface, then CSS padding will be set.
                 * margins can be 1, 2, or 4, parameters, which can be specified as shorthand in the same way
                 * as CSS does it.
                 *
                 * @example
                 * @layout.dockPadding(15)
                 * //Creates a class with 15px margin on all sides for docked renderables
                 * class myView extends View{
                 *
                 *  //Will be displayed with margin
                 *  @layout.dock.top(20)
                 *  onTop = new Surface({content: "hello world"});
                 *
                 *  //Will be displayed without margin since we're using @layout.stick
                 *  @layout.stick.bottom
                 *  onButtom = new Surface({content: "hey hey"});
                 * }
                 *
                  *
                 * @param {Number} firstMargin
                 * @param {Number} [secondMargin]
                 * @param {Number} [thirdMargin]
                 * @param {Number} [fourthMargin]
                 * @returns {Function} A decorator function
                 */
                dockPadding: function dockPadding() {
                    for (var _len = arguments.length, margins = Array(_len), _key = 0; _key < _len; _key++) {
                        margins[_key] = arguments[_key];
                    }

                    return function (target) {
                        var decorations = void 0;
                        if (typeof target == 'function') {
                            decorations = prepPrototypeDecorations$1(target.prototype);
                        } else {
                            decorations = prepDecoratedRenderable$1.apply(undefined, arguments).decorations;
                        }
                        decorations.viewMargins = LayoutUtility.normalizeMargins(margins);
                    };
                },

                /**
                 * Like @layout.dockPadding, sets the padding between this view and its docked content.
                 * When the screen width plus this padding exceeds maxContentWidth, the padding
                 * is increased, so that the content is never wider than maxContentWidth.
                 *
                 * @example
                 * @layout.columnDockPadding(720, [16])
                 * //Creates a class with 16px margin on all sides for docked renderables
                 * class myView extends View{
                 *
                 *  //Will be displayed with margin to the top and sides, and will at max be 720px wide.
                 *  @layout.dock.top(20)
                 *  onTop = new Surface({content: "hello world"});
                 *
                 *  //Will be displayed without margin since we're using @layout.stick instead of @layout.dock
                 *  @layout.stick.bottom()
                 *  onButtom = new Surface({content: "hey hey"});
                 * }
                 *
                 * @param {Number} maxContentWidth Maximum width the content should be allowed to be.
                 * @param {Array.Number} defaultPadding A 1-D, 2-D, or 4-D array of padding numbers, just like the padding spec in CSS.
                 * @returns {Function}
                 */
                columnDockPadding: function columnDockPadding() {
                    var maxContentWidth = arguments.length <= 0 || arguments[0] === undefined ? 720 : arguments[0];
                    var defaultPadding = arguments.length <= 1 || arguments[1] === undefined ? [0, 16, 0, 16] : arguments[1];

                    return function (target) {
                        var decorations = prepPrototypeDecorations$1(target.prototype);
                        var normalisedPadding = LayoutUtility.normalizeMargins(defaultPadding);

                        /* Default to 16px dockPadding */
                        layout$2.dockPadding(normalisedPadding);

                        /* Calculate the dockPadding dynamically every time the View's size changes.
                         * The results from calling this method are further handled in View.js.
                         *
                         * The logic behind this is 16px padding by default, unless the screen is
                         * wider than 720px. In that case, the padding is increased to make the content
                         * in between be at maximum 720px. */
                        decorations.dynamicDockPadding = function (size) {
                            var sideWidth = size[0] > maxContentWidth + 32 ? (size[0] - maxContentWidth) / 2 : normalisedPadding[1];
                            return [normalisedPadding[0], sideWidth, normalisedPadding[2], sideWidth];
                        };
                    };
                },

                /**
                 *
                 * Adds a custom layout function to the view.
                 * This decorator works directly on the object so you shouldn't pass any arguments nor use parentheses.
                 *
                 * @example
                 * @layout.custom((context) => {
                 *  context.set('myRenderable', {
                 *  size: [100, 100]
                 * })
                 * class MyView extends View {
                 *  constructor(options) {
                 *      super(options);
                 *      this.renderables.myRenderable = new Surface({properties: {backgroundColor: 'red'}});
                 *  }
                 * }
                 *
                 *
                 * @param customLayoutFunction
                 * @returns {Function} A decorator function
                 */
                custom: function custom(customLayoutFunction) {
                    return function (target) {
                        var decorations = prepPrototypeDecorations$1(target.prototype);
                        decorations.customLayoutFunction = customLayoutFunction;
                    };
                }
            };
            flow$1 = {
                /**
                 * Sets the default flow options for a View. These options will be overridden by
                 * each of its renderables, if they have flow options defined through e.g. flow.stateStep()
                 *
                 * @example
                 * @flow.defaultOptions({ transition: { curve: Easing.outCubic, duration: 200 } })
                 * class MyView extends View {
                 * }
                 *
                 * @param {Object} flowOptions Options to set as default.
                 * @param {Object} [flowOptions.delay] The amount of milliseconds to wait in between state transitions.
                 * @param {Object} [flowOptions.transition] A Famo.us-compatible transition object defining the animation specifics.
                 * @param {Object} [flowOptions.transition.curve] The animation curve to use when flowing from one state to another, e.g. Easing.outCubic.
                 * @param {Object} [flowOptions.transition.duration] The amount of milliseconds a flow animation should take.
                 * @returns {Function}
                 */
                defaultOptions: function defaultOptions() {
                    var flowOptions = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                    return function (target, renderableName, descriptor) {
                        var decorations = prepDecoratedRenderable$1.apply(undefined, arguments).decorations;
                        if (!decorations.flow) {
                            decorations.flow = { states: {} };
                        }
                        decorations.flow.defaults = _extends({}, flowOptions);
                    };
                },

                /**
                 * Functions the same as @flow.stateStep(), and additionally also immediately applies the decorators passed into the 'transformations' argument.
                 * Used to define a state step, without having to also manually apply the same decorators to the renderable to ensure it is rendered this way
                 * on initial show.
                 *
                 * @example
                 * // Initial size is [100, 100], and rendered at center of parent.
                 * @flow.defaultState('active', {}, layout.size(100, 100), layout.stick.center())
                 * myRenderable = new Surface();
                 *
                 * @param {String} stateName The state name to assign to this state step.
                 * @param {Object} [stateOptions] Flow options to use in the state step.
                 * @param {Object} [stateOptions.delay] The amount of milliseconds to wait in between state transitions.
                 * @param {Object} [stateOptions.transition] A Famo.us-compatible transition object defining the animation specifics.
                 * @param {Object} [stateOptions.transition.curve] The animation curve to use when flowing from one state to another, e.g. Easing.outCubic.
                 * @param {Object} [stateOptions.transition.duration] The amount of milliseconds a flow animation should take.
                 * @param {Array.Function} transformations Decorators to assign to this state, and to apply initially, passed in as regular comma-separated arguments.
                 * @returns {Function}
                 */
                defaultState: function defaultState() {
                    for (var _len2 = arguments.length, transformations = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
                        transformations[_key2 - 2] = arguments[_key2];
                    }

                    var stateName = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
                    var stateOptions = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

                    return function (target, renderableName, descriptor) {
                        flow$1.stateStep.apply(flow$1, [stateName, stateOptions].concat(transformations))(target, renderableName, descriptor);
                        for (var _iterator = transformations, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
                            var _ref;

                            if (_isArray) {
                                if (_i >= _iterator.length) break;
                                _ref = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) break;
                                _ref = _i.value;
                            }

                            var transformation = _ref;

                            transformation(target, renderableName, descriptor);
                        }
                    };
                },

                /**
                 * Used to define a state that the renderable is able to flow to. When multiple state steps with the same state name
                 * are defined, flowing into that state will sequentially execute all defined steps with that state name.
                 *
                 * @example
                 * // Initial size is [0, 0], and rendered at top left of parent, because no @flow.defaultStep() was done,
                 * // and no other decorators are applied to the renderable.
                 * @flow.stateStep('active', {}, layout.size(100, 100), layout.stick.center())
                 * myRenderable = new Surface();
                 *
                 * @param {String} stateName The state name to assign to this state step.
                 * @param {Object} [stateOptions] Flow options to use in the state step.
                 * @param {Object} [stateOptions.delay] The amount of milliseconds to wait in between state transitions.
                 * @param {Object} [stateOptions.transition] A Famo.us-compatible transition object defining the animation specifics.
                 * @param {Object} [stateOptions.transition.curve] The animation curve to use when flowing from one state to another, e.g. Easing.outCubic.
                 * @param {Object} [stateOptions.transition.duration] The amount of milliseconds a flow animation should take.
                 * @param {Array.Function} transformations Decorators to assign to this state, and to apply initially, passed in as regular comma-separated arguments.
                 * @returns {Function}
                 */
                stateStep: function stateStep() {
                    for (var _len3 = arguments.length, transformations = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
                        transformations[_key3 - 2] = arguments[_key3];
                    }

                    var stateName = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
                    var stateOptions = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

                    return function (target, renderableName, descriptor) {
                        var decorations = prepDecoratedRenderable$1.apply(undefined, arguments).decorations;
                        if (!decorations.flow) {
                            decorations.flow = { states: {} };
                        }
                        if (!decorations.flow.states[stateName]) {
                            decorations.flow.states[stateName] = { steps: [] };
                        }
                        decorations.flow.states[stateName].steps.unshift({ transformations: transformations, options: stateOptions });
                    };
                },

                /**
                 * Defines the View-level states, that exist of concurrently and sequentially executed renderable-level states.
                 * When e.g. View.setViewFlowState('active') is called, the renderable states defined in the view-level state 'active' are executed.
                 *
                 * @example
                 * // Calling setViewFlowState('active') will first hide the loader, and when that is completed, show both buttons at the same time.
                 * @flow.viewStates({ 'active': [{loader: 'hidden'}, { button1: 'active', button2: 'active' }] })
                 * class MyView extends View {
                 *
                 *   @flow.defaultState('shown', {}, layout.opacity(1), layout.fullSize())
                 *   @flow.stateStep('hidden', {}, layout.opacity(0))
                 *   loader = new Surface();
                 *
                 *   @flow.defaultState('inactive', {}, layout.opacity(0), layout.size(100, 100), layout.stick.top())
                 *   @flow.stateStep('active', {}, layout.opacity(1))
                 *   button1 = new Surface();
                 *
                 *   @flow.defaultState('inactive', {}, layout.opacity(0), layout.size(100, 100), layout.stick.bottom())
                 *   @flow.stateStep('active', {}, layout.opacity(1))
                 *   button1 = new Surface();
                 * }
                 *
                 * @param {Object} states An object keyed by View-level state names, with values of arrays of objects.
                 * @returns {Function}
                 */
                viewStates: function viewStates() {
                    var states = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                    return function (target) {
                        var decorations = prepPrototypeDecorations$1(target.prototype);
                        if (!decorations.flow) {
                            decorations.flow = {};
                        }
                        decorations.flow.viewStates = states;
                    };
                },

                /**
                 * A wrapper around @flow.stateStep, to allow defining multiple steps with the same state name.
                 *
                 * @param {String} stateName State name to assign states to.
                 * @param {Array.Object} states An array of {stateOptions: [..], transformations: [..]} objects, with stateOptions and transformations
                 * being the same usage as @flow.stateStep().
                 * @returns {Function}
                 */
                multipleStateStep: function multipleStateStep() {
                    var stateName = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];
                    var states = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

                    return function (target, renderableName, descriptor) {
                        for (var _iterator2 = states, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
                            var _ref2;

                            if (_isArray2) {
                                if (_i2 >= _iterator2.length) break;
                                _ref2 = _iterator2[_i2++];
                            } else {
                                _i2 = _iterator2.next();
                                if (_i2.done) break;
                                _ref2 = _i2.value;
                            }

                            var _ref3 = _ref2;
                            var stateOptions = _ref3.stateOptions;
                            var transformations = _ref3.transformations;

                            flow$1.stateStep.apply(flow$1, [stateName, stateOptions].concat(transformations))(target, renderableName, descriptor);
                        }
                    };
                }
            };
            DialogWrapper = (_dec$3 = layout$2.scrollable({ overscroll: false, scrollSync: { preventDefault: false } }), _dec2$2 = layout$2.size(function () {
                for (var _len = arguments.length, size = Array(_len), _key = 0; _key < _len; _key++) {
                    size[_key] = arguments[_key];
                }

                return this.determineSizeWithMargins(size, this.options.dialog.maxSize, 0);
            }, function () {
                for (var _len2 = arguments.length, size = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                    size[_key2] = arguments[_key2];
                }

                return this.determineSizeWithMargins(size, this.options.dialog.maxSize, 1);
            }), _dec3$1 = layout$2.stick.center(), _dec$3(_class$5 = (_class2$1 = function (_View) {
                _inherits(DialogWrapper, _View);

                function DialogWrapper() {
                    var _Object$getPrototypeO;

                    var _temp, _this, _ret;

                    _classCallCheck(this, DialogWrapper);

                    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                        args[_key3] = arguments[_key3];
                    }

                    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_Object$getPrototypeO = Object.getPrototypeOf(DialogWrapper)).call.apply(_Object$getPrototypeO, [this].concat(args))), _this), _initDefineProp$1(_this, 'dialog', _descriptor$1, _this), _temp), _possibleConstructorReturn(_this, _ret);
                }

                _createClass(DialogWrapper, [{
                    key: 'determineSizeWithMargins',

                    /**
                     * Defines the size that is appropriate for the dialog. The dialog can return undefined on its getSize function for
                     * full-blown sizing instead of true sizing, and it can define a maxSize to specify a maximum that causes the margins
                     * to get larger.
                     * @param size
                     */
                    value: function determineSizeWithMargins(size, maxSize, dimension) {
                        return ~Math.min(maxSize ? maxSize[dimension] : 480, size[dimension] - 32);
                    }
                }, {
                    key: 'onNewParentSize',
                    value: function onNewParentSize(parentSize) {
                        this._parentSize = parentSize;
                    }

                    /**
                     * The getSize function is used to determine the size by the scrolling behaviour. It will try to make sure that
                     * a too big dialog can be scrolled. If this isn't possible, it let's the dialog capture the entire screen
                     * @returns {*}
                     */

                }, {
                    key: 'getSize',
                    value: function getSize() {
                        if (!this._parentSize) {
                            return [undefined, undefined];
                        }
                        var dialogHeight = this.dialog.getSize()[1];
                        var height = void 0;
                        if (dialogHeight !== undefined) {
                            height = Math.max(this._parentSize[1], dialogHeight);
                        } else {
                            /* undefined height, let's make it the entire height  */
                            height = this._parentSize[1];
                        }
                        return [undefined, height];
                    }
                }]);

                return DialogWrapper;
            }(View), _descriptor$1 = _applyDecoratedDescriptor$1(_class2$1.prototype, 'dialog', [_dec2$2, _dec3$1], {
                enumerable: true,
                initializer: function initializer() {
                    return this.options.dialog;
                }
            }), _class2$1)) || _class$5);
            DialogManager = (_dec$2 = layout$2.fullSize(), _dec2$1 = layout$2.animate({ showInitially: false, animation: AnimationController.Animation.Fade }), _dec3 = layout$2.translate(0, 0, 9000), _dec4 = layout$2.translate(0, 0, 9500), _dec5 = layout$2.fullSize(), _dec6 = layout$2.animate({
                show: { transition: { curve: Easing.outCubic, duration: 300 }, animation: AnimationController.Animation.Slide.Up },
                hide: { transition: { curve: Easing.inCubic, duration: 300 }, animation: AnimationController.Animation.Slide.Down },
                showInitially: false
            }), (_class$4 = function (_View) {
                _inherits(DialogManager, _View);

                /* Empty content until filled */
                function DialogManager() {
                    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

                    _classCallCheck(this, DialogManager);

                    /* For ionic-plugin-keyboard */
                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(DialogManager).call(this, options));

                    _initDefineProp(_this, 'background', _descriptor, _this);

                    _initDefineProp(_this, 'dialog', _descriptor2, _this);

                    _this.canCancel = true;
                    if (window.Keyboard) {
                        /* Prevent keyboard from showing */
                        window.addEventListener('native.keyboardshow', function () {
                            /* Hides the keyboard when a dialog is  shown */
                            if (_this.hasOpenDialog()) {
                                Keyboard.hide();
                            }
                        });
                    }
                    _this.router = Injection.get(Router);
                    var famousContext = Injection.get(Context);
                    famousContext.add(_this);

                    _this.layout.on('layoutstart', function (_ref) {
                        var size = _ref.size;

                        if (_this.dialog.onNewParentSize) {
                            _this.dialog.onNewParentSize(size);
                            _this._savedParentSize = null;
                        } else {
                            _this._savedParentSize = size;
                        }
                    });

                    document.addEventListener("backbutton", function () {
                        return _this.canCancel && _this.close();
                    });
                    _this.renderables.background.on('click', function () {
                        return _this.canCancel && _this.close();
                    });
                    return _this;
                }

                /**
                 *
                 * @param {Dialog} options.dialog dialog
                 * @param {Boolean} [options.canCancel=true]
                 * @param {Boolean} [options.killOldDialog=true]
                 * @returns {*}
                 */

                _createClass(DialogManager, [{
                    key: 'show',
                    value: function show(_ref2) {
                        var _this2 = this;

                        var dialog = _ref2.dialog;
                        var _ref2$canCancel = _ref2.canCancel;
                        var canCancel = _ref2$canCancel === undefined ? true : _ref2$canCancel;
                        var _ref2$killOldDialog = _ref2.killOldDialog;
                        var killOldDialog = _ref2$killOldDialog === undefined ? true : _ref2$killOldDialog;
                        var _ref2$shouldGoToRoute = _ref2.shouldGoToRoute;
                        var shouldGoToRoute = _ref2$shouldGoToRoute === undefined ? null : _ref2$shouldGoToRoute;

                        if (!dialog) {
                            throw new Error('No dialog specified in show() function of DialogManager');
                        }

                        this._shouldGoBackInHistory = shouldGoToRoute || this._shouldGoBackInHistory;
                        this.canCancel = canCancel;
                        if (dialog.canCancel) {
                            this.canCancel = dialog.canCancel;
                        }

                        /* If already open dialog we should either close that one, or just keep the current one, depending on the settings */
                        if (this.hasOpenDialog()) {
                            if (!killOldDialog) {
                                return this.dialogComplete();
                            }
                            this._close();
                        }

                        this._hasOpenDialog = true;

                        /* Replace whatever non-showing dialog we have right now with the new dialog */
                        this.replaceRenderable('dialog', new DialogWrapper({ dialog: dialog }));
                        if (this._savedParentSize) {
                            this.dialog.onNewParentSize(this._savedParentSize);
                        }

                        if (this.canCancel) {
                            /* Disable existing default behavior of backbutton going back to previous route */
                            this.initialBackButtonState = this.router.isBackButtonEnabled();
                            this.router.setBackButtonEnabled(false);
                        }

                        /* Show the dialog */
                        this.showRenderable('dialog').then(function () {
                            _this2._eventOutput.emit('dialogShown');
                        });

                        this.dialog.on('closeDialog', this.close);

                        /* Showing the background immediately propagates user's click event that triggered the show() directly to the background,
                         * closing the dialog again. Delaying showing the background circumvents this issue. */
                        Timer.setTimeout(function () {
                            if (_this2.hasOpenDialog()) {
                                _this2.showRenderable('background');
                            }
                        }, 10);
                        return this.dialogComplete();
                    }

                    /**
                     * Handles the logic for closing the dialog and possible going back in History
                     * @param {Boolean} [goBackInHistory] Set to false to prevent router.goBackInHistory() from being called after close.
                     */

                }, {
                    key: 'close',
                    value: function close() {
                        var goBackInHistory = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

                        if (this.hasOpenDialog()) {

                            /* Restore back button state */
                            if (this.canCancel) {
                                this.router.setBackButtonEnabled(this.initialBackButtonState);
                            }
                            /* Resolve promise if necessary */
                            if (this._resolveDialogComplete) {
                                this._resolveDialogComplete(arguments);
                                this._resolveDialogComplete = null;
                            }

                            /* Close the current dialog */
                            if (goBackInHistory || this._shouldGoBackInHistory) {
                                this._goBackInHistory();
                            } else {
                                this._close();
                            }
                        }
                    }
                }, {
                    key: 'getOpenDialog',
                    value: function getOpenDialog() {
                        return this.hasOpenDialog() && this.dialog.dialog;
                    }
                }, {
                    key: 'hasOpenDialog',
                    value: function hasOpenDialog() {
                        return this._hasOpenDialog;
                    }
                }, {
                    key: 'dialogComplete',
                    value: function dialogComplete() {
                        var _this3 = this;

                        if (!this._resolveDialogComplete) {
                            return this._resolveDialogPromise = new Promise(function (resolve) {
                                _this3._resolveDialogComplete = resolve;
                            });
                        } else {
                            return this._resolveDialogPromise;
                        }
                    }

                    /**
                     * Closes a dialog
                     * @private
                     */

                }, {
                    key: '_close',
                    value: function _close() {
                        var _eventOutput;

                        this._hasOpenDialog = false;
                        this.hideRenderable('dialog');
                        this.hideRenderable('background');
                        (_eventOutput = this._eventOutput).emit.apply(_eventOutput, ['close'].concat(Array.prototype.slice.call(arguments)));
                    }

                    /**
                     * Let the router go back in history, this will automatically close the current dialog
                     * @private
                     */

                }, {
                    key: '_goBackInHistory',
                    value: function _goBackInHistory() {
                        var route = this._shouldGoBackInHistory;
                        this._shouldGoBackInHistory = false;
                        route instanceof Object && route.controller ? this.router.go(route.controller, route.method, route.arguments) : this.router.goBackInHistory();
                    }
                }]);

                return DialogManager;
            }(View), (_descriptor = _applyDecoratedDescriptor(_class$4.prototype, 'background', [_dec$2, _dec2$1, _dec3], {
                enumerable: true,
                initializer: function initializer() {
                    return new Surface({
                        properties: {
                            /* Permalink - use to edit and share this gradient: http://colorzilla.com/gradient-editor/#000000+0,000000+100&0.2+0,0.6+100 */
                            background: 'radial-gradient(ellipse at center, rgba(0,0,0,0.2) 0%,rgba(0,0,0,0.6) 100%)', /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
                            filter: "progid:DXImageTransform.Microsoft.gradient( startColorstr='#33000000', endColorstr='#99000000',GradientType=1 )" /* IE6-9 fallback on horizontal gradient */
                        }
                    });
                }
            }), _descriptor2 = _applyDecoratedDescriptor(_class$4.prototype, 'dialog', [_dec4, _dec5, _dec6], {
                enumerable: true,
                initializer: function initializer() {
                    return {};
                }
            })), _class$4));
            ArvaRouter = (_dec$4 = provide$1(Router), _dec$4(_class$6 = function (_Router) {
                _inherits(ArvaRouter, _Router);

                function ArvaRouter() {
                    _classCallCheck(this, ArvaRouter);

                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ArvaRouter).call(this));

                    _this.routes = {};
                    _this.history = [];
                    _this.decode = decodeURIComponent;
                    _this.defaultController = 'Home';
                    _this.defaultMethod = 'Index';

                    if (window == null) {
                        return _possibleConstructorReturn(_this);
                    }
                    window.addEventListener('hashchange', _this.run);

                    if (window == null) {
                        return _possibleConstructorReturn(_this);
                    }

                    _this.routes = {};
                    _this.history = [];
                    _this.decode = decodeURIComponent;

                    window.addEventListener('hashchange', _this.run);
                    _this._setupNativeBackButtonListener();
                    return _this;
                }

                /**
                 * Sets the initial controller and method to be activated whenever the controllers are activated.
                 * @param {Controller|Function|String} controller Default controller instance, controller constructor, or controller name to go to.
                 * @param {String} method Default method to call in given controller.
                 * @returns {void}
                 */

                _createClass(ArvaRouter, [{
                    key: 'setDefault',
                    value: function setDefault(controller) {
                        var method = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];

                        this.defaultController = this._getControllerName(controller);

                        if (method != null) {
                            this.defaultMethod = method;
                        }
                    }

                    /**
                     * Sets the animation specs object for use by the famous-flex AnimationController.
                     * @param {Object} specs Animation specs, keyed by target controller.
                     * @returns {void}
                     */

                }, {
                    key: 'setControllerSpecs',
                    value: function setControllerSpecs(specs) {
                        this.specs = specs;
                    }

                    /**
                     * Triggers navigation to one of the controllers
                     * @param {Controller|Function|String} controller The controller instance, controller constructor, or controller name to go to.
                     * @param {String} method The method to call in given controller.
                     * @param {Object} params Dictonary of key-value pairs containing named arguments (i.e. {id: 1, test: "yes"})
                     * @returns {void}
                     */

                }, {
                    key: 'go',
                    value: function go(controller, method) {
                        var params = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

                        var controllerName = this._getControllerName(controller);

                        var routeRoot = controllerName.replace('Controller', '');

                        //TODO Can we skip this code?
                        if (routeRoot === this.defaultController) {
                            routeRoot = '';
                        }

                        var hash$$1 = '#' + (routeRoot.length > 0 ? '/' + routeRoot : '') + ('/' + method);
                        if (params !== null) {
                            for (var i = 0; i < Object.keys(params).length; i++) {
                                var key = Object.keys(params)[i];
                                hash$$1 += i == 0 ? '?' : '&';
                                hash$$1 += key + '=' + params[key];
                            }
                        }

                        if (history.pushState) {
                            history.pushState(null, null, hash$$1);
                        }

                        this.run();
                    }

                    /**
                     * Registers a single controller.
                     * @param {String} route Route to trigger handler on.
                     * @param {Object} handlers
                     * @param {Function} handler.enter Method to call on entering a route.
                     * @param {Function} handler.leave Method to call on when leaving a route.
                     * @returns {void}
                     */

                }, {
                    key: 'add',
                    value: function add(route, _ref, controller) {
                        var enter = _ref.enter;
                        var leave = _ref.leave;

                        var pieces = route.split('/'),
                            rules = this.routes;

                        for (var i = 0; i < pieces.length; ++i) {
                            var piece = pieces[i],
                                name = piece[0] === ':' ? ':' : piece;

                            rules = rules[name] || (rules[name] = {});

                            if (name === ':') {
                                rules['@name'] = piece.slice(1);
                            }
                        }

                        rules['enter'] = enter;
                        rules['leave'] = leave;
                        rules['controller'] = controller;
                    }

                    /**
                     * On a route change, calls the corresponding controller method with the given parameter values.
                     * @returns {Boolean} Whether the current route was successfully ran.
                     */

                }, {
                    key: 'run',
                    value: function run() {
                        var url = window.location.hash.replace('#', '');

                        if (url !== '') {
                            url = url.replace('/?', '?');
                            url[0] === '/' && (url = url.slice(1));
                            url.slice(-1) === '/' && (url = url.slice(0, -1));
                        }

                        var rules = this.routes,
                            querySplit = url.split('?'),
                            pieces = querySplit[0].split('/'),
                            values = [],
                            keys = [],
                            method = '';
                        for (var piece in pieces) {
                            if (pieces[piece].indexOf('=') > -1) {
                                var splitted = pieces[piece].split('=');
                                pieces[piece] = splitted[0];
                                querySplit.push(pieces[piece] + '=' + splitted[1]);
                            }
                        }

                        var rule = null;
                        var controller = void 0;

                        // if there is no controller reference, assume we have hit the default Controller
                        if (pieces.length === 1 && pieces[0].length === 0) {
                            pieces[0] = this.defaultController;
                            pieces.push(this.defaultMethod);
                        } else if (pieces.length === 1 && pieces[0].length > 0) {
                            pieces.unshift(this.defaultController);
                        }

                        controller = pieces[0];

                        // Parse the non-query portion of the URL...
                        for (var i = 0; i < pieces.length && rules; ++i) {
                            var _piece = this.decode(pieces[i]);
                            rule = rules[_piece];

                            if (!rule && (rule = rules[':'])) {
                                method = _piece;
                            }

                            rules = rules[_piece];
                        }

                        (function parseQuery(q) {
                            var query = q.split('&');

                            for (var _i = 0; _i < query.length; ++_i) {
                                var nameValue = query[_i].split('=');

                                if (nameValue.length > 1) {
                                    keys.push(nameValue[0]);
                                    values.push(this.decode(nameValue[1]));
                                }
                            }
                        }).call(this, querySplit.length > 1 ? querySplit[1] : '');

                        if (rule && rule['enter']) {

                            /* Push current route to the history stack for later use */
                            var previousRoute = this.history.length ? this.history[this.history.length - 1] : undefined;
                            var currentRoute = {
                                url: url,
                                controller: controller,
                                controllerObject: rule['controller'],
                                method: method,
                                keys: keys,
                                values: values
                            };

                            if (previousRoute) {
                                if (currentRoute.controllerObject !== previousRoute.controllerObject) {
                                    this.routes[previousRoute.controller][':']['leave'](currentRoute);
                                }
                            }
                            currentRoute.spec = previousRoute ? this._getAnimationSpec(previousRoute, currentRoute) : this._initialSpec || {};
                            this._setHistory(currentRoute);

                            this._executeRoute(rule, currentRoute);

                            return true;
                        } else {
                            console.log('Controller doesn\'t exist!');
                        }

                        return false;
                    }
                }, {
                    key: 'setInitialSpec',
                    value: function setInitialSpec(spec) {
                        this._initialSpec = spec;
                    }
                }, {
                    key: 'setBackButtonEnabled',
                    value: function setBackButtonEnabled(enabled) {
                        this._backButtonEnabled = enabled;
                    }
                }, {
                    key: 'isBackButtonEnabled',
                    value: function isBackButtonEnabled() {
                        return this._backButtonEnabled;
                    }

                    /**
                     * Return the previous known route, or default route if no route stack is present
                     * @returns {*}
                     */

                }, {
                    key: 'getPreviousRoute',
                    value: function getPreviousRoute() {
                        var history = this.history;

                        if (history.length > 1) {
                            var _history = history[history.length - 2];
                            var controller = _history.controller;
                            var method = _history.method;
                            var keys = _history.keys;
                            var values = _history.values;

                            var inputObject = {};
                            for (var i = 0; i < keys.length; i++) {
                                inputObject[keys[i]] = values[i];
                            }
                            return { controller: controller, method: method, parameters: inputObject };
                        } else {
                            return { controller: this.defaultController, method: this.defaultMethod };
                        }
                    }
                }, {
                    key: 'goBackInHistory',
                    value: function goBackInHistory() {
                        /* Default behaviour: go back in history in the arva router */
                        var previousRoute = this.getPreviousRoute();
                        this.go(previousRoute.controller, previousRoute.method, previousRoute.parameters || null);
                    }
                }, {
                    key: '_setupNativeBackButtonListener',
                    value: function _setupNativeBackButtonListener() {
                        var _this2 = this;

                        this._backButtonEnabled = true;
                        document.addEventListener("backbutton", function (e) {
                            if (!_this2._backButtonEnabled) {
                                e.preventDefault();
                            } else {
                                _this2.goBackInHistory();
                            }
                        }, false);
                    }

                    /**
                     * Executes the controller handler associated with a given route, passing the route as a parameter.
                     * @param {Object} rule Rule handler to execute.
                     * @param {Object} route Route object to pass as parameter.
                     * @returns {void}
                     * @private
                     */

                }, {
                    key: '_executeRoute',
                    value: function _executeRoute(rule, route) {
                        /* Make the controller active for current scope */
                        if (rule['enter'](route)) {
                            this.emit('routechange', route);
                        }
                    }

                    /**
                     * Checks if the current route is already present in the history stack, and if so removes all entries after
                     * and including the first occurrence. It will then append the current route to the history stack.
                     * @param {Object} currentRoute Route object containing url, controller, method, keys, and values.
                     * @returns {void}
                     * @private
                     */

                }, {
                    key: '_setHistory',
                    value: function _setHistory(currentRoute) {
                        for (var i = 0; i < this.history.length; i++) {
                            var previousRoute = this.history[i];
                            if (currentRoute.controller === previousRoute.controller && currentRoute.method === previousRoute.method && isEqual(currentRoute.values, previousRoute.values)) {
                                this.history.splice(i, this.history.length - i);
                                break;
                            }
                        }

                        this.history.push(currentRoute);
                    }

                    /**
                     * CheckS whether a route is already present in the history stack.
                     * @param {Object} currentRoute Route object containing url, controller, method, keys, and values.
                     * @returns {Boolean} Whether the route has been visited previously.
                     * @private
                     */

                }, {
                    key: '_hasVisited',
                    value: function _hasVisited(currentRoute) {
                        for (var i = 0; i < this.history.length; i++) {
                            var previousRoute = this.history[i];
                            if (currentRoute.controller === previousRoute.controller && currentRoute.method === previousRoute.method && isEqual(currentRoute.values, previousRoute.values)) {
                                return true;
                            }
                        }

                        return false;
                    }

                    /**
                     * Returns the Famous-Flex animation spec for two given routes. Takes its spec inputs from the specs set in
                     * router.setControllerSpecs(), which is called from the app constructor.
                     * @param {Object} previousRoute Previous route object containing url, controller, method, keys, and values.
                     * @param {Object} currentRoute Current route object containing url, controller, method, keys, and values.
                     * @returns {Object} A spec object if one is found, or an empty object otherwise.
                     * @private
                     */

                }, {
                    key: '_getAnimationSpec',
                    value: function _getAnimationSpec(previousRoute, currentRoute) {
                        var fromController = previousRoute.controller;
                        var toController = currentRoute.controller;

                        if (fromController.indexOf('Controller') === -1) {
                            fromController += 'Controller';
                        }
                        if (toController.indexOf('Controller') === -1) {
                            toController += 'Controller';
                        }

                        /* We're on exactly the same page as before */
                        if (currentRoute.controller === previousRoute.controller && currentRoute.method === previousRoute.method && isEqual(currentRoute.values, previousRoute.values)) {
                            return {};
                        }

                        /* Same controller, different method or different parameters */
                        if (currentRoute.controller === previousRoute.controller) {

                            var direction = this._hasVisited(currentRoute) ? 'previous' : 'next';
                            if (this.specs && this.specs[fromController] && this.specs[fromController].methods) {
                                return this.specs[fromController].methods[direction];
                            }

                            /* Default method-to-method animations, used only if not overridden in app's controllers spec. */
                            var defaults = {
                                'previous': {
                                    transition: { duration: 400, curve: Easing.outBack },
                                    animation: AnimationController.Animation.Slide.Right
                                },
                                'next': {
                                    transition: { duration: 400, curve: Easing.outBack },
                                    animation: AnimationController.Animation.Slide.Left
                                }
                            };
                            return defaults[direction];
                        }

                        /* Different controller */
                        if (this.specs && this.specs.hasOwnProperty(toController) && this.specs[toController].controllers) {
                            var controllerSpecs = this.specs[toController].controllers;
                            for (var specIndex in controllerSpecs) {
                                var spec = controllerSpecs[specIndex];
                                if (spec.activeFrom && spec.activeFrom.indexOf(fromController) !== -1) {
                                    return spec;
                                }
                            }
                        }

                        console.log('No spec defined from ' + fromController + ' to ' + toController + '. Please check router.setControllerSpecs() in your app constructor.');
                    }

                    /**
                     * Extracts a controller name from a given string, constructor, or controller instance. 'Controller' part is not included in the returned name.
                     * E.g. _getControllerName(HomeController) -> 'Home'.
                     * @param {Function|Object|String} controller String, constructor, or controller instance.
                     * @returns {String} Name of the controller
                     * @private
                     */

                }, {
                    key: '_getControllerName',
                    value: function _getControllerName(controller) {
                        if (typeof controller === 'string') {
                            return controller.replace('Controller', '');
                        } else if (typeof controller === 'function' && Object.getPrototypeOf(controller).constructor.name == 'Function') {
                            /* The _name property is set by babel-plugin-transform-runtime-constructor-name.
                             * This is done so Controller class names remain available in minimised code. */
                            var controllerName = controller._name || controller.name;
                            return controllerName.replace('Controller', '');
                        } else {
                            return typeof controller === 'object' ? Object.getPrototypeOf(controller).constructor.name.replace('Controller', '') : typeof controller;
                        }
                    }
                }]);

                return ArvaRouter;
            }(Router)) || _class$6);

            App$1 = function () {

                /**
                 * Have the router check check which route is active and fire the Controller
                 * @param {Router} router The router instance to use in the app.
                 * @param {Context} context The data context instance to use in the app.
                 * @returns {App} App instance
                 */
                function App() {
                    _classCallCheck(this, App);

                    /* Options are defined as a static property on the class that extends this App */
                    var options = this.constructor.options || {};
                    var controllers = this.constructor.controllers || [];
                    var defaultRouter = this.constructor.router || ArvaRouter;
                    var defaultDataSource = this.constructor.defaultDataSource;

                    /* Allow user taps to emit immediately as click events,
                     * instead of having the default 300ms delay. */
                    FastClick(document.body);

                    /* Add default class providers to DI engine */
                    Injection.addProviders(defaultDataSource, defaultRouter, FamousContextSingleton, NewAnimationController);

                    /* Request instances of a Router and a Famous Context. */

                    var _Injection$getAll = Injection.getAll(Router, Context);

                    var _Injection$getAll2 = _slicedToArray(_Injection$getAll, 2);

                    var router = _Injection$getAll2[0];
                    var context = _Injection$getAll2[1];

                    /**
                     * The dialog manager used to show and hide dialogs
                     */

                    this.dialogManager = Injection.get(DialogManager);

                    /**
                     * The router of the application
                     */
                    this.router = router;
                    /**
                     * The animationController that controls the animations between screens
                     */
                    this.context = context;

                    if (this.constructor.loaded && typeof this.constructor.loaded === 'function') {
                        try {
                            this.constructor.loaded();
                        } catch (error) {
                            console.log('Caught exception in App.loaded():', error);
                        }
                    }

                    /* Load controllers */
                    this.controllers = Injection.getAll.apply(Injection, controllers);

                    this.router.run();

                    /* Hide splash screen */
                    if (navigator && navigator.splashscreen && !options.keepSplashScreen) {
                        navigator.splashscreen.hide();
                    }

                    var done = this.constructor.done;

                    if (done && typeof done === 'function') {
                        try {
                            done.call(this.constructor);
                        } catch (error) {
                            console.log('Caught exception in App.done():', error);
                        }
                    }
                }

                /**
                 * Triggers a creation of the app, by using an Injection.get
                 */

                _createClass(App, null, [{
                    key: 'start',
                    value: function start() {
                        /* Instantiate this App, which also instantiates the other components. */
                        this.app = Injection.get(this);
                    }
                }]);

                return App;
            }();

            FamousContextSingleton = (_dec$1 = provide$1(Context), _dec$1(_class$3 = (_temp$2 = _class2 = function FamousContextSingleton() {
                _classCallCheck(this, FamousContextSingleton);

                return FamousContextSingleton.famousContext || (FamousContextSingleton.famousContext = Engine.createContext(null));
            }, _class2.famousContext = null, _temp$2)) || _class$3);
            NewAnimationController = (_dec2 = provide$1(AnimationController), _dec2(_class3 = function NewAnimationController() {
                _classCallCheck(this, NewAnimationController);

                var context = new FamousContextSingleton();
                var controller = new AnimationController();

                context.add(controller);
                return controller;
            }) || _class3);

            Dialog = function (_View) {
                _inherits(Dialog, _View);

                function Dialog() {
                    _classCallCheck(this, Dialog);

                    return _possibleConstructorReturn(this, Object.getPrototypeOf(Dialog).apply(this, arguments));
                }

                return Dialog;
            }(View);

            Controller = (_dec$5 = inject(Router, AnimationController, DialogManager), _dec$5(_class$7 = function (_EventEmitter) {
                _inherits(Controller, _EventEmitter);

                /**
                 * Saves the router and context to this.router and this.context, respectively.
                 * @param {Router} router Injected globally used router
                 * @param {AnimationController} context Injected animationController used by the app
                 * @param {DialogManager} dialogManager The dialog manager that shows and hides dialogs
                 */
                function Controller(router, context, dialogManager) {
                    _classCallCheck(this, Controller);

                    /**
                     * The router used globally in the app
                     * @type {Router}
                     */
                    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Controller).call(this));

                    _this.router = router;
                    /**
                     * The AnimationController used globally in the app to change screens
                     * @type {AnimationController}
                     */
                    _this.context = context;
                    /**
                     * The dialogmanager used to show and hide dialogs. If a controller returns a Dialog, this will be used
                     */
                    _this.dialogManager = dialogManager;

                    /* The this._name property can be set by Arva's babel-plugin-transform-runtime-constructor-name plugin.
                     * This allows Arva code to be minified and mangled without losing automated route creation.
                     * If the plugin is not set up to run, which is done e.g. when not minifying your code, we default back to the runtime constructor name.*/
                    var controllerName = _this.constructor._name || Object.getPrototypeOf(_this).constructor.name;

                    ObjectHelper.bindAllMethods(_this, _this);

                    /* Add the controller route to the router. */
                    var routeName = controllerName.replace('Controller', '');
                    routeName += '/:method';

                    /* handle router url changes and execute the appropiate controller method. */
                    _this.router.add(routeName, { enter: _this.onRouteCalled, leave: _this.onLeave }, _this);
                    return _this;
                }

                /**
                 * Called to notify the Controller that the route is changed
                 * @param newRoute
                 */

                _createClass(Controller, [{
                    key: 'onLeave',
                    value: function onLeave(newRoute) {
                        this.isActive = false;
                    }

                    /**
                     * Called by the Router when this controller instance is being navigated to. Calls the controller's method in the given route,
                     * and triggers a famous-flex AnimationController show() with the View instance that the method returns. Is also capable of receiving
                     * a Promise from the method, in which case the show() is called after the promise is resolved.
                     * @param {Object} route Route object generated by the Router. Contains a method name to call, and a render spec for passing to the AnimationController.
                     * @returns {Boolean} success Whether the controller method was fully executed, and the Router should emit a routechange event.
                     */

                }, {
                    key: 'onRouteCalled',
                    value: function onRouteCalled(route) {
                        var _this2 = this;

                        this.isActive = true;
                        if (typeof this[route.method] === 'function') {
                            var result = this[route.method].apply(this, route.values);

                            if (result) {
                                this.emit('renderstart', route.method);
                                if (result instanceof Promise) {
                                    /* We can assume the method called was asynchronous from nature, therefore we await the result. */
                                    result.then(function (delegatedresult) {
                                        _this2._showView(delegatedresult, route);
                                    });
                                } else {
                                    this._showView(result, route);
                                }
                                return true;
                            } else {
                                console.log('Method did not return a View or a Promise instance.');
                                return false;
                            }
                        } else {
                            console.log('Route does not exist!');
                            return false;
                        }
                    }

                    /**
                     * Shows a view that was returned from a child controller
                     * @param {View} view
                     * @param {Object} route
                     * @private
                     */

                }, {
                    key: '_showView',
                    value: function _showView(view, route) {
                        var _this3 = this;

                        if (view instanceof Dialog) {
                            if (this.dialogManager.getOpenDialog() !== view) {
                                this.dialogManager.show({ dialog: view, canCancel: false, shouldGoToRoute: this.router.getPreviousRoute() });
                                this.dialogManager.once('dialogShown', function () {
                                    _this3.emit('renderend', route.method);
                                });
                            } else {
                                this.emit('renderend', route.method);
                            }
                        } else {
                            /* Close if there's currently an open dialog */
                            this.dialogManager.hasOpenDialog() && this.dialogManager._close();
                            /* Assemble a callback based on the execution scope and have that called when rendering is completed. */
                            this.context.show(view, route.spec, function () {
                                _this3.emit('renderend', route.method);
                            });
                        }
                        this.emit('rendering', route.method);
                    }
                }]);

                return Controller;
            }(EventEmitter)) || _class$7);
            HomeView = (_dec$6 = layout$1.size(~100, ~25), _dec2$3 = layout$1.stick.center(), (_class$8 = function (_View) {
                _inherits(HomeView, _View);

                function HomeView() {
                    var _Object$getPrototypeO;

                    var _temp, _this, _ret;

                    _classCallCheck(this, HomeView);

                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                        args[_key] = arguments[_key];
                    }

                    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_Object$getPrototypeO = Object.getPrototypeOf(HomeView)).call.apply(_Object$getPrototypeO, [this].concat(args))), _this), _initDefineProp$2(_this, 'message', _descriptor$2, _this), _temp), _possibleConstructorReturn(_this, _ret);
                }

                return HomeView;
            }(View), _descriptor$2 = _applyDecoratedDescriptor$2(_class$8.prototype, 'message', [_dec$6, _dec2$3], {
                enumerable: true,
                initializer: function initializer() {
                    return new Surface({ content: 'Hello ' + this.options.welcomeName });
                }
            }), _class$8));

            HomeController = function (_Controller) {
                _inherits(HomeController, _Controller);

                function HomeController() {
                    _classCallCheck(this, HomeController);

                    return _possibleConstructorReturn(this, Object.getPrototypeOf(HomeController).apply(this, arguments));
                }

                _createClass(HomeController, [{
                    key: 'Index',
                    value: function Index() {
                        if (!this.homeView) {
                            this.homeView = new HomeView({ welcomeName: 'world' });
                        }
                        return this.homeView;
                    }
                }], [{
                    key: '_name',
                    get: function get() {
                        return 'HomeController';
                    }
                }]);

                return HomeController;
            }(Controller);

            _export('App', App$$1 = (_temp = _class = function (_ArvaApp) {
                _inherits(App$$1, _ArvaApp);

                function App$$1() {
                    _classCallCheck(this, App$$1);

                    return _possibleConstructorReturn(this, Object.getPrototypeOf(App$$1).apply(this, arguments));
                }

                _createClass(App$$1, null, [{
                    key: 'defaultDataSource',

                    /* Define which DataSource to use */

                    /* References to Dependency Injection created App and Controller instances, so they are not garbage collected. */
                    value: function defaultDataSource() {
                        /* Firebase initialization */
                        firebase.initializeApp({
                            apiKey: '<api-key>',
                            authDomain: '<subdomain>.firebaseapp.com',
                            databaseURL: 'https://<subdomain>.firebaseio.com',
                            storageBucket: '<subdomain>.appspot.com'
                        });
                        return new FirebaseDataSource('/', {});
                    }

                    /**
                     *  Called before the App is constructed and before the basic components (Router, Famous Context, Controllers,
                     *  DataSource) have loaded.
                     */

                    /* The controllers that will be used in the app. */

                }, {
                    key: 'initialize',
                    value: function initialize() {
                        /* Change initial route, view animation or something needed before we start */
                        provide$1(DataSource)(App$$1.defaultDataSource);
                        this.start();
                    }

                    /**
                     * Called after the Router, Famous Context, and Controllers have been instantiated,
                     * but before any Controller method is executed by the Router.
                     */

                }, {
                    key: 'loaded',
                    value: function loaded() {}
                    /* Instantiate things you need before the router is executed here. For example:
                     *
                     * this.references.menu = Injection.get(Menu); */

                    /**
                     * Called by super class after all components (routing, controllers, views, etc.) have been loaded and the
                     * app is up and running.
                     */

                }, {
                    key: 'done',
                    value: function done() {}
                }]);

                return App$$1;
            }(App$1), _class.references = {}, _class.controllers = [HomeController], _temp));

            document.addEventListener('deviceready', App$$1.initialize.bind(App$$1));

            _export('App', App$$1);
        }
    };
});
$__System.register('app/famous.css', [], false, function() {});
$__System.register('app/fonts.css', [], false, function() {});
$__System.register('github:bizboard/arva-js@v1.2.1/utils/hotfixes/famouskeyboardoffset.css!github:systemjs/plugin-css@0.1.23/css.js', [], false, function() {});
(function(c){if (typeof document == 'undefined') return; var d=document,a='appendChild',i='styleSheet',s=d.createElement('style');s.type='text/css';d.getElementsByTagName('head')[0][a](s);s[i]?s[i].cssText=c:s[a](d.createTextNode(c));})
(".famous-root{width:100%;height:100%;margin:0;padding:0;opacity:.999999;overflow:hidden;-webkit-transform-style:preserve-3d;transform-style:preserve-3d}svg{position:absolute}textarea::-webkit-scrollbar{display:none}.famous-container,.famous-group{position:absolute;top:0;left:0;bottom:0;right:0;overflow:visible;-webkit-transform-style:preserve-3d;transform-style:preserve-3d;-webkit-backface-visibility:visible;backface-visibility:visible;pointer-events:none}.famous-group{width:0;height:0;margin:0;padding:0}.famous-surface{position:absolute;-webkit-transform-origin:center center;transform-origin:center center;-webkit-backface-visibility:hidden;backface-visibility:hidden;-webkit-transform-style:preserve-3d;transform-style:preserve-3d;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;-webkit-tap-highlight-color:transparent;pointer-events:auto}.famous-container-group{position:relative;width:100%;height:100%}*{font-family:'Open Sans',sans-serif;font-size:16pt}.famous-root{position:absolute}");
})
(function(factory) {
  if (typeof define == 'function' && define.amd)
    define([], factory);
  else if (typeof module == 'object' && module.exports && typeof require == 'function')
    module.exports = factory();
  else
    factory();
});
//# sourceMappingURL=bundle.js.map